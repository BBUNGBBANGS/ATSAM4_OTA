
ATSAM4_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404bec  00404bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000954  20000000  00404bf4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002718  20000954  00405548  00020954  2**2
                  ALLOC
  4 .stack        00003004  2000306c  00407c60  00020954  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020954  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002097e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016865  00000000  00000000  000209d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003284  00000000  00000000  0003723c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000711a  00000000  00000000  0003a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cc8  00000000  00000000  000415da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bc0  00000000  00000000  000422a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000171d4  00000000  00000000  00042e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010e87  00000000  00000000  0005a036  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00056c5f  00000000  00000000  0006aebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003d00  00000000  00000000  000c1b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 60 00 20 b1 27 40 00 79 28 40 00 79 28 40 00     p`. .'@.y(@.y(@.
  400010:	79 28 40 00 79 28 40 00 79 28 40 00 00 00 00 00     y(@.y(@.y(@.....
	...
  40002c:	79 28 40 00 79 28 40 00 00 00 00 00 79 28 40 00     y(@.y(@.....y(@.
  40003c:	79 28 40 00 79 28 40 00 79 28 40 00 79 28 40 00     y(@.y(@.y(@.y(@.
  40004c:	79 28 40 00 79 28 40 00 79 28 40 00 79 28 40 00     y(@.y(@.y(@.y(@.
  40005c:	79 28 40 00 79 28 40 00 05 0d 40 00 00 00 00 00     y(@.y(@...@.....
  40006c:	c5 20 40 00 dd 20 40 00 f5 20 40 00 79 28 40 00     . @.. @.. @.y(@.
  40007c:	79 28 40 00 00 00 00 00 00 00 00 00 79 28 40 00     y(@.........y(@.
  40008c:	79 28 40 00 79 28 40 00 79 28 40 00 79 28 40 00     y(@.y(@.y(@.y(@.
  40009c:	79 28 40 00 79 28 40 00 79 28 40 00 79 28 40 00     y(@.y(@.y(@.y(@.
  4000ac:	79 28 40 00 79 28 40 00 79 28 40 00 79 28 40 00     y(@.y(@.y(@.y(@.
  4000bc:	79 28 40 00 79 28 40 00 79 28 40 00 79 28 40 00     y(@.y(@.y(@.y(@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000954 	.word	0x20000954
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404bf4 	.word	0x00404bf4

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00404bf4 	.word	0x00404bf4
  40012c:	20000958 	.word	0x20000958
  400130:	00404bf4 	.word	0x00404bf4
  400134:	00000000 	.word	0x00000000

00400138 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400138:	b480      	push	{r7}
  40013a:	b083      	sub	sp, #12
  40013c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40013e:	f3ef 8310 	mrs	r3, PRIMASK
  400142:	607b      	str	r3, [r7, #4]
  return(result);
  400144:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400146:	2b00      	cmp	r3, #0
  400148:	bf0c      	ite	eq
  40014a:	2301      	moveq	r3, #1
  40014c:	2300      	movne	r3, #0
  40014e:	b2db      	uxtb	r3, r3
  400150:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400152:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400154:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400158:	4b04      	ldr	r3, [pc, #16]	; (40016c <cpu_irq_save+0x34>)
  40015a:	2200      	movs	r2, #0
  40015c:	701a      	strb	r2, [r3, #0]
	return flags;
  40015e:	683b      	ldr	r3, [r7, #0]
}
  400160:	4618      	mov	r0, r3
  400162:	370c      	adds	r7, #12
  400164:	46bd      	mov	sp, r7
  400166:	bc80      	pop	{r7}
  400168:	4770      	bx	lr
  40016a:	bf00      	nop
  40016c:	2000010b 	.word	0x2000010b

00400170 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
	return (flags);
  400178:	687b      	ldr	r3, [r7, #4]
  40017a:	2b00      	cmp	r3, #0
  40017c:	bf14      	ite	ne
  40017e:	2301      	movne	r3, #1
  400180:	2300      	moveq	r3, #0
  400182:	b2db      	uxtb	r3, r3
}
  400184:	4618      	mov	r0, r3
  400186:	370c      	adds	r7, #12
  400188:	46bd      	mov	sp, r7
  40018a:	bc80      	pop	{r7}
  40018c:	4770      	bx	lr
	...

00400190 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400190:	b580      	push	{r7, lr}
  400192:	b082      	sub	sp, #8
  400194:	af00      	add	r7, sp, #0
  400196:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400198:	6878      	ldr	r0, [r7, #4]
  40019a:	4b07      	ldr	r3, [pc, #28]	; (4001b8 <cpu_irq_restore+0x28>)
  40019c:	4798      	blx	r3
  40019e:	4603      	mov	r3, r0
  4001a0:	2b00      	cmp	r3, #0
  4001a2:	d005      	beq.n	4001b0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4001a4:	4b05      	ldr	r3, [pc, #20]	; (4001bc <cpu_irq_restore+0x2c>)
  4001a6:	2201      	movs	r2, #1
  4001a8:	701a      	strb	r2, [r3, #0]
  4001aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4001ae:	b662      	cpsie	i
}
  4001b0:	bf00      	nop
  4001b2:	3708      	adds	r7, #8
  4001b4:	46bd      	mov	sp, r7
  4001b6:	bd80      	pop	{r7, pc}
  4001b8:	00400171 	.word	0x00400171
  4001bc:	2000010b 	.word	0x2000010b

004001c0 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
  4001c0:	b580      	push	{r7, lr}
  4001c2:	b084      	sub	sp, #16
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	60f8      	str	r0, [r7, #12]
  4001c8:	60b9      	str	r1, [r7, #8]
  4001ca:	607a      	str	r2, [r7, #4]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
  4001cc:	687b      	ldr	r3, [r7, #4]
  4001ce:	021b      	lsls	r3, r3, #8
  4001d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
  4001d4:	68bb      	ldr	r3, [r7, #8]
  4001d6:	4313      	orrs	r3, r2
  4001d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  4001dc:	4619      	mov	r1, r3
  4001de:	68f8      	ldr	r0, [r7, #12]
  4001e0:	4b03      	ldr	r3, [pc, #12]	; (4001f0 <efc_init+0x30>)
  4001e2:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif
	return EFC_RC_OK;
  4001e4:	2300      	movs	r3, #0
}
  4001e6:	4618      	mov	r0, r3
  4001e8:	3710      	adds	r7, #16
  4001ea:	46bd      	mov	sp, r7
  4001ec:	bd80      	pop	{r7, pc}
  4001ee:	bf00      	nop
  4001f0:	200000b5 	.word	0x200000b5

004001f4 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  4001f4:	b580      	push	{r7, lr}
  4001f6:	b086      	sub	sp, #24
  4001f8:	af00      	add	r7, sp, #0
  4001fa:	60f8      	str	r0, [r7, #12]
  4001fc:	60b9      	str	r1, [r7, #8]
  4001fe:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  400200:	68bb      	ldr	r3, [r7, #8]
  400202:	2b0e      	cmp	r3, #14
  400204:	d002      	beq.n	40020c <efc_perform_command+0x18>
  400206:	68bb      	ldr	r3, [r7, #8]
  400208:	2b0f      	cmp	r3, #15
  40020a:	d102      	bne.n	400212 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
  40020c:	f04f 33ff 	mov.w	r3, #4294967295
  400210:	e016      	b.n	400240 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
  400212:	4b0d      	ldr	r3, [pc, #52]	; (400248 <efc_perform_command+0x54>)
  400214:	4798      	blx	r3
  400216:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  400218:	687b      	ldr	r3, [r7, #4]
  40021a:	021b      	lsls	r3, r3, #8
  40021c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400220:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
  400224:	68ba      	ldr	r2, [r7, #8]
  400226:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  400228:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
  40022a:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  40022e:	4619      	mov	r1, r3
  400230:	68f8      	ldr	r0, [r7, #12]
  400232:	4b06      	ldr	r3, [pc, #24]	; (40024c <efc_perform_command+0x58>)
  400234:	4798      	blx	r3
  400236:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
  400238:	6978      	ldr	r0, [r7, #20]
  40023a:	4b05      	ldr	r3, [pc, #20]	; (400250 <efc_perform_command+0x5c>)
  40023c:	4798      	blx	r3
	return result;
  40023e:	693b      	ldr	r3, [r7, #16]
}
  400240:	4618      	mov	r0, r3
  400242:	3718      	adds	r7, #24
  400244:	46bd      	mov	sp, r7
  400246:	bd80      	pop	{r7, pc}
  400248:	00400139 	.word	0x00400139
  40024c:	200000cf 	.word	0x200000cf
  400250:	00400191 	.word	0x00400191

00400254 <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
  400254:	b480      	push	{r7}
  400256:	b083      	sub	sp, #12
  400258:	af00      	add	r7, sp, #0
  40025a:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
  40025c:	687b      	ldr	r3, [r7, #4]
  40025e:	68db      	ldr	r3, [r3, #12]
}
  400260:	4618      	mov	r0, r3
  400262:	370c      	adds	r7, #12
  400264:	46bd      	mov	sp, r7
  400266:	bc80      	pop	{r7}
  400268:	4770      	bx	lr
	...

0040026c <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
  40026c:	b580      	push	{r7, lr}
  40026e:	b088      	sub	sp, #32
  400270:	af00      	add	r7, sp, #0
  400272:	60f8      	str	r0, [r7, #12]
  400274:	60b9      	str	r1, [r7, #8]
  400276:	607a      	str	r2, [r7, #4]
  400278:	603b      	str	r3, [r7, #0]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
	}
#elif (SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMP32 || SAM4CMS32)
	uint32_t uc_gpnvm2;
	uc_gpnvm2 = flash_is_gpnvm_set(2);
  40027a:	2002      	movs	r0, #2
  40027c:	4b20      	ldr	r3, [pc, #128]	; (400300 <translate_address+0x94>)
  40027e:	4798      	blx	r3
  400280:	6178      	str	r0, [r7, #20]
	if (ul_addr >= IFLASH1_ADDR) {
  400282:	68bb      	ldr	r3, [r7, #8]
  400284:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
  400288:	d312      	bcc.n	4002b0 <translate_address+0x44>
		if(uc_gpnvm2 == FLASH_RC_YES) {
  40028a:	697b      	ldr	r3, [r7, #20]
  40028c:	2b01      	cmp	r3, #1
  40028e:	d102      	bne.n	400296 <translate_address+0x2a>
			p_efc = EFC0;
  400290:	4b1c      	ldr	r3, [pc, #112]	; (400304 <translate_address+0x98>)
  400292:	61fb      	str	r3, [r7, #28]
  400294:	e001      	b.n	40029a <translate_address+0x2e>
		} else {
			p_efc = EFC1;
  400296:	4b1c      	ldr	r3, [pc, #112]	; (400308 <translate_address+0x9c>)
  400298:	61fb      	str	r3, [r7, #28]
		}
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
  40029a:	68bb      	ldr	r3, [r7, #8]
  40029c:	f5a3 03a0 	sub.w	r3, r3, #5242880	; 0x500000
  4002a0:	0a5b      	lsrs	r3, r3, #9
  4002a2:	837b      	strh	r3, [r7, #26]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
  4002a4:	68bb      	ldr	r3, [r7, #8]
  4002a6:	b29b      	uxth	r3, r3
  4002a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4002ac:	833b      	strh	r3, [r7, #24]
  4002ae:	e011      	b.n	4002d4 <translate_address+0x68>
	} else {
		if(uc_gpnvm2 == FLASH_RC_YES) {
  4002b0:	697b      	ldr	r3, [r7, #20]
  4002b2:	2b01      	cmp	r3, #1
  4002b4:	d102      	bne.n	4002bc <translate_address+0x50>
			p_efc = EFC1;
  4002b6:	4b14      	ldr	r3, [pc, #80]	; (400308 <translate_address+0x9c>)
  4002b8:	61fb      	str	r3, [r7, #28]
  4002ba:	e001      	b.n	4002c0 <translate_address+0x54>
		} else {
			p_efc = EFC0;
  4002bc:	4b11      	ldr	r3, [pc, #68]	; (400304 <translate_address+0x98>)
  4002be:	61fb      	str	r3, [r7, #28]
		}
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
  4002c0:	68bb      	ldr	r3, [r7, #8]
  4002c2:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
  4002c6:	0a5b      	lsrs	r3, r3, #9
  4002c8:	837b      	strh	r3, [r7, #26]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
  4002ca:	68bb      	ldr	r3, [r7, #8]
  4002cc:	b29b      	uxth	r3, r3
  4002ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4002d2:	833b      	strh	r3, [r7, #24]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
  4002d4:	68fb      	ldr	r3, [r7, #12]
  4002d6:	2b00      	cmp	r3, #0
  4002d8:	d002      	beq.n	4002e0 <translate_address+0x74>
		*pp_efc = p_efc;
  4002da:	68fb      	ldr	r3, [r7, #12]
  4002dc:	69fa      	ldr	r2, [r7, #28]
  4002de:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
  4002e0:	687b      	ldr	r3, [r7, #4]
  4002e2:	2b00      	cmp	r3, #0
  4002e4:	d002      	beq.n	4002ec <translate_address+0x80>
		*pus_page = us_page;
  4002e6:	687b      	ldr	r3, [r7, #4]
  4002e8:	8b7a      	ldrh	r2, [r7, #26]
  4002ea:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
  4002ec:	683b      	ldr	r3, [r7, #0]
  4002ee:	2b00      	cmp	r3, #0
  4002f0:	d002      	beq.n	4002f8 <translate_address+0x8c>
		*pus_offset = us_offset;
  4002f2:	683b      	ldr	r3, [r7, #0]
  4002f4:	8b3a      	ldrh	r2, [r7, #24]
  4002f6:	801a      	strh	r2, [r3, #0]
	}
}
  4002f8:	bf00      	nop
  4002fa:	3720      	adds	r7, #32
  4002fc:	46bd      	mov	sp, r7
  4002fe:	bd80      	pop	{r7, pc}
  400300:	004006c1 	.word	0x004006c1
  400304:	400e0a00 	.word	0x400e0a00
  400308:	400e0c00 	.word	0x400e0c00

0040030c <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
  40030c:	b580      	push	{r7, lr}
  40030e:	b086      	sub	sp, #24
  400310:	af00      	add	r7, sp, #0
  400312:	60f8      	str	r0, [r7, #12]
  400314:	607b      	str	r3, [r7, #4]
  400316:	460b      	mov	r3, r1
  400318:	817b      	strh	r3, [r7, #10]
  40031a:	4613      	mov	r3, r2
  40031c:	813b      	strh	r3, [r7, #8]
/* Dual bank flash */
#ifdef EFC1
	/* Compute address */
#if (SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMP32 || SAM4CMS32)
	uint32_t uc_gpnvm2;
	uc_gpnvm2 = flash_is_gpnvm_set(2);
  40031e:	2002      	movs	r0, #2
  400320:	4b1a      	ldr	r3, [pc, #104]	; (40038c <compute_address+0x80>)
  400322:	4798      	blx	r3
  400324:	6138      	str	r0, [r7, #16]
	if (p_efc == EFC0) {
  400326:	68fb      	ldr	r3, [r7, #12]
  400328:	4a19      	ldr	r2, [pc, #100]	; (400390 <compute_address+0x84>)
  40032a:	4293      	cmp	r3, r2
  40032c:	d112      	bne.n	400354 <compute_address+0x48>
		if(uc_gpnvm2 == FLASH_RC_YES) {
  40032e:	693b      	ldr	r3, [r7, #16]
  400330:	2b01      	cmp	r3, #1
  400332:	d107      	bne.n	400344 <compute_address+0x38>
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  400334:	897b      	ldrh	r3, [r7, #10]
  400336:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
  40033a:	025a      	lsls	r2, r3, #9
  40033c:	893b      	ldrh	r3, [r7, #8]
  40033e:	4413      	add	r3, r2
  400340:	617b      	str	r3, [r7, #20]
  400342:	e019      	b.n	400378 <compute_address+0x6c>
		} else {
			ul_addr = IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  400344:	897b      	ldrh	r3, [r7, #10]
  400346:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
  40034a:	025a      	lsls	r2, r3, #9
  40034c:	893b      	ldrh	r3, [r7, #8]
  40034e:	4413      	add	r3, r2
  400350:	617b      	str	r3, [r7, #20]
  400352:	e011      	b.n	400378 <compute_address+0x6c>
		}
	} else {
		if(uc_gpnvm2 == FLASH_RC_YES) {
  400354:	693b      	ldr	r3, [r7, #16]
  400356:	2b01      	cmp	r3, #1
  400358:	d107      	bne.n	40036a <compute_address+0x5e>
			ul_addr = IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  40035a:	897b      	ldrh	r3, [r7, #10]
  40035c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
  400360:	025a      	lsls	r2, r3, #9
  400362:	893b      	ldrh	r3, [r7, #8]
  400364:	4413      	add	r3, r2
  400366:	617b      	str	r3, [r7, #20]
  400368:	e006      	b.n	400378 <compute_address+0x6c>
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  40036a:	897b      	ldrh	r3, [r7, #10]
  40036c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
  400370:	025a      	lsls	r2, r3, #9
  400372:	893b      	ldrh	r3, [r7, #8]
  400374:	4413      	add	r3, r2
  400376:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	2b00      	cmp	r3, #0
  40037c:	d002      	beq.n	400384 <compute_address+0x78>
		*pul_addr = ul_addr;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	697a      	ldr	r2, [r7, #20]
  400382:	601a      	str	r2, [r3, #0]
	}
}
  400384:	bf00      	nop
  400386:	3718      	adds	r7, #24
  400388:	46bd      	mov	sp, r7
  40038a:	bd80      	pop	{r7, pc}
  40038c:	004006c1 	.word	0x004006c1
  400390:	400e0a00 	.word	0x400e0a00

00400394 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  400394:	b480      	push	{r7}
  400396:	b087      	sub	sp, #28
  400398:	af00      	add	r7, sp, #0
  40039a:	60f8      	str	r0, [r7, #12]
  40039c:	60b9      	str	r1, [r7, #8]
  40039e:	607a      	str	r2, [r7, #4]
  4003a0:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  4003a2:	68fb      	ldr	r3, [r7, #12]
  4003a4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
  4003a8:	f023 031f 	bic.w	r3, r3, #31
  4003ac:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  4003ae:	68bb      	ldr	r3, [r7, #8]
  4003b0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
  4003b4:	f023 031f 	bic.w	r3, r3, #31
  4003b8:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
  4003bc:	331f      	adds	r3, #31
  4003be:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	2b00      	cmp	r3, #0
  4003c4:	d002      	beq.n	4003cc <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	697a      	ldr	r2, [r7, #20]
  4003ca:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
  4003cc:	683b      	ldr	r3, [r7, #0]
  4003ce:	2b00      	cmp	r3, #0
  4003d0:	d002      	beq.n	4003d8 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
  4003d2:	683b      	ldr	r3, [r7, #0]
  4003d4:	693a      	ldr	r2, [r7, #16]
  4003d6:	601a      	str	r2, [r3, #0]
	}
}
  4003d8:	bf00      	nop
  4003da:	371c      	adds	r7, #28
  4003dc:	46bd      	mov	sp, r7
  4003de:	bc80      	pop	{r7}
  4003e0:	4770      	bx	lr
	...

004003e4 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
  4003e4:	b580      	push	{r7, lr}
  4003e6:	b082      	sub	sp, #8
  4003e8:	af00      	add	r7, sp, #0
  4003ea:	6078      	str	r0, [r7, #4]
  4003ec:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
  4003ee:	683a      	ldr	r2, [r7, #0]
  4003f0:	6879      	ldr	r1, [r7, #4]
  4003f2:	4806      	ldr	r0, [pc, #24]	; (40040c <flash_init+0x28>)
  4003f4:	4b06      	ldr	r3, [pc, #24]	; (400410 <flash_init+0x2c>)
  4003f6:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
  4003f8:	683a      	ldr	r2, [r7, #0]
  4003fa:	6879      	ldr	r1, [r7, #4]
  4003fc:	4805      	ldr	r0, [pc, #20]	; (400414 <flash_init+0x30>)
  4003fe:	4b04      	ldr	r3, [pc, #16]	; (400410 <flash_init+0x2c>)
  400400:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
  400402:	2300      	movs	r3, #0
}
  400404:	4618      	mov	r0, r3
  400406:	3708      	adds	r7, #8
  400408:	46bd      	mov	sp, r7
  40040a:	bd80      	pop	{r7, pc}
  40040c:	400e0a00 	.word	0x400e0a00
  400410:	004001c1 	.word	0x004001c1
  400414:	400e0c00 	.word	0x400e0c00

00400418 <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
  400418:	b590      	push	{r4, r7, lr}
  40041a:	b085      	sub	sp, #20
  40041c:	af00      	add	r7, sp, #0
  40041e:	6078      	str	r0, [r7, #4]
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);
  400420:	f107 020a 	add.w	r2, r7, #10
  400424:	f107 000c 	add.w	r0, r7, #12
  400428:	2300      	movs	r3, #0
  40042a:	6879      	ldr	r1, [r7, #4]
  40042c:	4c08      	ldr	r4, [pc, #32]	; (400450 <flash_erase_sector+0x38>)
  40042e:	47a0      	blx	r4

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
  400430:	68fb      	ldr	r3, [r7, #12]
  400432:	897a      	ldrh	r2, [r7, #10]
  400434:	2111      	movs	r1, #17
  400436:	4618      	mov	r0, r3
  400438:	4b06      	ldr	r3, [pc, #24]	; (400454 <flash_erase_sector+0x3c>)
  40043a:	4798      	blx	r3
  40043c:	4603      	mov	r3, r0
  40043e:	2b00      	cmp	r3, #0
  400440:	d001      	beq.n	400446 <flash_erase_sector+0x2e>
		return FLASH_RC_ERROR;
  400442:	2310      	movs	r3, #16
  400444:	e000      	b.n	400448 <flash_erase_sector+0x30>
	}

	return FLASH_RC_OK;
  400446:	2300      	movs	r3, #0
}
  400448:	4618      	mov	r0, r3
  40044a:	3714      	adds	r7, #20
  40044c:	46bd      	mov	sp, r7
  40044e:	bd90      	pop	{r4, r7, pc}
  400450:	0040026d 	.word	0x0040026d
  400454:	004001f5 	.word	0x004001f5

00400458 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  400458:	b590      	push	{r4, r7, lr}
  40045a:	b08f      	sub	sp, #60	; 0x3c
  40045c:	af00      	add	r7, sp, #0
  40045e:	60f8      	str	r0, [r7, #12]
  400460:	60b9      	str	r1, [r7, #8]
  400462:	607a      	str	r2, [r7, #4]
  400464:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
  400466:	4b43      	ldr	r3, [pc, #268]	; (400574 <flash_write+0x11c>)
  400468:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
  40046a:	f107 0318 	add.w	r3, r7, #24
  40046e:	f107 021a 	add.w	r2, r7, #26
  400472:	f107 001c 	add.w	r0, r7, #28
  400476:	68f9      	ldr	r1, [r7, #12]
  400478:	4c3f      	ldr	r4, [pc, #252]	; (400578 <flash_write+0x120>)
  40047a:	47a0      	blx	r4
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  40047c:	e071      	b.n	400562 <flash_write+0x10a>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  40047e:	8b3b      	ldrh	r3, [r7, #24]
  400480:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
  400484:	687b      	ldr	r3, [r7, #4]
  400486:	4293      	cmp	r3, r2
  400488:	bf28      	it	cs
  40048a:	4613      	movcs	r3, r2
  40048c:	627b      	str	r3, [r7, #36]	; 0x24
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
  40048e:	69f8      	ldr	r0, [r7, #28]
  400490:	8b79      	ldrh	r1, [r7, #26]
  400492:	f107 0314 	add.w	r3, r7, #20
  400496:	2200      	movs	r2, #0
  400498:	4c38      	ldr	r4, [pc, #224]	; (40057c <flash_write+0x124>)
  40049a:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  40049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40049e:	b29b      	uxth	r3, r3
  4004a0:	425b      	negs	r3, r3
  4004a2:	b29a      	uxth	r2, r3
  4004a4:	8b3b      	ldrh	r3, [r7, #24]
  4004a6:	1ad3      	subs	r3, r2, r3
  4004a8:	b29b      	uxth	r3, r3
  4004aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4004ae:	847b      	strh	r3, [r7, #34]	; 0x22

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  4004b0:	697b      	ldr	r3, [r7, #20]
  4004b2:	4619      	mov	r1, r3
  4004b4:	8b3b      	ldrh	r3, [r7, #24]
  4004b6:	461a      	mov	r2, r3
  4004b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4004ba:	4b31      	ldr	r3, [pc, #196]	; (400580 <flash_write+0x128>)
  4004bc:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  4004be:	8b3b      	ldrh	r3, [r7, #24]
  4004c0:	461a      	mov	r2, r3
  4004c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004c4:	4413      	add	r3, r2
  4004c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4004c8:	68b9      	ldr	r1, [r7, #8]
  4004ca:	4618      	mov	r0, r3
  4004cc:	4b2c      	ldr	r3, [pc, #176]	; (400580 <flash_write+0x128>)
  4004ce:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  4004d0:	8b3b      	ldrh	r3, [r7, #24]
  4004d2:	461a      	mov	r2, r3
  4004d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4004d6:	4413      	add	r3, r2
  4004d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4004da:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
  4004dc:	8b3b      	ldrh	r3, [r7, #24]
  4004de:	461a      	mov	r2, r3
  4004e0:	697b      	ldr	r3, [r7, #20]
  4004e2:	441a      	add	r2, r3
  4004e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4004e6:	4413      	add	r3, r2
		memcpy(puc_page_buffer + us_offset + writeSize,
  4004e8:	4619      	mov	r1, r3
  4004ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  4004ec:	461a      	mov	r2, r3
  4004ee:	4b24      	ldr	r3, [pc, #144]	; (400580 <flash_write+0x128>)
  4004f0:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
  4004f2:	697b      	ldr	r3, [r7, #20]
  4004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  4004f6:	2300      	movs	r3, #0
  4004f8:	633b      	str	r3, [r7, #48]	; 0x30
  4004fa:	e00a      	b.n	400512 <flash_write+0xba>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  4004fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004fe:	1d1a      	adds	r2, r3, #4
  400500:	62fa      	str	r2, [r7, #44]	; 0x2c
  400502:	491c      	ldr	r1, [pc, #112]	; (400574 <flash_write+0x11c>)
  400504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  400506:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  40050a:	601a      	str	r2, [r3, #0]
				++ul_idx) {
  40050c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40050e:	3301      	adds	r3, #1
  400510:	633b      	str	r3, [r7, #48]	; 0x30
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  400512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400514:	2b7f      	cmp	r3, #127	; 0x7f
  400516:	d9f1      	bls.n	4004fc <flash_write+0xa4>
		}

		if (ul_erase_flag) {
  400518:	683b      	ldr	r3, [r7, #0]
  40051a:	2b00      	cmp	r3, #0
  40051c:	d007      	beq.n	40052e <flash_write+0xd6>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  40051e:	69fb      	ldr	r3, [r7, #28]
  400520:	8b7a      	ldrh	r2, [r7, #26]
  400522:	2103      	movs	r1, #3
  400524:	4618      	mov	r0, r3
  400526:	4b17      	ldr	r3, [pc, #92]	; (400584 <flash_write+0x12c>)
  400528:	4798      	blx	r3
  40052a:	6378      	str	r0, [r7, #52]	; 0x34
  40052c:	e006      	b.n	40053c <flash_write+0xe4>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  40052e:	69fb      	ldr	r3, [r7, #28]
  400530:	8b7a      	ldrh	r2, [r7, #26]
  400532:	2101      	movs	r1, #1
  400534:	4618      	mov	r0, r3
  400536:	4b13      	ldr	r3, [pc, #76]	; (400584 <flash_write+0x12c>)
  400538:	4798      	blx	r3
  40053a:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
  40053c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40053e:	2b00      	cmp	r3, #0
  400540:	d001      	beq.n	400546 <flash_write+0xee>
			return ul_error;
  400542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400544:	e011      	b.n	40056a <flash_write+0x112>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  400546:	68ba      	ldr	r2, [r7, #8]
  400548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40054a:	4413      	add	r3, r2
  40054c:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
  40054e:	687a      	ldr	r2, [r7, #4]
  400550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400552:	1ad3      	subs	r3, r2, r3
  400554:	607b      	str	r3, [r7, #4]
		us_page++;
  400556:	8b7b      	ldrh	r3, [r7, #26]
  400558:	3301      	adds	r3, #1
  40055a:	b29b      	uxth	r3, r3
  40055c:	837b      	strh	r3, [r7, #26]
		us_offset = 0;
  40055e:	2300      	movs	r3, #0
  400560:	833b      	strh	r3, [r7, #24]
	while (ul_size > 0) {
  400562:	687b      	ldr	r3, [r7, #4]
  400564:	2b00      	cmp	r3, #0
  400566:	d18a      	bne.n	40047e <flash_write+0x26>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  400568:	2300      	movs	r3, #0
}
  40056a:	4618      	mov	r0, r3
  40056c:	373c      	adds	r7, #60	; 0x3c
  40056e:	46bd      	mov	sp, r7
  400570:	bd90      	pop	{r4, r7, pc}
  400572:	bf00      	nop
  400574:	20000970 	.word	0x20000970
  400578:	0040026d 	.word	0x0040026d
  40057c:	0040030d 	.word	0x0040030d
  400580:	00403d45 	.word	0x00403d45
  400584:	004001f5 	.word	0x004001f5

00400588 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  400588:	b590      	push	{r4, r7, lr}
  40058a:	b08b      	sub	sp, #44	; 0x2c
  40058c:	af00      	add	r7, sp, #0
  40058e:	60f8      	str	r0, [r7, #12]
  400590:	60b9      	str	r1, [r7, #8]
  400592:	607a      	str	r2, [r7, #4]
  400594:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
  400596:	2310      	movs	r3, #16
  400598:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
  40059a:	f107 0314 	add.w	r3, r7, #20
  40059e:	f107 0218 	add.w	r2, r7, #24
  4005a2:	68b9      	ldr	r1, [r7, #8]
  4005a4:	68f8      	ldr	r0, [r7, #12]
  4005a6:	4c1c      	ldr	r4, [pc, #112]	; (400618 <flash_lock+0x90>)
  4005a8:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
  4005aa:	687b      	ldr	r3, [r7, #4]
  4005ac:	2b00      	cmp	r3, #0
  4005ae:	d002      	beq.n	4005b6 <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
  4005b0:	69ba      	ldr	r2, [r7, #24]
  4005b2:	687b      	ldr	r3, [r7, #4]
  4005b4:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
  4005b6:	683b      	ldr	r3, [r7, #0]
  4005b8:	2b00      	cmp	r3, #0
  4005ba:	d002      	beq.n	4005c2 <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
  4005bc:	697a      	ldr	r2, [r7, #20]
  4005be:	683b      	ldr	r3, [r7, #0]
  4005c0:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
  4005c2:	69b9      	ldr	r1, [r7, #24]
  4005c4:	f107 0212 	add.w	r2, r7, #18
  4005c8:	f107 001c 	add.w	r0, r7, #28
  4005cc:	2300      	movs	r3, #0
  4005ce:	4c13      	ldr	r4, [pc, #76]	; (40061c <flash_lock+0x94>)
  4005d0:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
  4005d2:	6979      	ldr	r1, [r7, #20]
  4005d4:	f107 0210 	add.w	r2, r7, #16
  4005d8:	2300      	movs	r3, #0
  4005da:	2000      	movs	r0, #0
  4005dc:	4c0f      	ldr	r4, [pc, #60]	; (40061c <flash_lock+0x94>)
  4005de:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
  4005e0:	e010      	b.n	400604 <flash_lock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
  4005e2:	69fb      	ldr	r3, [r7, #28]
  4005e4:	8a7a      	ldrh	r2, [r7, #18]
  4005e6:	2108      	movs	r1, #8
  4005e8:	4618      	mov	r0, r3
  4005ea:	4b0d      	ldr	r3, [pc, #52]	; (400620 <flash_lock+0x98>)
  4005ec:	4798      	blx	r3
  4005ee:	6238      	str	r0, [r7, #32]

		if (ul_error) {
  4005f0:	6a3b      	ldr	r3, [r7, #32]
  4005f2:	2b00      	cmp	r3, #0
  4005f4:	d001      	beq.n	4005fa <flash_lock+0x72>
			return ul_error;
  4005f6:	6a3b      	ldr	r3, [r7, #32]
  4005f8:	e009      	b.n	40060e <flash_lock+0x86>
		}
		us_start_page += us_num_pages_in_region;
  4005fa:	8a7a      	ldrh	r2, [r7, #18]
  4005fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  4005fe:	4413      	add	r3, r2
  400600:	b29b      	uxth	r3, r3
  400602:	827b      	strh	r3, [r7, #18]
	while (us_start_page < us_end_page) {
  400604:	8a7a      	ldrh	r2, [r7, #18]
  400606:	8a3b      	ldrh	r3, [r7, #16]
  400608:	429a      	cmp	r2, r3
  40060a:	d3ea      	bcc.n	4005e2 <flash_lock+0x5a>
	}

	return FLASH_RC_OK;
  40060c:	2300      	movs	r3, #0
}
  40060e:	4618      	mov	r0, r3
  400610:	372c      	adds	r7, #44	; 0x2c
  400612:	46bd      	mov	sp, r7
  400614:	bd90      	pop	{r4, r7, pc}
  400616:	bf00      	nop
  400618:	00400395 	.word	0x00400395
  40061c:	0040026d 	.word	0x0040026d
  400620:	004001f5 	.word	0x004001f5

00400624 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  400624:	b590      	push	{r4, r7, lr}
  400626:	b08b      	sub	sp, #44	; 0x2c
  400628:	af00      	add	r7, sp, #0
  40062a:	60f8      	str	r0, [r7, #12]
  40062c:	60b9      	str	r1, [r7, #8]
  40062e:	607a      	str	r2, [r7, #4]
  400630:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
  400632:	2310      	movs	r3, #16
  400634:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
  400636:	f107 0314 	add.w	r3, r7, #20
  40063a:	f107 0218 	add.w	r2, r7, #24
  40063e:	68b9      	ldr	r1, [r7, #8]
  400640:	68f8      	ldr	r0, [r7, #12]
  400642:	4c1c      	ldr	r4, [pc, #112]	; (4006b4 <flash_unlock+0x90>)
  400644:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
  400646:	687b      	ldr	r3, [r7, #4]
  400648:	2b00      	cmp	r3, #0
  40064a:	d002      	beq.n	400652 <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
  40064c:	69ba      	ldr	r2, [r7, #24]
  40064e:	687b      	ldr	r3, [r7, #4]
  400650:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
  400652:	683b      	ldr	r3, [r7, #0]
  400654:	2b00      	cmp	r3, #0
  400656:	d002      	beq.n	40065e <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
  400658:	697a      	ldr	r2, [r7, #20]
  40065a:	683b      	ldr	r3, [r7, #0]
  40065c:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
  40065e:	69b9      	ldr	r1, [r7, #24]
  400660:	f107 0212 	add.w	r2, r7, #18
  400664:	f107 001c 	add.w	r0, r7, #28
  400668:	2300      	movs	r3, #0
  40066a:	4c13      	ldr	r4, [pc, #76]	; (4006b8 <flash_unlock+0x94>)
  40066c:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
  40066e:	6979      	ldr	r1, [r7, #20]
  400670:	f107 0210 	add.w	r2, r7, #16
  400674:	2300      	movs	r3, #0
  400676:	2000      	movs	r0, #0
  400678:	4c0f      	ldr	r4, [pc, #60]	; (4006b8 <flash_unlock+0x94>)
  40067a:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  40067c:	e010      	b.n	4006a0 <flash_unlock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
  40067e:	69fb      	ldr	r3, [r7, #28]
  400680:	8a7a      	ldrh	r2, [r7, #18]
  400682:	2109      	movs	r1, #9
  400684:	4618      	mov	r0, r3
  400686:	4b0d      	ldr	r3, [pc, #52]	; (4006bc <flash_unlock+0x98>)
  400688:	4798      	blx	r3
  40068a:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
  40068c:	6a3b      	ldr	r3, [r7, #32]
  40068e:	2b00      	cmp	r3, #0
  400690:	d001      	beq.n	400696 <flash_unlock+0x72>
			return ul_error;
  400692:	6a3b      	ldr	r3, [r7, #32]
  400694:	e009      	b.n	4006aa <flash_unlock+0x86>
		}
		us_start_page += us_num_pages_in_region;
  400696:	8a7a      	ldrh	r2, [r7, #18]
  400698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  40069a:	4413      	add	r3, r2
  40069c:	b29b      	uxth	r3, r3
  40069e:	827b      	strh	r3, [r7, #18]
	while (us_start_page < us_end_page) {
  4006a0:	8a7a      	ldrh	r2, [r7, #18]
  4006a2:	8a3b      	ldrh	r3, [r7, #16]
  4006a4:	429a      	cmp	r2, r3
  4006a6:	d3ea      	bcc.n	40067e <flash_unlock+0x5a>
	}

	return FLASH_RC_OK;
  4006a8:	2300      	movs	r3, #0
}
  4006aa:	4618      	mov	r0, r3
  4006ac:	372c      	adds	r7, #44	; 0x2c
  4006ae:	46bd      	mov	sp, r7
  4006b0:	bd90      	pop	{r4, r7, pc}
  4006b2:	bf00      	nop
  4006b4:	00400395 	.word	0x00400395
  4006b8:	0040026d 	.word	0x0040026d
  4006bc:	004001f5 	.word	0x004001f5

004006c0 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
  4006c0:	b580      	push	{r7, lr}
  4006c2:	b084      	sub	sp, #16
  4006c4:	af00      	add	r7, sp, #0
  4006c6:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
  4006c8:	687b      	ldr	r3, [r7, #4]
  4006ca:	2b02      	cmp	r3, #2
  4006cc:	d901      	bls.n	4006d2 <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
  4006ce:	2311      	movs	r3, #17
  4006d0:	e019      	b.n	400706 <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
  4006d2:	2200      	movs	r2, #0
  4006d4:	210d      	movs	r1, #13
  4006d6:	480e      	ldr	r0, [pc, #56]	; (400710 <flash_is_gpnvm_set+0x50>)
  4006d8:	4b0e      	ldr	r3, [pc, #56]	; (400714 <flash_is_gpnvm_set+0x54>)
  4006da:	4798      	blx	r3
  4006dc:	4603      	mov	r3, r0
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d001      	beq.n	4006e6 <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
  4006e2:	2310      	movs	r3, #16
  4006e4:	e00f      	b.n	400706 <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
  4006e6:	480a      	ldr	r0, [pc, #40]	; (400710 <flash_is_gpnvm_set+0x50>)
  4006e8:	4b0b      	ldr	r3, [pc, #44]	; (400718 <flash_is_gpnvm_set+0x58>)
  4006ea:	4798      	blx	r3
  4006ec:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
  4006ee:	2201      	movs	r2, #1
  4006f0:	687b      	ldr	r3, [r7, #4]
  4006f2:	fa02 f303 	lsl.w	r3, r2, r3
  4006f6:	461a      	mov	r2, r3
  4006f8:	68fb      	ldr	r3, [r7, #12]
  4006fa:	4013      	ands	r3, r2
  4006fc:	2b00      	cmp	r3, #0
  4006fe:	d001      	beq.n	400704 <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
  400700:	2301      	movs	r3, #1
  400702:	e000      	b.n	400706 <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
  400704:	2300      	movs	r3, #0
}
  400706:	4618      	mov	r0, r3
  400708:	3710      	adds	r7, #16
  40070a:	46bd      	mov	sp, r7
  40070c:	bd80      	pop	{r7, pc}
  40070e:	bf00      	nop
  400710:	400e0a00 	.word	0x400e0a00
  400714:	004001f5 	.word	0x004001f5
  400718:	00400255 	.word	0x00400255

0040071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40071c:	b480      	push	{r7}
  40071e:	b083      	sub	sp, #12
  400720:	af00      	add	r7, sp, #0
  400722:	4603      	mov	r3, r0
  400724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400726:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40072a:	2b00      	cmp	r3, #0
  40072c:	db0b      	blt.n	400746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40072e:	4908      	ldr	r1, [pc, #32]	; (400750 <__NVIC_EnableIRQ+0x34>)
  400730:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400734:	095b      	lsrs	r3, r3, #5
  400736:	79fa      	ldrb	r2, [r7, #7]
  400738:	f002 021f 	and.w	r2, r2, #31
  40073c:	2001      	movs	r0, #1
  40073e:	fa00 f202 	lsl.w	r2, r0, r2
  400742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400746:	bf00      	nop
  400748:	370c      	adds	r7, #12
  40074a:	46bd      	mov	sp, r7
  40074c:	bc80      	pop	{r7}
  40074e:	4770      	bx	lr
  400750:	e000e100 	.word	0xe000e100

00400754 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400754:	b480      	push	{r7}
  400756:	b083      	sub	sp, #12
  400758:	af00      	add	r7, sp, #0
  40075a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40075c:	687b      	ldr	r3, [r7, #4]
  40075e:	2b07      	cmp	r3, #7
  400760:	d825      	bhi.n	4007ae <osc_get_rate+0x5a>
  400762:	a201      	add	r2, pc, #4	; (adr r2, 400768 <osc_get_rate+0x14>)
  400764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400768:	00400789 	.word	0x00400789
  40076c:	0040078f 	.word	0x0040078f
  400770:	00400795 	.word	0x00400795
  400774:	0040079b 	.word	0x0040079b
  400778:	0040079f 	.word	0x0040079f
  40077c:	004007a3 	.word	0x004007a3
  400780:	004007a7 	.word	0x004007a7
  400784:	004007ab 	.word	0x004007ab
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400788:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40078c:	e010      	b.n	4007b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40078e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400792:	e00d      	b.n	4007b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400798:	e00a      	b.n	4007b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40079a:	4b08      	ldr	r3, [pc, #32]	; (4007bc <osc_get_rate+0x68>)
  40079c:	e008      	b.n	4007b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40079e:	4b08      	ldr	r3, [pc, #32]	; (4007c0 <osc_get_rate+0x6c>)
  4007a0:	e006      	b.n	4007b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4007a2:	4b08      	ldr	r3, [pc, #32]	; (4007c4 <osc_get_rate+0x70>)
  4007a4:	e004      	b.n	4007b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4007a6:	4b07      	ldr	r3, [pc, #28]	; (4007c4 <osc_get_rate+0x70>)
  4007a8:	e002      	b.n	4007b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4007aa:	4b06      	ldr	r3, [pc, #24]	; (4007c4 <osc_get_rate+0x70>)
  4007ac:	e000      	b.n	4007b0 <osc_get_rate+0x5c>
	}

	return 0;
  4007ae:	2300      	movs	r3, #0
}
  4007b0:	4618      	mov	r0, r3
  4007b2:	370c      	adds	r7, #12
  4007b4:	46bd      	mov	sp, r7
  4007b6:	bc80      	pop	{r7}
  4007b8:	4770      	bx	lr
  4007ba:	bf00      	nop
  4007bc:	003d0900 	.word	0x003d0900
  4007c0:	007a1200 	.word	0x007a1200
  4007c4:	00b71b00 	.word	0x00b71b00

004007c8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4007c8:	b580      	push	{r7, lr}
  4007ca:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4007cc:	2006      	movs	r0, #6
  4007ce:	4b04      	ldr	r3, [pc, #16]	; (4007e0 <sysclk_get_main_hz+0x18>)
  4007d0:	4798      	blx	r3
  4007d2:	4602      	mov	r2, r0
  4007d4:	4613      	mov	r3, r2
  4007d6:	009b      	lsls	r3, r3, #2
  4007d8:	4413      	add	r3, r2
  4007da:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4007dc:	4618      	mov	r0, r3
  4007de:	bd80      	pop	{r7, pc}
  4007e0:	00400755 	.word	0x00400755

004007e4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4007e4:	b580      	push	{r7, lr}
  4007e6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4007e8:	4b02      	ldr	r3, [pc, #8]	; (4007f4 <sysclk_get_cpu_hz+0x10>)
  4007ea:	4798      	blx	r3
  4007ec:	4603      	mov	r3, r0
  4007ee:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4007f0:	4618      	mov	r0, r3
  4007f2:	bd80      	pop	{r7, pc}
  4007f4:	004007c9 	.word	0x004007c9

004007f8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4007f8:	b580      	push	{r7, lr}
  4007fa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4007fc:	4b02      	ldr	r3, [pc, #8]	; (400808 <sysclk_get_peripheral_hz+0x10>)
  4007fe:	4798      	blx	r3
  400800:	4603      	mov	r3, r0
  400802:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400804:	4618      	mov	r0, r3
  400806:	bd80      	pop	{r7, pc}
  400808:	004007c9 	.word	0x004007c9

0040080c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40080c:	b580      	push	{r7, lr}
  40080e:	b082      	sub	sp, #8
  400810:	af00      	add	r7, sp, #0
  400812:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400814:	6878      	ldr	r0, [r7, #4]
  400816:	4b03      	ldr	r3, [pc, #12]	; (400824 <sysclk_enable_peripheral_clock+0x18>)
  400818:	4798      	blx	r3
}
  40081a:	bf00      	nop
  40081c:	3708      	adds	r7, #8
  40081e:	46bd      	mov	sp, r7
  400820:	bd80      	pop	{r7, pc}
  400822:	bf00      	nop
  400824:	00402359 	.word	0x00402359

00400828 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  400828:	b580      	push	{r7, lr}
  40082a:	b08c      	sub	sp, #48	; 0x30
  40082c:	af00      	add	r7, sp, #0
  40082e:	6078      	str	r0, [r7, #4]
  400830:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400832:	4b31      	ldr	r3, [pc, #196]	; (4008f8 <usart_serial_init+0xd0>)
  400834:	4798      	blx	r3
  400836:	4603      	mov	r3, r0
  400838:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40083a:	683b      	ldr	r3, [r7, #0]
  40083c:	681b      	ldr	r3, [r3, #0]
  40083e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  400840:	683b      	ldr	r3, [r7, #0]
  400842:	689b      	ldr	r3, [r3, #8]
  400844:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  400846:	683b      	ldr	r3, [r7, #0]
  400848:	681b      	ldr	r3, [r3, #0]
  40084a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40084c:	683b      	ldr	r3, [r7, #0]
  40084e:	685b      	ldr	r3, [r3, #4]
  400850:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  400852:	683b      	ldr	r3, [r7, #0]
  400854:	689b      	ldr	r3, [r3, #8]
  400856:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  400858:	683b      	ldr	r3, [r7, #0]
  40085a:	68db      	ldr	r3, [r3, #12]
  40085c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40085e:	2300      	movs	r3, #0
  400860:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400862:	687b      	ldr	r3, [r7, #4]
  400864:	4a25      	ldr	r2, [pc, #148]	; (4008fc <usart_serial_init+0xd4>)
  400866:	4293      	cmp	r3, r2
  400868:	d108      	bne.n	40087c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40086a:	2008      	movs	r0, #8
  40086c:	4b24      	ldr	r3, [pc, #144]	; (400900 <usart_serial_init+0xd8>)
  40086e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400870:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400874:	4619      	mov	r1, r3
  400876:	6878      	ldr	r0, [r7, #4]
  400878:	4b22      	ldr	r3, [pc, #136]	; (400904 <usart_serial_init+0xdc>)
  40087a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40087c:	687b      	ldr	r3, [r7, #4]
  40087e:	4a22      	ldr	r2, [pc, #136]	; (400908 <usart_serial_init+0xe0>)
  400880:	4293      	cmp	r3, r2
  400882:	d108      	bne.n	400896 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  400884:	2009      	movs	r0, #9
  400886:	4b1e      	ldr	r3, [pc, #120]	; (400900 <usart_serial_init+0xd8>)
  400888:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40088e:	4619      	mov	r1, r3
  400890:	6878      	ldr	r0, [r7, #4]
  400892:	4b1c      	ldr	r3, [pc, #112]	; (400904 <usart_serial_init+0xdc>)
  400894:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400896:	687b      	ldr	r3, [r7, #4]
  400898:	4a1c      	ldr	r2, [pc, #112]	; (40090c <usart_serial_init+0xe4>)
  40089a:	4293      	cmp	r3, r2
  40089c:	d111      	bne.n	4008c2 <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40089e:	200e      	movs	r0, #14
  4008a0:	4b17      	ldr	r3, [pc, #92]	; (400900 <usart_serial_init+0xd8>)
  4008a2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4008a4:	4b14      	ldr	r3, [pc, #80]	; (4008f8 <usart_serial_init+0xd0>)
  4008a6:	4798      	blx	r3
  4008a8:	4602      	mov	r2, r0
  4008aa:	f107 030c 	add.w	r3, r7, #12
  4008ae:	4619      	mov	r1, r3
  4008b0:	6878      	ldr	r0, [r7, #4]
  4008b2:	4b17      	ldr	r3, [pc, #92]	; (400910 <usart_serial_init+0xe8>)
  4008b4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4008b6:	6878      	ldr	r0, [r7, #4]
  4008b8:	4b16      	ldr	r3, [pc, #88]	; (400914 <usart_serial_init+0xec>)
  4008ba:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4008bc:	6878      	ldr	r0, [r7, #4]
  4008be:	4b16      	ldr	r3, [pc, #88]	; (400918 <usart_serial_init+0xf0>)
  4008c0:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4008c2:	687b      	ldr	r3, [r7, #4]
  4008c4:	4a15      	ldr	r2, [pc, #84]	; (40091c <usart_serial_init+0xf4>)
  4008c6:	4293      	cmp	r3, r2
  4008c8:	d111      	bne.n	4008ee <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4008ca:	200f      	movs	r0, #15
  4008cc:	4b0c      	ldr	r3, [pc, #48]	; (400900 <usart_serial_init+0xd8>)
  4008ce:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4008d0:	4b09      	ldr	r3, [pc, #36]	; (4008f8 <usart_serial_init+0xd0>)
  4008d2:	4798      	blx	r3
  4008d4:	4602      	mov	r2, r0
  4008d6:	f107 030c 	add.w	r3, r7, #12
  4008da:	4619      	mov	r1, r3
  4008dc:	6878      	ldr	r0, [r7, #4]
  4008de:	4b0c      	ldr	r3, [pc, #48]	; (400910 <usart_serial_init+0xe8>)
  4008e0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4008e2:	6878      	ldr	r0, [r7, #4]
  4008e4:	4b0b      	ldr	r3, [pc, #44]	; (400914 <usart_serial_init+0xec>)
  4008e6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4008e8:	6878      	ldr	r0, [r7, #4]
  4008ea:	4b0b      	ldr	r3, [pc, #44]	; (400918 <usart_serial_init+0xf0>)
  4008ec:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4008ee:	bf00      	nop
  4008f0:	3730      	adds	r7, #48	; 0x30
  4008f2:	46bd      	mov	sp, r7
  4008f4:	bd80      	pop	{r7, pc}
  4008f6:	bf00      	nop
  4008f8:	004007f9 	.word	0x004007f9
  4008fc:	400e0600 	.word	0x400e0600
  400900:	0040080d 	.word	0x0040080d
  400904:	004023d9 	.word	0x004023d9
  400908:	400e0800 	.word	0x400e0800
  40090c:	40024000 	.word	0x40024000
  400910:	00402581 	.word	0x00402581
  400914:	00402605 	.word	0x00402605
  400918:	00402635 	.word	0x00402635
  40091c:	40028000 	.word	0x40028000

00400920 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400920:	b580      	push	{r7, lr}
  400922:	b082      	sub	sp, #8
  400924:	af00      	add	r7, sp, #0
  400926:	6078      	str	r0, [r7, #4]
  400928:	460b      	mov	r3, r1
  40092a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40092c:	687b      	ldr	r3, [r7, #4]
  40092e:	4a20      	ldr	r2, [pc, #128]	; (4009b0 <usart_serial_putchar+0x90>)
  400930:	4293      	cmp	r3, r2
  400932:	d10a      	bne.n	40094a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400934:	bf00      	nop
  400936:	78fb      	ldrb	r3, [r7, #3]
  400938:	4619      	mov	r1, r3
  40093a:	6878      	ldr	r0, [r7, #4]
  40093c:	4b1d      	ldr	r3, [pc, #116]	; (4009b4 <usart_serial_putchar+0x94>)
  40093e:	4798      	blx	r3
  400940:	4603      	mov	r3, r0
  400942:	2b00      	cmp	r3, #0
  400944:	d1f7      	bne.n	400936 <usart_serial_putchar+0x16>
		return 1;
  400946:	2301      	movs	r3, #1
  400948:	e02d      	b.n	4009a6 <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40094a:	687b      	ldr	r3, [r7, #4]
  40094c:	4a1a      	ldr	r2, [pc, #104]	; (4009b8 <usart_serial_putchar+0x98>)
  40094e:	4293      	cmp	r3, r2
  400950:	d10a      	bne.n	400968 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  400952:	bf00      	nop
  400954:	78fb      	ldrb	r3, [r7, #3]
  400956:	4619      	mov	r1, r3
  400958:	6878      	ldr	r0, [r7, #4]
  40095a:	4b16      	ldr	r3, [pc, #88]	; (4009b4 <usart_serial_putchar+0x94>)
  40095c:	4798      	blx	r3
  40095e:	4603      	mov	r3, r0
  400960:	2b00      	cmp	r3, #0
  400962:	d1f7      	bne.n	400954 <usart_serial_putchar+0x34>
		return 1;
  400964:	2301      	movs	r3, #1
  400966:	e01e      	b.n	4009a6 <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	4a14      	ldr	r2, [pc, #80]	; (4009bc <usart_serial_putchar+0x9c>)
  40096c:	4293      	cmp	r3, r2
  40096e:	d10a      	bne.n	400986 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  400970:	bf00      	nop
  400972:	78fb      	ldrb	r3, [r7, #3]
  400974:	4619      	mov	r1, r3
  400976:	6878      	ldr	r0, [r7, #4]
  400978:	4b11      	ldr	r3, [pc, #68]	; (4009c0 <usart_serial_putchar+0xa0>)
  40097a:	4798      	blx	r3
  40097c:	4603      	mov	r3, r0
  40097e:	2b00      	cmp	r3, #0
  400980:	d1f7      	bne.n	400972 <usart_serial_putchar+0x52>
		return 1;
  400982:	2301      	movs	r3, #1
  400984:	e00f      	b.n	4009a6 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400986:	687b      	ldr	r3, [r7, #4]
  400988:	4a0e      	ldr	r2, [pc, #56]	; (4009c4 <usart_serial_putchar+0xa4>)
  40098a:	4293      	cmp	r3, r2
  40098c:	d10a      	bne.n	4009a4 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  40098e:	bf00      	nop
  400990:	78fb      	ldrb	r3, [r7, #3]
  400992:	4619      	mov	r1, r3
  400994:	6878      	ldr	r0, [r7, #4]
  400996:	4b0a      	ldr	r3, [pc, #40]	; (4009c0 <usart_serial_putchar+0xa0>)
  400998:	4798      	blx	r3
  40099a:	4603      	mov	r3, r0
  40099c:	2b00      	cmp	r3, #0
  40099e:	d1f7      	bne.n	400990 <usart_serial_putchar+0x70>
		return 1;
  4009a0:	2301      	movs	r3, #1
  4009a2:	e000      	b.n	4009a6 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4009a4:	2300      	movs	r3, #0
}
  4009a6:	4618      	mov	r0, r3
  4009a8:	3708      	adds	r7, #8
  4009aa:	46bd      	mov	sp, r7
  4009ac:	bd80      	pop	{r7, pc}
  4009ae:	bf00      	nop
  4009b0:	400e0600 	.word	0x400e0600
  4009b4:	00402439 	.word	0x00402439
  4009b8:	400e0800 	.word	0x400e0800
  4009bc:	40024000 	.word	0x40024000
  4009c0:	004026e3 	.word	0x004026e3
  4009c4:	40028000 	.word	0x40028000

004009c8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4009c8:	b580      	push	{r7, lr}
  4009ca:	b084      	sub	sp, #16
  4009cc:	af00      	add	r7, sp, #0
  4009ce:	6078      	str	r0, [r7, #4]
  4009d0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4009d2:	2300      	movs	r3, #0
  4009d4:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4009d6:	687b      	ldr	r3, [r7, #4]
  4009d8:	4a1f      	ldr	r2, [pc, #124]	; (400a58 <usart_serial_getchar+0x90>)
  4009da:	4293      	cmp	r3, r2
  4009dc:	d107      	bne.n	4009ee <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4009de:	bf00      	nop
  4009e0:	6839      	ldr	r1, [r7, #0]
  4009e2:	6878      	ldr	r0, [r7, #4]
  4009e4:	4b1d      	ldr	r3, [pc, #116]	; (400a5c <usart_serial_getchar+0x94>)
  4009e6:	4798      	blx	r3
  4009e8:	4603      	mov	r3, r0
  4009ea:	2b00      	cmp	r3, #0
  4009ec:	d1f8      	bne.n	4009e0 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4009ee:	687b      	ldr	r3, [r7, #4]
  4009f0:	4a1b      	ldr	r2, [pc, #108]	; (400a60 <usart_serial_getchar+0x98>)
  4009f2:	4293      	cmp	r3, r2
  4009f4:	d107      	bne.n	400a06 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4009f6:	bf00      	nop
  4009f8:	6839      	ldr	r1, [r7, #0]
  4009fa:	6878      	ldr	r0, [r7, #4]
  4009fc:	4b17      	ldr	r3, [pc, #92]	; (400a5c <usart_serial_getchar+0x94>)
  4009fe:	4798      	blx	r3
  400a00:	4603      	mov	r3, r0
  400a02:	2b00      	cmp	r3, #0
  400a04:	d1f8      	bne.n	4009f8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400a06:	687b      	ldr	r3, [r7, #4]
  400a08:	4a16      	ldr	r2, [pc, #88]	; (400a64 <usart_serial_getchar+0x9c>)
  400a0a:	4293      	cmp	r3, r2
  400a0c:	d10d      	bne.n	400a2a <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  400a0e:	bf00      	nop
  400a10:	f107 030c 	add.w	r3, r7, #12
  400a14:	4619      	mov	r1, r3
  400a16:	6878      	ldr	r0, [r7, #4]
  400a18:	4b13      	ldr	r3, [pc, #76]	; (400a68 <usart_serial_getchar+0xa0>)
  400a1a:	4798      	blx	r3
  400a1c:	4603      	mov	r3, r0
  400a1e:	2b00      	cmp	r3, #0
  400a20:	d1f6      	bne.n	400a10 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  400a22:	68fb      	ldr	r3, [r7, #12]
  400a24:	b2da      	uxtb	r2, r3
  400a26:	683b      	ldr	r3, [r7, #0]
  400a28:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400a2a:	687b      	ldr	r3, [r7, #4]
  400a2c:	4a0f      	ldr	r2, [pc, #60]	; (400a6c <usart_serial_getchar+0xa4>)
  400a2e:	4293      	cmp	r3, r2
  400a30:	d10d      	bne.n	400a4e <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  400a32:	bf00      	nop
  400a34:	f107 030c 	add.w	r3, r7, #12
  400a38:	4619      	mov	r1, r3
  400a3a:	6878      	ldr	r0, [r7, #4]
  400a3c:	4b0a      	ldr	r3, [pc, #40]	; (400a68 <usart_serial_getchar+0xa0>)
  400a3e:	4798      	blx	r3
  400a40:	4603      	mov	r3, r0
  400a42:	2b00      	cmp	r3, #0
  400a44:	d1f6      	bne.n	400a34 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400a46:	68fb      	ldr	r3, [r7, #12]
  400a48:	b2da      	uxtb	r2, r3
  400a4a:	683b      	ldr	r3, [r7, #0]
  400a4c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400a4e:	bf00      	nop
  400a50:	3710      	adds	r7, #16
  400a52:	46bd      	mov	sp, r7
  400a54:	bd80      	pop	{r7, pc}
  400a56:	bf00      	nop
  400a58:	400e0600 	.word	0x400e0600
  400a5c:	00402467 	.word	0x00402467
  400a60:	400e0800 	.word	0x400e0800
  400a64:	40024000 	.word	0x40024000
  400a68:	00402713 	.word	0x00402713
  400a6c:	40028000 	.word	0x40028000

00400a70 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  400a70:	b580      	push	{r7, lr}
  400a72:	b082      	sub	sp, #8
  400a74:	af00      	add	r7, sp, #0
  400a76:	6078      	str	r0, [r7, #4]
  400a78:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  400a7a:	4a0f      	ldr	r2, [pc, #60]	; (400ab8 <stdio_serial_init+0x48>)
  400a7c:	687b      	ldr	r3, [r7, #4]
  400a7e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400a80:	4b0e      	ldr	r3, [pc, #56]	; (400abc <stdio_serial_init+0x4c>)
  400a82:	4a0f      	ldr	r2, [pc, #60]	; (400ac0 <stdio_serial_init+0x50>)
  400a84:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400a86:	4b0f      	ldr	r3, [pc, #60]	; (400ac4 <stdio_serial_init+0x54>)
  400a88:	4a0f      	ldr	r2, [pc, #60]	; (400ac8 <stdio_serial_init+0x58>)
  400a8a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  400a8c:	6839      	ldr	r1, [r7, #0]
  400a8e:	6878      	ldr	r0, [r7, #4]
  400a90:	4b0e      	ldr	r3, [pc, #56]	; (400acc <stdio_serial_init+0x5c>)
  400a92:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400a94:	4b0e      	ldr	r3, [pc, #56]	; (400ad0 <stdio_serial_init+0x60>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	689b      	ldr	r3, [r3, #8]
  400a9a:	2100      	movs	r1, #0
  400a9c:	4618      	mov	r0, r3
  400a9e:	4b0d      	ldr	r3, [pc, #52]	; (400ad4 <stdio_serial_init+0x64>)
  400aa0:	4798      	blx	r3
	setbuf(stdin, NULL);
  400aa2:	4b0b      	ldr	r3, [pc, #44]	; (400ad0 <stdio_serial_init+0x60>)
  400aa4:	681b      	ldr	r3, [r3, #0]
  400aa6:	685b      	ldr	r3, [r3, #4]
  400aa8:	2100      	movs	r1, #0
  400aaa:	4618      	mov	r0, r3
  400aac:	4b09      	ldr	r3, [pc, #36]	; (400ad4 <stdio_serial_init+0x64>)
  400aae:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  400ab0:	bf00      	nop
  400ab2:	3708      	adds	r7, #8
  400ab4:	46bd      	mov	sp, r7
  400ab6:	bd80      	pop	{r7, pc}
  400ab8:	2000303c 	.word	0x2000303c
  400abc:	20003038 	.word	0x20003038
  400ac0:	00400921 	.word	0x00400921
  400ac4:	20003034 	.word	0x20003034
  400ac8:	004009c9 	.word	0x004009c9
  400acc:	00400829 	.word	0x00400829
  400ad0:	20000110 	.word	0x20000110
  400ad4:	00403f51 	.word	0x00403f51

00400ad8 <Boot_Uart_Init>:
Uart_Packet_t Uart_Packet;
uint16_t Uart_Buffer_Length;
uint8_t Uart_Packet_Received_Flag;

void Boot_Uart_Init(void)
{
  400ad8:	b590      	push	{r4, r7, lr}
  400ada:	b085      	sub	sp, #20
  400adc:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = 
  400ade:	4b0c      	ldr	r3, [pc, #48]	; (400b10 <Boot_Uart_Init+0x38>)
  400ae0:	463c      	mov	r4, r7
  400ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits =	CONF_UART_STOP_BITS,
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(ID_UART1);
  400ae8:	2009      	movs	r0, #9
  400aea:	4b0a      	ldr	r3, [pc, #40]	; (400b14 <Boot_Uart_Init+0x3c>)
  400aec:	4798      	blx	r3
	stdio_serial_init(UART1, &uart_serial_options);
  400aee:	463b      	mov	r3, r7
  400af0:	4619      	mov	r1, r3
  400af2:	4809      	ldr	r0, [pc, #36]	; (400b18 <Boot_Uart_Init+0x40>)
  400af4:	4b09      	ldr	r3, [pc, #36]	; (400b1c <Boot_Uart_Init+0x44>)
  400af6:	4798      	blx	r3
	usart_enable_interrupt(UART1, US_IER_RXRDY); // UART RX 인터럽트 활성화
  400af8:	2101      	movs	r1, #1
  400afa:	4807      	ldr	r0, [pc, #28]	; (400b18 <Boot_Uart_Init+0x40>)
  400afc:	4b08      	ldr	r3, [pc, #32]	; (400b20 <Boot_Uart_Init+0x48>)
  400afe:	4798      	blx	r3
    NVIC_EnableIRQ(UART1_IRQn); // 전체 인터럽트 활성화
  400b00:	2009      	movs	r0, #9
  400b02:	4b08      	ldr	r3, [pc, #32]	; (400b24 <Boot_Uart_Init+0x4c>)
  400b04:	4798      	blx	r3
}
  400b06:	bf00      	nop
  400b08:	3714      	adds	r7, #20
  400b0a:	46bd      	mov	sp, r7
  400b0c:	bd90      	pop	{r4, r7, pc}
  400b0e:	bf00      	nop
  400b10:	00404a9c 	.word	0x00404a9c
  400b14:	0040080d 	.word	0x0040080d
  400b18:	400e0800 	.word	0x400e0800
  400b1c:	00400a71 	.word	0x00400a71
  400b20:	00402665 	.word	0x00402665
  400b24:	0040071d 	.word	0x0040071d

00400b28 <Uart_Transmit>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
Uart_Status_t Uart_Transmit(uint8_t data)
{
  400b28:	b580      	push	{r7, lr}
  400b2a:	b084      	sub	sp, #16
  400b2c:	af00      	add	r7, sp, #0
  400b2e:	4603      	mov	r3, r0
  400b30:	71fb      	strb	r3, [r7, #7]
	Uart_Status_t status = UART_ERROR;
  400b32:	23ff      	movs	r3, #255	; 0xff
  400b34:	73fb      	strb	r3, [r7, #15]

	if(uart_write(UART1,data) == 0)
  400b36:	79fb      	ldrb	r3, [r7, #7]
  400b38:	4619      	mov	r1, r3
  400b3a:	4806      	ldr	r0, [pc, #24]	; (400b54 <Uart_Transmit+0x2c>)
  400b3c:	4b06      	ldr	r3, [pc, #24]	; (400b58 <Uart_Transmit+0x30>)
  400b3e:	4798      	blx	r3
  400b40:	4603      	mov	r3, r0
  400b42:	2b00      	cmp	r3, #0
  400b44:	d101      	bne.n	400b4a <Uart_Transmit+0x22>
	{
		status = UART_OK;
  400b46:	2300      	movs	r3, #0
  400b48:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  400b4a:	7bfb      	ldrb	r3, [r7, #15]
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	3710      	adds	r7, #16
  400b50:	46bd      	mov	sp, r7
  400b52:	bd80      	pop	{r7, pc}
  400b54:	400e0800 	.word	0x400e0800
  400b58:	00402439 	.word	0x00402439
  400b5c:	00000000 	.word	0x00000000

00400b60 <Uart_Transmit_Str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
Uart_Status_t Uart_Transmit_Str(uint8_t *data)
{
  400b60:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  400b64:	b084      	sub	sp, #16
  400b66:	af00      	add	r7, sp, #0
  400b68:	6078      	str	r0, [r7, #4]
	Uart_Status_t status = UART_ERROR;
  400b6a:	23ff      	movs	r3, #255	; 0xff
  400b6c:	737b      	strb	r3, [r7, #13]
	uint16_t length = (uint16_t)strlen((char *)data);
  400b6e:	6878      	ldr	r0, [r7, #4]
  400b70:	4b29      	ldr	r3, [pc, #164]	; (400c18 <Uart_Transmit_Str+0xb8>)
  400b72:	4798      	blx	r3
  400b74:	4603      	mov	r3, r0
  400b76:	817b      	strh	r3, [r7, #10]

	/* Calculate the length. */
	for(uint16_t i = 0; i < length; i++)
  400b78:	2300      	movs	r3, #0
  400b7a:	81fb      	strh	r3, [r7, #14]
  400b7c:	e03b      	b.n	400bf6 <Uart_Transmit_Str+0x96>
	{
		status = Uart_Transmit(*(data+i));
  400b7e:	89fb      	ldrh	r3, [r7, #14]
  400b80:	687a      	ldr	r2, [r7, #4]
  400b82:	4413      	add	r3, r2
  400b84:	781b      	ldrb	r3, [r3, #0]
  400b86:	4618      	mov	r0, r3
  400b88:	4b24      	ldr	r3, [pc, #144]	; (400c1c <Uart_Transmit_Str+0xbc>)
  400b8a:	4798      	blx	r3
  400b8c:	4603      	mov	r3, r0
  400b8e:	737b      	strb	r3, [r7, #13]
		delay_us(100);
  400b90:	4b23      	ldr	r3, [pc, #140]	; (400c20 <Uart_Transmit_Str+0xc0>)
  400b92:	4798      	blx	r3
  400b94:	4603      	mov	r3, r0
  400b96:	4619      	mov	r1, r3
  400b98:	f04f 0200 	mov.w	r2, #0
  400b9c:	460b      	mov	r3, r1
  400b9e:	4614      	mov	r4, r2
  400ba0:	18db      	adds	r3, r3, r3
  400ba2:	eb44 0404 	adc.w	r4, r4, r4
  400ba6:	185b      	adds	r3, r3, r1
  400ba8:	eb44 0402 	adc.w	r4, r4, r2
  400bac:	0166      	lsls	r6, r4, #5
  400bae:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  400bb2:	015d      	lsls	r5, r3, #5
  400bb4:	195b      	adds	r3, r3, r5
  400bb6:	eb44 0406 	adc.w	r4, r4, r6
  400bba:	185b      	adds	r3, r3, r1
  400bbc:	eb44 0402 	adc.w	r4, r4, r2
  400bc0:	a213      	add	r2, pc, #76	; (adr r2, 400c10 <Uart_Transmit_Str+0xb0>)
  400bc2:	e9d2 1200 	ldrd	r1, r2, [r2]
  400bc6:	eb13 0b01 	adds.w	fp, r3, r1
  400bca:	eb44 0c02 	adc.w	ip, r4, r2
  400bce:	4658      	mov	r0, fp
  400bd0:	4661      	mov	r1, ip
  400bd2:	4c14      	ldr	r4, [pc, #80]	; (400c24 <Uart_Transmit_Str+0xc4>)
  400bd4:	4a14      	ldr	r2, [pc, #80]	; (400c28 <Uart_Transmit_Str+0xc8>)
  400bd6:	f04f 0300 	mov.w	r3, #0
  400bda:	47a0      	blx	r4
  400bdc:	4603      	mov	r3, r0
  400bde:	460c      	mov	r4, r1
  400be0:	4618      	mov	r0, r3
  400be2:	4b12      	ldr	r3, [pc, #72]	; (400c2c <Uart_Transmit_Str+0xcc>)
  400be4:	4798      	blx	r3
		if (status == UART_ERROR)
  400be6:	7b7b      	ldrb	r3, [r7, #13]
  400be8:	2bff      	cmp	r3, #255	; 0xff
  400bea:	d101      	bne.n	400bf0 <Uart_Transmit_Str+0x90>
		{
			return status;
  400bec:	7b7b      	ldrb	r3, [r7, #13]
  400bee:	e009      	b.n	400c04 <Uart_Transmit_Str+0xa4>
	for(uint16_t i = 0; i < length; i++)
  400bf0:	89fb      	ldrh	r3, [r7, #14]
  400bf2:	3301      	adds	r3, #1
  400bf4:	81fb      	strh	r3, [r7, #14]
  400bf6:	89fa      	ldrh	r2, [r7, #14]
  400bf8:	897b      	ldrh	r3, [r7, #10]
  400bfa:	429a      	cmp	r2, r3
  400bfc:	d3bf      	bcc.n	400b7e <Uart_Transmit_Str+0x1e>
		}
	}

	status = UART_OK;
  400bfe:	2300      	movs	r3, #0
  400c00:	737b      	strb	r3, [r7, #13]

	return status;
  400c02:	7b7b      	ldrb	r3, [r7, #13]
}
  400c04:	4618      	mov	r0, r3
  400c06:	3710      	adds	r7, #16
  400c08:	46bd      	mov	sp, r7
  400c0a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  400c0e:	bf00      	nop
  400c10:	00d59f7f 	.word	0x00d59f7f
  400c14:	00000000 	.word	0x00000000
  400c18:	00404101 	.word	0x00404101
  400c1c:	00400b29 	.word	0x00400b29
  400c20:	004007e5 	.word	0x004007e5
  400c24:	00403475 	.word	0x00403475
  400c28:	00d59f80 	.word	0x00d59f80
  400c2c:	20000101 	.word	0x20000101

00400c30 <Uart_Packet_Receive>:

Uart_Status_t Uart_Packet_Receive(uint8_t *data, Uart_Packet_Index_t index)
{
  400c30:	b480      	push	{r7}
  400c32:	b085      	sub	sp, #20
  400c34:	af00      	add	r7, sp, #0
  400c36:	6078      	str	r0, [r7, #4]
  400c38:	460b      	mov	r3, r1
  400c3a:	70fb      	strb	r3, [r7, #3]
	Uart_Status_t status = UART_ERROR;
  400c3c:	23ff      	movs	r3, #255	; 0xff
  400c3e:	73fb      	strb	r3, [r7, #15]
	if ((Uart_Buffer_Length > 0) || (Uart_Packet_Received_Flag == 1))
  400c40:	4b2d      	ldr	r3, [pc, #180]	; (400cf8 <Uart_Packet_Receive+0xc8>)
  400c42:	881b      	ldrh	r3, [r3, #0]
  400c44:	2b00      	cmp	r3, #0
  400c46:	d103      	bne.n	400c50 <Uart_Packet_Receive+0x20>
  400c48:	4b2c      	ldr	r3, [pc, #176]	; (400cfc <Uart_Packet_Receive+0xcc>)
  400c4a:	781b      	ldrb	r3, [r3, #0]
  400c4c:	2b01      	cmp	r3, #1
  400c4e:	d14c      	bne.n	400cea <Uart_Packet_Receive+0xba>
	{
		switch(index)
  400c50:	78fb      	ldrb	r3, [r7, #3]
  400c52:	2b03      	cmp	r3, #3
  400c54:	d847      	bhi.n	400ce6 <Uart_Packet_Receive+0xb6>
  400c56:	a201      	add	r2, pc, #4	; (adr r2, 400c5c <Uart_Packet_Receive+0x2c>)
  400c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c5c:	00400c6d 	.word	0x00400c6d
  400c60:	00400c77 	.word	0x00400c77
  400c64:	00400c9b 	.word	0x00400c9b
  400c68:	00400cc1 	.word	0x00400cc1
		{
			case UART_PACKET_HEADER : 
				*data = Uart_Packet.header;
  400c6c:	4b24      	ldr	r3, [pc, #144]	; (400d00 <Uart_Packet_Receive+0xd0>)
  400c6e:	781a      	ldrb	r2, [r3, #0]
  400c70:	687b      	ldr	r3, [r7, #4]
  400c72:	701a      	strb	r2, [r3, #0]
			break;
  400c74:	e037      	b.n	400ce6 <Uart_Packet_Receive+0xb6>
			case UART_PACKET_NUM :
				for(uint8_t i = 0; i < 2; i++)
  400c76:	2300      	movs	r3, #0
  400c78:	73bb      	strb	r3, [r7, #14]
  400c7a:	e00a      	b.n	400c92 <Uart_Packet_Receive+0x62>
				{
					*(data+i) = Uart_Packet.packet_num[i];
  400c7c:	7bbb      	ldrb	r3, [r7, #14]
  400c7e:	687a      	ldr	r2, [r7, #4]
  400c80:	4413      	add	r3, r2
  400c82:	7bba      	ldrb	r2, [r7, #14]
  400c84:	491e      	ldr	r1, [pc, #120]	; (400d00 <Uart_Packet_Receive+0xd0>)
  400c86:	440a      	add	r2, r1
  400c88:	7852      	ldrb	r2, [r2, #1]
  400c8a:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < 2; i++)
  400c8c:	7bbb      	ldrb	r3, [r7, #14]
  400c8e:	3301      	adds	r3, #1
  400c90:	73bb      	strb	r3, [r7, #14]
  400c92:	7bbb      	ldrb	r3, [r7, #14]
  400c94:	2b01      	cmp	r3, #1
  400c96:	d9f1      	bls.n	400c7c <Uart_Packet_Receive+0x4c>
				}
			break;
  400c98:	e025      	b.n	400ce6 <Uart_Packet_Receive+0xb6>
			case UART_PACKET_DATA :
				for(uint16_t i = 0; i < 1024; i++)
  400c9a:	2300      	movs	r3, #0
  400c9c:	81bb      	strh	r3, [r7, #12]
  400c9e:	e00a      	b.n	400cb6 <Uart_Packet_Receive+0x86>
				{
					*(data+i) = Uart_Packet.data[i];
  400ca0:	89bb      	ldrh	r3, [r7, #12]
  400ca2:	687a      	ldr	r2, [r7, #4]
  400ca4:	4413      	add	r3, r2
  400ca6:	89ba      	ldrh	r2, [r7, #12]
  400ca8:	4915      	ldr	r1, [pc, #84]	; (400d00 <Uart_Packet_Receive+0xd0>)
  400caa:	440a      	add	r2, r1
  400cac:	78d2      	ldrb	r2, [r2, #3]
  400cae:	701a      	strb	r2, [r3, #0]
				for(uint16_t i = 0; i < 1024; i++)
  400cb0:	89bb      	ldrh	r3, [r7, #12]
  400cb2:	3301      	adds	r3, #1
  400cb4:	81bb      	strh	r3, [r7, #12]
  400cb6:	89bb      	ldrh	r3, [r7, #12]
  400cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  400cbc:	d3f0      	bcc.n	400ca0 <Uart_Packet_Receive+0x70>
				}
			break;
  400cbe:	e012      	b.n	400ce6 <Uart_Packet_Receive+0xb6>
			case UART_PACKET_CHECKSUM :
				for(uint8_t i = 0; i < 2; i++)
  400cc0:	2300      	movs	r3, #0
  400cc2:	72fb      	strb	r3, [r7, #11]
  400cc4:	e00b      	b.n	400cde <Uart_Packet_Receive+0xae>
				{
					*(data+i) = Uart_Packet.checksum[i];
  400cc6:	7afb      	ldrb	r3, [r7, #11]
  400cc8:	687a      	ldr	r2, [r7, #4]
  400cca:	4413      	add	r3, r2
  400ccc:	7afa      	ldrb	r2, [r7, #11]
  400cce:	490c      	ldr	r1, [pc, #48]	; (400d00 <Uart_Packet_Receive+0xd0>)
  400cd0:	440a      	add	r2, r1
  400cd2:	f892 2403 	ldrb.w	r2, [r2, #1027]	; 0x403
  400cd6:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < 2; i++)
  400cd8:	7afb      	ldrb	r3, [r7, #11]
  400cda:	3301      	adds	r3, #1
  400cdc:	72fb      	strb	r3, [r7, #11]
  400cde:	7afb      	ldrb	r3, [r7, #11]
  400ce0:	2b01      	cmp	r3, #1
  400ce2:	d9f0      	bls.n	400cc6 <Uart_Packet_Receive+0x96>
				}		
			break;
  400ce4:	bf00      	nop
		}
		status = UART_OK;
  400ce6:	2300      	movs	r3, #0
  400ce8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  400cea:	7bfb      	ldrb	r3, [r7, #15]
}
  400cec:	4618      	mov	r0, r3
  400cee:	3714      	adds	r7, #20
  400cf0:	46bd      	mov	sp, r7
  400cf2:	bc80      	pop	{r7}
  400cf4:	4770      	bx	lr
  400cf6:	bf00      	nop
  400cf8:	20003032 	.word	0x20003032
  400cfc:	20003030 	.word	0x20003030
  400d00:	20000c28 	.word	0x20000c28

00400d04 <UART1_Handler>:

void UART1_Handler(void)
{
  400d04:	b580      	push	{r7, lr}
  400d06:	b082      	sub	sp, #8
  400d08:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
  400d0a:	2300      	movs	r3, #0
  400d0c:	71fb      	strb	r3, [r7, #7]
    if (usart_get_interrupt_mask(UART1) & US_IER_RXRDY) 
  400d0e:	4838      	ldr	r0, [pc, #224]	; (400df0 <UART1_Handler+0xec>)
  400d10:	4b38      	ldr	r3, [pc, #224]	; (400df4 <UART1_Handler+0xf0>)
  400d12:	4798      	blx	r3
  400d14:	4603      	mov	r3, r0
  400d16:	f003 0301 	and.w	r3, r3, #1
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d063      	beq.n	400de6 <UART1_Handler+0xe2>
	{
        usart_getchar(UART1,(uint32_t *)&Uart_Rx_Buf[Uart_Buffer_Length]); 
  400d1e:	4b36      	ldr	r3, [pc, #216]	; (400df8 <UART1_Handler+0xf4>)
  400d20:	881b      	ldrh	r3, [r3, #0]
  400d22:	009b      	lsls	r3, r3, #2
  400d24:	4a35      	ldr	r2, [pc, #212]	; (400dfc <UART1_Handler+0xf8>)
  400d26:	4413      	add	r3, r2
  400d28:	4619      	mov	r1, r3
  400d2a:	4831      	ldr	r0, [pc, #196]	; (400df0 <UART1_Handler+0xec>)
  400d2c:	4b34      	ldr	r3, [pc, #208]	; (400e00 <UART1_Handler+0xfc>)
  400d2e:	4798      	blx	r3
		if (Uart_Buffer_Length < 1)
  400d30:	4b31      	ldr	r3, [pc, #196]	; (400df8 <UART1_Handler+0xf4>)
  400d32:	881b      	ldrh	r3, [r3, #0]
  400d34:	2b00      	cmp	r3, #0
  400d36:	d109      	bne.n	400d4c <UART1_Handler+0x48>
		{
			Uart_Packet.header = Uart_Rx_Buf[Uart_Buffer_Length];
  400d38:	4b2f      	ldr	r3, [pc, #188]	; (400df8 <UART1_Handler+0xf4>)
  400d3a:	881b      	ldrh	r3, [r3, #0]
  400d3c:	461a      	mov	r2, r3
  400d3e:	4b2f      	ldr	r3, [pc, #188]	; (400dfc <UART1_Handler+0xf8>)
  400d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400d44:	b2da      	uxtb	r2, r3
  400d46:	4b2f      	ldr	r3, [pc, #188]	; (400e04 <UART1_Handler+0x100>)
  400d48:	701a      	strb	r2, [r3, #0]
  400d4a:	e03d      	b.n	400dc8 <UART1_Handler+0xc4>
		}
		else if (Uart_Buffer_Length < 3)
  400d4c:	4b2a      	ldr	r3, [pc, #168]	; (400df8 <UART1_Handler+0xf4>)
  400d4e:	881b      	ldrh	r3, [r3, #0]
  400d50:	2b02      	cmp	r3, #2
  400d52:	d80e      	bhi.n	400d72 <UART1_Handler+0x6e>
		{
			Uart_Packet.packet_num[Uart_Buffer_Length - 1] = Uart_Rx_Buf[Uart_Buffer_Length];
  400d54:	4b28      	ldr	r3, [pc, #160]	; (400df8 <UART1_Handler+0xf4>)
  400d56:	881b      	ldrh	r3, [r3, #0]
  400d58:	3b01      	subs	r3, #1
  400d5a:	4a27      	ldr	r2, [pc, #156]	; (400df8 <UART1_Handler+0xf4>)
  400d5c:	8812      	ldrh	r2, [r2, #0]
  400d5e:	4611      	mov	r1, r2
  400d60:	4a26      	ldr	r2, [pc, #152]	; (400dfc <UART1_Handler+0xf8>)
  400d62:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  400d66:	b2d1      	uxtb	r1, r2
  400d68:	4a26      	ldr	r2, [pc, #152]	; (400e04 <UART1_Handler+0x100>)
  400d6a:	4413      	add	r3, r2
  400d6c:	460a      	mov	r2, r1
  400d6e:	705a      	strb	r2, [r3, #1]
  400d70:	e02a      	b.n	400dc8 <UART1_Handler+0xc4>
		}
		else if (Uart_Buffer_Length < 1027)
  400d72:	4b21      	ldr	r3, [pc, #132]	; (400df8 <UART1_Handler+0xf4>)
  400d74:	881b      	ldrh	r3, [r3, #0]
  400d76:	f240 4202 	movw	r2, #1026	; 0x402
  400d7a:	4293      	cmp	r3, r2
  400d7c:	d80e      	bhi.n	400d9c <UART1_Handler+0x98>
		{
			Uart_Packet.data[Uart_Buffer_Length - 3] = Uart_Rx_Buf[Uart_Buffer_Length];
  400d7e:	4b1e      	ldr	r3, [pc, #120]	; (400df8 <UART1_Handler+0xf4>)
  400d80:	881b      	ldrh	r3, [r3, #0]
  400d82:	3b03      	subs	r3, #3
  400d84:	4a1c      	ldr	r2, [pc, #112]	; (400df8 <UART1_Handler+0xf4>)
  400d86:	8812      	ldrh	r2, [r2, #0]
  400d88:	4611      	mov	r1, r2
  400d8a:	4a1c      	ldr	r2, [pc, #112]	; (400dfc <UART1_Handler+0xf8>)
  400d8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  400d90:	b2d1      	uxtb	r1, r2
  400d92:	4a1c      	ldr	r2, [pc, #112]	; (400e04 <UART1_Handler+0x100>)
  400d94:	4413      	add	r3, r2
  400d96:	460a      	mov	r2, r1
  400d98:	70da      	strb	r2, [r3, #3]
  400d9a:	e015      	b.n	400dc8 <UART1_Handler+0xc4>
		}
		else if (Uart_Buffer_Length < 1029)
  400d9c:	4b16      	ldr	r3, [pc, #88]	; (400df8 <UART1_Handler+0xf4>)
  400d9e:	881b      	ldrh	r3, [r3, #0]
  400da0:	f240 4204 	movw	r2, #1028	; 0x404
  400da4:	4293      	cmp	r3, r2
  400da6:	d80f      	bhi.n	400dc8 <UART1_Handler+0xc4>
		{
			Uart_Packet.checksum[Uart_Buffer_Length - 1027] = Uart_Rx_Buf[Uart_Buffer_Length];
  400da8:	4b13      	ldr	r3, [pc, #76]	; (400df8 <UART1_Handler+0xf4>)
  400daa:	881b      	ldrh	r3, [r3, #0]
  400dac:	f2a3 4303 	subw	r3, r3, #1027	; 0x403
  400db0:	4a11      	ldr	r2, [pc, #68]	; (400df8 <UART1_Handler+0xf4>)
  400db2:	8812      	ldrh	r2, [r2, #0]
  400db4:	4611      	mov	r1, r2
  400db6:	4a11      	ldr	r2, [pc, #68]	; (400dfc <UART1_Handler+0xf8>)
  400db8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  400dbc:	b2d1      	uxtb	r1, r2
  400dbe:	4a11      	ldr	r2, [pc, #68]	; (400e04 <UART1_Handler+0x100>)
  400dc0:	4413      	add	r3, r2
  400dc2:	460a      	mov	r2, r1
  400dc4:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
		}
		
		if(Uart_Buffer_Length >= 1028)
  400dc8:	4b0b      	ldr	r3, [pc, #44]	; (400df8 <UART1_Handler+0xf4>)
  400dca:	881b      	ldrh	r3, [r3, #0]
  400dcc:	f240 4203 	movw	r2, #1027	; 0x403
  400dd0:	4293      	cmp	r3, r2
  400dd2:	d902      	bls.n	400dda <UART1_Handler+0xd6>
		{
			Uart_Packet_Received_Flag = 1;
  400dd4:	4b0c      	ldr	r3, [pc, #48]	; (400e08 <UART1_Handler+0x104>)
  400dd6:	2201      	movs	r2, #1
  400dd8:	701a      	strb	r2, [r3, #0]
		}
		Uart_Buffer_Length++;
  400dda:	4b07      	ldr	r3, [pc, #28]	; (400df8 <UART1_Handler+0xf4>)
  400ddc:	881b      	ldrh	r3, [r3, #0]
  400dde:	3301      	adds	r3, #1
  400de0:	b29a      	uxth	r2, r3
  400de2:	4b05      	ldr	r3, [pc, #20]	; (400df8 <UART1_Handler+0xf4>)
  400de4:	801a      	strh	r2, [r3, #0]
    }
}
  400de6:	bf00      	nop
  400de8:	3708      	adds	r7, #8
  400dea:	46bd      	mov	sp, r7
  400dec:	bd80      	pop	{r7, pc}
  400dee:	bf00      	nop
  400df0:	400e0800 	.word	0x400e0800
  400df4:	0040267f 	.word	0x0040267f
  400df8:	20003032 	.word	0x20003032
  400dfc:	20001030 	.word	0x20001030
  400e00:	00402745 	.word	0x00402745
  400e04:	20000c28 	.word	0x20000c28
  400e08:	20003030 	.word	0x20003030

00400e0c <osc_get_rate>:
{
  400e0c:	b480      	push	{r7}
  400e0e:	b083      	sub	sp, #12
  400e10:	af00      	add	r7, sp, #0
  400e12:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400e14:	687b      	ldr	r3, [r7, #4]
  400e16:	2b07      	cmp	r3, #7
  400e18:	d825      	bhi.n	400e66 <osc_get_rate+0x5a>
  400e1a:	a201      	add	r2, pc, #4	; (adr r2, 400e20 <osc_get_rate+0x14>)
  400e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e20:	00400e41 	.word	0x00400e41
  400e24:	00400e47 	.word	0x00400e47
  400e28:	00400e4d 	.word	0x00400e4d
  400e2c:	00400e53 	.word	0x00400e53
  400e30:	00400e57 	.word	0x00400e57
  400e34:	00400e5b 	.word	0x00400e5b
  400e38:	00400e5f 	.word	0x00400e5f
  400e3c:	00400e63 	.word	0x00400e63
		return OSC_SLCK_32K_RC_HZ;
  400e40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400e44:	e010      	b.n	400e68 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e4a:	e00d      	b.n	400e68 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e50:	e00a      	b.n	400e68 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400e52:	4b08      	ldr	r3, [pc, #32]	; (400e74 <osc_get_rate+0x68>)
  400e54:	e008      	b.n	400e68 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400e56:	4b08      	ldr	r3, [pc, #32]	; (400e78 <osc_get_rate+0x6c>)
  400e58:	e006      	b.n	400e68 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400e5a:	4b08      	ldr	r3, [pc, #32]	; (400e7c <osc_get_rate+0x70>)
  400e5c:	e004      	b.n	400e68 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400e5e:	4b07      	ldr	r3, [pc, #28]	; (400e7c <osc_get_rate+0x70>)
  400e60:	e002      	b.n	400e68 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400e62:	4b06      	ldr	r3, [pc, #24]	; (400e7c <osc_get_rate+0x70>)
  400e64:	e000      	b.n	400e68 <osc_get_rate+0x5c>
	return 0;
  400e66:	2300      	movs	r3, #0
}
  400e68:	4618      	mov	r0, r3
  400e6a:	370c      	adds	r7, #12
  400e6c:	46bd      	mov	sp, r7
  400e6e:	bc80      	pop	{r7}
  400e70:	4770      	bx	lr
  400e72:	bf00      	nop
  400e74:	003d0900 	.word	0x003d0900
  400e78:	007a1200 	.word	0x007a1200
  400e7c:	00b71b00 	.word	0x00b71b00

00400e80 <sysclk_get_main_hz>:
{
  400e80:	b580      	push	{r7, lr}
  400e82:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400e84:	2006      	movs	r0, #6
  400e86:	4b04      	ldr	r3, [pc, #16]	; (400e98 <sysclk_get_main_hz+0x18>)
  400e88:	4798      	blx	r3
  400e8a:	4602      	mov	r2, r0
  400e8c:	4613      	mov	r3, r2
  400e8e:	009b      	lsls	r3, r3, #2
  400e90:	4413      	add	r3, r2
  400e92:	009b      	lsls	r3, r3, #2
}
  400e94:	4618      	mov	r0, r3
  400e96:	bd80      	pop	{r7, pc}
  400e98:	00400e0d 	.word	0x00400e0d

00400e9c <sysclk_get_cpu_hz>:
{
  400e9c:	b580      	push	{r7, lr}
  400e9e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400ea0:	4b02      	ldr	r3, [pc, #8]	; (400eac <sysclk_get_cpu_hz+0x10>)
  400ea2:	4798      	blx	r3
  400ea4:	4603      	mov	r3, r0
  400ea6:	085b      	lsrs	r3, r3, #1
}
  400ea8:	4618      	mov	r0, r3
  400eaa:	bd80      	pop	{r7, pc}
  400eac:	00400e81 	.word	0x00400e81

00400eb0 <xmodem_receive>:
 * @param   void
 * @return  void
 */

void xmodem_receive(void)
{
  400eb0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  400eb4:	b082      	sub	sp, #8
  400eb6:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
  400eb8:	2300      	movs	r3, #0
  400eba:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0u;
  400ebc:	2300      	movs	r3, #0
  400ebe:	713b      	strb	r3, [r7, #4]

    x_first_packet_received = false;
  400ec0:	4b7d      	ldr	r3, [pc, #500]	; (4010b8 <xmodem_receive+0x208>)
  400ec2:	2200      	movs	r2, #0
  400ec4:	701a      	strb	r2, [r3, #0]
    xmodem_packet_number = 1u;
  400ec6:	4b7d      	ldr	r3, [pc, #500]	; (4010bc <xmodem_receive+0x20c>)
  400ec8:	2201      	movs	r2, #1
  400eca:	701a      	strb	r2, [r3, #0]
    xmodem_actual_flash_address = FLASH_APP2_START_ADDRESS;
  400ecc:	4b7c      	ldr	r3, [pc, #496]	; (4010c0 <xmodem_receive+0x210>)
  400ece:	4a7d      	ldr	r2, [pc, #500]	; (4010c4 <xmodem_receive+0x214>)
  400ed0:	601a      	str	r2, [r3, #0]

    /* Loop until there isn't any error (or until we jump to the user application). */
    while (X_OK == status)
  400ed2:	e0e7      	b.n	4010a4 <xmodem_receive+0x1f4>
    {
        uint8_t header = 0x00u;
  400ed4:	2300      	movs	r3, #0
  400ed6:	70fb      	strb	r3, [r7, #3]

        /* Get the header from UART. */
		Uart_Status_t comm_status = Uart_Packet_Receive(&header, UART_PACKET_HEADER);
  400ed8:	1cfb      	adds	r3, r7, #3
  400eda:	2100      	movs	r1, #0
  400edc:	4618      	mov	r0, r3
  400ede:	4b7a      	ldr	r3, [pc, #488]	; (4010c8 <xmodem_receive+0x218>)
  400ee0:	4798      	blx	r3
  400ee2:	4603      	mov	r3, r0
  400ee4:	71fb      	strb	r3, [r7, #7]
        if ((header == X_SOH) || (header == X_STX))
  400ee6:	78fb      	ldrb	r3, [r7, #3]
  400ee8:	2b01      	cmp	r3, #1
  400eea:	d002      	beq.n	400ef2 <xmodem_receive+0x42>
  400eec:	78fb      	ldrb	r3, [r7, #3]
  400eee:	2b02      	cmp	r3, #2
  400ef0:	d102      	bne.n	400ef8 <xmodem_receive+0x48>
        {
            x_first_packet_received = true;
  400ef2:	4b71      	ldr	r3, [pc, #452]	; (4010b8 <xmodem_receive+0x208>)
  400ef4:	2201      	movs	r2, #1
  400ef6:	701a      	strb	r2, [r3, #0]
        }
        /* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
        if (x_first_packet_received == false)
  400ef8:	4b6f      	ldr	r3, [pc, #444]	; (4010b8 <xmodem_receive+0x208>)
  400efa:	781b      	ldrb	r3, [r3, #0]
  400efc:	2b00      	cmp	r3, #0
  400efe:	d12d      	bne.n	400f5c <xmodem_receive+0xac>
        {
            (void)Uart_Transmit(X_C);
  400f00:	2043      	movs	r0, #67	; 0x43
  400f02:	4b72      	ldr	r3, [pc, #456]	; (4010cc <xmodem_receive+0x21c>)
  400f04:	4798      	blx	r3
            delay_ms(10);
  400f06:	4b72      	ldr	r3, [pc, #456]	; (4010d0 <xmodem_receive+0x220>)
  400f08:	4798      	blx	r3
  400f0a:	4603      	mov	r3, r0
  400f0c:	4619      	mov	r1, r3
  400f0e:	f04f 0200 	mov.w	r2, #0
  400f12:	460b      	mov	r3, r1
  400f14:	4614      	mov	r4, r2
  400f16:	00a6      	lsls	r6, r4, #2
  400f18:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  400f1c:	009d      	lsls	r5, r3, #2
  400f1e:	462b      	mov	r3, r5
  400f20:	4634      	mov	r4, r6
  400f22:	185b      	adds	r3, r3, r1
  400f24:	eb44 0402 	adc.w	r4, r4, r2
  400f28:	18db      	adds	r3, r3, r3
  400f2a:	eb44 0404 	adc.w	r4, r4, r4
  400f2e:	4619      	mov	r1, r3
  400f30:	4622      	mov	r2, r4
  400f32:	f243 63af 	movw	r3, #13999	; 0x36af
  400f36:	f04f 0400 	mov.w	r4, #0
  400f3a:	eb11 0b03 	adds.w	fp, r1, r3
  400f3e:	eb42 0c04 	adc.w	ip, r2, r4
  400f42:	4658      	mov	r0, fp
  400f44:	4661      	mov	r1, ip
  400f46:	4c63      	ldr	r4, [pc, #396]	; (4010d4 <xmodem_receive+0x224>)
  400f48:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400f4c:	f04f 0300 	mov.w	r3, #0
  400f50:	47a0      	blx	r4
  400f52:	4603      	mov	r3, r0
  400f54:	460c      	mov	r4, r1
  400f56:	4618      	mov	r0, r3
  400f58:	4b5f      	ldr	r3, [pc, #380]	; (4010d8 <xmodem_receive+0x228>)
  400f5a:	4798      	blx	r3
        }
		
        /* The header can be: SOH, STX, EOT and CAN. */
        switch(header)
  400f5c:	78fb      	ldrb	r3, [r7, #3]
  400f5e:	3b01      	subs	r3, #1
  400f60:	2b17      	cmp	r3, #23
  400f62:	f200 8091 	bhi.w	401088 <xmodem_receive+0x1d8>
  400f66:	a201      	add	r2, pc, #4	; (adr r2, 400f6c <xmodem_receive+0xbc>)
  400f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f6c:	00400fcd 	.word	0x00400fcd
  400f70:	00400fcd 	.word	0x00400fcd
  400f74:	00401089 	.word	0x00401089
  400f78:	00401019 	.word	0x00401019
  400f7c:	00401089 	.word	0x00401089
  400f80:	00401089 	.word	0x00401089
  400f84:	00401089 	.word	0x00401089
  400f88:	00401089 	.word	0x00401089
  400f8c:	00401089 	.word	0x00401089
  400f90:	00401089 	.word	0x00401089
  400f94:	00401089 	.word	0x00401089
  400f98:	00401089 	.word	0x00401089
  400f9c:	00401089 	.word	0x00401089
  400fa0:	00401089 	.word	0x00401089
  400fa4:	00401089 	.word	0x00401089
  400fa8:	00401089 	.word	0x00401089
  400fac:	00401089 	.word	0x00401089
  400fb0:	00401089 	.word	0x00401089
  400fb4:	00401089 	.word	0x00401089
  400fb8:	00401089 	.word	0x00401089
  400fbc:	00401089 	.word	0x00401089
  400fc0:	00401089 	.word	0x00401089
  400fc4:	00401089 	.word	0x00401089
  400fc8:	00401083 	.word	0x00401083
        {
            xmodem_status packet_status = X_ERROR;
            /* 128 or 1024 bytes of data. */
            case X_SOH:
            case X_STX:
                if(Uart_Packet_Received_Flag == 1)
  400fcc:	4b43      	ldr	r3, [pc, #268]	; (4010dc <xmodem_receive+0x22c>)
  400fce:	781b      	ldrb	r3, [r3, #0]
  400fd0:	2b01      	cmp	r3, #1
  400fd2:	d164      	bne.n	40109e <xmodem_receive+0x1ee>
                {
                    /* If the handling was successful, then send an ACK. */
                    packet_status = xmodem_handle_packet(header);
  400fd4:	78fb      	ldrb	r3, [r7, #3]
  400fd6:	4618      	mov	r0, r3
  400fd8:	4b41      	ldr	r3, [pc, #260]	; (4010e0 <xmodem_receive+0x230>)
  400fda:	4798      	blx	r3
  400fdc:	4603      	mov	r3, r0
  400fde:	71bb      	strb	r3, [r7, #6]
                    if (X_OK == packet_status)
  400fe0:	79bb      	ldrb	r3, [r7, #6]
  400fe2:	2b00      	cmp	r3, #0
  400fe4:	d103      	bne.n	400fee <xmodem_receive+0x13e>
                    {
                        (void)Uart_Transmit(X_ACK);
  400fe6:	2006      	movs	r0, #6
  400fe8:	4b38      	ldr	r3, [pc, #224]	; (4010cc <xmodem_receive+0x21c>)
  400fea:	4798      	blx	r3
                    else
                    {
                        status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
                    }
                }
            break;
  400fec:	e057      	b.n	40109e <xmodem_receive+0x1ee>
                    else if (X_ERROR_FLASH == packet_status)
  400fee:	79bb      	ldrb	r3, [r7, #6]
  400ff0:	2b08      	cmp	r3, #8
  400ff2:	d109      	bne.n	401008 <xmodem_receive+0x158>
                        error_number = X_MAX_ERRORS;
  400ff4:	2303      	movs	r3, #3
  400ff6:	713b      	strb	r3, [r7, #4]
                        status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  400ff8:	1d3b      	adds	r3, r7, #4
  400ffa:	2103      	movs	r1, #3
  400ffc:	4618      	mov	r0, r3
  400ffe:	4b39      	ldr	r3, [pc, #228]	; (4010e4 <xmodem_receive+0x234>)
  401000:	4798      	blx	r3
  401002:	4603      	mov	r3, r0
  401004:	717b      	strb	r3, [r7, #5]
            break;
  401006:	e04a      	b.n	40109e <xmodem_receive+0x1ee>
                        status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  401008:	1d3b      	adds	r3, r7, #4
  40100a:	2103      	movs	r1, #3
  40100c:	4618      	mov	r0, r3
  40100e:	4b35      	ldr	r3, [pc, #212]	; (4010e4 <xmodem_receive+0x234>)
  401010:	4798      	blx	r3
  401012:	4603      	mov	r3, r0
  401014:	717b      	strb	r3, [r7, #5]
            break;
  401016:	e042      	b.n	40109e <xmodem_receive+0x1ee>
            /* End of Transmission. */
            case X_EOT:
                /* ACK, feedback to user (as a text), then jump to user application. */
                (void)Uart_Transmit(X_ACK);
  401018:	2006      	movs	r0, #6
  40101a:	4b2c      	ldr	r3, [pc, #176]	; (4010cc <xmodem_receive+0x21c>)
  40101c:	4798      	blx	r3
                delay_ms(10);
  40101e:	4b2c      	ldr	r3, [pc, #176]	; (4010d0 <xmodem_receive+0x220>)
  401020:	4798      	blx	r3
  401022:	4603      	mov	r3, r0
  401024:	4619      	mov	r1, r3
  401026:	f04f 0200 	mov.w	r2, #0
  40102a:	460b      	mov	r3, r1
  40102c:	4614      	mov	r4, r2
  40102e:	ea4f 0984 	mov.w	r9, r4, lsl #2
  401032:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  401036:	ea4f 0883 	mov.w	r8, r3, lsl #2
  40103a:	4643      	mov	r3, r8
  40103c:	464c      	mov	r4, r9
  40103e:	185b      	adds	r3, r3, r1
  401040:	eb44 0402 	adc.w	r4, r4, r2
  401044:	18db      	adds	r3, r3, r3
  401046:	eb44 0404 	adc.w	r4, r4, r4
  40104a:	4619      	mov	r1, r3
  40104c:	4622      	mov	r2, r4
  40104e:	f243 63af 	movw	r3, #13999	; 0x36af
  401052:	f04f 0400 	mov.w	r4, #0
  401056:	eb11 0b03 	adds.w	fp, r1, r3
  40105a:	eb42 0c04 	adc.w	ip, r2, r4
  40105e:	4658      	mov	r0, fp
  401060:	4661      	mov	r1, ip
  401062:	4c1c      	ldr	r4, [pc, #112]	; (4010d4 <xmodem_receive+0x224>)
  401064:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401068:	f04f 0300 	mov.w	r3, #0
  40106c:	47a0      	blx	r4
  40106e:	4603      	mov	r3, r0
  401070:	460c      	mov	r4, r1
  401072:	4618      	mov	r0, r3
  401074:	4b18      	ldr	r3, [pc, #96]	; (4010d8 <xmodem_receive+0x228>)
  401076:	4798      	blx	r3
                Flash_Copy_App2_To_App1();
  401078:	4b1b      	ldr	r3, [pc, #108]	; (4010e8 <xmodem_receive+0x238>)
  40107a:	4798      	blx	r3
                Flash_Jump_To_Application();
  40107c:	4b1b      	ldr	r3, [pc, #108]	; (4010ec <xmodem_receive+0x23c>)
  40107e:	4798      	blx	r3
            break;
  401080:	e010      	b.n	4010a4 <xmodem_receive+0x1f4>
            /* Abort from host. */
            case X_CAN:
                status = X_ERROR;
  401082:	23ff      	movs	r3, #255	; 0xff
  401084:	717b      	strb	r3, [r7, #5]
            break;
  401086:	e00d      	b.n	4010a4 <xmodem_receive+0x1f4>
            default:
                /* Wrong header. */
                if (UART_OK == comm_status)
  401088:	79fb      	ldrb	r3, [r7, #7]
  40108a:	2b00      	cmp	r3, #0
  40108c:	d109      	bne.n	4010a2 <xmodem_receive+0x1f2>
                {
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  40108e:	1d3b      	adds	r3, r7, #4
  401090:	2103      	movs	r1, #3
  401092:	4618      	mov	r0, r3
  401094:	4b13      	ldr	r3, [pc, #76]	; (4010e4 <xmodem_receive+0x234>)
  401096:	4798      	blx	r3
  401098:	4603      	mov	r3, r0
  40109a:	717b      	strb	r3, [r7, #5]
                }
            break;
  40109c:	e001      	b.n	4010a2 <xmodem_receive+0x1f2>
            break;
  40109e:	bf00      	nop
  4010a0:	e000      	b.n	4010a4 <xmodem_receive+0x1f4>
            break;
  4010a2:	bf00      	nop
    while (X_OK == status)
  4010a4:	797b      	ldrb	r3, [r7, #5]
  4010a6:	b2db      	uxtb	r3, r3
  4010a8:	2b00      	cmp	r3, #0
  4010aa:	f43f af13 	beq.w	400ed4 <xmodem_receive+0x24>
        }
    }
}
  4010ae:	bf00      	nop
  4010b0:	3708      	adds	r7, #8
  4010b2:	46bd      	mov	sp, r7
  4010b4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4010b8:	20000b74 	.word	0x20000b74
  4010bc:	2000010a 	.word	0x2000010a
  4010c0:	20000b70 	.word	0x20000b70
  4010c4:	00413000 	.word	0x00413000
  4010c8:	00400c31 	.word	0x00400c31
  4010cc:	00400b29 	.word	0x00400b29
  4010d0:	00400e9d 	.word	0x00400e9d
  4010d4:	00403475 	.word	0x00403475
  4010d8:	20000101 	.word	0x20000101
  4010dc:	20003030 	.word	0x20003030
  4010e0:	00401165 	.word	0x00401165
  4010e4:	0040131d 	.word	0x0040131d
  4010e8:	00402ffd 	.word	0x00402ffd
  4010ec:	00402fcd 	.word	0x00402fcd

004010f0 <xmodem_calc_crc>:

static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
  4010f0:	b480      	push	{r7}
  4010f2:	b085      	sub	sp, #20
  4010f4:	af00      	add	r7, sp, #0
  4010f6:	6078      	str	r0, [r7, #4]
  4010f8:	460b      	mov	r3, r1
  4010fa:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
  4010fc:	2300      	movs	r3, #0
  4010fe:	81fb      	strh	r3, [r7, #14]
    while (length)
  401100:	e026      	b.n	401150 <xmodem_calc_crc+0x60>
    {
        length--;
  401102:	887b      	ldrh	r3, [r7, #2]
  401104:	3b01      	subs	r3, #1
  401106:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
  401108:	687b      	ldr	r3, [r7, #4]
  40110a:	1c5a      	adds	r2, r3, #1
  40110c:	607a      	str	r2, [r7, #4]
  40110e:	781b      	ldrb	r3, [r3, #0]
  401110:	021b      	lsls	r3, r3, #8
  401112:	b21a      	sxth	r2, r3
  401114:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  401118:	4053      	eors	r3, r2
  40111a:	b21b      	sxth	r3, r3
  40111c:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
  40111e:	2300      	movs	r3, #0
  401120:	737b      	strb	r3, [r7, #13]
  401122:	e012      	b.n	40114a <xmodem_calc_crc+0x5a>
        {
            if (crc & 0x8000u)
  401124:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  401128:	2b00      	cmp	r3, #0
  40112a:	da08      	bge.n	40113e <xmodem_calc_crc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
  40112c:	89fb      	ldrh	r3, [r7, #14]
  40112e:	005b      	lsls	r3, r3, #1
  401130:	b29b      	uxth	r3, r3
  401132:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
  401136:	f083 0301 	eor.w	r3, r3, #1
  40113a:	81fb      	strh	r3, [r7, #14]
  40113c:	e002      	b.n	401144 <xmodem_calc_crc+0x54>
            }
            else
            {
                crc = crc << 1u;
  40113e:	89fb      	ldrh	r3, [r7, #14]
  401140:	005b      	lsls	r3, r3, #1
  401142:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
  401144:	7b7b      	ldrb	r3, [r7, #13]
  401146:	3301      	adds	r3, #1
  401148:	737b      	strb	r3, [r7, #13]
  40114a:	7b7b      	ldrb	r3, [r7, #13]
  40114c:	2b07      	cmp	r3, #7
  40114e:	d9e9      	bls.n	401124 <xmodem_calc_crc+0x34>
    while (length)
  401150:	887b      	ldrh	r3, [r7, #2]
  401152:	2b00      	cmp	r3, #0
  401154:	d1d5      	bne.n	401102 <xmodem_calc_crc+0x12>
            }
        }
    }
    return crc;
  401156:	89fb      	ldrh	r3, [r7, #14]
}
  401158:	4618      	mov	r0, r3
  40115a:	3714      	adds	r7, #20
  40115c:	46bd      	mov	sp, r7
  40115e:	bc80      	pop	{r7}
  401160:	4770      	bx	lr
	...

00401164 <xmodem_handle_packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header)
{
  401164:	b580      	push	{r7, lr}
  401166:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
  40116a:	af00      	add	r7, sp, #0
  40116c:	4602      	mov	r2, r0
  40116e:	1dfb      	adds	r3, r7, #7
  401170:	701a      	strb	r2, [r3, #0]
    xmodem_status status = X_OK;
  401172:	2300      	movs	r3, #0
  401174:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    uint16_t size = 0u;
  401178:	2300      	movs	r3, #0
  40117a:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
    uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
    uint8_t received_packet_data[X_PACKET_1024_SIZE];
    uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

    /* Get the size of the data. */
    if (X_SOH == header)
  40117e:	1dfb      	adds	r3, r7, #7
  401180:	781b      	ldrb	r3, [r3, #0]
  401182:	2b01      	cmp	r3, #1
  401184:	d103      	bne.n	40118e <xmodem_handle_packet+0x2a>
    {
        size = X_PACKET_128_SIZE;
  401186:	2380      	movs	r3, #128	; 0x80
  401188:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  40118c:	e00b      	b.n	4011a6 <xmodem_handle_packet+0x42>
    }
    else if (X_STX == header)
  40118e:	1dfb      	adds	r3, r7, #7
  401190:	781b      	ldrb	r3, [r3, #0]
  401192:	2b02      	cmp	r3, #2
  401194:	d104      	bne.n	4011a0 <xmodem_handle_packet+0x3c>
    {
        size = X_PACKET_1024_SIZE;
  401196:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40119a:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  40119e:	e002      	b.n	4011a6 <xmodem_handle_packet+0x42>
    }
    else
    {
        /* Wrong header type. This shoudn't be possible... */
        status |= X_ERROR;
  4011a0:	23ff      	movs	r3, #255	; 0xff
  4011a2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    Uart_Status_t comm_status = UART_OK;
  4011a6:	2300      	movs	r3, #0
  4011a8:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    /* Get the packet number, data and CRC from UART. */
    comm_status |= Uart_Packet_Receive(&received_packet_number[0u], UART_PACKET_NUM);
  4011ac:	f207 430c 	addw	r3, r7, #1036	; 0x40c
  4011b0:	2101      	movs	r1, #1
  4011b2:	4618      	mov	r0, r3
  4011b4:	4b52      	ldr	r3, [pc, #328]	; (401300 <xmodem_handle_packet+0x19c>)
  4011b6:	4798      	blx	r3
  4011b8:	4603      	mov	r3, r0
  4011ba:	461a      	mov	r2, r3
  4011bc:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  4011c0:	4313      	orrs	r3, r2
  4011c2:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    comm_status |= Uart_Packet_Receive(&received_packet_data[0u], UART_PACKET_DATA);
  4011c6:	f107 030c 	add.w	r3, r7, #12
  4011ca:	2102      	movs	r1, #2
  4011cc:	4618      	mov	r0, r3
  4011ce:	4b4c      	ldr	r3, [pc, #304]	; (401300 <xmodem_handle_packet+0x19c>)
  4011d0:	4798      	blx	r3
  4011d2:	4603      	mov	r3, r0
  4011d4:	461a      	mov	r2, r3
  4011d6:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  4011da:	4313      	orrs	r3, r2
  4011dc:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    comm_status |= Uart_Packet_Receive(&received_packet_crc[0u], UART_PACKET_CHECKSUM);
  4011e0:	f107 0308 	add.w	r3, r7, #8
  4011e4:	2103      	movs	r1, #3
  4011e6:	4618      	mov	r0, r3
  4011e8:	4b45      	ldr	r3, [pc, #276]	; (401300 <xmodem_handle_packet+0x19c>)
  4011ea:	4798      	blx	r3
  4011ec:	4603      	mov	r3, r0
  4011ee:	461a      	mov	r2, r3
  4011f0:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  4011f4:	4313      	orrs	r3, r2
  4011f6:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    
    /* Merge the two bytes of CRC. */
    uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
  4011fa:	f107 0308 	add.w	r3, r7, #8
  4011fe:	781b      	ldrb	r3, [r3, #0]
  401200:	021b      	lsls	r3, r3, #8
  401202:	b21a      	sxth	r2, r3
  401204:	f107 0308 	add.w	r3, r7, #8
  401208:	785b      	ldrb	r3, [r3, #1]
  40120a:	b21b      	sxth	r3, r3
  40120c:	4313      	orrs	r3, r2
  40120e:	b21b      	sxth	r3, r3
  401210:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
    /* We calculate it too. */
    uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
  401214:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  401218:	f107 030c 	add.w	r3, r7, #12
  40121c:	4611      	mov	r1, r2
  40121e:	4618      	mov	r0, r3
  401220:	4b38      	ldr	r3, [pc, #224]	; (401304 <xmodem_handle_packet+0x1a0>)
  401222:	4798      	blx	r3
  401224:	4603      	mov	r3, r0
  401226:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    
    /* Communication error. */
    if (UART_OK != comm_status)
  40122a:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  40122e:	2b00      	cmp	r3, #0
  401230:	d005      	beq.n	40123e <xmodem_handle_packet+0xda>
    {
        status |= X_ERROR_UART;
  401232:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  401236:	f043 0304 	orr.w	r3, r3, #4
  40123a:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    /* Error handling and flashing. */
    if (X_OK == status)
  40123e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  401242:	2b00      	cmp	r3, #0
  401244:	d125      	bne.n	401292 <xmodem_handle_packet+0x12e>
    {
        if (xmodem_packet_number != received_packet_number[0u])
  401246:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
  40124a:	4b2f      	ldr	r3, [pc, #188]	; (401308 <xmodem_handle_packet+0x1a4>)
  40124c:	781b      	ldrb	r3, [r3, #0]
  40124e:	429a      	cmp	r2, r3
  401250:	d005      	beq.n	40125e <xmodem_handle_packet+0xfa>
        {
            /* Packet number counter mismatch. */
            status |= X_ERROR_NUMBER;
  401252:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  401256:	f043 0302 	orr.w	r3, r3, #2
  40125a:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
        if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
  40125e:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
  401262:	461a      	mov	r2, r3
  401264:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
  401268:	4413      	add	r3, r2
  40126a:	2bff      	cmp	r3, #255	; 0xff
  40126c:	d005      	beq.n	40127a <xmodem_handle_packet+0x116>
        {
            /* The sum of the packet number and packet number complement aren't 255. */
            /* The sum always has to be 255. */
            status |= X_ERROR_NUMBER;
  40126e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  401272:	f043 0302 	orr.w	r3, r3, #2
  401276:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
        if (crc_calculated != crc_received)
  40127a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
  40127e:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
  401282:	429a      	cmp	r2, r3
  401284:	d005      	beq.n	401292 <xmodem_handle_packet+0x12e>
        {
            /* The calculated and received CRC are different. */
            status |= X_ERROR_CRC;
  401286:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  40128a:	f043 0301 	orr.w	r3, r3, #1
  40128e:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
    }

    /* Do the actual flashing (if there weren't any errors). */
    if ((X_OK == status) && (FLASH_OK != Flash_Write(xmodem_actual_flash_address, (uint32_t*)&received_packet_data[0u], (uint32_t)size/FLASH_PAGE_SIZE)))
  401292:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  401296:	2b00      	cmp	r3, #0
  401298:	d114      	bne.n	4012c4 <xmodem_handle_packet+0x160>
  40129a:	4b1c      	ldr	r3, [pc, #112]	; (40130c <xmodem_handle_packet+0x1a8>)
  40129c:	6818      	ldr	r0, [r3, #0]
  40129e:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	; 0x414
  4012a2:	0a5b      	lsrs	r3, r3, #9
  4012a4:	b29b      	uxth	r3, r3
  4012a6:	461a      	mov	r2, r3
  4012a8:	f107 030c 	add.w	r3, r7, #12
  4012ac:	4619      	mov	r1, r3
  4012ae:	4b18      	ldr	r3, [pc, #96]	; (401310 <xmodem_handle_packet+0x1ac>)
  4012b0:	4798      	blx	r3
  4012b2:	4603      	mov	r3, r0
  4012b4:	2b00      	cmp	r3, #0
  4012b6:	d005      	beq.n	4012c4 <xmodem_handle_packet+0x160>
    {
        /* Flashing error. */
        status |= X_ERROR_FLASH;
  4012b8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  4012bc:	f043 0308 	orr.w	r3, r3, #8
  4012c0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    /* Raise the packet number and the address counters (if there weren't any errors). */
    if (X_OK == status)
  4012c4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  4012c8:	2b00      	cmp	r3, #0
  4012ca:	d10c      	bne.n	4012e6 <xmodem_handle_packet+0x182>
    {
        xmodem_packet_number++;
  4012cc:	4b0e      	ldr	r3, [pc, #56]	; (401308 <xmodem_handle_packet+0x1a4>)
  4012ce:	781b      	ldrb	r3, [r3, #0]
  4012d0:	3301      	adds	r3, #1
  4012d2:	b2da      	uxtb	r2, r3
  4012d4:	4b0c      	ldr	r3, [pc, #48]	; (401308 <xmodem_handle_packet+0x1a4>)
  4012d6:	701a      	strb	r2, [r3, #0]
        xmodem_actual_flash_address += size;
  4012d8:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  4012dc:	4b0b      	ldr	r3, [pc, #44]	; (40130c <xmodem_handle_packet+0x1a8>)
  4012de:	681b      	ldr	r3, [r3, #0]
  4012e0:	4413      	add	r3, r2
  4012e2:	4a0a      	ldr	r2, [pc, #40]	; (40130c <xmodem_handle_packet+0x1a8>)
  4012e4:	6013      	str	r3, [r2, #0]
    }
    
    Uart_Buffer_Length = 0;
  4012e6:	4b0b      	ldr	r3, [pc, #44]	; (401314 <xmodem_handle_packet+0x1b0>)
  4012e8:	2200      	movs	r2, #0
  4012ea:	801a      	strh	r2, [r3, #0]
	Uart_Packet_Received_Flag = 0;
  4012ec:	4b0a      	ldr	r3, [pc, #40]	; (401318 <xmodem_handle_packet+0x1b4>)
  4012ee:	2200      	movs	r2, #0
  4012f0:	701a      	strb	r2, [r3, #0]
    return status;
  4012f2:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
  4012f6:	4618      	mov	r0, r3
  4012f8:	f507 6783 	add.w	r7, r7, #1048	; 0x418
  4012fc:	46bd      	mov	sp, r7
  4012fe:	bd80      	pop	{r7, pc}
  401300:	00400c31 	.word	0x00400c31
  401304:	004010f1 	.word	0x004010f1
  401308:	2000010a 	.word	0x2000010a
  40130c:	20000b70 	.word	0x20000b70
  401310:	00402e39 	.word	0x00402e39
  401314:	20003032 	.word	0x20003032
  401318:	20003030 	.word	0x20003030

0040131c <xmodem_error_handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number)
{
  40131c:	b580      	push	{r7, lr}
  40131e:	b084      	sub	sp, #16
  401320:	af00      	add	r7, sp, #0
  401322:	6078      	str	r0, [r7, #4]
  401324:	460b      	mov	r3, r1
  401326:	70fb      	strb	r3, [r7, #3]
    xmodem_status status = X_OK;
  401328:	2300      	movs	r3, #0
  40132a:	73fb      	strb	r3, [r7, #15]
    /* Raise the error counter. */
    (*error_number)++;
  40132c:	687b      	ldr	r3, [r7, #4]
  40132e:	781b      	ldrb	r3, [r3, #0]
  401330:	3301      	adds	r3, #1
  401332:	b2da      	uxtb	r2, r3
  401334:	687b      	ldr	r3, [r7, #4]
  401336:	701a      	strb	r2, [r3, #0]
    /* If the counter reached the max value, then abort. */
    if ((*error_number) >= max_error_number)
  401338:	687b      	ldr	r3, [r7, #4]
  40133a:	781b      	ldrb	r3, [r3, #0]
  40133c:	78fa      	ldrb	r2, [r7, #3]
  40133e:	429a      	cmp	r2, r3
  401340:	d808      	bhi.n	401354 <xmodem_error_handler+0x38>
    {
        /* Graceful abort. */
        (void)Uart_Transmit(X_CAN);
  401342:	2018      	movs	r0, #24
  401344:	4b08      	ldr	r3, [pc, #32]	; (401368 <xmodem_error_handler+0x4c>)
  401346:	4798      	blx	r3
        (void)Uart_Transmit(X_CAN);
  401348:	2018      	movs	r0, #24
  40134a:	4b07      	ldr	r3, [pc, #28]	; (401368 <xmodem_error_handler+0x4c>)
  40134c:	4798      	blx	r3
        status = X_ERROR;
  40134e:	23ff      	movs	r3, #255	; 0xff
  401350:	73fb      	strb	r3, [r7, #15]
  401352:	e004      	b.n	40135e <xmodem_error_handler+0x42>
    }
    /* Otherwise send a NAK for a repeat. */
    else
    {
        (void)Uart_Transmit(X_NAK);
  401354:	2015      	movs	r0, #21
  401356:	4b04      	ldr	r3, [pc, #16]	; (401368 <xmodem_error_handler+0x4c>)
  401358:	4798      	blx	r3
        status = X_OK;
  40135a:	2300      	movs	r3, #0
  40135c:	73fb      	strb	r3, [r7, #15]
    }
    return status;
  40135e:	7bfb      	ldrb	r3, [r7, #15]
  401360:	4618      	mov	r0, r3
  401362:	3710      	adds	r7, #16
  401364:	46bd      	mov	sp, r7
  401366:	bd80      	pop	{r7, pc}
  401368:	00400b29 	.word	0x00400b29

0040136c <osc_enable>:
{
  40136c:	b580      	push	{r7, lr}
  40136e:	b082      	sub	sp, #8
  401370:	af00      	add	r7, sp, #0
  401372:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401374:	687b      	ldr	r3, [r7, #4]
  401376:	2b07      	cmp	r3, #7
  401378:	d831      	bhi.n	4013de <osc_enable+0x72>
  40137a:	a201      	add	r2, pc, #4	; (adr r2, 401380 <osc_enable+0x14>)
  40137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401380:	004013dd 	.word	0x004013dd
  401384:	004013a1 	.word	0x004013a1
  401388:	004013a9 	.word	0x004013a9
  40138c:	004013b1 	.word	0x004013b1
  401390:	004013b9 	.word	0x004013b9
  401394:	004013c1 	.word	0x004013c1
  401398:	004013c9 	.word	0x004013c9
  40139c:	004013d3 	.word	0x004013d3
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4013a0:	2000      	movs	r0, #0
  4013a2:	4b11      	ldr	r3, [pc, #68]	; (4013e8 <osc_enable+0x7c>)
  4013a4:	4798      	blx	r3
		break;
  4013a6:	e01a      	b.n	4013de <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4013a8:	2001      	movs	r0, #1
  4013aa:	4b0f      	ldr	r3, [pc, #60]	; (4013e8 <osc_enable+0x7c>)
  4013ac:	4798      	blx	r3
		break;
  4013ae:	e016      	b.n	4013de <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4013b0:	2000      	movs	r0, #0
  4013b2:	4b0e      	ldr	r3, [pc, #56]	; (4013ec <osc_enable+0x80>)
  4013b4:	4798      	blx	r3
		break;
  4013b6:	e012      	b.n	4013de <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4013b8:	2010      	movs	r0, #16
  4013ba:	4b0c      	ldr	r3, [pc, #48]	; (4013ec <osc_enable+0x80>)
  4013bc:	4798      	blx	r3
		break;
  4013be:	e00e      	b.n	4013de <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4013c0:	2020      	movs	r0, #32
  4013c2:	4b0a      	ldr	r3, [pc, #40]	; (4013ec <osc_enable+0x80>)
  4013c4:	4798      	blx	r3
		break;
  4013c6:	e00a      	b.n	4013de <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4013c8:	213e      	movs	r1, #62	; 0x3e
  4013ca:	2000      	movs	r0, #0
  4013cc:	4b08      	ldr	r3, [pc, #32]	; (4013f0 <osc_enable+0x84>)
  4013ce:	4798      	blx	r3
		break;
  4013d0:	e005      	b.n	4013de <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4013d2:	213e      	movs	r1, #62	; 0x3e
  4013d4:	2001      	movs	r0, #1
  4013d6:	4b06      	ldr	r3, [pc, #24]	; (4013f0 <osc_enable+0x84>)
  4013d8:	4798      	blx	r3
		break;
  4013da:	e000      	b.n	4013de <osc_enable+0x72>
		break;
  4013dc:	bf00      	nop
}
  4013de:	bf00      	nop
  4013e0:	3708      	adds	r7, #8
  4013e2:	46bd      	mov	sp, r7
  4013e4:	bd80      	pop	{r7, pc}
  4013e6:	bf00      	nop
  4013e8:	0040218d 	.word	0x0040218d
  4013ec:	004021f9 	.word	0x004021f9
  4013f0:	00402269 	.word	0x00402269

004013f4 <osc_is_ready>:
{
  4013f4:	b580      	push	{r7, lr}
  4013f6:	b082      	sub	sp, #8
  4013f8:	af00      	add	r7, sp, #0
  4013fa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4013fc:	687b      	ldr	r3, [r7, #4]
  4013fe:	2b07      	cmp	r3, #7
  401400:	d826      	bhi.n	401450 <osc_is_ready+0x5c>
  401402:	a201      	add	r2, pc, #4	; (adr r2, 401408 <osc_is_ready+0x14>)
  401404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401408:	00401429 	.word	0x00401429
  40140c:	0040142d 	.word	0x0040142d
  401410:	0040142d 	.word	0x0040142d
  401414:	0040143f 	.word	0x0040143f
  401418:	0040143f 	.word	0x0040143f
  40141c:	0040143f 	.word	0x0040143f
  401420:	0040143f 	.word	0x0040143f
  401424:	0040143f 	.word	0x0040143f
		return 1;
  401428:	2301      	movs	r3, #1
  40142a:	e012      	b.n	401452 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  40142c:	4b0b      	ldr	r3, [pc, #44]	; (40145c <osc_is_ready+0x68>)
  40142e:	4798      	blx	r3
  401430:	4603      	mov	r3, r0
  401432:	2b00      	cmp	r3, #0
  401434:	bf14      	ite	ne
  401436:	2301      	movne	r3, #1
  401438:	2300      	moveq	r3, #0
  40143a:	b2db      	uxtb	r3, r3
  40143c:	e009      	b.n	401452 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40143e:	4b08      	ldr	r3, [pc, #32]	; (401460 <osc_is_ready+0x6c>)
  401440:	4798      	blx	r3
  401442:	4603      	mov	r3, r0
  401444:	2b00      	cmp	r3, #0
  401446:	bf14      	ite	ne
  401448:	2301      	movne	r3, #1
  40144a:	2300      	moveq	r3, #0
  40144c:	b2db      	uxtb	r3, r3
  40144e:	e000      	b.n	401452 <osc_is_ready+0x5e>
	return 0;
  401450:	2300      	movs	r3, #0
}
  401452:	4618      	mov	r0, r3
  401454:	3708      	adds	r7, #8
  401456:	46bd      	mov	sp, r7
  401458:	bd80      	pop	{r7, pc}
  40145a:	bf00      	nop
  40145c:	004021c5 	.word	0x004021c5
  401460:	004022e1 	.word	0x004022e1

00401464 <osc_get_rate>:
{
  401464:	b480      	push	{r7}
  401466:	b083      	sub	sp, #12
  401468:	af00      	add	r7, sp, #0
  40146a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40146c:	687b      	ldr	r3, [r7, #4]
  40146e:	2b07      	cmp	r3, #7
  401470:	d825      	bhi.n	4014be <osc_get_rate+0x5a>
  401472:	a201      	add	r2, pc, #4	; (adr r2, 401478 <osc_get_rate+0x14>)
  401474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401478:	00401499 	.word	0x00401499
  40147c:	0040149f 	.word	0x0040149f
  401480:	004014a5 	.word	0x004014a5
  401484:	004014ab 	.word	0x004014ab
  401488:	004014af 	.word	0x004014af
  40148c:	004014b3 	.word	0x004014b3
  401490:	004014b7 	.word	0x004014b7
  401494:	004014bb 	.word	0x004014bb
		return OSC_SLCK_32K_RC_HZ;
  401498:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40149c:	e010      	b.n	4014c0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40149e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014a2:	e00d      	b.n	4014c0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4014a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014a8:	e00a      	b.n	4014c0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4014aa:	4b08      	ldr	r3, [pc, #32]	; (4014cc <osc_get_rate+0x68>)
  4014ac:	e008      	b.n	4014c0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4014ae:	4b08      	ldr	r3, [pc, #32]	; (4014d0 <osc_get_rate+0x6c>)
  4014b0:	e006      	b.n	4014c0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4014b2:	4b08      	ldr	r3, [pc, #32]	; (4014d4 <osc_get_rate+0x70>)
  4014b4:	e004      	b.n	4014c0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4014b6:	4b07      	ldr	r3, [pc, #28]	; (4014d4 <osc_get_rate+0x70>)
  4014b8:	e002      	b.n	4014c0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4014ba:	4b06      	ldr	r3, [pc, #24]	; (4014d4 <osc_get_rate+0x70>)
  4014bc:	e000      	b.n	4014c0 <osc_get_rate+0x5c>
	return 0;
  4014be:	2300      	movs	r3, #0
}
  4014c0:	4618      	mov	r0, r3
  4014c2:	370c      	adds	r7, #12
  4014c4:	46bd      	mov	sp, r7
  4014c6:	bc80      	pop	{r7}
  4014c8:	4770      	bx	lr
  4014ca:	bf00      	nop
  4014cc:	003d0900 	.word	0x003d0900
  4014d0:	007a1200 	.word	0x007a1200
  4014d4:	00b71b00 	.word	0x00b71b00

004014d8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4014d8:	b580      	push	{r7, lr}
  4014da:	b082      	sub	sp, #8
  4014dc:	af00      	add	r7, sp, #0
  4014de:	4603      	mov	r3, r0
  4014e0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4014e2:	bf00      	nop
  4014e4:	79fb      	ldrb	r3, [r7, #7]
  4014e6:	4618      	mov	r0, r3
  4014e8:	4b05      	ldr	r3, [pc, #20]	; (401500 <osc_wait_ready+0x28>)
  4014ea:	4798      	blx	r3
  4014ec:	4603      	mov	r3, r0
  4014ee:	f083 0301 	eor.w	r3, r3, #1
  4014f2:	b2db      	uxtb	r3, r3
  4014f4:	2b00      	cmp	r3, #0
  4014f6:	d1f5      	bne.n	4014e4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4014f8:	bf00      	nop
  4014fa:	3708      	adds	r7, #8
  4014fc:	46bd      	mov	sp, r7
  4014fe:	bd80      	pop	{r7, pc}
  401500:	004013f5 	.word	0x004013f5

00401504 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401504:	b580      	push	{r7, lr}
  401506:	b086      	sub	sp, #24
  401508:	af00      	add	r7, sp, #0
  40150a:	60f8      	str	r0, [r7, #12]
  40150c:	607a      	str	r2, [r7, #4]
  40150e:	603b      	str	r3, [r7, #0]
  401510:	460b      	mov	r3, r1
  401512:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401514:	7afb      	ldrb	r3, [r7, #11]
  401516:	4618      	mov	r0, r3
  401518:	4b0d      	ldr	r3, [pc, #52]	; (401550 <pll_config_init+0x4c>)
  40151a:	4798      	blx	r3
  40151c:	4602      	mov	r2, r0
  40151e:	687b      	ldr	r3, [r7, #4]
  401520:	fbb2 f3f3 	udiv	r3, r2, r3
  401524:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401526:	697b      	ldr	r3, [r7, #20]
  401528:	683a      	ldr	r2, [r7, #0]
  40152a:	fb02 f303 	mul.w	r3, r2, r3
  40152e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401530:	683b      	ldr	r3, [r7, #0]
  401532:	3b01      	subs	r3, #1
  401534:	041a      	lsls	r2, r3, #16
  401536:	4b07      	ldr	r3, [pc, #28]	; (401554 <pll_config_init+0x50>)
  401538:	4013      	ands	r3, r2
  40153a:	687a      	ldr	r2, [r7, #4]
  40153c:	b2d2      	uxtb	r2, r2
  40153e:	4313      	orrs	r3, r2
  401540:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  401544:	68fb      	ldr	r3, [r7, #12]
  401546:	601a      	str	r2, [r3, #0]
}
  401548:	bf00      	nop
  40154a:	3718      	adds	r7, #24
  40154c:	46bd      	mov	sp, r7
  40154e:	bd80      	pop	{r7, pc}
  401550:	00401465 	.word	0x00401465
  401554:	07ff0000 	.word	0x07ff0000

00401558 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401558:	b580      	push	{r7, lr}
  40155a:	b082      	sub	sp, #8
  40155c:	af00      	add	r7, sp, #0
  40155e:	6078      	str	r0, [r7, #4]
  401560:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401562:	683b      	ldr	r3, [r7, #0]
  401564:	2b00      	cmp	r3, #0
  401566:	d108      	bne.n	40157a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401568:	4b09      	ldr	r3, [pc, #36]	; (401590 <pll_enable+0x38>)
  40156a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40156c:	4a09      	ldr	r2, [pc, #36]	; (401594 <pll_enable+0x3c>)
  40156e:	687b      	ldr	r3, [r7, #4]
  401570:	681b      	ldr	r3, [r3, #0]
  401572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401576:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401578:	e005      	b.n	401586 <pll_enable+0x2e>
		pmc_disable_pllbck();
  40157a:	4b07      	ldr	r3, [pc, #28]	; (401598 <pll_enable+0x40>)
  40157c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40157e:	4a05      	ldr	r2, [pc, #20]	; (401594 <pll_enable+0x3c>)
  401580:	687b      	ldr	r3, [r7, #4]
  401582:	681b      	ldr	r3, [r3, #0]
  401584:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  401586:	bf00      	nop
  401588:	3708      	adds	r7, #8
  40158a:	46bd      	mov	sp, r7
  40158c:	bd80      	pop	{r7, pc}
  40158e:	bf00      	nop
  401590:	004022f9 	.word	0x004022f9
  401594:	400e0400 	.word	0x400e0400
  401598:	00402329 	.word	0x00402329

0040159c <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40159c:	b580      	push	{r7, lr}
  40159e:	b082      	sub	sp, #8
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	2b00      	cmp	r3, #0
  4015a8:	d103      	bne.n	4015b2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4015aa:	4b05      	ldr	r3, [pc, #20]	; (4015c0 <pll_is_locked+0x24>)
  4015ac:	4798      	blx	r3
  4015ae:	4603      	mov	r3, r0
  4015b0:	e002      	b.n	4015b8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4015b2:	4b04      	ldr	r3, [pc, #16]	; (4015c4 <pll_is_locked+0x28>)
  4015b4:	4798      	blx	r3
  4015b6:	4603      	mov	r3, r0
	}
}
  4015b8:	4618      	mov	r0, r3
  4015ba:	3708      	adds	r7, #8
  4015bc:	46bd      	mov	sp, r7
  4015be:	bd80      	pop	{r7, pc}
  4015c0:	00402311 	.word	0x00402311
  4015c4:	00402341 	.word	0x00402341

004015c8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4015c8:	b580      	push	{r7, lr}
  4015ca:	b082      	sub	sp, #8
  4015cc:	af00      	add	r7, sp, #0
  4015ce:	4603      	mov	r3, r0
  4015d0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4015d2:	79fb      	ldrb	r3, [r7, #7]
  4015d4:	3b03      	subs	r3, #3
  4015d6:	2b04      	cmp	r3, #4
  4015d8:	d808      	bhi.n	4015ec <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4015da:	79fb      	ldrb	r3, [r7, #7]
  4015dc:	4618      	mov	r0, r3
  4015de:	4b06      	ldr	r3, [pc, #24]	; (4015f8 <pll_enable_source+0x30>)
  4015e0:	4798      	blx	r3
		osc_wait_ready(e_src);
  4015e2:	79fb      	ldrb	r3, [r7, #7]
  4015e4:	4618      	mov	r0, r3
  4015e6:	4b05      	ldr	r3, [pc, #20]	; (4015fc <pll_enable_source+0x34>)
  4015e8:	4798      	blx	r3
		break;
  4015ea:	e000      	b.n	4015ee <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4015ec:	bf00      	nop
	}
}
  4015ee:	bf00      	nop
  4015f0:	3708      	adds	r7, #8
  4015f2:	46bd      	mov	sp, r7
  4015f4:	bd80      	pop	{r7, pc}
  4015f6:	bf00      	nop
  4015f8:	0040136d 	.word	0x0040136d
  4015fc:	004014d9 	.word	0x004014d9

00401600 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401600:	b580      	push	{r7, lr}
  401602:	b082      	sub	sp, #8
  401604:	af00      	add	r7, sp, #0
  401606:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401608:	bf00      	nop
  40160a:	6878      	ldr	r0, [r7, #4]
  40160c:	4b04      	ldr	r3, [pc, #16]	; (401620 <pll_wait_for_lock+0x20>)
  40160e:	4798      	blx	r3
  401610:	4603      	mov	r3, r0
  401612:	2b00      	cmp	r3, #0
  401614:	d0f9      	beq.n	40160a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401616:	2300      	movs	r3, #0
}
  401618:	4618      	mov	r0, r3
  40161a:	3708      	adds	r7, #8
  40161c:	46bd      	mov	sp, r7
  40161e:	bd80      	pop	{r7, pc}
  401620:	0040159d 	.word	0x0040159d

00401624 <sysclk_get_main_hz>:
{
  401624:	b580      	push	{r7, lr}
  401626:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401628:	2006      	movs	r0, #6
  40162a:	4b04      	ldr	r3, [pc, #16]	; (40163c <sysclk_get_main_hz+0x18>)
  40162c:	4798      	blx	r3
  40162e:	4602      	mov	r2, r0
  401630:	4613      	mov	r3, r2
  401632:	009b      	lsls	r3, r3, #2
  401634:	4413      	add	r3, r2
  401636:	009b      	lsls	r3, r3, #2
}
  401638:	4618      	mov	r0, r3
  40163a:	bd80      	pop	{r7, pc}
  40163c:	00401465 	.word	0x00401465

00401640 <sysclk_get_cpu_hz>:
{
  401640:	b580      	push	{r7, lr}
  401642:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401644:	4b02      	ldr	r3, [pc, #8]	; (401650 <sysclk_get_cpu_hz+0x10>)
  401646:	4798      	blx	r3
  401648:	4603      	mov	r3, r0
  40164a:	085b      	lsrs	r3, r3, #1
}
  40164c:	4618      	mov	r0, r3
  40164e:	bd80      	pop	{r7, pc}
  401650:	00401625 	.word	0x00401625

00401654 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401654:	b590      	push	{r4, r7, lr}
  401656:	b083      	sub	sp, #12
  401658:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40165a:	4811      	ldr	r0, [pc, #68]	; (4016a0 <sysclk_init+0x4c>)
  40165c:	4b11      	ldr	r3, [pc, #68]	; (4016a4 <sysclk_init+0x50>)
  40165e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401660:	2006      	movs	r0, #6
  401662:	4b11      	ldr	r3, [pc, #68]	; (4016a8 <sysclk_init+0x54>)
  401664:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401666:	1d38      	adds	r0, r7, #4
  401668:	2314      	movs	r3, #20
  40166a:	2201      	movs	r2, #1
  40166c:	2106      	movs	r1, #6
  40166e:	4c0f      	ldr	r4, [pc, #60]	; (4016ac <sysclk_init+0x58>)
  401670:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401672:	1d3b      	adds	r3, r7, #4
  401674:	2100      	movs	r1, #0
  401676:	4618      	mov	r0, r3
  401678:	4b0d      	ldr	r3, [pc, #52]	; (4016b0 <sysclk_init+0x5c>)
  40167a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40167c:	2000      	movs	r0, #0
  40167e:	4b0d      	ldr	r3, [pc, #52]	; (4016b4 <sysclk_init+0x60>)
  401680:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401682:	2010      	movs	r0, #16
  401684:	4b0c      	ldr	r3, [pc, #48]	; (4016b8 <sysclk_init+0x64>)
  401686:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401688:	4b0c      	ldr	r3, [pc, #48]	; (4016bc <sysclk_init+0x68>)
  40168a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40168c:	4b0c      	ldr	r3, [pc, #48]	; (4016c0 <sysclk_init+0x6c>)
  40168e:	4798      	blx	r3
  401690:	4603      	mov	r3, r0
  401692:	4618      	mov	r0, r3
  401694:	4b03      	ldr	r3, [pc, #12]	; (4016a4 <sysclk_init+0x50>)
  401696:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401698:	bf00      	nop
  40169a:	370c      	adds	r7, #12
  40169c:	46bd      	mov	sp, r7
  40169e:	bd90      	pop	{r4, r7, pc}
  4016a0:	07270e00 	.word	0x07270e00
  4016a4:	00402a19 	.word	0x00402a19
  4016a8:	004015c9 	.word	0x004015c9
  4016ac:	00401505 	.word	0x00401505
  4016b0:	00401559 	.word	0x00401559
  4016b4:	00401601 	.word	0x00401601
  4016b8:	0040210d 	.word	0x0040210d
  4016bc:	00402881 	.word	0x00402881
  4016c0:	00401641 	.word	0x00401641

004016c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4016c4:	b580      	push	{r7, lr}
  4016c6:	b086      	sub	sp, #24
  4016c8:	af00      	add	r7, sp, #0
  4016ca:	60f8      	str	r0, [r7, #12]
  4016cc:	60b9      	str	r1, [r7, #8]
  4016ce:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4016d0:	2300      	movs	r3, #0
  4016d2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4016d4:	68fb      	ldr	r3, [r7, #12]
  4016d6:	2b00      	cmp	r3, #0
  4016d8:	d012      	beq.n	401700 <_read+0x3c>
		return -1;
  4016da:	f04f 33ff 	mov.w	r3, #4294967295
  4016de:	e013      	b.n	401708 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4016e0:	4b0b      	ldr	r3, [pc, #44]	; (401710 <_read+0x4c>)
  4016e2:	681b      	ldr	r3, [r3, #0]
  4016e4:	4a0b      	ldr	r2, [pc, #44]	; (401714 <_read+0x50>)
  4016e6:	6812      	ldr	r2, [r2, #0]
  4016e8:	68b9      	ldr	r1, [r7, #8]
  4016ea:	4610      	mov	r0, r2
  4016ec:	4798      	blx	r3
		ptr++;
  4016ee:	68bb      	ldr	r3, [r7, #8]
  4016f0:	3301      	adds	r3, #1
  4016f2:	60bb      	str	r3, [r7, #8]
		nChars++;
  4016f4:	697b      	ldr	r3, [r7, #20]
  4016f6:	3301      	adds	r3, #1
  4016f8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  4016fa:	687b      	ldr	r3, [r7, #4]
  4016fc:	3b01      	subs	r3, #1
  4016fe:	607b      	str	r3, [r7, #4]
  401700:	687b      	ldr	r3, [r7, #4]
  401702:	2b00      	cmp	r3, #0
  401704:	dcec      	bgt.n	4016e0 <_read+0x1c>
	}
	return nChars;
  401706:	697b      	ldr	r3, [r7, #20]
}
  401708:	4618      	mov	r0, r3
  40170a:	3718      	adds	r7, #24
  40170c:	46bd      	mov	sp, r7
  40170e:	bd80      	pop	{r7, pc}
  401710:	20003034 	.word	0x20003034
  401714:	2000303c 	.word	0x2000303c

00401718 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  401718:	b580      	push	{r7, lr}
  40171a:	b086      	sub	sp, #24
  40171c:	af00      	add	r7, sp, #0
  40171e:	60f8      	str	r0, [r7, #12]
  401720:	60b9      	str	r1, [r7, #8]
  401722:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  401724:	2300      	movs	r3, #0
  401726:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  401728:	68fb      	ldr	r3, [r7, #12]
  40172a:	2b01      	cmp	r3, #1
  40172c:	d01e      	beq.n	40176c <_write+0x54>
  40172e:	68fb      	ldr	r3, [r7, #12]
  401730:	2b02      	cmp	r3, #2
  401732:	d01b      	beq.n	40176c <_write+0x54>
  401734:	68fb      	ldr	r3, [r7, #12]
  401736:	2b03      	cmp	r3, #3
  401738:	d018      	beq.n	40176c <_write+0x54>
		return -1;
  40173a:	f04f 33ff 	mov.w	r3, #4294967295
  40173e:	e019      	b.n	401774 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401740:	4b0e      	ldr	r3, [pc, #56]	; (40177c <_write+0x64>)
  401742:	681a      	ldr	r2, [r3, #0]
  401744:	4b0e      	ldr	r3, [pc, #56]	; (401780 <_write+0x68>)
  401746:	6818      	ldr	r0, [r3, #0]
  401748:	68bb      	ldr	r3, [r7, #8]
  40174a:	1c59      	adds	r1, r3, #1
  40174c:	60b9      	str	r1, [r7, #8]
  40174e:	781b      	ldrb	r3, [r3, #0]
  401750:	4619      	mov	r1, r3
  401752:	4790      	blx	r2
  401754:	4603      	mov	r3, r0
  401756:	2b00      	cmp	r3, #0
  401758:	da02      	bge.n	401760 <_write+0x48>
			return -1;
  40175a:	f04f 33ff 	mov.w	r3, #4294967295
  40175e:	e009      	b.n	401774 <_write+0x5c>
		}
		++nChars;
  401760:	697b      	ldr	r3, [r7, #20]
  401762:	3301      	adds	r3, #1
  401764:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  401766:	687b      	ldr	r3, [r7, #4]
  401768:	3b01      	subs	r3, #1
  40176a:	607b      	str	r3, [r7, #4]
  40176c:	687b      	ldr	r3, [r7, #4]
  40176e:	2b00      	cmp	r3, #0
  401770:	d1e6      	bne.n	401740 <_write+0x28>
	}
	return nChars;
  401772:	697b      	ldr	r3, [r7, #20]
}
  401774:	4618      	mov	r0, r3
  401776:	3718      	adds	r7, #24
  401778:	46bd      	mov	sp, r7
  40177a:	bd80      	pop	{r7, pc}
  40177c:	20003038 	.word	0x20003038
  401780:	2000303c 	.word	0x2000303c

00401784 <sysclk_enable_peripheral_clock>:
{
  401784:	b580      	push	{r7, lr}
  401786:	b082      	sub	sp, #8
  401788:	af00      	add	r7, sp, #0
  40178a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40178c:	6878      	ldr	r0, [r7, #4]
  40178e:	4b03      	ldr	r3, [pc, #12]	; (40179c <sysclk_enable_peripheral_clock+0x18>)
  401790:	4798      	blx	r3
}
  401792:	bf00      	nop
  401794:	3708      	adds	r7, #8
  401796:	46bd      	mov	sp, r7
  401798:	bd80      	pop	{r7, pc}
  40179a:	bf00      	nop
  40179c:	00402359 	.word	0x00402359

004017a0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4017a0:	b580      	push	{r7, lr}
  4017a2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4017a4:	200b      	movs	r0, #11
  4017a6:	4b05      	ldr	r3, [pc, #20]	; (4017bc <ioport_init+0x1c>)
  4017a8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4017aa:	200c      	movs	r0, #12
  4017ac:	4b03      	ldr	r3, [pc, #12]	; (4017bc <ioport_init+0x1c>)
  4017ae:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4017b0:	200d      	movs	r0, #13
  4017b2:	4b02      	ldr	r3, [pc, #8]	; (4017bc <ioport_init+0x1c>)
  4017b4:	4798      	blx	r3
	arch_ioport_init();
}
  4017b6:	bf00      	nop
  4017b8:	bd80      	pop	{r7, pc}
  4017ba:	bf00      	nop
  4017bc:	00401785 	.word	0x00401785

004017c0 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4017c0:	b480      	push	{r7}
  4017c2:	b08d      	sub	sp, #52	; 0x34
  4017c4:	af00      	add	r7, sp, #0
  4017c6:	6078      	str	r0, [r7, #4]
  4017c8:	6039      	str	r1, [r7, #0]
  4017ca:	687b      	ldr	r3, [r7, #4]
  4017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  4017ce:	683b      	ldr	r3, [r7, #0]
  4017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  4017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017d4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4017d8:	095a      	lsrs	r2, r3, #5
  4017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017dc:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4017de:	6a3b      	ldr	r3, [r7, #32]
  4017e0:	f003 031f 	and.w	r3, r3, #31
  4017e4:	2101      	movs	r1, #1
  4017e6:	fa01 f303 	lsl.w	r3, r1, r3
  4017ea:	61fa      	str	r2, [r7, #28]
  4017ec:	61bb      	str	r3, [r7, #24]
  4017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4017f0:	617b      	str	r3, [r7, #20]
  4017f2:	69fb      	ldr	r3, [r7, #28]
  4017f4:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4017f6:	693b      	ldr	r3, [r7, #16]
  4017f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4017fc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401800:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  401802:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  401804:	697b      	ldr	r3, [r7, #20]
  401806:	f003 0308 	and.w	r3, r3, #8
  40180a:	2b00      	cmp	r3, #0
  40180c:	d003      	beq.n	401816 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40180e:	68fb      	ldr	r3, [r7, #12]
  401810:	69ba      	ldr	r2, [r7, #24]
  401812:	665a      	str	r2, [r3, #100]	; 0x64
  401814:	e002      	b.n	40181c <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  401816:	68fb      	ldr	r3, [r7, #12]
  401818:	69ba      	ldr	r2, [r7, #24]
  40181a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  40181c:	697b      	ldr	r3, [r7, #20]
  40181e:	f003 0310 	and.w	r3, r3, #16
  401822:	2b00      	cmp	r3, #0
  401824:	d004      	beq.n	401830 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  401826:	68fb      	ldr	r3, [r7, #12]
  401828:	69ba      	ldr	r2, [r7, #24]
  40182a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40182e:	e003      	b.n	401838 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  401830:	68fb      	ldr	r3, [r7, #12]
  401832:	69ba      	ldr	r2, [r7, #24]
  401834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401838:	697b      	ldr	r3, [r7, #20]
  40183a:	f003 0320 	and.w	r3, r3, #32
  40183e:	2b00      	cmp	r3, #0
  401840:	d003      	beq.n	40184a <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401842:	68fb      	ldr	r3, [r7, #12]
  401844:	69ba      	ldr	r2, [r7, #24]
  401846:	651a      	str	r2, [r3, #80]	; 0x50
  401848:	e002      	b.n	401850 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  40184a:	68fb      	ldr	r3, [r7, #12]
  40184c:	69ba      	ldr	r2, [r7, #24]
  40184e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401850:	697b      	ldr	r3, [r7, #20]
  401852:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401856:	2b00      	cmp	r3, #0
  401858:	d003      	beq.n	401862 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  40185a:	68fb      	ldr	r3, [r7, #12]
  40185c:	69ba      	ldr	r2, [r7, #24]
  40185e:	621a      	str	r2, [r3, #32]
  401860:	e002      	b.n	401868 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  401862:	68fb      	ldr	r3, [r7, #12]
  401864:	69ba      	ldr	r2, [r7, #24]
  401866:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  401868:	697b      	ldr	r3, [r7, #20]
  40186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40186e:	2b00      	cmp	r3, #0
  401870:	d004      	beq.n	40187c <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  401872:	68fb      	ldr	r3, [r7, #12]
  401874:	69ba      	ldr	r2, [r7, #24]
  401876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40187a:	e003      	b.n	401884 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40187c:	68fb      	ldr	r3, [r7, #12]
  40187e:	69ba      	ldr	r2, [r7, #24]
  401880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401884:	697b      	ldr	r3, [r7, #20]
  401886:	f003 0301 	and.w	r3, r3, #1
  40188a:	2b00      	cmp	r3, #0
  40188c:	d006      	beq.n	40189c <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40188e:	68fb      	ldr	r3, [r7, #12]
  401890:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401892:	69bb      	ldr	r3, [r7, #24]
  401894:	431a      	orrs	r2, r3
  401896:	68fb      	ldr	r3, [r7, #12]
  401898:	671a      	str	r2, [r3, #112]	; 0x70
  40189a:	e006      	b.n	4018aa <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40189c:	68fb      	ldr	r3, [r7, #12]
  40189e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4018a0:	69bb      	ldr	r3, [r7, #24]
  4018a2:	43db      	mvns	r3, r3
  4018a4:	401a      	ands	r2, r3
  4018a6:	68fb      	ldr	r3, [r7, #12]
  4018a8:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4018aa:	697b      	ldr	r3, [r7, #20]
  4018ac:	f003 0302 	and.w	r3, r3, #2
  4018b0:	2b00      	cmp	r3, #0
  4018b2:	d006      	beq.n	4018c2 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4018b4:	68fb      	ldr	r3, [r7, #12]
  4018b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4018b8:	69bb      	ldr	r3, [r7, #24]
  4018ba:	431a      	orrs	r2, r3
  4018bc:	68fb      	ldr	r3, [r7, #12]
  4018be:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4018c0:	e006      	b.n	4018d0 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4018c2:	68fb      	ldr	r3, [r7, #12]
  4018c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4018c6:	69bb      	ldr	r3, [r7, #24]
  4018c8:	43db      	mvns	r3, r3
  4018ca:	401a      	ands	r2, r3
  4018cc:	68fb      	ldr	r3, [r7, #12]
  4018ce:	675a      	str	r2, [r3, #116]	; 0x74
  4018d0:	bf00      	nop
  4018d2:	3734      	adds	r7, #52	; 0x34
  4018d4:	46bd      	mov	sp, r7
  4018d6:	bc80      	pop	{r7}
  4018d8:	4770      	bx	lr

004018da <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4018da:	b480      	push	{r7}
  4018dc:	b08d      	sub	sp, #52	; 0x34
  4018de:	af00      	add	r7, sp, #0
  4018e0:	6078      	str	r0, [r7, #4]
  4018e2:	460b      	mov	r3, r1
  4018e4:	70fb      	strb	r3, [r7, #3]
  4018e6:	687b      	ldr	r3, [r7, #4]
  4018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4018ea:	78fb      	ldrb	r3, [r7, #3]
  4018ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4018f2:	627b      	str	r3, [r7, #36]	; 0x24
  4018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4018f6:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4018f8:	6a3b      	ldr	r3, [r7, #32]
  4018fa:	095b      	lsrs	r3, r3, #5
  4018fc:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4018fe:	69fb      	ldr	r3, [r7, #28]
  401900:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401904:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401908:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40190a:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40190c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401910:	2b01      	cmp	r3, #1
  401912:	d109      	bne.n	401928 <ioport_set_pin_dir+0x4e>
  401914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401916:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401918:	697b      	ldr	r3, [r7, #20]
  40191a:	f003 031f 	and.w	r3, r3, #31
  40191e:	2201      	movs	r2, #1
  401920:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401922:	69bb      	ldr	r3, [r7, #24]
  401924:	611a      	str	r2, [r3, #16]
  401926:	e00c      	b.n	401942 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40192c:	2b00      	cmp	r3, #0
  40192e:	d108      	bne.n	401942 <ioport_set_pin_dir+0x68>
  401930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401932:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401934:	693b      	ldr	r3, [r7, #16]
  401936:	f003 031f 	and.w	r3, r3, #31
  40193a:	2201      	movs	r2, #1
  40193c:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40193e:	69bb      	ldr	r3, [r7, #24]
  401940:	615a      	str	r2, [r3, #20]
  401942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401944:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401946:	68fb      	ldr	r3, [r7, #12]
  401948:	f003 031f 	and.w	r3, r3, #31
  40194c:	2201      	movs	r2, #1
  40194e:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401950:	69bb      	ldr	r3, [r7, #24]
  401952:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401956:	bf00      	nop
  401958:	3734      	adds	r7, #52	; 0x34
  40195a:	46bd      	mov	sp, r7
  40195c:	bc80      	pop	{r7}
  40195e:	4770      	bx	lr

00401960 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401960:	b480      	push	{r7}
  401962:	b08b      	sub	sp, #44	; 0x2c
  401964:	af00      	add	r7, sp, #0
  401966:	6078      	str	r0, [r7, #4]
  401968:	460b      	mov	r3, r1
  40196a:	70fb      	strb	r3, [r7, #3]
  40196c:	687b      	ldr	r3, [r7, #4]
  40196e:	627b      	str	r3, [r7, #36]	; 0x24
  401970:	78fb      	ldrb	r3, [r7, #3]
  401972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401978:	61fb      	str	r3, [r7, #28]
  40197a:	69fb      	ldr	r3, [r7, #28]
  40197c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40197e:	69bb      	ldr	r3, [r7, #24]
  401980:	095b      	lsrs	r3, r3, #5
  401982:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401984:	697b      	ldr	r3, [r7, #20]
  401986:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40198a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40198e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401990:	613b      	str	r3, [r7, #16]

	if (level) {
  401992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401996:	2b00      	cmp	r3, #0
  401998:	d009      	beq.n	4019ae <ioport_set_pin_level+0x4e>
  40199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40199c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40199e:	68fb      	ldr	r3, [r7, #12]
  4019a0:	f003 031f 	and.w	r3, r3, #31
  4019a4:	2201      	movs	r2, #1
  4019a6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019a8:	693b      	ldr	r3, [r7, #16]
  4019aa:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4019ac:	e008      	b.n	4019c0 <ioport_set_pin_level+0x60>
  4019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019b0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4019b2:	68bb      	ldr	r3, [r7, #8]
  4019b4:	f003 031f 	and.w	r3, r3, #31
  4019b8:	2201      	movs	r2, #1
  4019ba:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4019bc:	693b      	ldr	r3, [r7, #16]
  4019be:	635a      	str	r2, [r3, #52]	; 0x34
  4019c0:	bf00      	nop
  4019c2:	372c      	adds	r7, #44	; 0x2c
  4019c4:	46bd      	mov	sp, r7
  4019c6:	bc80      	pop	{r7}
  4019c8:	4770      	bx	lr
	...

004019cc <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4019cc:	b580      	push	{r7, lr}
  4019ce:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4019d0:	4824      	ldr	r0, [pc, #144]	; (401a64 <board_init+0x98>)
  4019d2:	4b25      	ldr	r3, [pc, #148]	; (401a68 <board_init+0x9c>)
  4019d4:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  4019d6:	4b25      	ldr	r3, [pc, #148]	; (401a6c <board_init+0xa0>)
  4019d8:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  4019da:	2101      	movs	r1, #1
  4019dc:	2057      	movs	r0, #87	; 0x57
  4019de:	4b24      	ldr	r3, [pc, #144]	; (401a70 <board_init+0xa4>)
  4019e0:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  4019e2:	2101      	movs	r1, #1
  4019e4:	2057      	movs	r0, #87	; 0x57
  4019e6:	4b23      	ldr	r3, [pc, #140]	; (401a74 <board_init+0xa8>)
  4019e8:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  4019ea:	2100      	movs	r1, #0
  4019ec:	2002      	movs	r0, #2
  4019ee:	4b21      	ldr	r3, [pc, #132]	; (401a74 <board_init+0xa8>)
  4019f0:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  4019f2:	2108      	movs	r1, #8
  4019f4:	2002      	movs	r0, #2
  4019f6:	4b20      	ldr	r3, [pc, #128]	; (401a78 <board_init+0xac>)
  4019f8:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  4019fa:	2101      	movs	r1, #1
  4019fc:	2054      	movs	r0, #84	; 0x54
  4019fe:	4b1c      	ldr	r3, [pc, #112]	; (401a70 <board_init+0xa4>)
  401a00:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  401a02:	2101      	movs	r1, #1
  401a04:	2054      	movs	r0, #84	; 0x54
  401a06:	4b1b      	ldr	r3, [pc, #108]	; (401a74 <board_init+0xa8>)
  401a08:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  401a0a:	2101      	movs	r1, #1
  401a0c:	2010      	movs	r0, #16
  401a0e:	4b18      	ldr	r3, [pc, #96]	; (401a70 <board_init+0xa4>)
  401a10:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  401a12:	2101      	movs	r1, #1
  401a14:	2010      	movs	r0, #16
  401a16:	4b17      	ldr	r3, [pc, #92]	; (401a74 <board_init+0xa8>)
  401a18:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  401a1a:	2101      	movs	r1, #1
  401a1c:	2056      	movs	r0, #86	; 0x56
  401a1e:	4b14      	ldr	r3, [pc, #80]	; (401a70 <board_init+0xa4>)
  401a20:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  401a22:	2101      	movs	r1, #1
  401a24:	2056      	movs	r0, #86	; 0x56
  401a26:	4b13      	ldr	r3, [pc, #76]	; (401a74 <board_init+0xa8>)
  401a28:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401a2e:	210c      	movs	r1, #12
  401a30:	4812      	ldr	r0, [pc, #72]	; (401a7c <board_init+0xb0>)
  401a32:	4b13      	ldr	r3, [pc, #76]	; (401a80 <board_init+0xb4>)
  401a34:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  401a36:	4913      	ldr	r1, [pc, #76]	; (401a84 <board_init+0xb8>)
  401a38:	200c      	movs	r0, #12
  401a3a:	4b13      	ldr	r3, [pc, #76]	; (401a88 <board_init+0xbc>)
  401a3c:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  401a3e:	4911      	ldr	r1, [pc, #68]	; (401a84 <board_init+0xb8>)
  401a40:	200d      	movs	r0, #13
  401a42:	4b11      	ldr	r3, [pc, #68]	; (401a88 <board_init+0xbc>)
  401a44:	4798      	blx	r3
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  401a46:	490f      	ldr	r1, [pc, #60]	; (401a84 <board_init+0xb8>)
  401a48:	200e      	movs	r0, #14
  401a4a:	4b0f      	ldr	r3, [pc, #60]	; (401a88 <board_init+0xbc>)
  401a4c:	4798      	blx	r3
	 * Depending on the application requirements, the default PIN may not be available.
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */
#ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  401a4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401a52:	200b      	movs	r0, #11
  401a54:	4b0c      	ldr	r3, [pc, #48]	; (401a88 <board_init+0xbc>)
  401a56:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  401a58:	2108      	movs	r1, #8
  401a5a:	2002      	movs	r0, #2
  401a5c:	4b06      	ldr	r3, [pc, #24]	; (401a78 <board_init+0xac>)
  401a5e:	4798      	blx	r3

#endif



}
  401a60:	bf00      	nop
  401a62:	bd80      	pop	{r7, pc}
  401a64:	400e1450 	.word	0x400e1450
  401a68:	00402795 	.word	0x00402795
  401a6c:	004017a1 	.word	0x004017a1
  401a70:	00401961 	.word	0x00401961
  401a74:	004018db 	.word	0x004018db
  401a78:	004017c1 	.word	0x004017c1
  401a7c:	400e1000 	.word	0x400e1000
  401a80:	00401ea1 	.word	0x00401ea1
  401a84:	08000001 	.word	0x08000001
  401a88:	00401cf1 	.word	0x00401cf1

00401a8c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401a8c:	b480      	push	{r7}
  401a8e:	b085      	sub	sp, #20
  401a90:	af00      	add	r7, sp, #0
  401a92:	60f8      	str	r0, [r7, #12]
  401a94:	60b9      	str	r1, [r7, #8]
  401a96:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401a98:	687b      	ldr	r3, [r7, #4]
  401a9a:	2b00      	cmp	r3, #0
  401a9c:	d003      	beq.n	401aa6 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401a9e:	68fb      	ldr	r3, [r7, #12]
  401aa0:	68ba      	ldr	r2, [r7, #8]
  401aa2:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401aa4:	e002      	b.n	401aac <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401aa6:	68fb      	ldr	r3, [r7, #12]
  401aa8:	68ba      	ldr	r2, [r7, #8]
  401aaa:	661a      	str	r2, [r3, #96]	; 0x60
}
  401aac:	bf00      	nop
  401aae:	3714      	adds	r7, #20
  401ab0:	46bd      	mov	sp, r7
  401ab2:	bc80      	pop	{r7}
  401ab4:	4770      	bx	lr

00401ab6 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401ab6:	b480      	push	{r7}
  401ab8:	b087      	sub	sp, #28
  401aba:	af00      	add	r7, sp, #0
  401abc:	60f8      	str	r0, [r7, #12]
  401abe:	60b9      	str	r1, [r7, #8]
  401ac0:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401ac2:	68fb      	ldr	r3, [r7, #12]
  401ac4:	687a      	ldr	r2, [r7, #4]
  401ac6:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401ac8:	68bb      	ldr	r3, [r7, #8]
  401aca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401ace:	d04a      	beq.n	401b66 <pio_set_peripheral+0xb0>
  401ad0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401ad4:	d808      	bhi.n	401ae8 <pio_set_peripheral+0x32>
  401ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401ada:	d016      	beq.n	401b0a <pio_set_peripheral+0x54>
  401adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401ae0:	d02c      	beq.n	401b3c <pio_set_peripheral+0x86>
  401ae2:	2b00      	cmp	r3, #0
  401ae4:	d069      	beq.n	401bba <pio_set_peripheral+0x104>
  401ae6:	e064      	b.n	401bb2 <pio_set_peripheral+0xfc>
  401ae8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401aec:	d065      	beq.n	401bba <pio_set_peripheral+0x104>
  401aee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401af2:	d803      	bhi.n	401afc <pio_set_peripheral+0x46>
  401af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401af8:	d04a      	beq.n	401b90 <pio_set_peripheral+0xda>
  401afa:	e05a      	b.n	401bb2 <pio_set_peripheral+0xfc>
  401afc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401b00:	d05b      	beq.n	401bba <pio_set_peripheral+0x104>
  401b02:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401b06:	d058      	beq.n	401bba <pio_set_peripheral+0x104>
  401b08:	e053      	b.n	401bb2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b0a:	68fb      	ldr	r3, [r7, #12]
  401b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b0e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401b10:	68fb      	ldr	r3, [r7, #12]
  401b12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401b14:	687b      	ldr	r3, [r7, #4]
  401b16:	43d9      	mvns	r1, r3
  401b18:	697b      	ldr	r3, [r7, #20]
  401b1a:	400b      	ands	r3, r1
  401b1c:	401a      	ands	r2, r3
  401b1e:	68fb      	ldr	r3, [r7, #12]
  401b20:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401b22:	68fb      	ldr	r3, [r7, #12]
  401b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401b26:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401b28:	68fb      	ldr	r3, [r7, #12]
  401b2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b2c:	687b      	ldr	r3, [r7, #4]
  401b2e:	43d9      	mvns	r1, r3
  401b30:	697b      	ldr	r3, [r7, #20]
  401b32:	400b      	ands	r3, r1
  401b34:	401a      	ands	r2, r3
  401b36:	68fb      	ldr	r3, [r7, #12]
  401b38:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401b3a:	e03a      	b.n	401bb2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b3c:	68fb      	ldr	r3, [r7, #12]
  401b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b40:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401b42:	687a      	ldr	r2, [r7, #4]
  401b44:	697b      	ldr	r3, [r7, #20]
  401b46:	431a      	orrs	r2, r3
  401b48:	68fb      	ldr	r3, [r7, #12]
  401b4a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401b4c:	68fb      	ldr	r3, [r7, #12]
  401b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401b50:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401b52:	68fb      	ldr	r3, [r7, #12]
  401b54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b56:	687b      	ldr	r3, [r7, #4]
  401b58:	43d9      	mvns	r1, r3
  401b5a:	697b      	ldr	r3, [r7, #20]
  401b5c:	400b      	ands	r3, r1
  401b5e:	401a      	ands	r2, r3
  401b60:	68fb      	ldr	r3, [r7, #12]
  401b62:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401b64:	e025      	b.n	401bb2 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b66:	68fb      	ldr	r3, [r7, #12]
  401b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b6a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401b6c:	68fb      	ldr	r3, [r7, #12]
  401b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401b70:	687b      	ldr	r3, [r7, #4]
  401b72:	43d9      	mvns	r1, r3
  401b74:	697b      	ldr	r3, [r7, #20]
  401b76:	400b      	ands	r3, r1
  401b78:	401a      	ands	r2, r3
  401b7a:	68fb      	ldr	r3, [r7, #12]
  401b7c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401b7e:	68fb      	ldr	r3, [r7, #12]
  401b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401b82:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401b84:	687a      	ldr	r2, [r7, #4]
  401b86:	697b      	ldr	r3, [r7, #20]
  401b88:	431a      	orrs	r2, r3
  401b8a:	68fb      	ldr	r3, [r7, #12]
  401b8c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401b8e:	e010      	b.n	401bb2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401b90:	68fb      	ldr	r3, [r7, #12]
  401b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401b94:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401b96:	687a      	ldr	r2, [r7, #4]
  401b98:	697b      	ldr	r3, [r7, #20]
  401b9a:	431a      	orrs	r2, r3
  401b9c:	68fb      	ldr	r3, [r7, #12]
  401b9e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ba0:	68fb      	ldr	r3, [r7, #12]
  401ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401ba4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ba6:	687a      	ldr	r2, [r7, #4]
  401ba8:	697b      	ldr	r3, [r7, #20]
  401baa:	431a      	orrs	r2, r3
  401bac:	68fb      	ldr	r3, [r7, #12]
  401bae:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401bb0:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401bb2:	68fb      	ldr	r3, [r7, #12]
  401bb4:	687a      	ldr	r2, [r7, #4]
  401bb6:	605a      	str	r2, [r3, #4]
  401bb8:	e000      	b.n	401bbc <pio_set_peripheral+0x106>
		return;
  401bba:	bf00      	nop
}
  401bbc:	371c      	adds	r7, #28
  401bbe:	46bd      	mov	sp, r7
  401bc0:	bc80      	pop	{r7}
  401bc2:	4770      	bx	lr

00401bc4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401bc4:	b580      	push	{r7, lr}
  401bc6:	b084      	sub	sp, #16
  401bc8:	af00      	add	r7, sp, #0
  401bca:	60f8      	str	r0, [r7, #12]
  401bcc:	60b9      	str	r1, [r7, #8]
  401bce:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401bd0:	68b9      	ldr	r1, [r7, #8]
  401bd2:	68f8      	ldr	r0, [r7, #12]
  401bd4:	4b19      	ldr	r3, [pc, #100]	; (401c3c <pio_set_input+0x78>)
  401bd6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401bd8:	687b      	ldr	r3, [r7, #4]
  401bda:	f003 0301 	and.w	r3, r3, #1
  401bde:	461a      	mov	r2, r3
  401be0:	68b9      	ldr	r1, [r7, #8]
  401be2:	68f8      	ldr	r0, [r7, #12]
  401be4:	4b16      	ldr	r3, [pc, #88]	; (401c40 <pio_set_input+0x7c>)
  401be6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401be8:	687b      	ldr	r3, [r7, #4]
  401bea:	f003 030a 	and.w	r3, r3, #10
  401bee:	2b00      	cmp	r3, #0
  401bf0:	d003      	beq.n	401bfa <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	68ba      	ldr	r2, [r7, #8]
  401bf6:	621a      	str	r2, [r3, #32]
  401bf8:	e002      	b.n	401c00 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401bfa:	68fb      	ldr	r3, [r7, #12]
  401bfc:	68ba      	ldr	r2, [r7, #8]
  401bfe:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401c00:	687b      	ldr	r3, [r7, #4]
  401c02:	f003 0302 	and.w	r3, r3, #2
  401c06:	2b00      	cmp	r3, #0
  401c08:	d004      	beq.n	401c14 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401c0a:	68fb      	ldr	r3, [r7, #12]
  401c0c:	68ba      	ldr	r2, [r7, #8]
  401c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401c12:	e008      	b.n	401c26 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401c14:	687b      	ldr	r3, [r7, #4]
  401c16:	f003 0308 	and.w	r3, r3, #8
  401c1a:	2b00      	cmp	r3, #0
  401c1c:	d003      	beq.n	401c26 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401c1e:	68fb      	ldr	r3, [r7, #12]
  401c20:	68ba      	ldr	r2, [r7, #8]
  401c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401c26:	68fb      	ldr	r3, [r7, #12]
  401c28:	68ba      	ldr	r2, [r7, #8]
  401c2a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401c2c:	68fb      	ldr	r3, [r7, #12]
  401c2e:	68ba      	ldr	r2, [r7, #8]
  401c30:	601a      	str	r2, [r3, #0]
}
  401c32:	bf00      	nop
  401c34:	3710      	adds	r7, #16
  401c36:	46bd      	mov	sp, r7
  401c38:	bd80      	pop	{r7, pc}
  401c3a:	bf00      	nop
  401c3c:	00401ca9 	.word	0x00401ca9
  401c40:	00401a8d 	.word	0x00401a8d

00401c44 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401c44:	b580      	push	{r7, lr}
  401c46:	b084      	sub	sp, #16
  401c48:	af00      	add	r7, sp, #0
  401c4a:	60f8      	str	r0, [r7, #12]
  401c4c:	60b9      	str	r1, [r7, #8]
  401c4e:	607a      	str	r2, [r7, #4]
  401c50:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401c52:	68b9      	ldr	r1, [r7, #8]
  401c54:	68f8      	ldr	r0, [r7, #12]
  401c56:	4b12      	ldr	r3, [pc, #72]	; (401ca0 <pio_set_output+0x5c>)
  401c58:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401c5a:	69ba      	ldr	r2, [r7, #24]
  401c5c:	68b9      	ldr	r1, [r7, #8]
  401c5e:	68f8      	ldr	r0, [r7, #12]
  401c60:	4b10      	ldr	r3, [pc, #64]	; (401ca4 <pio_set_output+0x60>)
  401c62:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401c64:	683b      	ldr	r3, [r7, #0]
  401c66:	2b00      	cmp	r3, #0
  401c68:	d003      	beq.n	401c72 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401c6a:	68fb      	ldr	r3, [r7, #12]
  401c6c:	68ba      	ldr	r2, [r7, #8]
  401c6e:	651a      	str	r2, [r3, #80]	; 0x50
  401c70:	e002      	b.n	401c78 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401c72:	68fb      	ldr	r3, [r7, #12]
  401c74:	68ba      	ldr	r2, [r7, #8]
  401c76:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401c78:	687b      	ldr	r3, [r7, #4]
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	d003      	beq.n	401c86 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401c7e:	68fb      	ldr	r3, [r7, #12]
  401c80:	68ba      	ldr	r2, [r7, #8]
  401c82:	631a      	str	r2, [r3, #48]	; 0x30
  401c84:	e002      	b.n	401c8c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401c86:	68fb      	ldr	r3, [r7, #12]
  401c88:	68ba      	ldr	r2, [r7, #8]
  401c8a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401c8c:	68fb      	ldr	r3, [r7, #12]
  401c8e:	68ba      	ldr	r2, [r7, #8]
  401c90:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401c92:	68fb      	ldr	r3, [r7, #12]
  401c94:	68ba      	ldr	r2, [r7, #8]
  401c96:	601a      	str	r2, [r3, #0]
}
  401c98:	bf00      	nop
  401c9a:	3710      	adds	r7, #16
  401c9c:	46bd      	mov	sp, r7
  401c9e:	bd80      	pop	{r7, pc}
  401ca0:	00401ca9 	.word	0x00401ca9
  401ca4:	00401a8d 	.word	0x00401a8d

00401ca8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401ca8:	b480      	push	{r7}
  401caa:	b083      	sub	sp, #12
  401cac:	af00      	add	r7, sp, #0
  401cae:	6078      	str	r0, [r7, #4]
  401cb0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401cb2:	687b      	ldr	r3, [r7, #4]
  401cb4:	683a      	ldr	r2, [r7, #0]
  401cb6:	645a      	str	r2, [r3, #68]	; 0x44
}
  401cb8:	bf00      	nop
  401cba:	370c      	adds	r7, #12
  401cbc:	46bd      	mov	sp, r7
  401cbe:	bc80      	pop	{r7}
  401cc0:	4770      	bx	lr

00401cc2 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401cc2:	b480      	push	{r7}
  401cc4:	b083      	sub	sp, #12
  401cc6:	af00      	add	r7, sp, #0
  401cc8:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401cca:	687b      	ldr	r3, [r7, #4]
  401ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401cce:	4618      	mov	r0, r3
  401cd0:	370c      	adds	r7, #12
  401cd2:	46bd      	mov	sp, r7
  401cd4:	bc80      	pop	{r7}
  401cd6:	4770      	bx	lr

00401cd8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401cd8:	b480      	push	{r7}
  401cda:	b083      	sub	sp, #12
  401cdc:	af00      	add	r7, sp, #0
  401cde:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401ce0:	687b      	ldr	r3, [r7, #4]
  401ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401ce4:	4618      	mov	r0, r3
  401ce6:	370c      	adds	r7, #12
  401ce8:	46bd      	mov	sp, r7
  401cea:	bc80      	pop	{r7}
  401cec:	4770      	bx	lr
	...

00401cf0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401cf0:	b590      	push	{r4, r7, lr}
  401cf2:	b087      	sub	sp, #28
  401cf4:	af02      	add	r7, sp, #8
  401cf6:	6078      	str	r0, [r7, #4]
  401cf8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401cfa:	6878      	ldr	r0, [r7, #4]
  401cfc:	4b63      	ldr	r3, [pc, #396]	; (401e8c <pio_configure_pin+0x19c>)
  401cfe:	4798      	blx	r3
  401d00:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401d02:	683b      	ldr	r3, [r7, #0]
  401d04:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d0c:	d067      	beq.n	401dde <pio_configure_pin+0xee>
  401d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d12:	d809      	bhi.n	401d28 <pio_configure_pin+0x38>
  401d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d18:	d02b      	beq.n	401d72 <pio_configure_pin+0x82>
  401d1a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d1e:	d043      	beq.n	401da8 <pio_configure_pin+0xb8>
  401d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d24:	d00a      	beq.n	401d3c <pio_configure_pin+0x4c>
  401d26:	e0a9      	b.n	401e7c <pio_configure_pin+0x18c>
  401d28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d2c:	d07e      	beq.n	401e2c <pio_configure_pin+0x13c>
  401d2e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d32:	d07b      	beq.n	401e2c <pio_configure_pin+0x13c>
  401d34:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d38:	d06c      	beq.n	401e14 <pio_configure_pin+0x124>
  401d3a:	e09f      	b.n	401e7c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401d3c:	687b      	ldr	r3, [r7, #4]
  401d3e:	f003 031f 	and.w	r3, r3, #31
  401d42:	2201      	movs	r2, #1
  401d44:	fa02 f303 	lsl.w	r3, r2, r3
  401d48:	461a      	mov	r2, r3
  401d4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d4e:	68f8      	ldr	r0, [r7, #12]
  401d50:	4b4f      	ldr	r3, [pc, #316]	; (401e90 <pio_configure_pin+0x1a0>)
  401d52:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401d54:	687b      	ldr	r3, [r7, #4]
  401d56:	f003 031f 	and.w	r3, r3, #31
  401d5a:	2201      	movs	r2, #1
  401d5c:	fa02 f303 	lsl.w	r3, r2, r3
  401d60:	4619      	mov	r1, r3
  401d62:	683b      	ldr	r3, [r7, #0]
  401d64:	f003 0301 	and.w	r3, r3, #1
  401d68:	461a      	mov	r2, r3
  401d6a:	68f8      	ldr	r0, [r7, #12]
  401d6c:	4b49      	ldr	r3, [pc, #292]	; (401e94 <pio_configure_pin+0x1a4>)
  401d6e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401d70:	e086      	b.n	401e80 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401d72:	687b      	ldr	r3, [r7, #4]
  401d74:	f003 031f 	and.w	r3, r3, #31
  401d78:	2201      	movs	r2, #1
  401d7a:	fa02 f303 	lsl.w	r3, r2, r3
  401d7e:	461a      	mov	r2, r3
  401d80:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d84:	68f8      	ldr	r0, [r7, #12]
  401d86:	4b42      	ldr	r3, [pc, #264]	; (401e90 <pio_configure_pin+0x1a0>)
  401d88:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401d8a:	687b      	ldr	r3, [r7, #4]
  401d8c:	f003 031f 	and.w	r3, r3, #31
  401d90:	2201      	movs	r2, #1
  401d92:	fa02 f303 	lsl.w	r3, r2, r3
  401d96:	4619      	mov	r1, r3
  401d98:	683b      	ldr	r3, [r7, #0]
  401d9a:	f003 0301 	and.w	r3, r3, #1
  401d9e:	461a      	mov	r2, r3
  401da0:	68f8      	ldr	r0, [r7, #12]
  401da2:	4b3c      	ldr	r3, [pc, #240]	; (401e94 <pio_configure_pin+0x1a4>)
  401da4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401da6:	e06b      	b.n	401e80 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401da8:	687b      	ldr	r3, [r7, #4]
  401daa:	f003 031f 	and.w	r3, r3, #31
  401dae:	2201      	movs	r2, #1
  401db0:	fa02 f303 	lsl.w	r3, r2, r3
  401db4:	461a      	mov	r2, r3
  401db6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401dba:	68f8      	ldr	r0, [r7, #12]
  401dbc:	4b34      	ldr	r3, [pc, #208]	; (401e90 <pio_configure_pin+0x1a0>)
  401dbe:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401dc0:	687b      	ldr	r3, [r7, #4]
  401dc2:	f003 031f 	and.w	r3, r3, #31
  401dc6:	2201      	movs	r2, #1
  401dc8:	fa02 f303 	lsl.w	r3, r2, r3
  401dcc:	4619      	mov	r1, r3
  401dce:	683b      	ldr	r3, [r7, #0]
  401dd0:	f003 0301 	and.w	r3, r3, #1
  401dd4:	461a      	mov	r2, r3
  401dd6:	68f8      	ldr	r0, [r7, #12]
  401dd8:	4b2e      	ldr	r3, [pc, #184]	; (401e94 <pio_configure_pin+0x1a4>)
  401dda:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401ddc:	e050      	b.n	401e80 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401dde:	687b      	ldr	r3, [r7, #4]
  401de0:	f003 031f 	and.w	r3, r3, #31
  401de4:	2201      	movs	r2, #1
  401de6:	fa02 f303 	lsl.w	r3, r2, r3
  401dea:	461a      	mov	r2, r3
  401dec:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401df0:	68f8      	ldr	r0, [r7, #12]
  401df2:	4b27      	ldr	r3, [pc, #156]	; (401e90 <pio_configure_pin+0x1a0>)
  401df4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401df6:	687b      	ldr	r3, [r7, #4]
  401df8:	f003 031f 	and.w	r3, r3, #31
  401dfc:	2201      	movs	r2, #1
  401dfe:	fa02 f303 	lsl.w	r3, r2, r3
  401e02:	4619      	mov	r1, r3
  401e04:	683b      	ldr	r3, [r7, #0]
  401e06:	f003 0301 	and.w	r3, r3, #1
  401e0a:	461a      	mov	r2, r3
  401e0c:	68f8      	ldr	r0, [r7, #12]
  401e0e:	4b21      	ldr	r3, [pc, #132]	; (401e94 <pio_configure_pin+0x1a4>)
  401e10:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401e12:	e035      	b.n	401e80 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401e14:	687b      	ldr	r3, [r7, #4]
  401e16:	f003 031f 	and.w	r3, r3, #31
  401e1a:	2201      	movs	r2, #1
  401e1c:	fa02 f303 	lsl.w	r3, r2, r3
  401e20:	683a      	ldr	r2, [r7, #0]
  401e22:	4619      	mov	r1, r3
  401e24:	68f8      	ldr	r0, [r7, #12]
  401e26:	4b1c      	ldr	r3, [pc, #112]	; (401e98 <pio_configure_pin+0x1a8>)
  401e28:	4798      	blx	r3
		break;
  401e2a:	e029      	b.n	401e80 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e2c:	687b      	ldr	r3, [r7, #4]
  401e2e:	f003 031f 	and.w	r3, r3, #31
  401e32:	2201      	movs	r2, #1
  401e34:	fa02 f303 	lsl.w	r3, r2, r3
  401e38:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401e3a:	683b      	ldr	r3, [r7, #0]
  401e3c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e40:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e44:	bf0c      	ite	eq
  401e46:	2301      	moveq	r3, #1
  401e48:	2300      	movne	r3, #0
  401e4a:	b2db      	uxtb	r3, r3
  401e4c:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401e4e:	683b      	ldr	r3, [r7, #0]
  401e50:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e54:	2b00      	cmp	r3, #0
  401e56:	bf14      	ite	ne
  401e58:	2301      	movne	r3, #1
  401e5a:	2300      	moveq	r3, #0
  401e5c:	b2db      	uxtb	r3, r3
  401e5e:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401e60:	683b      	ldr	r3, [r7, #0]
  401e62:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e66:	2b00      	cmp	r3, #0
  401e68:	bf14      	ite	ne
  401e6a:	2301      	movne	r3, #1
  401e6c:	2300      	moveq	r3, #0
  401e6e:	b2db      	uxtb	r3, r3
  401e70:	9300      	str	r3, [sp, #0]
  401e72:	4603      	mov	r3, r0
  401e74:	68f8      	ldr	r0, [r7, #12]
  401e76:	4c09      	ldr	r4, [pc, #36]	; (401e9c <pio_configure_pin+0x1ac>)
  401e78:	47a0      	blx	r4
		break;
  401e7a:	e001      	b.n	401e80 <pio_configure_pin+0x190>

	default:
		return 0;
  401e7c:	2300      	movs	r3, #0
  401e7e:	e000      	b.n	401e82 <pio_configure_pin+0x192>
	}

	return 1;
  401e80:	2301      	movs	r3, #1
}
  401e82:	4618      	mov	r0, r3
  401e84:	3714      	adds	r7, #20
  401e86:	46bd      	mov	sp, r7
  401e88:	bd90      	pop	{r4, r7, pc}
  401e8a:	bf00      	nop
  401e8c:	00401fcd 	.word	0x00401fcd
  401e90:	00401ab7 	.word	0x00401ab7
  401e94:	00401a8d 	.word	0x00401a8d
  401e98:	00401bc5 	.word	0x00401bc5
  401e9c:	00401c45 	.word	0x00401c45

00401ea0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401ea0:	b590      	push	{r4, r7, lr}
  401ea2:	b087      	sub	sp, #28
  401ea4:	af02      	add	r7, sp, #8
  401ea6:	60f8      	str	r0, [r7, #12]
  401ea8:	60b9      	str	r1, [r7, #8]
  401eaa:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401eac:	687b      	ldr	r3, [r7, #4]
  401eae:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401eb6:	d043      	beq.n	401f40 <pio_configure_pin_group+0xa0>
  401eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401ebc:	d809      	bhi.n	401ed2 <pio_configure_pin_group+0x32>
  401ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401ec2:	d01f      	beq.n	401f04 <pio_configure_pin_group+0x64>
  401ec4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401ec8:	d02b      	beq.n	401f22 <pio_configure_pin_group+0x82>
  401eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401ece:	d00a      	beq.n	401ee6 <pio_configure_pin_group+0x46>
  401ed0:	e06d      	b.n	401fae <pio_configure_pin_group+0x10e>
  401ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401ed6:	d048      	beq.n	401f6a <pio_configure_pin_group+0xca>
  401ed8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401edc:	d045      	beq.n	401f6a <pio_configure_pin_group+0xca>
  401ede:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401ee2:	d03c      	beq.n	401f5e <pio_configure_pin_group+0xbe>
  401ee4:	e063      	b.n	401fae <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401ee6:	68ba      	ldr	r2, [r7, #8]
  401ee8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401eec:	68f8      	ldr	r0, [r7, #12]
  401eee:	4b33      	ldr	r3, [pc, #204]	; (401fbc <pio_configure_pin_group+0x11c>)
  401ef0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401ef2:	687b      	ldr	r3, [r7, #4]
  401ef4:	f003 0301 	and.w	r3, r3, #1
  401ef8:	461a      	mov	r2, r3
  401efa:	68b9      	ldr	r1, [r7, #8]
  401efc:	68f8      	ldr	r0, [r7, #12]
  401efe:	4b30      	ldr	r3, [pc, #192]	; (401fc0 <pio_configure_pin_group+0x120>)
  401f00:	4798      	blx	r3
		break;
  401f02:	e056      	b.n	401fb2 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401f04:	68ba      	ldr	r2, [r7, #8]
  401f06:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f0a:	68f8      	ldr	r0, [r7, #12]
  401f0c:	4b2b      	ldr	r3, [pc, #172]	; (401fbc <pio_configure_pin_group+0x11c>)
  401f0e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401f10:	687b      	ldr	r3, [r7, #4]
  401f12:	f003 0301 	and.w	r3, r3, #1
  401f16:	461a      	mov	r2, r3
  401f18:	68b9      	ldr	r1, [r7, #8]
  401f1a:	68f8      	ldr	r0, [r7, #12]
  401f1c:	4b28      	ldr	r3, [pc, #160]	; (401fc0 <pio_configure_pin_group+0x120>)
  401f1e:	4798      	blx	r3
		break;
  401f20:	e047      	b.n	401fb2 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401f22:	68ba      	ldr	r2, [r7, #8]
  401f24:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401f28:	68f8      	ldr	r0, [r7, #12]
  401f2a:	4b24      	ldr	r3, [pc, #144]	; (401fbc <pio_configure_pin_group+0x11c>)
  401f2c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401f2e:	687b      	ldr	r3, [r7, #4]
  401f30:	f003 0301 	and.w	r3, r3, #1
  401f34:	461a      	mov	r2, r3
  401f36:	68b9      	ldr	r1, [r7, #8]
  401f38:	68f8      	ldr	r0, [r7, #12]
  401f3a:	4b21      	ldr	r3, [pc, #132]	; (401fc0 <pio_configure_pin_group+0x120>)
  401f3c:	4798      	blx	r3
		break;
  401f3e:	e038      	b.n	401fb2 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401f40:	68ba      	ldr	r2, [r7, #8]
  401f42:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401f46:	68f8      	ldr	r0, [r7, #12]
  401f48:	4b1c      	ldr	r3, [pc, #112]	; (401fbc <pio_configure_pin_group+0x11c>)
  401f4a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401f4c:	687b      	ldr	r3, [r7, #4]
  401f4e:	f003 0301 	and.w	r3, r3, #1
  401f52:	461a      	mov	r2, r3
  401f54:	68b9      	ldr	r1, [r7, #8]
  401f56:	68f8      	ldr	r0, [r7, #12]
  401f58:	4b19      	ldr	r3, [pc, #100]	; (401fc0 <pio_configure_pin_group+0x120>)
  401f5a:	4798      	blx	r3
		break;
  401f5c:	e029      	b.n	401fb2 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401f5e:	687a      	ldr	r2, [r7, #4]
  401f60:	68b9      	ldr	r1, [r7, #8]
  401f62:	68f8      	ldr	r0, [r7, #12]
  401f64:	4b17      	ldr	r3, [pc, #92]	; (401fc4 <pio_configure_pin_group+0x124>)
  401f66:	4798      	blx	r3
		break;
  401f68:	e023      	b.n	401fb2 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401f6a:	687b      	ldr	r3, [r7, #4]
  401f6c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  401f70:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401f74:	bf0c      	ite	eq
  401f76:	2301      	moveq	r3, #1
  401f78:	2300      	movne	r3, #0
  401f7a:	b2db      	uxtb	r3, r3
  401f7c:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401f7e:	687b      	ldr	r3, [r7, #4]
  401f80:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
  401f84:	2b00      	cmp	r3, #0
  401f86:	bf14      	ite	ne
  401f88:	2301      	movne	r3, #1
  401f8a:	2300      	moveq	r3, #0
  401f8c:	b2db      	uxtb	r3, r3
  401f8e:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401f90:	687b      	ldr	r3, [r7, #4]
  401f92:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
  401f96:	2b00      	cmp	r3, #0
  401f98:	bf14      	ite	ne
  401f9a:	2301      	movne	r3, #1
  401f9c:	2300      	moveq	r3, #0
  401f9e:	b2db      	uxtb	r3, r3
  401fa0:	9300      	str	r3, [sp, #0]
  401fa2:	460b      	mov	r3, r1
  401fa4:	68b9      	ldr	r1, [r7, #8]
  401fa6:	68f8      	ldr	r0, [r7, #12]
  401fa8:	4c07      	ldr	r4, [pc, #28]	; (401fc8 <pio_configure_pin_group+0x128>)
  401faa:	47a0      	blx	r4
		break;
  401fac:	e001      	b.n	401fb2 <pio_configure_pin_group+0x112>

	default:
		return 0;
  401fae:	2300      	movs	r3, #0
  401fb0:	e000      	b.n	401fb4 <pio_configure_pin_group+0x114>
	}

	return 1;
  401fb2:	2301      	movs	r3, #1
}
  401fb4:	4618      	mov	r0, r3
  401fb6:	3714      	adds	r7, #20
  401fb8:	46bd      	mov	sp, r7
  401fba:	bd90      	pop	{r4, r7, pc}
  401fbc:	00401ab7 	.word	0x00401ab7
  401fc0:	00401a8d 	.word	0x00401a8d
  401fc4:	00401bc5 	.word	0x00401bc5
  401fc8:	00401c45 	.word	0x00401c45

00401fcc <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401fcc:	b480      	push	{r7}
  401fce:	b085      	sub	sp, #20
  401fd0:	af00      	add	r7, sp, #0
  401fd2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401fd4:	687b      	ldr	r3, [r7, #4]
  401fd6:	095b      	lsrs	r3, r3, #5
  401fd8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401fdc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401fe0:	025b      	lsls	r3, r3, #9
  401fe2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401fe4:	68fb      	ldr	r3, [r7, #12]
}
  401fe6:	4618      	mov	r0, r3
  401fe8:	3714      	adds	r7, #20
  401fea:	46bd      	mov	sp, r7
  401fec:	bc80      	pop	{r7}
  401fee:	4770      	bx	lr

00401ff0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401ff0:	b580      	push	{r7, lr}
  401ff2:	b084      	sub	sp, #16
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
  401ff8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401ffa:	6878      	ldr	r0, [r7, #4]
  401ffc:	4b2c      	ldr	r3, [pc, #176]	; (4020b0 <pio_handler_process+0xc0>)
  401ffe:	4798      	blx	r3
  402000:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  402002:	6878      	ldr	r0, [r7, #4]
  402004:	4b2b      	ldr	r3, [pc, #172]	; (4020b4 <pio_handler_process+0xc4>)
  402006:	4798      	blx	r3
  402008:	4602      	mov	r2, r0
  40200a:	68fb      	ldr	r3, [r7, #12]
  40200c:	4013      	ands	r3, r2
  40200e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  402010:	68fb      	ldr	r3, [r7, #12]
  402012:	2b00      	cmp	r3, #0
  402014:	d03c      	beq.n	402090 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  402016:	2300      	movs	r3, #0
  402018:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40201a:	e034      	b.n	402086 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40201c:	4a26      	ldr	r2, [pc, #152]	; (4020b8 <pio_handler_process+0xc8>)
  40201e:	68bb      	ldr	r3, [r7, #8]
  402020:	011b      	lsls	r3, r3, #4
  402022:	4413      	add	r3, r2
  402024:	681a      	ldr	r2, [r3, #0]
  402026:	683b      	ldr	r3, [r7, #0]
  402028:	429a      	cmp	r2, r3
  40202a:	d126      	bne.n	40207a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40202c:	4a22      	ldr	r2, [pc, #136]	; (4020b8 <pio_handler_process+0xc8>)
  40202e:	68bb      	ldr	r3, [r7, #8]
  402030:	011b      	lsls	r3, r3, #4
  402032:	4413      	add	r3, r2
  402034:	3304      	adds	r3, #4
  402036:	681a      	ldr	r2, [r3, #0]
  402038:	68fb      	ldr	r3, [r7, #12]
  40203a:	4013      	ands	r3, r2
  40203c:	2b00      	cmp	r3, #0
  40203e:	d01c      	beq.n	40207a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402040:	4a1d      	ldr	r2, [pc, #116]	; (4020b8 <pio_handler_process+0xc8>)
  402042:	68bb      	ldr	r3, [r7, #8]
  402044:	011b      	lsls	r3, r3, #4
  402046:	4413      	add	r3, r2
  402048:	330c      	adds	r3, #12
  40204a:	681b      	ldr	r3, [r3, #0]
  40204c:	491a      	ldr	r1, [pc, #104]	; (4020b8 <pio_handler_process+0xc8>)
  40204e:	68ba      	ldr	r2, [r7, #8]
  402050:	0112      	lsls	r2, r2, #4
  402052:	440a      	add	r2, r1
  402054:	6810      	ldr	r0, [r2, #0]
  402056:	4918      	ldr	r1, [pc, #96]	; (4020b8 <pio_handler_process+0xc8>)
  402058:	68ba      	ldr	r2, [r7, #8]
  40205a:	0112      	lsls	r2, r2, #4
  40205c:	440a      	add	r2, r1
  40205e:	3204      	adds	r2, #4
  402060:	6812      	ldr	r2, [r2, #0]
  402062:	4611      	mov	r1, r2
  402064:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402066:	4a14      	ldr	r2, [pc, #80]	; (4020b8 <pio_handler_process+0xc8>)
  402068:	68bb      	ldr	r3, [r7, #8]
  40206a:	011b      	lsls	r3, r3, #4
  40206c:	4413      	add	r3, r2
  40206e:	3304      	adds	r3, #4
  402070:	681b      	ldr	r3, [r3, #0]
  402072:	43db      	mvns	r3, r3
  402074:	68fa      	ldr	r2, [r7, #12]
  402076:	4013      	ands	r3, r2
  402078:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40207a:	68bb      	ldr	r3, [r7, #8]
  40207c:	3301      	adds	r3, #1
  40207e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  402080:	68bb      	ldr	r3, [r7, #8]
  402082:	2b06      	cmp	r3, #6
  402084:	d803      	bhi.n	40208e <pio_handler_process+0x9e>
		while (status != 0) {
  402086:	68fb      	ldr	r3, [r7, #12]
  402088:	2b00      	cmp	r3, #0
  40208a:	d1c7      	bne.n	40201c <pio_handler_process+0x2c>
  40208c:	e000      	b.n	402090 <pio_handler_process+0xa0>
				break;
  40208e:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  402090:	4b0a      	ldr	r3, [pc, #40]	; (4020bc <pio_handler_process+0xcc>)
  402092:	681b      	ldr	r3, [r3, #0]
  402094:	2b00      	cmp	r3, #0
  402096:	d007      	beq.n	4020a8 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  402098:	4b09      	ldr	r3, [pc, #36]	; (4020c0 <pio_handler_process+0xd0>)
  40209a:	681b      	ldr	r3, [r3, #0]
  40209c:	2b00      	cmp	r3, #0
  40209e:	d003      	beq.n	4020a8 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4020a0:	4b07      	ldr	r3, [pc, #28]	; (4020c0 <pio_handler_process+0xd0>)
  4020a2:	681b      	ldr	r3, [r3, #0]
  4020a4:	6878      	ldr	r0, [r7, #4]
  4020a6:	4798      	blx	r3
		}
	}
#endif
}
  4020a8:	bf00      	nop
  4020aa:	3710      	adds	r7, #16
  4020ac:	46bd      	mov	sp, r7
  4020ae:	bd80      	pop	{r7, pc}
  4020b0:	00401cc3 	.word	0x00401cc3
  4020b4:	00401cd9 	.word	0x00401cd9
  4020b8:	20000b78 	.word	0x20000b78
  4020bc:	20003040 	.word	0x20003040
  4020c0:	20000be8 	.word	0x20000be8

004020c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4020c4:	b580      	push	{r7, lr}
  4020c6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4020c8:	210b      	movs	r1, #11
  4020ca:	4802      	ldr	r0, [pc, #8]	; (4020d4 <PIOA_Handler+0x10>)
  4020cc:	4b02      	ldr	r3, [pc, #8]	; (4020d8 <PIOA_Handler+0x14>)
  4020ce:	4798      	blx	r3
}
  4020d0:	bf00      	nop
  4020d2:	bd80      	pop	{r7, pc}
  4020d4:	400e0e00 	.word	0x400e0e00
  4020d8:	00401ff1 	.word	0x00401ff1

004020dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4020dc:	b580      	push	{r7, lr}
  4020de:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4020e0:	210c      	movs	r1, #12
  4020e2:	4802      	ldr	r0, [pc, #8]	; (4020ec <PIOB_Handler+0x10>)
  4020e4:	4b02      	ldr	r3, [pc, #8]	; (4020f0 <PIOB_Handler+0x14>)
  4020e6:	4798      	blx	r3
}
  4020e8:	bf00      	nop
  4020ea:	bd80      	pop	{r7, pc}
  4020ec:	400e1000 	.word	0x400e1000
  4020f0:	00401ff1 	.word	0x00401ff1

004020f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4020f4:	b580      	push	{r7, lr}
  4020f6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4020f8:	210d      	movs	r1, #13
  4020fa:	4802      	ldr	r0, [pc, #8]	; (402104 <PIOC_Handler+0x10>)
  4020fc:	4b02      	ldr	r3, [pc, #8]	; (402108 <PIOC_Handler+0x14>)
  4020fe:	4798      	blx	r3
}
  402100:	bf00      	nop
  402102:	bd80      	pop	{r7, pc}
  402104:	400e1200 	.word	0x400e1200
  402108:	00401ff1 	.word	0x00401ff1

0040210c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40210c:	b480      	push	{r7}
  40210e:	b085      	sub	sp, #20
  402110:	af00      	add	r7, sp, #0
  402112:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402114:	491c      	ldr	r1, [pc, #112]	; (402188 <pmc_switch_mck_to_pllack+0x7c>)
  402116:	4b1c      	ldr	r3, [pc, #112]	; (402188 <pmc_switch_mck_to_pllack+0x7c>)
  402118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40211a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40211e:	687b      	ldr	r3, [r7, #4]
  402120:	4313      	orrs	r3, r2
  402122:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402124:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402128:	60fb      	str	r3, [r7, #12]
  40212a:	e007      	b.n	40213c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40212c:	68fb      	ldr	r3, [r7, #12]
  40212e:	2b00      	cmp	r3, #0
  402130:	d101      	bne.n	402136 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  402132:	2301      	movs	r3, #1
  402134:	e023      	b.n	40217e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402136:	68fb      	ldr	r3, [r7, #12]
  402138:	3b01      	subs	r3, #1
  40213a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40213c:	4b12      	ldr	r3, [pc, #72]	; (402188 <pmc_switch_mck_to_pllack+0x7c>)
  40213e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402140:	f003 0308 	and.w	r3, r3, #8
  402144:	2b00      	cmp	r3, #0
  402146:	d0f1      	beq.n	40212c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402148:	4a0f      	ldr	r2, [pc, #60]	; (402188 <pmc_switch_mck_to_pllack+0x7c>)
  40214a:	4b0f      	ldr	r3, [pc, #60]	; (402188 <pmc_switch_mck_to_pllack+0x7c>)
  40214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40214e:	f023 0303 	bic.w	r3, r3, #3
  402152:	f043 0302 	orr.w	r3, r3, #2
  402156:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402158:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40215c:	60fb      	str	r3, [r7, #12]
  40215e:	e007      	b.n	402170 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402160:	68fb      	ldr	r3, [r7, #12]
  402162:	2b00      	cmp	r3, #0
  402164:	d101      	bne.n	40216a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  402166:	2301      	movs	r3, #1
  402168:	e009      	b.n	40217e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40216a:	68fb      	ldr	r3, [r7, #12]
  40216c:	3b01      	subs	r3, #1
  40216e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402170:	4b05      	ldr	r3, [pc, #20]	; (402188 <pmc_switch_mck_to_pllack+0x7c>)
  402172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402174:	f003 0308 	and.w	r3, r3, #8
  402178:	2b00      	cmp	r3, #0
  40217a:	d0f1      	beq.n	402160 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40217c:	2300      	movs	r3, #0
}
  40217e:	4618      	mov	r0, r3
  402180:	3714      	adds	r7, #20
  402182:	46bd      	mov	sp, r7
  402184:	bc80      	pop	{r7}
  402186:	4770      	bx	lr
  402188:	400e0400 	.word	0x400e0400

0040218c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40218c:	b480      	push	{r7}
  40218e:	b083      	sub	sp, #12
  402190:	af00      	add	r7, sp, #0
  402192:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402194:	687b      	ldr	r3, [r7, #4]
  402196:	2b01      	cmp	r3, #1
  402198:	d107      	bne.n	4021aa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40219a:	4a08      	ldr	r2, [pc, #32]	; (4021bc <pmc_switch_sclk_to_32kxtal+0x30>)
  40219c:	4b07      	ldr	r3, [pc, #28]	; (4021bc <pmc_switch_sclk_to_32kxtal+0x30>)
  40219e:	689b      	ldr	r3, [r3, #8]
  4021a0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4021a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4021a8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4021aa:	4b04      	ldr	r3, [pc, #16]	; (4021bc <pmc_switch_sclk_to_32kxtal+0x30>)
  4021ac:	4a04      	ldr	r2, [pc, #16]	; (4021c0 <pmc_switch_sclk_to_32kxtal+0x34>)
  4021ae:	601a      	str	r2, [r3, #0]
}
  4021b0:	bf00      	nop
  4021b2:	370c      	adds	r7, #12
  4021b4:	46bd      	mov	sp, r7
  4021b6:	bc80      	pop	{r7}
  4021b8:	4770      	bx	lr
  4021ba:	bf00      	nop
  4021bc:	400e1410 	.word	0x400e1410
  4021c0:	a5000008 	.word	0xa5000008

004021c4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4021c4:	b480      	push	{r7}
  4021c6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4021c8:	4b09      	ldr	r3, [pc, #36]	; (4021f0 <pmc_osc_is_ready_32kxtal+0x2c>)
  4021ca:	695b      	ldr	r3, [r3, #20]
  4021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4021d0:	2b00      	cmp	r3, #0
  4021d2:	d007      	beq.n	4021e4 <pmc_osc_is_ready_32kxtal+0x20>
  4021d4:	4b07      	ldr	r3, [pc, #28]	; (4021f4 <pmc_osc_is_ready_32kxtal+0x30>)
  4021d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4021dc:	2b00      	cmp	r3, #0
  4021de:	d001      	beq.n	4021e4 <pmc_osc_is_ready_32kxtal+0x20>
  4021e0:	2301      	movs	r3, #1
  4021e2:	e000      	b.n	4021e6 <pmc_osc_is_ready_32kxtal+0x22>
  4021e4:	2300      	movs	r3, #0
}
  4021e6:	4618      	mov	r0, r3
  4021e8:	46bd      	mov	sp, r7
  4021ea:	bc80      	pop	{r7}
  4021ec:	4770      	bx	lr
  4021ee:	bf00      	nop
  4021f0:	400e1410 	.word	0x400e1410
  4021f4:	400e0400 	.word	0x400e0400

004021f8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4021f8:	b480      	push	{r7}
  4021fa:	b083      	sub	sp, #12
  4021fc:	af00      	add	r7, sp, #0
  4021fe:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402200:	4a18      	ldr	r2, [pc, #96]	; (402264 <pmc_switch_mainck_to_fastrc+0x6c>)
  402202:	4b18      	ldr	r3, [pc, #96]	; (402264 <pmc_switch_mainck_to_fastrc+0x6c>)
  402204:	6a1b      	ldr	r3, [r3, #32]
  402206:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40220a:	f043 0308 	orr.w	r3, r3, #8
  40220e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402210:	bf00      	nop
  402212:	4b14      	ldr	r3, [pc, #80]	; (402264 <pmc_switch_mainck_to_fastrc+0x6c>)
  402214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40221a:	2b00      	cmp	r3, #0
  40221c:	d0f9      	beq.n	402212 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40221e:	4911      	ldr	r1, [pc, #68]	; (402264 <pmc_switch_mainck_to_fastrc+0x6c>)
  402220:	4b10      	ldr	r3, [pc, #64]	; (402264 <pmc_switch_mainck_to_fastrc+0x6c>)
  402222:	6a1b      	ldr	r3, [r3, #32]
  402224:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40222c:	687a      	ldr	r2, [r7, #4]
  40222e:	4313      	orrs	r3, r2
  402230:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402234:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402236:	bf00      	nop
  402238:	4b0a      	ldr	r3, [pc, #40]	; (402264 <pmc_switch_mainck_to_fastrc+0x6c>)
  40223a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402240:	2b00      	cmp	r3, #0
  402242:	d0f9      	beq.n	402238 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402244:	4a07      	ldr	r2, [pc, #28]	; (402264 <pmc_switch_mainck_to_fastrc+0x6c>)
  402246:	4b07      	ldr	r3, [pc, #28]	; (402264 <pmc_switch_mainck_to_fastrc+0x6c>)
  402248:	6a1b      	ldr	r3, [r3, #32]
  40224a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402252:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402256:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402258:	bf00      	nop
  40225a:	370c      	adds	r7, #12
  40225c:	46bd      	mov	sp, r7
  40225e:	bc80      	pop	{r7}
  402260:	4770      	bx	lr
  402262:	bf00      	nop
  402264:	400e0400 	.word	0x400e0400

00402268 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402268:	b480      	push	{r7}
  40226a:	b083      	sub	sp, #12
  40226c:	af00      	add	r7, sp, #0
  40226e:	6078      	str	r0, [r7, #4]
  402270:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402272:	687b      	ldr	r3, [r7, #4]
  402274:	2b00      	cmp	r3, #0
  402276:	d008      	beq.n	40228a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402278:	4916      	ldr	r1, [pc, #88]	; (4022d4 <pmc_switch_mainck_to_xtal+0x6c>)
  40227a:	4b16      	ldr	r3, [pc, #88]	; (4022d4 <pmc_switch_mainck_to_xtal+0x6c>)
  40227c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40227e:	4a16      	ldr	r2, [pc, #88]	; (4022d8 <pmc_switch_mainck_to_xtal+0x70>)
  402280:	401a      	ands	r2, r3
  402282:	4b16      	ldr	r3, [pc, #88]	; (4022dc <pmc_switch_mainck_to_xtal+0x74>)
  402284:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402286:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402288:	e01e      	b.n	4022c8 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40228a:	4912      	ldr	r1, [pc, #72]	; (4022d4 <pmc_switch_mainck_to_xtal+0x6c>)
  40228c:	4b11      	ldr	r3, [pc, #68]	; (4022d4 <pmc_switch_mainck_to_xtal+0x6c>)
  40228e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402290:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402294:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402298:	683a      	ldr	r2, [r7, #0]
  40229a:	0212      	lsls	r2, r2, #8
  40229c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40229e:	4313      	orrs	r3, r2
  4022a0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4022a4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4022a8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4022aa:	bf00      	nop
  4022ac:	4b09      	ldr	r3, [pc, #36]	; (4022d4 <pmc_switch_mainck_to_xtal+0x6c>)
  4022ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022b0:	f003 0301 	and.w	r3, r3, #1
  4022b4:	2b00      	cmp	r3, #0
  4022b6:	d0f9      	beq.n	4022ac <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4022b8:	4a06      	ldr	r2, [pc, #24]	; (4022d4 <pmc_switch_mainck_to_xtal+0x6c>)
  4022ba:	4b06      	ldr	r3, [pc, #24]	; (4022d4 <pmc_switch_mainck_to_xtal+0x6c>)
  4022bc:	6a1b      	ldr	r3, [r3, #32]
  4022be:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4022c6:	6213      	str	r3, [r2, #32]
}
  4022c8:	bf00      	nop
  4022ca:	370c      	adds	r7, #12
  4022cc:	46bd      	mov	sp, r7
  4022ce:	bc80      	pop	{r7}
  4022d0:	4770      	bx	lr
  4022d2:	bf00      	nop
  4022d4:	400e0400 	.word	0x400e0400
  4022d8:	fec8fffc 	.word	0xfec8fffc
  4022dc:	01370002 	.word	0x01370002

004022e0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4022e0:	b480      	push	{r7}
  4022e2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4022e4:	4b03      	ldr	r3, [pc, #12]	; (4022f4 <pmc_osc_is_ready_mainck+0x14>)
  4022e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4022ec:	4618      	mov	r0, r3
  4022ee:	46bd      	mov	sp, r7
  4022f0:	bc80      	pop	{r7}
  4022f2:	4770      	bx	lr
  4022f4:	400e0400 	.word	0x400e0400

004022f8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4022f8:	b480      	push	{r7}
  4022fa:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4022fc:	4b03      	ldr	r3, [pc, #12]	; (40230c <pmc_disable_pllack+0x14>)
  4022fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402302:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402304:	bf00      	nop
  402306:	46bd      	mov	sp, r7
  402308:	bc80      	pop	{r7}
  40230a:	4770      	bx	lr
  40230c:	400e0400 	.word	0x400e0400

00402310 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402310:	b480      	push	{r7}
  402312:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402314:	4b03      	ldr	r3, [pc, #12]	; (402324 <pmc_is_locked_pllack+0x14>)
  402316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402318:	f003 0302 	and.w	r3, r3, #2
}
  40231c:	4618      	mov	r0, r3
  40231e:	46bd      	mov	sp, r7
  402320:	bc80      	pop	{r7}
  402322:	4770      	bx	lr
  402324:	400e0400 	.word	0x400e0400

00402328 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  402328:	b480      	push	{r7}
  40232a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40232c:	4b03      	ldr	r3, [pc, #12]	; (40233c <pmc_disable_pllbck+0x14>)
  40232e:	2200      	movs	r2, #0
  402330:	62da      	str	r2, [r3, #44]	; 0x2c
}
  402332:	bf00      	nop
  402334:	46bd      	mov	sp, r7
  402336:	bc80      	pop	{r7}
  402338:	4770      	bx	lr
  40233a:	bf00      	nop
  40233c:	400e0400 	.word	0x400e0400

00402340 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  402340:	b480      	push	{r7}
  402342:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402344:	4b03      	ldr	r3, [pc, #12]	; (402354 <pmc_is_locked_pllbck+0x14>)
  402346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402348:	f003 0304 	and.w	r3, r3, #4
}
  40234c:	4618      	mov	r0, r3
  40234e:	46bd      	mov	sp, r7
  402350:	bc80      	pop	{r7}
  402352:	4770      	bx	lr
  402354:	400e0400 	.word	0x400e0400

00402358 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402358:	b480      	push	{r7}
  40235a:	b083      	sub	sp, #12
  40235c:	af00      	add	r7, sp, #0
  40235e:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402360:	687b      	ldr	r3, [r7, #4]
  402362:	2b22      	cmp	r3, #34	; 0x22
  402364:	d901      	bls.n	40236a <pmc_enable_periph_clk+0x12>
		return 1;
  402366:	2301      	movs	r3, #1
  402368:	e02f      	b.n	4023ca <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40236a:	687b      	ldr	r3, [r7, #4]
  40236c:	2b1f      	cmp	r3, #31
  40236e:	d813      	bhi.n	402398 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402370:	4b18      	ldr	r3, [pc, #96]	; (4023d4 <pmc_enable_periph_clk+0x7c>)
  402372:	699a      	ldr	r2, [r3, #24]
  402374:	2101      	movs	r1, #1
  402376:	687b      	ldr	r3, [r7, #4]
  402378:	fa01 f303 	lsl.w	r3, r1, r3
  40237c:	401a      	ands	r2, r3
  40237e:	2101      	movs	r1, #1
  402380:	687b      	ldr	r3, [r7, #4]
  402382:	fa01 f303 	lsl.w	r3, r1, r3
  402386:	429a      	cmp	r2, r3
  402388:	d01e      	beq.n	4023c8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40238a:	4a12      	ldr	r2, [pc, #72]	; (4023d4 <pmc_enable_periph_clk+0x7c>)
  40238c:	2101      	movs	r1, #1
  40238e:	687b      	ldr	r3, [r7, #4]
  402390:	fa01 f303 	lsl.w	r3, r1, r3
  402394:	6113      	str	r3, [r2, #16]
  402396:	e017      	b.n	4023c8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402398:	687b      	ldr	r3, [r7, #4]
  40239a:	3b20      	subs	r3, #32
  40239c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40239e:	4b0d      	ldr	r3, [pc, #52]	; (4023d4 <pmc_enable_periph_clk+0x7c>)
  4023a0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4023a4:	2101      	movs	r1, #1
  4023a6:	687b      	ldr	r3, [r7, #4]
  4023a8:	fa01 f303 	lsl.w	r3, r1, r3
  4023ac:	401a      	ands	r2, r3
  4023ae:	2101      	movs	r1, #1
  4023b0:	687b      	ldr	r3, [r7, #4]
  4023b2:	fa01 f303 	lsl.w	r3, r1, r3
  4023b6:	429a      	cmp	r2, r3
  4023b8:	d006      	beq.n	4023c8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4023ba:	4a06      	ldr	r2, [pc, #24]	; (4023d4 <pmc_enable_periph_clk+0x7c>)
  4023bc:	2101      	movs	r1, #1
  4023be:	687b      	ldr	r3, [r7, #4]
  4023c0:	fa01 f303 	lsl.w	r3, r1, r3
  4023c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4023c8:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4023ca:	4618      	mov	r0, r3
  4023cc:	370c      	adds	r7, #12
  4023ce:	46bd      	mov	sp, r7
  4023d0:	bc80      	pop	{r7}
  4023d2:	4770      	bx	lr
  4023d4:	400e0400 	.word	0x400e0400

004023d8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4023d8:	b480      	push	{r7}
  4023da:	b085      	sub	sp, #20
  4023dc:	af00      	add	r7, sp, #0
  4023de:	6078      	str	r0, [r7, #4]
  4023e0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4023e2:	2300      	movs	r3, #0
  4023e4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4023e6:	687b      	ldr	r3, [r7, #4]
  4023e8:	22ac      	movs	r2, #172	; 0xac
  4023ea:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4023ec:	683b      	ldr	r3, [r7, #0]
  4023ee:	681a      	ldr	r2, [r3, #0]
  4023f0:	683b      	ldr	r3, [r7, #0]
  4023f2:	685b      	ldr	r3, [r3, #4]
  4023f4:	fbb2 f3f3 	udiv	r3, r2, r3
  4023f8:	091b      	lsrs	r3, r3, #4
  4023fa:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4023fc:	68fb      	ldr	r3, [r7, #12]
  4023fe:	2b00      	cmp	r3, #0
  402400:	d003      	beq.n	40240a <uart_init+0x32>
  402402:	68fb      	ldr	r3, [r7, #12]
  402404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402408:	d301      	bcc.n	40240e <uart_init+0x36>
		return 1;
  40240a:	2301      	movs	r3, #1
  40240c:	e00f      	b.n	40242e <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  40240e:	687b      	ldr	r3, [r7, #4]
  402410:	68fa      	ldr	r2, [r7, #12]
  402412:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402414:	683b      	ldr	r3, [r7, #0]
  402416:	689a      	ldr	r2, [r3, #8]
  402418:	687b      	ldr	r3, [r7, #4]
  40241a:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40241c:	687b      	ldr	r3, [r7, #4]
  40241e:	f240 2202 	movw	r2, #514	; 0x202
  402422:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402426:	687b      	ldr	r3, [r7, #4]
  402428:	2250      	movs	r2, #80	; 0x50
  40242a:	601a      	str	r2, [r3, #0]

	return 0;
  40242c:	2300      	movs	r3, #0
}
  40242e:	4618      	mov	r0, r3
  402430:	3714      	adds	r7, #20
  402432:	46bd      	mov	sp, r7
  402434:	bc80      	pop	{r7}
  402436:	4770      	bx	lr

00402438 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  402438:	b480      	push	{r7}
  40243a:	b083      	sub	sp, #12
  40243c:	af00      	add	r7, sp, #0
  40243e:	6078      	str	r0, [r7, #4]
  402440:	460b      	mov	r3, r1
  402442:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402444:	687b      	ldr	r3, [r7, #4]
  402446:	695b      	ldr	r3, [r3, #20]
  402448:	f003 0302 	and.w	r3, r3, #2
  40244c:	2b00      	cmp	r3, #0
  40244e:	d101      	bne.n	402454 <uart_write+0x1c>
		return 1;
  402450:	2301      	movs	r3, #1
  402452:	e003      	b.n	40245c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  402454:	78fa      	ldrb	r2, [r7, #3]
  402456:	687b      	ldr	r3, [r7, #4]
  402458:	61da      	str	r2, [r3, #28]
	return 0;
  40245a:	2300      	movs	r3, #0
}
  40245c:	4618      	mov	r0, r3
  40245e:	370c      	adds	r7, #12
  402460:	46bd      	mov	sp, r7
  402462:	bc80      	pop	{r7}
  402464:	4770      	bx	lr

00402466 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  402466:	b480      	push	{r7}
  402468:	b083      	sub	sp, #12
  40246a:	af00      	add	r7, sp, #0
  40246c:	6078      	str	r0, [r7, #4]
  40246e:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402470:	687b      	ldr	r3, [r7, #4]
  402472:	695b      	ldr	r3, [r3, #20]
  402474:	f003 0301 	and.w	r3, r3, #1
  402478:	2b00      	cmp	r3, #0
  40247a:	d101      	bne.n	402480 <uart_read+0x1a>
		return 1;
  40247c:	2301      	movs	r3, #1
  40247e:	e005      	b.n	40248c <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402480:	687b      	ldr	r3, [r7, #4]
  402482:	699b      	ldr	r3, [r3, #24]
  402484:	b2da      	uxtb	r2, r3
  402486:	683b      	ldr	r3, [r7, #0]
  402488:	701a      	strb	r2, [r3, #0]
	return 0;
  40248a:	2300      	movs	r3, #0
}
  40248c:	4618      	mov	r0, r3
  40248e:	370c      	adds	r7, #12
  402490:	46bd      	mov	sp, r7
  402492:	bc80      	pop	{r7}
  402494:	4770      	bx	lr

00402496 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402496:	b480      	push	{r7}
  402498:	b089      	sub	sp, #36	; 0x24
  40249a:	af00      	add	r7, sp, #0
  40249c:	60f8      	str	r0, [r7, #12]
  40249e:	60b9      	str	r1, [r7, #8]
  4024a0:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4024a2:	68bb      	ldr	r3, [r7, #8]
  4024a4:	011a      	lsls	r2, r3, #4
  4024a6:	687b      	ldr	r3, [r7, #4]
  4024a8:	429a      	cmp	r2, r3
  4024aa:	d802      	bhi.n	4024b2 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4024ac:	2310      	movs	r3, #16
  4024ae:	61fb      	str	r3, [r7, #28]
  4024b0:	e001      	b.n	4024b6 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4024b2:	2308      	movs	r3, #8
  4024b4:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4024b6:	687b      	ldr	r3, [r7, #4]
  4024b8:	00da      	lsls	r2, r3, #3
  4024ba:	69fb      	ldr	r3, [r7, #28]
  4024bc:	68b9      	ldr	r1, [r7, #8]
  4024be:	fb01 f303 	mul.w	r3, r1, r3
  4024c2:	085b      	lsrs	r3, r3, #1
  4024c4:	441a      	add	r2, r3
  4024c6:	69fb      	ldr	r3, [r7, #28]
  4024c8:	68b9      	ldr	r1, [r7, #8]
  4024ca:	fb01 f303 	mul.w	r3, r1, r3
  4024ce:	fbb2 f3f3 	udiv	r3, r2, r3
  4024d2:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4024d4:	69bb      	ldr	r3, [r7, #24]
  4024d6:	08db      	lsrs	r3, r3, #3
  4024d8:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4024da:	69bb      	ldr	r3, [r7, #24]
  4024dc:	f003 0307 	and.w	r3, r3, #7
  4024e0:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4024e2:	697b      	ldr	r3, [r7, #20]
  4024e4:	2b00      	cmp	r3, #0
  4024e6:	d003      	beq.n	4024f0 <usart_set_async_baudrate+0x5a>
  4024e8:	697b      	ldr	r3, [r7, #20]
  4024ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4024ee:	d301      	bcc.n	4024f4 <usart_set_async_baudrate+0x5e>
		return 1;
  4024f0:	2301      	movs	r3, #1
  4024f2:	e00f      	b.n	402514 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4024f4:	69fb      	ldr	r3, [r7, #28]
  4024f6:	2b08      	cmp	r3, #8
  4024f8:	d105      	bne.n	402506 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4024fa:	68fb      	ldr	r3, [r7, #12]
  4024fc:	685b      	ldr	r3, [r3, #4]
  4024fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  402502:	68fb      	ldr	r3, [r7, #12]
  402504:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402506:	693b      	ldr	r3, [r7, #16]
  402508:	041a      	lsls	r2, r3, #16
  40250a:	697b      	ldr	r3, [r7, #20]
  40250c:	431a      	orrs	r2, r3
  40250e:	68fb      	ldr	r3, [r7, #12]
  402510:	621a      	str	r2, [r3, #32]

	return 0;
  402512:	2300      	movs	r3, #0
}
  402514:	4618      	mov	r0, r3
  402516:	3724      	adds	r7, #36	; 0x24
  402518:	46bd      	mov	sp, r7
  40251a:	bc80      	pop	{r7}
  40251c:	4770      	bx	lr
	...

00402520 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  402520:	b580      	push	{r7, lr}
  402522:	b082      	sub	sp, #8
  402524:	af00      	add	r7, sp, #0
  402526:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  402528:	6878      	ldr	r0, [r7, #4]
  40252a:	4b0f      	ldr	r3, [pc, #60]	; (402568 <usart_reset+0x48>)
  40252c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40252e:	687b      	ldr	r3, [r7, #4]
  402530:	2200      	movs	r2, #0
  402532:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  402534:	687b      	ldr	r3, [r7, #4]
  402536:	2200      	movs	r2, #0
  402538:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40253a:	687b      	ldr	r3, [r7, #4]
  40253c:	2200      	movs	r2, #0
  40253e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  402540:	6878      	ldr	r0, [r7, #4]
  402542:	4b0a      	ldr	r3, [pc, #40]	; (40256c <usart_reset+0x4c>)
  402544:	4798      	blx	r3
	usart_reset_rx(p_usart);
  402546:	6878      	ldr	r0, [r7, #4]
  402548:	4b09      	ldr	r3, [pc, #36]	; (402570 <usart_reset+0x50>)
  40254a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  40254c:	6878      	ldr	r0, [r7, #4]
  40254e:	4b09      	ldr	r3, [pc, #36]	; (402574 <usart_reset+0x54>)
  402550:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  402552:	6878      	ldr	r0, [r7, #4]
  402554:	4b08      	ldr	r3, [pc, #32]	; (402578 <usart_reset+0x58>)
  402556:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  402558:	6878      	ldr	r0, [r7, #4]
  40255a:	4b08      	ldr	r3, [pc, #32]	; (40257c <usart_reset+0x5c>)
  40255c:	4798      	blx	r3
#endif
}
  40255e:	bf00      	nop
  402560:	3708      	adds	r7, #8
  402562:	46bd      	mov	sp, r7
  402564:	bd80      	pop	{r7, pc}
  402566:	bf00      	nop
  402568:	00402775 	.word	0x00402775
  40256c:	0040261d 	.word	0x0040261d
  402570:	0040264d 	.word	0x0040264d
  402574:	00402695 	.word	0x00402695
  402578:	004026c9 	.word	0x004026c9
  40257c:	004026af 	.word	0x004026af

00402580 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402580:	b580      	push	{r7, lr}
  402582:	b084      	sub	sp, #16
  402584:	af00      	add	r7, sp, #0
  402586:	60f8      	str	r0, [r7, #12]
  402588:	60b9      	str	r1, [r7, #8]
  40258a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40258c:	68f8      	ldr	r0, [r7, #12]
  40258e:	4b1a      	ldr	r3, [pc, #104]	; (4025f8 <usart_init_rs232+0x78>)
  402590:	4798      	blx	r3

	ul_reg_val = 0;
  402592:	4b1a      	ldr	r3, [pc, #104]	; (4025fc <usart_init_rs232+0x7c>)
  402594:	2200      	movs	r2, #0
  402596:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  402598:	68bb      	ldr	r3, [r7, #8]
  40259a:	2b00      	cmp	r3, #0
  40259c:	d009      	beq.n	4025b2 <usart_init_rs232+0x32>
  40259e:	68bb      	ldr	r3, [r7, #8]
  4025a0:	681b      	ldr	r3, [r3, #0]
  4025a2:	687a      	ldr	r2, [r7, #4]
  4025a4:	4619      	mov	r1, r3
  4025a6:	68f8      	ldr	r0, [r7, #12]
  4025a8:	4b15      	ldr	r3, [pc, #84]	; (402600 <usart_init_rs232+0x80>)
  4025aa:	4798      	blx	r3
  4025ac:	4603      	mov	r3, r0
  4025ae:	2b00      	cmp	r3, #0
  4025b0:	d001      	beq.n	4025b6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4025b2:	2301      	movs	r3, #1
  4025b4:	e01b      	b.n	4025ee <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4025b6:	68bb      	ldr	r3, [r7, #8]
  4025b8:	685a      	ldr	r2, [r3, #4]
  4025ba:	68bb      	ldr	r3, [r7, #8]
  4025bc:	689b      	ldr	r3, [r3, #8]
  4025be:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4025c0:	68bb      	ldr	r3, [r7, #8]
  4025c2:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4025c4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4025c6:	68bb      	ldr	r3, [r7, #8]
  4025c8:	68db      	ldr	r3, [r3, #12]
  4025ca:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4025cc:	4b0b      	ldr	r3, [pc, #44]	; (4025fc <usart_init_rs232+0x7c>)
  4025ce:	681b      	ldr	r3, [r3, #0]
  4025d0:	4313      	orrs	r3, r2
  4025d2:	4a0a      	ldr	r2, [pc, #40]	; (4025fc <usart_init_rs232+0x7c>)
  4025d4:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4025d6:	4b09      	ldr	r3, [pc, #36]	; (4025fc <usart_init_rs232+0x7c>)
  4025d8:	681b      	ldr	r3, [r3, #0]
  4025da:	4a08      	ldr	r2, [pc, #32]	; (4025fc <usart_init_rs232+0x7c>)
  4025dc:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4025de:	68fb      	ldr	r3, [r7, #12]
  4025e0:	685a      	ldr	r2, [r3, #4]
  4025e2:	4b06      	ldr	r3, [pc, #24]	; (4025fc <usart_init_rs232+0x7c>)
  4025e4:	681b      	ldr	r3, [r3, #0]
  4025e6:	431a      	orrs	r2, r3
  4025e8:	68fb      	ldr	r3, [r7, #12]
  4025ea:	605a      	str	r2, [r3, #4]

	return 0;
  4025ec:	2300      	movs	r3, #0
}
  4025ee:	4618      	mov	r0, r3
  4025f0:	3710      	adds	r7, #16
  4025f2:	46bd      	mov	sp, r7
  4025f4:	bd80      	pop	{r7, pc}
  4025f6:	bf00      	nop
  4025f8:	00402521 	.word	0x00402521
  4025fc:	20000bec 	.word	0x20000bec
  402600:	00402497 	.word	0x00402497

00402604 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  402604:	b480      	push	{r7}
  402606:	b083      	sub	sp, #12
  402608:	af00      	add	r7, sp, #0
  40260a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  40260c:	687b      	ldr	r3, [r7, #4]
  40260e:	2240      	movs	r2, #64	; 0x40
  402610:	601a      	str	r2, [r3, #0]
}
  402612:	bf00      	nop
  402614:	370c      	adds	r7, #12
  402616:	46bd      	mov	sp, r7
  402618:	bc80      	pop	{r7}
  40261a:	4770      	bx	lr

0040261c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40261c:	b480      	push	{r7}
  40261e:	b083      	sub	sp, #12
  402620:	af00      	add	r7, sp, #0
  402622:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402624:	687b      	ldr	r3, [r7, #4]
  402626:	2288      	movs	r2, #136	; 0x88
  402628:	601a      	str	r2, [r3, #0]
}
  40262a:	bf00      	nop
  40262c:	370c      	adds	r7, #12
  40262e:	46bd      	mov	sp, r7
  402630:	bc80      	pop	{r7}
  402632:	4770      	bx	lr

00402634 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  402634:	b480      	push	{r7}
  402636:	b083      	sub	sp, #12
  402638:	af00      	add	r7, sp, #0
  40263a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40263c:	687b      	ldr	r3, [r7, #4]
  40263e:	2210      	movs	r2, #16
  402640:	601a      	str	r2, [r3, #0]
}
  402642:	bf00      	nop
  402644:	370c      	adds	r7, #12
  402646:	46bd      	mov	sp, r7
  402648:	bc80      	pop	{r7}
  40264a:	4770      	bx	lr

0040264c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40264c:	b480      	push	{r7}
  40264e:	b083      	sub	sp, #12
  402650:	af00      	add	r7, sp, #0
  402652:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402654:	687b      	ldr	r3, [r7, #4]
  402656:	2224      	movs	r2, #36	; 0x24
  402658:	601a      	str	r2, [r3, #0]
}
  40265a:	bf00      	nop
  40265c:	370c      	adds	r7, #12
  40265e:	46bd      	mov	sp, r7
  402660:	bc80      	pop	{r7}
  402662:	4770      	bx	lr

00402664 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402664:	b480      	push	{r7}
  402666:	b083      	sub	sp, #12
  402668:	af00      	add	r7, sp, #0
  40266a:	6078      	str	r0, [r7, #4]
  40266c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40266e:	687b      	ldr	r3, [r7, #4]
  402670:	683a      	ldr	r2, [r7, #0]
  402672:	609a      	str	r2, [r3, #8]
}
  402674:	bf00      	nop
  402676:	370c      	adds	r7, #12
  402678:	46bd      	mov	sp, r7
  40267a:	bc80      	pop	{r7}
  40267c:	4770      	bx	lr

0040267e <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  40267e:	b480      	push	{r7}
  402680:	b083      	sub	sp, #12
  402682:	af00      	add	r7, sp, #0
  402684:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  402686:	687b      	ldr	r3, [r7, #4]
  402688:	691b      	ldr	r3, [r3, #16]
}
  40268a:	4618      	mov	r0, r3
  40268c:	370c      	adds	r7, #12
  40268e:	46bd      	mov	sp, r7
  402690:	bc80      	pop	{r7}
  402692:	4770      	bx	lr

00402694 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  402694:	b480      	push	{r7}
  402696:	b083      	sub	sp, #12
  402698:	af00      	add	r7, sp, #0
  40269a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40269c:	687b      	ldr	r3, [r7, #4]
  40269e:	f44f 7280 	mov.w	r2, #256	; 0x100
  4026a2:	601a      	str	r2, [r3, #0]
}
  4026a4:	bf00      	nop
  4026a6:	370c      	adds	r7, #12
  4026a8:	46bd      	mov	sp, r7
  4026aa:	bc80      	pop	{r7}
  4026ac:	4770      	bx	lr

004026ae <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4026ae:	b480      	push	{r7}
  4026b0:	b083      	sub	sp, #12
  4026b2:	af00      	add	r7, sp, #0
  4026b4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4026b6:	687b      	ldr	r3, [r7, #4]
  4026b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4026bc:	601a      	str	r2, [r3, #0]
}
  4026be:	bf00      	nop
  4026c0:	370c      	adds	r7, #12
  4026c2:	46bd      	mov	sp, r7
  4026c4:	bc80      	pop	{r7}
  4026c6:	4770      	bx	lr

004026c8 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4026c8:	b480      	push	{r7}
  4026ca:	b083      	sub	sp, #12
  4026cc:	af00      	add	r7, sp, #0
  4026ce:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4026d0:	687b      	ldr	r3, [r7, #4]
  4026d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4026d6:	601a      	str	r2, [r3, #0]
}
  4026d8:	bf00      	nop
  4026da:	370c      	adds	r7, #12
  4026dc:	46bd      	mov	sp, r7
  4026de:	bc80      	pop	{r7}
  4026e0:	4770      	bx	lr

004026e2 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4026e2:	b480      	push	{r7}
  4026e4:	b083      	sub	sp, #12
  4026e6:	af00      	add	r7, sp, #0
  4026e8:	6078      	str	r0, [r7, #4]
  4026ea:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4026ec:	687b      	ldr	r3, [r7, #4]
  4026ee:	695b      	ldr	r3, [r3, #20]
  4026f0:	f003 0302 	and.w	r3, r3, #2
  4026f4:	2b00      	cmp	r3, #0
  4026f6:	d101      	bne.n	4026fc <usart_write+0x1a>
		return 1;
  4026f8:	2301      	movs	r3, #1
  4026fa:	e005      	b.n	402708 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4026fc:	683b      	ldr	r3, [r7, #0]
  4026fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402702:	687b      	ldr	r3, [r7, #4]
  402704:	61da      	str	r2, [r3, #28]
	return 0;
  402706:	2300      	movs	r3, #0
}
  402708:	4618      	mov	r0, r3
  40270a:	370c      	adds	r7, #12
  40270c:	46bd      	mov	sp, r7
  40270e:	bc80      	pop	{r7}
  402710:	4770      	bx	lr

00402712 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  402712:	b480      	push	{r7}
  402714:	b083      	sub	sp, #12
  402716:	af00      	add	r7, sp, #0
  402718:	6078      	str	r0, [r7, #4]
  40271a:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40271c:	687b      	ldr	r3, [r7, #4]
  40271e:	695b      	ldr	r3, [r3, #20]
  402720:	f003 0301 	and.w	r3, r3, #1
  402724:	2b00      	cmp	r3, #0
  402726:	d101      	bne.n	40272c <usart_read+0x1a>
		return 1;
  402728:	2301      	movs	r3, #1
  40272a:	e006      	b.n	40273a <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40272c:	687b      	ldr	r3, [r7, #4]
  40272e:	699b      	ldr	r3, [r3, #24]
  402730:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402734:	683b      	ldr	r3, [r7, #0]
  402736:	601a      	str	r2, [r3, #0]

	return 0;
  402738:	2300      	movs	r3, #0
}
  40273a:	4618      	mov	r0, r3
  40273c:	370c      	adds	r7, #12
  40273e:	46bd      	mov	sp, r7
  402740:	bc80      	pop	{r7}
  402742:	4770      	bx	lr

00402744 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  402744:	b480      	push	{r7}
  402746:	b083      	sub	sp, #12
  402748:	af00      	add	r7, sp, #0
  40274a:	6078      	str	r0, [r7, #4]
  40274c:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40274e:	bf00      	nop
  402750:	687b      	ldr	r3, [r7, #4]
  402752:	695b      	ldr	r3, [r3, #20]
  402754:	f003 0301 	and.w	r3, r3, #1
  402758:	2b00      	cmp	r3, #0
  40275a:	d0f9      	beq.n	402750 <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40275c:	687b      	ldr	r3, [r7, #4]
  40275e:	699b      	ldr	r3, [r3, #24]
  402760:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402764:	683b      	ldr	r3, [r7, #0]
  402766:	601a      	str	r2, [r3, #0]

	return 0;
  402768:	2300      	movs	r3, #0
}
  40276a:	4618      	mov	r0, r3
  40276c:	370c      	adds	r7, #12
  40276e:	46bd      	mov	sp, r7
  402770:	bc80      	pop	{r7}
  402772:	4770      	bx	lr

00402774 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  402774:	b480      	push	{r7}
  402776:	b083      	sub	sp, #12
  402778:	af00      	add	r7, sp, #0
  40277a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40277c:	687b      	ldr	r3, [r7, #4]
  40277e:	4a04      	ldr	r2, [pc, #16]	; (402790 <usart_disable_writeprotect+0x1c>)
  402780:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402784:	bf00      	nop
  402786:	370c      	adds	r7, #12
  402788:	46bd      	mov	sp, r7
  40278a:	bc80      	pop	{r7}
  40278c:	4770      	bx	lr
  40278e:	bf00      	nop
  402790:	55534100 	.word	0x55534100

00402794 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  402794:	b480      	push	{r7}
  402796:	b083      	sub	sp, #12
  402798:	af00      	add	r7, sp, #0
  40279a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40279c:	687b      	ldr	r3, [r7, #4]
  40279e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4027a2:	605a      	str	r2, [r3, #4]

}
  4027a4:	bf00      	nop
  4027a6:	370c      	adds	r7, #12
  4027a8:	46bd      	mov	sp, r7
  4027aa:	bc80      	pop	{r7}
  4027ac:	4770      	bx	lr
	...

004027b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4027b0:	b580      	push	{r7, lr}
  4027b2:	b084      	sub	sp, #16
  4027b4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4027b6:	4b27      	ldr	r3, [pc, #156]	; (402854 <Reset_Handler+0xa4>)
  4027b8:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4027ba:	4b27      	ldr	r3, [pc, #156]	; (402858 <Reset_Handler+0xa8>)
  4027bc:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4027be:	68fa      	ldr	r2, [r7, #12]
  4027c0:	68bb      	ldr	r3, [r7, #8]
  4027c2:	429a      	cmp	r2, r3
  4027c4:	d90d      	bls.n	4027e2 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4027c6:	e007      	b.n	4027d8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4027c8:	68bb      	ldr	r3, [r7, #8]
  4027ca:	1d1a      	adds	r2, r3, #4
  4027cc:	60ba      	str	r2, [r7, #8]
  4027ce:	68fa      	ldr	r2, [r7, #12]
  4027d0:	1d11      	adds	r1, r2, #4
  4027d2:	60f9      	str	r1, [r7, #12]
  4027d4:	6812      	ldr	r2, [r2, #0]
  4027d6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4027d8:	68bb      	ldr	r3, [r7, #8]
  4027da:	4a20      	ldr	r2, [pc, #128]	; (40285c <Reset_Handler+0xac>)
  4027dc:	4293      	cmp	r3, r2
  4027de:	d3f3      	bcc.n	4027c8 <Reset_Handler+0x18>
  4027e0:	e020      	b.n	402824 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  4027e2:	68fa      	ldr	r2, [r7, #12]
  4027e4:	68bb      	ldr	r3, [r7, #8]
  4027e6:	429a      	cmp	r2, r3
  4027e8:	d21c      	bcs.n	402824 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4027ea:	4a1c      	ldr	r2, [pc, #112]	; (40285c <Reset_Handler+0xac>)
  4027ec:	4b1a      	ldr	r3, [pc, #104]	; (402858 <Reset_Handler+0xa8>)
  4027ee:	1ad3      	subs	r3, r2, r3
  4027f0:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4027f2:	68fa      	ldr	r2, [r7, #12]
  4027f4:	687b      	ldr	r3, [r7, #4]
  4027f6:	4413      	add	r3, r2
  4027f8:	3b04      	subs	r3, #4
  4027fa:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4027fc:	68ba      	ldr	r2, [r7, #8]
  4027fe:	687b      	ldr	r3, [r7, #4]
  402800:	4413      	add	r3, r2
  402802:	3b04      	subs	r3, #4
  402804:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402806:	e00a      	b.n	40281e <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402808:	68bb      	ldr	r3, [r7, #8]
  40280a:	1f1a      	subs	r2, r3, #4
  40280c:	60ba      	str	r2, [r7, #8]
  40280e:	68fa      	ldr	r2, [r7, #12]
  402810:	1f11      	subs	r1, r2, #4
  402812:	60f9      	str	r1, [r7, #12]
  402814:	6812      	ldr	r2, [r2, #0]
  402816:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402818:	687b      	ldr	r3, [r7, #4]
  40281a:	3b04      	subs	r3, #4
  40281c:	607b      	str	r3, [r7, #4]
  40281e:	687b      	ldr	r3, [r7, #4]
  402820:	2b00      	cmp	r3, #0
  402822:	d1f1      	bne.n	402808 <Reset_Handler+0x58>
		}
	}
	__NOP();
  402824:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402826:	4b0e      	ldr	r3, [pc, #56]	; (402860 <Reset_Handler+0xb0>)
  402828:	60bb      	str	r3, [r7, #8]
  40282a:	e004      	b.n	402836 <Reset_Handler+0x86>
		*pDest++ = 0;
  40282c:	68bb      	ldr	r3, [r7, #8]
  40282e:	1d1a      	adds	r2, r3, #4
  402830:	60ba      	str	r2, [r7, #8]
  402832:	2200      	movs	r2, #0
  402834:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  402836:	68bb      	ldr	r3, [r7, #8]
  402838:	4a0a      	ldr	r2, [pc, #40]	; (402864 <Reset_Handler+0xb4>)
  40283a:	4293      	cmp	r3, r2
  40283c:	d3f6      	bcc.n	40282c <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40283e:	4b0a      	ldr	r3, [pc, #40]	; (402868 <Reset_Handler+0xb8>)
  402840:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402842:	4a0a      	ldr	r2, [pc, #40]	; (40286c <Reset_Handler+0xbc>)
  402844:	68fb      	ldr	r3, [r7, #12]
  402846:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402848:	4b09      	ldr	r3, [pc, #36]	; (402870 <Reset_Handler+0xc0>)
  40284a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40284c:	4b09      	ldr	r3, [pc, #36]	; (402874 <Reset_Handler+0xc4>)
  40284e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402850:	e7fe      	b.n	402850 <Reset_Handler+0xa0>
  402852:	bf00      	nop
  402854:	00404bf4 	.word	0x00404bf4
  402858:	20000000 	.word	0x20000000
  40285c:	20000954 	.word	0x20000954
  402860:	20000954 	.word	0x20000954
  402864:	2000306c 	.word	0x2000306c
  402868:	00400000 	.word	0x00400000
  40286c:	e000ed00 	.word	0xe000ed00
  402870:	00403785 	.word	0x00403785
  402874:	0040313d 	.word	0x0040313d

00402878 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402878:	b480      	push	{r7}
  40287a:	af00      	add	r7, sp, #0
	while (1) {
  40287c:	e7fe      	b.n	40287c <Dummy_Handler+0x4>
	...

00402880 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402880:	b480      	push	{r7}
  402882:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402884:	4b5d      	ldr	r3, [pc, #372]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  402886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402888:	f003 0303 	and.w	r3, r3, #3
  40288c:	2b03      	cmp	r3, #3
  40288e:	f200 8096 	bhi.w	4029be <SystemCoreClockUpdate+0x13e>
  402892:	a201      	add	r2, pc, #4	; (adr r2, 402898 <SystemCoreClockUpdate+0x18>)
  402894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402898:	004028a9 	.word	0x004028a9
  40289c:	004028c9 	.word	0x004028c9
  4028a0:	00402913 	.word	0x00402913
  4028a4:	00402913 	.word	0x00402913
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4028a8:	4b55      	ldr	r3, [pc, #340]	; (402a00 <SystemCoreClockUpdate+0x180>)
  4028aa:	695b      	ldr	r3, [r3, #20]
  4028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4028b0:	2b00      	cmp	r3, #0
  4028b2:	d004      	beq.n	4028be <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4028b4:	4b53      	ldr	r3, [pc, #332]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4028b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4028ba:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4028bc:	e080      	b.n	4029c0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4028be:	4b51      	ldr	r3, [pc, #324]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4028c0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4028c4:	601a      	str	r2, [r3, #0]
		break;
  4028c6:	e07b      	b.n	4029c0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4028c8:	4b4c      	ldr	r3, [pc, #304]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  4028ca:	6a1b      	ldr	r3, [r3, #32]
  4028cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4028d0:	2b00      	cmp	r3, #0
  4028d2:	d003      	beq.n	4028dc <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4028d4:	4b4b      	ldr	r3, [pc, #300]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4028d6:	4a4c      	ldr	r2, [pc, #304]	; (402a08 <SystemCoreClockUpdate+0x188>)
  4028d8:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4028da:	e071      	b.n	4029c0 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028dc:	4b49      	ldr	r3, [pc, #292]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4028de:	4a4b      	ldr	r2, [pc, #300]	; (402a0c <SystemCoreClockUpdate+0x18c>)
  4028e0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4028e2:	4b46      	ldr	r3, [pc, #280]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  4028e4:	6a1b      	ldr	r3, [r3, #32]
  4028e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028ea:	2b10      	cmp	r3, #16
  4028ec:	d008      	beq.n	402900 <SystemCoreClockUpdate+0x80>
  4028ee:	2b20      	cmp	r3, #32
  4028f0:	d00a      	beq.n	402908 <SystemCoreClockUpdate+0x88>
  4028f2:	2b00      	cmp	r3, #0
  4028f4:	d000      	beq.n	4028f8 <SystemCoreClockUpdate+0x78>
			break;
  4028f6:	e00b      	b.n	402910 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028f8:	4b42      	ldr	r3, [pc, #264]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4028fa:	4a44      	ldr	r2, [pc, #272]	; (402a0c <SystemCoreClockUpdate+0x18c>)
  4028fc:	601a      	str	r2, [r3, #0]
			break;
  4028fe:	e007      	b.n	402910 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402900:	4b40      	ldr	r3, [pc, #256]	; (402a04 <SystemCoreClockUpdate+0x184>)
  402902:	4a43      	ldr	r2, [pc, #268]	; (402a10 <SystemCoreClockUpdate+0x190>)
  402904:	601a      	str	r2, [r3, #0]
			break;
  402906:	e003      	b.n	402910 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402908:	4b3e      	ldr	r3, [pc, #248]	; (402a04 <SystemCoreClockUpdate+0x184>)
  40290a:	4a3f      	ldr	r2, [pc, #252]	; (402a08 <SystemCoreClockUpdate+0x188>)
  40290c:	601a      	str	r2, [r3, #0]
			break;
  40290e:	bf00      	nop
		break;
  402910:	e056      	b.n	4029c0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402912:	4b3a      	ldr	r3, [pc, #232]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  402914:	6a1b      	ldr	r3, [r3, #32]
  402916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40291a:	2b00      	cmp	r3, #0
  40291c:	d003      	beq.n	402926 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40291e:	4b39      	ldr	r3, [pc, #228]	; (402a04 <SystemCoreClockUpdate+0x184>)
  402920:	4a39      	ldr	r2, [pc, #228]	; (402a08 <SystemCoreClockUpdate+0x188>)
  402922:	601a      	str	r2, [r3, #0]
  402924:	e019      	b.n	40295a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402926:	4b37      	ldr	r3, [pc, #220]	; (402a04 <SystemCoreClockUpdate+0x184>)
  402928:	4a38      	ldr	r2, [pc, #224]	; (402a0c <SystemCoreClockUpdate+0x18c>)
  40292a:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40292c:	4b33      	ldr	r3, [pc, #204]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  40292e:	6a1b      	ldr	r3, [r3, #32]
  402930:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402934:	2b10      	cmp	r3, #16
  402936:	d008      	beq.n	40294a <SystemCoreClockUpdate+0xca>
  402938:	2b20      	cmp	r3, #32
  40293a:	d00a      	beq.n	402952 <SystemCoreClockUpdate+0xd2>
  40293c:	2b00      	cmp	r3, #0
  40293e:	d000      	beq.n	402942 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402940:	e00b      	b.n	40295a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402942:	4b30      	ldr	r3, [pc, #192]	; (402a04 <SystemCoreClockUpdate+0x184>)
  402944:	4a31      	ldr	r2, [pc, #196]	; (402a0c <SystemCoreClockUpdate+0x18c>)
  402946:	601a      	str	r2, [r3, #0]
					break;
  402948:	e007      	b.n	40295a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40294a:	4b2e      	ldr	r3, [pc, #184]	; (402a04 <SystemCoreClockUpdate+0x184>)
  40294c:	4a30      	ldr	r2, [pc, #192]	; (402a10 <SystemCoreClockUpdate+0x190>)
  40294e:	601a      	str	r2, [r3, #0]
					break;
  402950:	e003      	b.n	40295a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402952:	4b2c      	ldr	r3, [pc, #176]	; (402a04 <SystemCoreClockUpdate+0x184>)
  402954:	4a2c      	ldr	r2, [pc, #176]	; (402a08 <SystemCoreClockUpdate+0x188>)
  402956:	601a      	str	r2, [r3, #0]
					break;
  402958:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40295a:	4b28      	ldr	r3, [pc, #160]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  40295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40295e:	f003 0303 	and.w	r3, r3, #3
  402962:	2b02      	cmp	r3, #2
  402964:	d115      	bne.n	402992 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402966:	4b25      	ldr	r3, [pc, #148]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  402968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40296a:	0c1b      	lsrs	r3, r3, #16
  40296c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402970:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402972:	4a24      	ldr	r2, [pc, #144]	; (402a04 <SystemCoreClockUpdate+0x184>)
  402974:	6812      	ldr	r2, [r2, #0]
  402976:	fb02 f303 	mul.w	r3, r2, r3
  40297a:	4a22      	ldr	r2, [pc, #136]	; (402a04 <SystemCoreClockUpdate+0x184>)
  40297c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40297e:	4b1f      	ldr	r3, [pc, #124]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  402980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402982:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402984:	4a1f      	ldr	r2, [pc, #124]	; (402a04 <SystemCoreClockUpdate+0x184>)
  402986:	6812      	ldr	r2, [r2, #0]
  402988:	fbb2 f3f3 	udiv	r3, r2, r3
  40298c:	4a1d      	ldr	r2, [pc, #116]	; (402a04 <SystemCoreClockUpdate+0x184>)
  40298e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402990:	e016      	b.n	4029c0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402992:	4b1a      	ldr	r3, [pc, #104]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  402994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402996:	0c1b      	lsrs	r3, r3, #16
  402998:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40299c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40299e:	4a19      	ldr	r2, [pc, #100]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4029a0:	6812      	ldr	r2, [r2, #0]
  4029a2:	fb02 f303 	mul.w	r3, r2, r3
  4029a6:	4a17      	ldr	r2, [pc, #92]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4029a8:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4029aa:	4b14      	ldr	r3, [pc, #80]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  4029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4029ae:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4029b0:	4a14      	ldr	r2, [pc, #80]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4029b2:	6812      	ldr	r2, [r2, #0]
  4029b4:	fbb2 f3f3 	udiv	r3, r2, r3
  4029b8:	4a12      	ldr	r2, [pc, #72]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4029ba:	6013      	str	r3, [r2, #0]
		break;
  4029bc:	e000      	b.n	4029c0 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4029be:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4029c0:	4b0e      	ldr	r3, [pc, #56]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  4029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029c8:	2b70      	cmp	r3, #112	; 0x70
  4029ca:	d108      	bne.n	4029de <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4029cc:	4b0d      	ldr	r3, [pc, #52]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4029ce:	681b      	ldr	r3, [r3, #0]
  4029d0:	4a10      	ldr	r2, [pc, #64]	; (402a14 <SystemCoreClockUpdate+0x194>)
  4029d2:	fba2 2303 	umull	r2, r3, r2, r3
  4029d6:	085b      	lsrs	r3, r3, #1
  4029d8:	4a0a      	ldr	r2, [pc, #40]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4029da:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4029dc:	e00a      	b.n	4029f4 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4029de:	4b07      	ldr	r3, [pc, #28]	; (4029fc <SystemCoreClockUpdate+0x17c>)
  4029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029e2:	091b      	lsrs	r3, r3, #4
  4029e4:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4029e8:	4a06      	ldr	r2, [pc, #24]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4029ea:	6812      	ldr	r2, [r2, #0]
  4029ec:	fa22 f303 	lsr.w	r3, r2, r3
  4029f0:	4a04      	ldr	r2, [pc, #16]	; (402a04 <SystemCoreClockUpdate+0x184>)
  4029f2:	6013      	str	r3, [r2, #0]
}
  4029f4:	bf00      	nop
  4029f6:	46bd      	mov	sp, r7
  4029f8:	bc80      	pop	{r7}
  4029fa:	4770      	bx	lr
  4029fc:	400e0400 	.word	0x400e0400
  402a00:	400e1410 	.word	0x400e1410
  402a04:	2000010c 	.word	0x2000010c
  402a08:	00b71b00 	.word	0x00b71b00
  402a0c:	003d0900 	.word	0x003d0900
  402a10:	007a1200 	.word	0x007a1200
  402a14:	aaaaaaab 	.word	0xaaaaaaab

00402a18 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402a18:	b480      	push	{r7}
  402a1a:	b083      	sub	sp, #12
  402a1c:	af00      	add	r7, sp, #0
  402a1e:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402a20:	687b      	ldr	r3, [r7, #4]
  402a22:	4a22      	ldr	r2, [pc, #136]	; (402aac <system_init_flash+0x94>)
  402a24:	4293      	cmp	r3, r2
  402a26:	d808      	bhi.n	402a3a <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402a28:	4b21      	ldr	r3, [pc, #132]	; (402ab0 <system_init_flash+0x98>)
  402a2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402a2e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402a30:	4b20      	ldr	r3, [pc, #128]	; (402ab4 <system_init_flash+0x9c>)
  402a32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402a36:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402a38:	e033      	b.n	402aa2 <system_init_flash+0x8a>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402a3a:	687b      	ldr	r3, [r7, #4]
  402a3c:	4a1e      	ldr	r2, [pc, #120]	; (402ab8 <system_init_flash+0xa0>)
  402a3e:	4293      	cmp	r3, r2
  402a40:	d806      	bhi.n	402a50 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402a42:	4b1b      	ldr	r3, [pc, #108]	; (402ab0 <system_init_flash+0x98>)
  402a44:	4a1d      	ldr	r2, [pc, #116]	; (402abc <system_init_flash+0xa4>)
  402a46:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402a48:	4b1a      	ldr	r3, [pc, #104]	; (402ab4 <system_init_flash+0x9c>)
  402a4a:	4a1c      	ldr	r2, [pc, #112]	; (402abc <system_init_flash+0xa4>)
  402a4c:	601a      	str	r2, [r3, #0]
}
  402a4e:	e028      	b.n	402aa2 <system_init_flash+0x8a>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402a50:	687b      	ldr	r3, [r7, #4]
  402a52:	4a1b      	ldr	r2, [pc, #108]	; (402ac0 <system_init_flash+0xa8>)
  402a54:	4293      	cmp	r3, r2
  402a56:	d806      	bhi.n	402a66 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402a58:	4b15      	ldr	r3, [pc, #84]	; (402ab0 <system_init_flash+0x98>)
  402a5a:	4a1a      	ldr	r2, [pc, #104]	; (402ac4 <system_init_flash+0xac>)
  402a5c:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402a5e:	4b15      	ldr	r3, [pc, #84]	; (402ab4 <system_init_flash+0x9c>)
  402a60:	4a18      	ldr	r2, [pc, #96]	; (402ac4 <system_init_flash+0xac>)
  402a62:	601a      	str	r2, [r3, #0]
}
  402a64:	e01d      	b.n	402aa2 <system_init_flash+0x8a>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402a66:	687b      	ldr	r3, [r7, #4]
  402a68:	4a17      	ldr	r2, [pc, #92]	; (402ac8 <system_init_flash+0xb0>)
  402a6a:	4293      	cmp	r3, r2
  402a6c:	d806      	bhi.n	402a7c <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402a6e:	4b10      	ldr	r3, [pc, #64]	; (402ab0 <system_init_flash+0x98>)
  402a70:	4a16      	ldr	r2, [pc, #88]	; (402acc <system_init_flash+0xb4>)
  402a72:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402a74:	4b0f      	ldr	r3, [pc, #60]	; (402ab4 <system_init_flash+0x9c>)
  402a76:	4a15      	ldr	r2, [pc, #84]	; (402acc <system_init_flash+0xb4>)
  402a78:	601a      	str	r2, [r3, #0]
}
  402a7a:	e012      	b.n	402aa2 <system_init_flash+0x8a>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402a7c:	687b      	ldr	r3, [r7, #4]
  402a7e:	4a14      	ldr	r2, [pc, #80]	; (402ad0 <system_init_flash+0xb8>)
  402a80:	4293      	cmp	r3, r2
  402a82:	d808      	bhi.n	402a96 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402a84:	4b0a      	ldr	r3, [pc, #40]	; (402ab0 <system_init_flash+0x98>)
  402a86:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402a8a:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402a8c:	4b09      	ldr	r3, [pc, #36]	; (402ab4 <system_init_flash+0x9c>)
  402a8e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402a92:	601a      	str	r2, [r3, #0]
}
  402a94:	e005      	b.n	402aa2 <system_init_flash+0x8a>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402a96:	4b06      	ldr	r3, [pc, #24]	; (402ab0 <system_init_flash+0x98>)
  402a98:	4a0e      	ldr	r2, [pc, #56]	; (402ad4 <system_init_flash+0xbc>)
  402a9a:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402a9c:	4b05      	ldr	r3, [pc, #20]	; (402ab4 <system_init_flash+0x9c>)
  402a9e:	4a0d      	ldr	r2, [pc, #52]	; (402ad4 <system_init_flash+0xbc>)
  402aa0:	601a      	str	r2, [r3, #0]
}
  402aa2:	bf00      	nop
  402aa4:	370c      	adds	r7, #12
  402aa6:	46bd      	mov	sp, r7
  402aa8:	bc80      	pop	{r7}
  402aaa:	4770      	bx	lr
  402aac:	01312cff 	.word	0x01312cff
  402ab0:	400e0a00 	.word	0x400e0a00
  402ab4:	400e0c00 	.word	0x400e0c00
  402ab8:	026259ff 	.word	0x026259ff
  402abc:	04000100 	.word	0x04000100
  402ac0:	039386ff 	.word	0x039386ff
  402ac4:	04000200 	.word	0x04000200
  402ac8:	04c4b3ff 	.word	0x04c4b3ff
  402acc:	04000300 	.word	0x04000300
  402ad0:	05f5e0ff 	.word	0x05f5e0ff
  402ad4:	04000500 	.word	0x04000500

00402ad8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402ad8:	b480      	push	{r7}
  402ada:	b085      	sub	sp, #20
  402adc:	af00      	add	r7, sp, #0
  402ade:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402ae0:	4b10      	ldr	r3, [pc, #64]	; (402b24 <_sbrk+0x4c>)
  402ae2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402ae4:	4b10      	ldr	r3, [pc, #64]	; (402b28 <_sbrk+0x50>)
  402ae6:	681b      	ldr	r3, [r3, #0]
  402ae8:	2b00      	cmp	r3, #0
  402aea:	d102      	bne.n	402af2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402aec:	4b0e      	ldr	r3, [pc, #56]	; (402b28 <_sbrk+0x50>)
  402aee:	4a0f      	ldr	r2, [pc, #60]	; (402b2c <_sbrk+0x54>)
  402af0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402af2:	4b0d      	ldr	r3, [pc, #52]	; (402b28 <_sbrk+0x50>)
  402af4:	681b      	ldr	r3, [r3, #0]
  402af6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402af8:	68ba      	ldr	r2, [r7, #8]
  402afa:	687b      	ldr	r3, [r7, #4]
  402afc:	441a      	add	r2, r3
  402afe:	68fb      	ldr	r3, [r7, #12]
  402b00:	429a      	cmp	r2, r3
  402b02:	dd02      	ble.n	402b0a <_sbrk+0x32>
		return (caddr_t) -1;	
  402b04:	f04f 33ff 	mov.w	r3, #4294967295
  402b08:	e006      	b.n	402b18 <_sbrk+0x40>
	}

	heap += incr;
  402b0a:	4b07      	ldr	r3, [pc, #28]	; (402b28 <_sbrk+0x50>)
  402b0c:	681a      	ldr	r2, [r3, #0]
  402b0e:	687b      	ldr	r3, [r7, #4]
  402b10:	4413      	add	r3, r2
  402b12:	4a05      	ldr	r2, [pc, #20]	; (402b28 <_sbrk+0x50>)
  402b14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402b16:	68bb      	ldr	r3, [r7, #8]
}
  402b18:	4618      	mov	r0, r3
  402b1a:	3714      	adds	r7, #20
  402b1c:	46bd      	mov	sp, r7
  402b1e:	bc80      	pop	{r7}
  402b20:	4770      	bx	lr
  402b22:	bf00      	nop
  402b24:	20027ffc 	.word	0x20027ffc
  402b28:	20000bf0 	.word	0x20000bf0
  402b2c:	20006070 	.word	0x20006070

00402b30 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402b30:	b480      	push	{r7}
  402b32:	b083      	sub	sp, #12
  402b34:	af00      	add	r7, sp, #0
  402b36:	6078      	str	r0, [r7, #4]
	return -1;
  402b38:	f04f 33ff 	mov.w	r3, #4294967295
}
  402b3c:	4618      	mov	r0, r3
  402b3e:	370c      	adds	r7, #12
  402b40:	46bd      	mov	sp, r7
  402b42:	bc80      	pop	{r7}
  402b44:	4770      	bx	lr

00402b46 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  402b46:	b480      	push	{r7}
  402b48:	b083      	sub	sp, #12
  402b4a:	af00      	add	r7, sp, #0
  402b4c:	6078      	str	r0, [r7, #4]
  402b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402b50:	683b      	ldr	r3, [r7, #0]
  402b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402b56:	605a      	str	r2, [r3, #4]

	return 0;
  402b58:	2300      	movs	r3, #0
}
  402b5a:	4618      	mov	r0, r3
  402b5c:	370c      	adds	r7, #12
  402b5e:	46bd      	mov	sp, r7
  402b60:	bc80      	pop	{r7}
  402b62:	4770      	bx	lr

00402b64 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
  402b64:	b480      	push	{r7}
  402b66:	b085      	sub	sp, #20
  402b68:	af00      	add	r7, sp, #0
  402b6a:	60f8      	str	r0, [r7, #12]
  402b6c:	60b9      	str	r1, [r7, #8]
  402b6e:	607a      	str	r2, [r7, #4]
	return 0;
  402b70:	2300      	movs	r3, #0
}
  402b72:	4618      	mov	r0, r3
  402b74:	3714      	adds	r7, #20
  402b76:	46bd      	mov	sp, r7
  402b78:	bc80      	pop	{r7}
  402b7a:	4770      	bx	lr

00402b7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  402b7c:	b480      	push	{r7}
  402b7e:	b083      	sub	sp, #12
  402b80:	af00      	add	r7, sp, #0
  402b82:	4603      	mov	r3, r0
  402b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b8a:	2b00      	cmp	r3, #0
  402b8c:	db10      	blt.n	402bb0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402b8e:	490b      	ldr	r1, [pc, #44]	; (402bbc <__NVIC_DisableIRQ+0x40>)
  402b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b94:	095b      	lsrs	r3, r3, #5
  402b96:	79fa      	ldrb	r2, [r7, #7]
  402b98:	f002 021f 	and.w	r2, r2, #31
  402b9c:	2001      	movs	r0, #1
  402b9e:	fa00 f202 	lsl.w	r2, r0, r2
  402ba2:	3320      	adds	r3, #32
  402ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402ba8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402bac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  402bb0:	bf00      	nop
  402bb2:	370c      	adds	r7, #12
  402bb4:	46bd      	mov	sp, r7
  402bb6:	bc80      	pop	{r7}
  402bb8:	4770      	bx	lr
  402bba:	bf00      	nop
  402bbc:	e000e100 	.word	0xe000e100

00402bc0 <osc_get_rate>:
{
  402bc0:	b480      	push	{r7}
  402bc2:	b083      	sub	sp, #12
  402bc4:	af00      	add	r7, sp, #0
  402bc6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402bc8:	687b      	ldr	r3, [r7, #4]
  402bca:	2b07      	cmp	r3, #7
  402bcc:	d825      	bhi.n	402c1a <osc_get_rate+0x5a>
  402bce:	a201      	add	r2, pc, #4	; (adr r2, 402bd4 <osc_get_rate+0x14>)
  402bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402bd4:	00402bf5 	.word	0x00402bf5
  402bd8:	00402bfb 	.word	0x00402bfb
  402bdc:	00402c01 	.word	0x00402c01
  402be0:	00402c07 	.word	0x00402c07
  402be4:	00402c0b 	.word	0x00402c0b
  402be8:	00402c0f 	.word	0x00402c0f
  402bec:	00402c13 	.word	0x00402c13
  402bf0:	00402c17 	.word	0x00402c17
		return OSC_SLCK_32K_RC_HZ;
  402bf4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402bf8:	e010      	b.n	402c1c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402bfe:	e00d      	b.n	402c1c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402c04:	e00a      	b.n	402c1c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402c06:	4b08      	ldr	r3, [pc, #32]	; (402c28 <osc_get_rate+0x68>)
  402c08:	e008      	b.n	402c1c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402c0a:	4b08      	ldr	r3, [pc, #32]	; (402c2c <osc_get_rate+0x6c>)
  402c0c:	e006      	b.n	402c1c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402c0e:	4b08      	ldr	r3, [pc, #32]	; (402c30 <osc_get_rate+0x70>)
  402c10:	e004      	b.n	402c1c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402c12:	4b07      	ldr	r3, [pc, #28]	; (402c30 <osc_get_rate+0x70>)
  402c14:	e002      	b.n	402c1c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402c16:	4b06      	ldr	r3, [pc, #24]	; (402c30 <osc_get_rate+0x70>)
  402c18:	e000      	b.n	402c1c <osc_get_rate+0x5c>
	return 0;
  402c1a:	2300      	movs	r3, #0
}
  402c1c:	4618      	mov	r0, r3
  402c1e:	370c      	adds	r7, #12
  402c20:	46bd      	mov	sp, r7
  402c22:	bc80      	pop	{r7}
  402c24:	4770      	bx	lr
  402c26:	bf00      	nop
  402c28:	003d0900 	.word	0x003d0900
  402c2c:	007a1200 	.word	0x007a1200
  402c30:	00b71b00 	.word	0x00b71b00

00402c34 <sysclk_get_main_hz>:
{
  402c34:	b580      	push	{r7, lr}
  402c36:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402c38:	2006      	movs	r0, #6
  402c3a:	4b04      	ldr	r3, [pc, #16]	; (402c4c <sysclk_get_main_hz+0x18>)
  402c3c:	4798      	blx	r3
  402c3e:	4602      	mov	r2, r0
  402c40:	4613      	mov	r3, r2
  402c42:	009b      	lsls	r3, r3, #2
  402c44:	4413      	add	r3, r2
  402c46:	009b      	lsls	r3, r3, #2
}
  402c48:	4618      	mov	r0, r3
  402c4a:	bd80      	pop	{r7, pc}
  402c4c:	00402bc1 	.word	0x00402bc1

00402c50 <sysclk_get_cpu_hz>:
{
  402c50:	b580      	push	{r7, lr}
  402c52:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402c54:	4b02      	ldr	r3, [pc, #8]	; (402c60 <sysclk_get_cpu_hz+0x10>)
  402c56:	4798      	blx	r3
  402c58:	4603      	mov	r3, r0
  402c5a:	085b      	lsrs	r3, r3, #1
}
  402c5c:	4618      	mov	r0, r3
  402c5e:	bd80      	pop	{r7, pc}
  402c60:	00402c35 	.word	0x00402c35

00402c64 <Flash_Init>:
#include "flash.h"  
#include "boot_uart.h"

Flash_Status_t Flash_Init(void)
{
  402c64:	b580      	push	{r7, lr}
  402c66:	b082      	sub	sp, #8
  402c68:	af00      	add	r7, sp, #0
    Flash_Status_t status = FLASH_OK;
  402c6a:	2300      	movs	r3, #0
  402c6c:	71fb      	strb	r3, [r7, #7]

    if(flash_init(FLASH_ACCESS_MODE_128, 6) != FLASH_RC_OK)
  402c6e:	2106      	movs	r1, #6
  402c70:	2000      	movs	r0, #0
  402c72:	4b06      	ldr	r3, [pc, #24]	; (402c8c <Flash_Init+0x28>)
  402c74:	4798      	blx	r3
  402c76:	4603      	mov	r3, r0
  402c78:	2b00      	cmp	r3, #0
  402c7a:	d001      	beq.n	402c80 <Flash_Init+0x1c>
    {
        status = FLASH_ERROR;
  402c7c:	23ff      	movs	r3, #255	; 0xff
  402c7e:	71fb      	strb	r3, [r7, #7]
    }

    return status;
  402c80:	79fb      	ldrb	r3, [r7, #7]
}
  402c82:	4618      	mov	r0, r3
  402c84:	3708      	adds	r7, #8
  402c86:	46bd      	mov	sp, r7
  402c88:	bd80      	pop	{r7, pc}
  402c8a:	bf00      	nop
  402c8c:	004003e5 	.word	0x004003e5

00402c90 <Flash_Erase>:
 * @brief   This function erases the memory.
 * @param   address: First address to be erased (the last is the end of the flash).
 * @return  status: Report about the success of the erasing.
 */
Flash_Status_t Flash_Erase(uint32_t address, uint32_t size)
{
  402c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c94:	b085      	sub	sp, #20
  402c96:	af00      	add	r7, sp, #0
  402c98:	6078      	str	r0, [r7, #4]
  402c9a:	6039      	str	r1, [r7, #0]
    Flash_Status_t status = FLASH_OK;
  402c9c:	2300      	movs	r3, #0
  402c9e:	73fb      	strb	r3, [r7, #15]

    if(flash_unlock(address, address + (FLASH_PAGE_SIZE * size) - 1, 0, 0) != FLASH_RC_OK)
  402ca0:	683b      	ldr	r3, [r7, #0]
  402ca2:	025a      	lsls	r2, r3, #9
  402ca4:	687b      	ldr	r3, [r7, #4]
  402ca6:	4413      	add	r3, r2
  402ca8:	1e59      	subs	r1, r3, #1
  402caa:	2300      	movs	r3, #0
  402cac:	2200      	movs	r2, #0
  402cae:	6878      	ldr	r0, [r7, #4]
  402cb0:	4c5b      	ldr	r4, [pc, #364]	; (402e20 <Flash_Erase+0x190>)
  402cb2:	47a0      	blx	r4
  402cb4:	4603      	mov	r3, r0
  402cb6:	2b00      	cmp	r3, #0
  402cb8:	d001      	beq.n	402cbe <Flash_Erase+0x2e>
    {
        status = FLASH_ERROR;
  402cba:	23ff      	movs	r3, #255	; 0xff
  402cbc:	73fb      	strb	r3, [r7, #15]
    }
    delay_ms(10);
  402cbe:	4b59      	ldr	r3, [pc, #356]	; (402e24 <Flash_Erase+0x194>)
  402cc0:	4798      	blx	r3
  402cc2:	4603      	mov	r3, r0
  402cc4:	4619      	mov	r1, r3
  402cc6:	f04f 0200 	mov.w	r2, #0
  402cca:	460b      	mov	r3, r1
  402ccc:	4614      	mov	r4, r2
  402cce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  402cd2:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  402cd6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  402cda:	4653      	mov	r3, sl
  402cdc:	465c      	mov	r4, fp
  402cde:	185b      	adds	r3, r3, r1
  402ce0:	eb44 0402 	adc.w	r4, r4, r2
  402ce4:	18db      	adds	r3, r3, r3
  402ce6:	eb44 0404 	adc.w	r4, r4, r4
  402cea:	4619      	mov	r1, r3
  402cec:	4622      	mov	r2, r4
  402cee:	f243 63af 	movw	r3, #13999	; 0x36af
  402cf2:	f04f 0400 	mov.w	r4, #0
  402cf6:	eb11 0a03 	adds.w	sl, r1, r3
  402cfa:	eb42 0b04 	adc.w	fp, r2, r4
  402cfe:	4650      	mov	r0, sl
  402d00:	4659      	mov	r1, fp
  402d02:	4c49      	ldr	r4, [pc, #292]	; (402e28 <Flash_Erase+0x198>)
  402d04:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402d08:	f04f 0300 	mov.w	r3, #0
  402d0c:	47a0      	blx	r4
  402d0e:	4603      	mov	r3, r0
  402d10:	460c      	mov	r4, r1
  402d12:	4618      	mov	r0, r3
  402d14:	4b45      	ldr	r3, [pc, #276]	; (402e2c <Flash_Erase+0x19c>)
  402d16:	4798      	blx	r3
    for(uint16_t i = 0; i < size; i++)
  402d18:	2300      	movs	r3, #0
  402d1a:	81bb      	strh	r3, [r7, #12]
  402d1c:	e00f      	b.n	402d3e <Flash_Erase+0xae>
    {
        if (flash_erase_sector(address + (FLASH_PAGE_SIZE * i)) != FLASH_RC_OK)
  402d1e:	89bb      	ldrh	r3, [r7, #12]
  402d20:	025a      	lsls	r2, r3, #9
  402d22:	687b      	ldr	r3, [r7, #4]
  402d24:	4413      	add	r3, r2
  402d26:	4618      	mov	r0, r3
  402d28:	4b41      	ldr	r3, [pc, #260]	; (402e30 <Flash_Erase+0x1a0>)
  402d2a:	4798      	blx	r3
  402d2c:	4603      	mov	r3, r0
  402d2e:	2b00      	cmp	r3, #0
  402d30:	d002      	beq.n	402d38 <Flash_Erase+0xa8>
        {
            status = FLASH_ERROR;
  402d32:	23ff      	movs	r3, #255	; 0xff
  402d34:	73fb      	strb	r3, [r7, #15]
            break;
  402d36:	e006      	b.n	402d46 <Flash_Erase+0xb6>
    for(uint16_t i = 0; i < size; i++)
  402d38:	89bb      	ldrh	r3, [r7, #12]
  402d3a:	3301      	adds	r3, #1
  402d3c:	81bb      	strh	r3, [r7, #12]
  402d3e:	89ba      	ldrh	r2, [r7, #12]
  402d40:	683b      	ldr	r3, [r7, #0]
  402d42:	429a      	cmp	r2, r3
  402d44:	d3eb      	bcc.n	402d1e <Flash_Erase+0x8e>
        }
    }
    delay_ms(10);
  402d46:	4b37      	ldr	r3, [pc, #220]	; (402e24 <Flash_Erase+0x194>)
  402d48:	4798      	blx	r3
  402d4a:	4603      	mov	r3, r0
  402d4c:	4619      	mov	r1, r3
  402d4e:	f04f 0200 	mov.w	r2, #0
  402d52:	460b      	mov	r3, r1
  402d54:	4614      	mov	r4, r2
  402d56:	ea4f 0984 	mov.w	r9, r4, lsl #2
  402d5a:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  402d5e:	ea4f 0883 	mov.w	r8, r3, lsl #2
  402d62:	4643      	mov	r3, r8
  402d64:	464c      	mov	r4, r9
  402d66:	185b      	adds	r3, r3, r1
  402d68:	eb44 0402 	adc.w	r4, r4, r2
  402d6c:	18db      	adds	r3, r3, r3
  402d6e:	eb44 0404 	adc.w	r4, r4, r4
  402d72:	4619      	mov	r1, r3
  402d74:	4622      	mov	r2, r4
  402d76:	f243 63af 	movw	r3, #13999	; 0x36af
  402d7a:	f04f 0400 	mov.w	r4, #0
  402d7e:	eb11 0803 	adds.w	r8, r1, r3
  402d82:	eb42 0904 	adc.w	r9, r2, r4
  402d86:	4640      	mov	r0, r8
  402d88:	4649      	mov	r1, r9
  402d8a:	4c27      	ldr	r4, [pc, #156]	; (402e28 <Flash_Erase+0x198>)
  402d8c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402d90:	f04f 0300 	mov.w	r3, #0
  402d94:	47a0      	blx	r4
  402d96:	4603      	mov	r3, r0
  402d98:	460c      	mov	r4, r1
  402d9a:	4618      	mov	r0, r3
  402d9c:	4b23      	ldr	r3, [pc, #140]	; (402e2c <Flash_Erase+0x19c>)
  402d9e:	4798      	blx	r3
    if (flash_lock(address, address + (FLASH_PAGE_SIZE * size) - 1, 0, 0) != FLASH_RC_OK)
  402da0:	683b      	ldr	r3, [r7, #0]
  402da2:	025a      	lsls	r2, r3, #9
  402da4:	687b      	ldr	r3, [r7, #4]
  402da6:	4413      	add	r3, r2
  402da8:	1e59      	subs	r1, r3, #1
  402daa:	2300      	movs	r3, #0
  402dac:	2200      	movs	r2, #0
  402dae:	6878      	ldr	r0, [r7, #4]
  402db0:	4c20      	ldr	r4, [pc, #128]	; (402e34 <Flash_Erase+0x1a4>)
  402db2:	47a0      	blx	r4
  402db4:	4603      	mov	r3, r0
  402db6:	2b00      	cmp	r3, #0
  402db8:	d001      	beq.n	402dbe <Flash_Erase+0x12e>
    {
        status = FLASH_ERROR;
  402dba:	23ff      	movs	r3, #255	; 0xff
  402dbc:	73fb      	strb	r3, [r7, #15]
    }
    delay_ms(10);
  402dbe:	4b19      	ldr	r3, [pc, #100]	; (402e24 <Flash_Erase+0x194>)
  402dc0:	4798      	blx	r3
  402dc2:	4603      	mov	r3, r0
  402dc4:	4619      	mov	r1, r3
  402dc6:	f04f 0200 	mov.w	r2, #0
  402dca:	460b      	mov	r3, r1
  402dcc:	4614      	mov	r4, r2
  402dce:	00a6      	lsls	r6, r4, #2
  402dd0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402dd4:	009d      	lsls	r5, r3, #2
  402dd6:	462b      	mov	r3, r5
  402dd8:	4634      	mov	r4, r6
  402dda:	185b      	adds	r3, r3, r1
  402ddc:	eb44 0402 	adc.w	r4, r4, r2
  402de0:	18db      	adds	r3, r3, r3
  402de2:	eb44 0404 	adc.w	r4, r4, r4
  402de6:	4619      	mov	r1, r3
  402de8:	4622      	mov	r2, r4
  402dea:	f243 63af 	movw	r3, #13999	; 0x36af
  402dee:	f04f 0400 	mov.w	r4, #0
  402df2:	18cd      	adds	r5, r1, r3
  402df4:	eb42 0604 	adc.w	r6, r2, r4
  402df8:	4628      	mov	r0, r5
  402dfa:	4631      	mov	r1, r6
  402dfc:	4c0a      	ldr	r4, [pc, #40]	; (402e28 <Flash_Erase+0x198>)
  402dfe:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402e02:	f04f 0300 	mov.w	r3, #0
  402e06:	47a0      	blx	r4
  402e08:	4603      	mov	r3, r0
  402e0a:	460c      	mov	r4, r1
  402e0c:	4618      	mov	r0, r3
  402e0e:	4b07      	ldr	r3, [pc, #28]	; (402e2c <Flash_Erase+0x19c>)
  402e10:	4798      	blx	r3
    return status;
  402e12:	7bfb      	ldrb	r3, [r7, #15]
}
  402e14:	4618      	mov	r0, r3
  402e16:	3714      	adds	r7, #20
  402e18:	46bd      	mov	sp, r7
  402e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e1e:	bf00      	nop
  402e20:	00400625 	.word	0x00400625
  402e24:	00402c51 	.word	0x00402c51
  402e28:	00403475 	.word	0x00403475
  402e2c:	20000101 	.word	0x20000101
  402e30:	00400419 	.word	0x00400419
  402e34:	00400589 	.word	0x00400589

00402e38 <Flash_Write>:
 * @param   *data:   Array of the data that we want to write.
 * @param   *length: Size of the array.
 * @return  status: Report about the success of the writing.
 */
Flash_Status_t Flash_Write(uint32_t address, uint32_t *data, uint32_t size)
{
  402e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e3c:	b087      	sub	sp, #28
  402e3e:	af00      	add	r7, sp, #0
  402e40:	60f8      	str	r0, [r7, #12]
  402e42:	60b9      	str	r1, [r7, #8]
  402e44:	607a      	str	r2, [r7, #4]
    Flash_Status_t status = FLASH_OK;
  402e46:	2300      	movs	r3, #0
  402e48:	75fb      	strb	r3, [r7, #23]

    if(flash_unlock(address, address + (FLASH_PAGE_SIZE * size) - 1, 0, 0) != FLASH_RC_OK)
  402e4a:	687b      	ldr	r3, [r7, #4]
  402e4c:	025a      	lsls	r2, r3, #9
  402e4e:	68fb      	ldr	r3, [r7, #12]
  402e50:	4413      	add	r3, r2
  402e52:	1e59      	subs	r1, r3, #1
  402e54:	2300      	movs	r3, #0
  402e56:	2200      	movs	r2, #0
  402e58:	68f8      	ldr	r0, [r7, #12]
  402e5a:	4c56      	ldr	r4, [pc, #344]	; (402fb4 <Flash_Write+0x17c>)
  402e5c:	47a0      	blx	r4
  402e5e:	4603      	mov	r3, r0
  402e60:	2b00      	cmp	r3, #0
  402e62:	d001      	beq.n	402e68 <Flash_Write+0x30>
    {
        status = FLASH_ERROR;
  402e64:	23ff      	movs	r3, #255	; 0xff
  402e66:	75fb      	strb	r3, [r7, #23]
    }
    delay_ms(10);
  402e68:	4b53      	ldr	r3, [pc, #332]	; (402fb8 <Flash_Write+0x180>)
  402e6a:	4798      	blx	r3
  402e6c:	4603      	mov	r3, r0
  402e6e:	4619      	mov	r1, r3
  402e70:	f04f 0200 	mov.w	r2, #0
  402e74:	460b      	mov	r3, r1
  402e76:	4614      	mov	r4, r2
  402e78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  402e7c:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  402e80:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  402e84:	4653      	mov	r3, sl
  402e86:	465c      	mov	r4, fp
  402e88:	185b      	adds	r3, r3, r1
  402e8a:	eb44 0402 	adc.w	r4, r4, r2
  402e8e:	18db      	adds	r3, r3, r3
  402e90:	eb44 0404 	adc.w	r4, r4, r4
  402e94:	4619      	mov	r1, r3
  402e96:	4622      	mov	r2, r4
  402e98:	f243 63af 	movw	r3, #13999	; 0x36af
  402e9c:	f04f 0400 	mov.w	r4, #0
  402ea0:	eb11 0a03 	adds.w	sl, r1, r3
  402ea4:	eb42 0b04 	adc.w	fp, r2, r4
  402ea8:	4650      	mov	r0, sl
  402eaa:	4659      	mov	r1, fp
  402eac:	4c43      	ldr	r4, [pc, #268]	; (402fbc <Flash_Write+0x184>)
  402eae:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402eb2:	f04f 0300 	mov.w	r3, #0
  402eb6:	47a0      	blx	r4
  402eb8:	4603      	mov	r3, r0
  402eba:	460c      	mov	r4, r1
  402ebc:	4618      	mov	r0, r3
  402ebe:	4b40      	ldr	r3, [pc, #256]	; (402fc0 <Flash_Write+0x188>)
  402ec0:	4798      	blx	r3
    if (flash_write(address, data, (FLASH_PAGE_SIZE * size), 0) != FLASH_RC_OK)
  402ec2:	687b      	ldr	r3, [r7, #4]
  402ec4:	025a      	lsls	r2, r3, #9
  402ec6:	2300      	movs	r3, #0
  402ec8:	68b9      	ldr	r1, [r7, #8]
  402eca:	68f8      	ldr	r0, [r7, #12]
  402ecc:	4c3d      	ldr	r4, [pc, #244]	; (402fc4 <Flash_Write+0x18c>)
  402ece:	47a0      	blx	r4
  402ed0:	4603      	mov	r3, r0
  402ed2:	2b00      	cmp	r3, #0
  402ed4:	d001      	beq.n	402eda <Flash_Write+0xa2>
    {
        status = FLASH_ERROR;
  402ed6:	23ff      	movs	r3, #255	; 0xff
  402ed8:	75fb      	strb	r3, [r7, #23]
    }
    delay_ms(10);
  402eda:	4b37      	ldr	r3, [pc, #220]	; (402fb8 <Flash_Write+0x180>)
  402edc:	4798      	blx	r3
  402ede:	4603      	mov	r3, r0
  402ee0:	4619      	mov	r1, r3
  402ee2:	f04f 0200 	mov.w	r2, #0
  402ee6:	460b      	mov	r3, r1
  402ee8:	4614      	mov	r4, r2
  402eea:	ea4f 0984 	mov.w	r9, r4, lsl #2
  402eee:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  402ef2:	ea4f 0883 	mov.w	r8, r3, lsl #2
  402ef6:	4643      	mov	r3, r8
  402ef8:	464c      	mov	r4, r9
  402efa:	185b      	adds	r3, r3, r1
  402efc:	eb44 0402 	adc.w	r4, r4, r2
  402f00:	18db      	adds	r3, r3, r3
  402f02:	eb44 0404 	adc.w	r4, r4, r4
  402f06:	4619      	mov	r1, r3
  402f08:	4622      	mov	r2, r4
  402f0a:	f243 63af 	movw	r3, #13999	; 0x36af
  402f0e:	f04f 0400 	mov.w	r4, #0
  402f12:	eb11 0803 	adds.w	r8, r1, r3
  402f16:	eb42 0904 	adc.w	r9, r2, r4
  402f1a:	4640      	mov	r0, r8
  402f1c:	4649      	mov	r1, r9
  402f1e:	4c27      	ldr	r4, [pc, #156]	; (402fbc <Flash_Write+0x184>)
  402f20:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402f24:	f04f 0300 	mov.w	r3, #0
  402f28:	47a0      	blx	r4
  402f2a:	4603      	mov	r3, r0
  402f2c:	460c      	mov	r4, r1
  402f2e:	4618      	mov	r0, r3
  402f30:	4b23      	ldr	r3, [pc, #140]	; (402fc0 <Flash_Write+0x188>)
  402f32:	4798      	blx	r3
    if (flash_lock(address, address + (FLASH_PAGE_SIZE * size) - 1, 0, 0) != FLASH_RC_OK)
  402f34:	687b      	ldr	r3, [r7, #4]
  402f36:	025a      	lsls	r2, r3, #9
  402f38:	68fb      	ldr	r3, [r7, #12]
  402f3a:	4413      	add	r3, r2
  402f3c:	1e59      	subs	r1, r3, #1
  402f3e:	2300      	movs	r3, #0
  402f40:	2200      	movs	r2, #0
  402f42:	68f8      	ldr	r0, [r7, #12]
  402f44:	4c20      	ldr	r4, [pc, #128]	; (402fc8 <Flash_Write+0x190>)
  402f46:	47a0      	blx	r4
  402f48:	4603      	mov	r3, r0
  402f4a:	2b00      	cmp	r3, #0
  402f4c:	d001      	beq.n	402f52 <Flash_Write+0x11a>
    {
        status = FLASH_ERROR;
  402f4e:	23ff      	movs	r3, #255	; 0xff
  402f50:	75fb      	strb	r3, [r7, #23]
    }
    delay_ms(10);
  402f52:	4b19      	ldr	r3, [pc, #100]	; (402fb8 <Flash_Write+0x180>)
  402f54:	4798      	blx	r3
  402f56:	4603      	mov	r3, r0
  402f58:	4619      	mov	r1, r3
  402f5a:	f04f 0200 	mov.w	r2, #0
  402f5e:	460b      	mov	r3, r1
  402f60:	4614      	mov	r4, r2
  402f62:	00a6      	lsls	r6, r4, #2
  402f64:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402f68:	009d      	lsls	r5, r3, #2
  402f6a:	462b      	mov	r3, r5
  402f6c:	4634      	mov	r4, r6
  402f6e:	185b      	adds	r3, r3, r1
  402f70:	eb44 0402 	adc.w	r4, r4, r2
  402f74:	18db      	adds	r3, r3, r3
  402f76:	eb44 0404 	adc.w	r4, r4, r4
  402f7a:	4619      	mov	r1, r3
  402f7c:	4622      	mov	r2, r4
  402f7e:	f243 63af 	movw	r3, #13999	; 0x36af
  402f82:	f04f 0400 	mov.w	r4, #0
  402f86:	18cd      	adds	r5, r1, r3
  402f88:	eb42 0604 	adc.w	r6, r2, r4
  402f8c:	4628      	mov	r0, r5
  402f8e:	4631      	mov	r1, r6
  402f90:	4c0a      	ldr	r4, [pc, #40]	; (402fbc <Flash_Write+0x184>)
  402f92:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402f96:	f04f 0300 	mov.w	r3, #0
  402f9a:	47a0      	blx	r4
  402f9c:	4603      	mov	r3, r0
  402f9e:	460c      	mov	r4, r1
  402fa0:	4618      	mov	r0, r3
  402fa2:	4b07      	ldr	r3, [pc, #28]	; (402fc0 <Flash_Write+0x188>)
  402fa4:	4798      	blx	r3
    return status;
  402fa6:	7dfb      	ldrb	r3, [r7, #23]
}
  402fa8:	4618      	mov	r0, r3
  402faa:	371c      	adds	r7, #28
  402fac:	46bd      	mov	sp, r7
  402fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fb2:	bf00      	nop
  402fb4:	00400625 	.word	0x00400625
  402fb8:	00402c51 	.word	0x00402c51
  402fbc:	00403475 	.word	0x00403475
  402fc0:	20000101 	.word	0x20000101
  402fc4:	00400459 	.word	0x00400459
  402fc8:	00400589 	.word	0x00400589

00402fcc <Flash_Jump_To_Application>:
 * @brief   Actually jumps to the user application.
 * @param   void
 * @return  void
 */
void Flash_Jump_To_Application(void)
{
  402fcc:	b580      	push	{r7, lr}
  402fce:	b082      	sub	sp, #8
  402fd0:	af00      	add	r7, sp, #0
	const Jump_Application_t* vector_p = (Jump_Application_t*)FLASH_APP1_START_ADDRESS;
  402fd2:	4b08      	ldr	r3, [pc, #32]	; (402ff4 <Flash_Jump_To_Application+0x28>)
  402fd4:	607b      	str	r3, [r7, #4]
    NVIC_DisableIRQ(UART1_IRQn);
  402fd6:	2009      	movs	r0, #9
  402fd8:	4b07      	ldr	r3, [pc, #28]	; (402ff8 <Flash_Jump_To_Application+0x2c>)
  402fda:	4798      	blx	r3
	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
  402fdc:	687b      	ldr	r3, [r7, #4]
  402fde:	681b      	ldr	r3, [r3, #0]
  402fe0:	687a      	ldr	r2, [r7, #4]
  402fe2:	6852      	ldr	r2, [r2, #4]
  402fe4:	f383 8808 	msr	MSP, r3
  402fe8:	4710      	bx	r2
}
  402fea:	bf00      	nop
  402fec:	3708      	adds	r7, #8
  402fee:	46bd      	mov	sp, r7
  402ff0:	bd80      	pop	{r7, pc}
  402ff2:	bf00      	nop
  402ff4:	00406000 	.word	0x00406000
  402ff8:	00402b7d 	.word	0x00402b7d

00402ffc <Flash_Copy_App2_To_App1>:

void Flash_Copy_App2_To_App1(void)
{
  402ffc:	b580      	push	{r7, lr}
  402ffe:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
  403002:	af00      	add	r7, sp, #0
    uint32_t buffer[256];
    uint32_t app1_address = FLASH_APP1_START_ADDRESS;
  403004:	4b21      	ldr	r3, [pc, #132]	; (40308c <Flash_Copy_App2_To_App1+0x90>)
  403006:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
    uint32_t app2_address = FLASH_APP2_START_ADDRESS;
  40300a:	4b21      	ldr	r3, [pc, #132]	; (403090 <Flash_Copy_App2_To_App1+0x94>)
  40300c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

    for (uint32_t page = 0; page < 52; page++) 
  403010:	2300      	movs	r3, #0
  403012:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  403016:	e030      	b.n	40307a <Flash_Copy_App2_To_App1+0x7e>
    {
        // copy data from App2 to buffer
        for (uint32_t i = 0; i < 256; i++) 
  403018:	2300      	movs	r3, #0
  40301a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
  40301e:	e010      	b.n	403042 <Flash_Copy_App2_To_App1+0x46>
        {
            buffer[i] = ((uint32_t *)app2_address)[i];
  403020:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
  403024:	009a      	lsls	r2, r3, #2
  403026:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
  40302a:	4413      	add	r3, r2
  40302c:	6819      	ldr	r1, [r3, #0]
  40302e:	463b      	mov	r3, r7
  403030:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
  403034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < 256; i++) 
  403038:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
  40303c:	3301      	adds	r3, #1
  40303e:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
  403042:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
  403046:	2bff      	cmp	r3, #255	; 0xff
  403048:	d9ea      	bls.n	403020 <Flash_Copy_App2_To_App1+0x24>
        }
        
        // write buffer to App1 page
        Flash_Write(app1_address, buffer, 2);
  40304a:	463b      	mov	r3, r7
  40304c:	2202      	movs	r2, #2
  40304e:	4619      	mov	r1, r3
  403050:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
  403054:	4b0f      	ldr	r3, [pc, #60]	; (403094 <Flash_Copy_App2_To_App1+0x98>)
  403056:	4798      	blx	r3
        
        // update addresses and remaining copy size
        app1_address += FLASH_PAGE_SIZE * 2;
  403058:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
  40305c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  403060:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
        app2_address += FLASH_PAGE_SIZE * 2;
  403064:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
  403068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40306c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    for (uint32_t page = 0; page < 52; page++) 
  403070:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
  403074:	3301      	adds	r3, #1
  403076:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  40307a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
  40307e:	2b33      	cmp	r3, #51	; 0x33
  403080:	d9ca      	bls.n	403018 <Flash_Copy_App2_To_App1+0x1c>
    }
  403082:	bf00      	nop
  403084:	f507 6782 	add.w	r7, r7, #1040	; 0x410
  403088:	46bd      	mov	sp, r7
  40308a:	bd80      	pop	{r7, pc}
  40308c:	00406000 	.word	0x00406000
  403090:	00413000 	.word	0x00413000
  403094:	00402e39 	.word	0x00402e39

00403098 <osc_get_rate>:
{
  403098:	b480      	push	{r7}
  40309a:	b083      	sub	sp, #12
  40309c:	af00      	add	r7, sp, #0
  40309e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4030a0:	687b      	ldr	r3, [r7, #4]
  4030a2:	2b07      	cmp	r3, #7
  4030a4:	d825      	bhi.n	4030f2 <osc_get_rate+0x5a>
  4030a6:	a201      	add	r2, pc, #4	; (adr r2, 4030ac <osc_get_rate+0x14>)
  4030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4030ac:	004030cd 	.word	0x004030cd
  4030b0:	004030d3 	.word	0x004030d3
  4030b4:	004030d9 	.word	0x004030d9
  4030b8:	004030df 	.word	0x004030df
  4030bc:	004030e3 	.word	0x004030e3
  4030c0:	004030e7 	.word	0x004030e7
  4030c4:	004030eb 	.word	0x004030eb
  4030c8:	004030ef 	.word	0x004030ef
		return OSC_SLCK_32K_RC_HZ;
  4030cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4030d0:	e010      	b.n	4030f4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4030d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4030d6:	e00d      	b.n	4030f4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4030d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4030dc:	e00a      	b.n	4030f4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4030de:	4b08      	ldr	r3, [pc, #32]	; (403100 <osc_get_rate+0x68>)
  4030e0:	e008      	b.n	4030f4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4030e2:	4b08      	ldr	r3, [pc, #32]	; (403104 <osc_get_rate+0x6c>)
  4030e4:	e006      	b.n	4030f4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4030e6:	4b08      	ldr	r3, [pc, #32]	; (403108 <osc_get_rate+0x70>)
  4030e8:	e004      	b.n	4030f4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4030ea:	4b07      	ldr	r3, [pc, #28]	; (403108 <osc_get_rate+0x70>)
  4030ec:	e002      	b.n	4030f4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4030ee:	4b06      	ldr	r3, [pc, #24]	; (403108 <osc_get_rate+0x70>)
  4030f0:	e000      	b.n	4030f4 <osc_get_rate+0x5c>
	return 0;
  4030f2:	2300      	movs	r3, #0
}
  4030f4:	4618      	mov	r0, r3
  4030f6:	370c      	adds	r7, #12
  4030f8:	46bd      	mov	sp, r7
  4030fa:	bc80      	pop	{r7}
  4030fc:	4770      	bx	lr
  4030fe:	bf00      	nop
  403100:	003d0900 	.word	0x003d0900
  403104:	007a1200 	.word	0x007a1200
  403108:	00b71b00 	.word	0x00b71b00

0040310c <sysclk_get_main_hz>:
{
  40310c:	b580      	push	{r7, lr}
  40310e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  403110:	2006      	movs	r0, #6
  403112:	4b04      	ldr	r3, [pc, #16]	; (403124 <sysclk_get_main_hz+0x18>)
  403114:	4798      	blx	r3
  403116:	4602      	mov	r2, r0
  403118:	4613      	mov	r3, r2
  40311a:	009b      	lsls	r3, r3, #2
  40311c:	4413      	add	r3, r2
  40311e:	009b      	lsls	r3, r3, #2
}
  403120:	4618      	mov	r0, r3
  403122:	bd80      	pop	{r7, pc}
  403124:	00403099 	.word	0x00403099

00403128 <sysclk_get_cpu_hz>:
{
  403128:	b580      	push	{r7, lr}
  40312a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40312c:	4b02      	ldr	r3, [pc, #8]	; (403138 <sysclk_get_cpu_hz+0x10>)
  40312e:	4798      	blx	r3
  403130:	4603      	mov	r3, r0
  403132:	085b      	lsrs	r3, r3, #1
}
  403134:	4618      	mov	r0, r3
  403136:	bd80      	pop	{r7, pc}
  403138:	0040310d 	.word	0x0040310d

0040313c <main>:
#include "xmodem.h"
#include "flash.h"

volatile uint32_t * const Reprogram_Info = (uint32_t *)0x0041FFF8;
int main(void)
{
  40313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403140:	b0a1      	sub	sp, #132	; 0x84
  403142:	af00      	add	r7, sp, #0
	uint8_t buf[100] = {0,};
  403144:	f107 0310 	add.w	r3, r7, #16
  403148:	2264      	movs	r2, #100	; 0x64
  40314a:	2100      	movs	r1, #0
  40314c:	4618      	mov	r0, r3
  40314e:	4baf      	ldr	r3, [pc, #700]	; (40340c <main+0x2d0>)
  403150:	4798      	blx	r3
	uint32_t Reprogram_Buffer[2] = {0,};
  403152:	f107 0308 	add.w	r3, r7, #8
  403156:	2200      	movs	r2, #0
  403158:	601a      	str	r2, [r3, #0]
  40315a:	605a      	str	r2, [r3, #4]
	uint32_t *Application_Address = (uint32_t *)FLASH_APP1_START_ADDRESS;
  40315c:	4bac      	ldr	r3, [pc, #688]	; (403410 <main+0x2d4>)
  40315e:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t temp;
	/* Initialize the board. */
	sysclk_init();
  403160:	4bac      	ldr	r3, [pc, #688]	; (403414 <main+0x2d8>)
  403162:	4798      	blx	r3
	board_init();
  403164:	4bac      	ldr	r3, [pc, #688]	; (403418 <main+0x2dc>)
  403166:	4798      	blx	r3
	Flash_Init();
  403168:	4bac      	ldr	r3, [pc, #688]	; (40341c <main+0x2e0>)
  40316a:	4798      	blx	r3
	Boot_Uart_Init();
  40316c:	4bac      	ldr	r3, [pc, #688]	; (403420 <main+0x2e4>)
  40316e:	4798      	blx	r3
	delay_ms(10);
  403170:	4bac      	ldr	r3, [pc, #688]	; (403424 <main+0x2e8>)
  403172:	4798      	blx	r3
  403174:	4603      	mov	r3, r0
  403176:	4619      	mov	r1, r3
  403178:	f04f 0200 	mov.w	r2, #0
  40317c:	460b      	mov	r3, r1
  40317e:	4614      	mov	r4, r2
  403180:	00a6      	lsls	r6, r4, #2
  403182:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  403186:	009d      	lsls	r5, r3, #2
  403188:	462b      	mov	r3, r5
  40318a:	4634      	mov	r4, r6
  40318c:	185b      	adds	r3, r3, r1
  40318e:	eb44 0402 	adc.w	r4, r4, r2
  403192:	18db      	adds	r3, r3, r3
  403194:	eb44 0404 	adc.w	r4, r4, r4
  403198:	4619      	mov	r1, r3
  40319a:	4622      	mov	r2, r4
  40319c:	f243 63af 	movw	r3, #13999	; 0x36af
  4031a0:	f04f 0400 	mov.w	r4, #0
  4031a4:	18cd      	adds	r5, r1, r3
  4031a6:	eb42 0604 	adc.w	r6, r2, r4
  4031aa:	4628      	mov	r0, r5
  4031ac:	4631      	mov	r1, r6
  4031ae:	4c9e      	ldr	r4, [pc, #632]	; (403428 <main+0x2ec>)
  4031b0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4031b4:	f04f 0300 	mov.w	r3, #0
  4031b8:	47a0      	blx	r4
  4031ba:	4603      	mov	r3, r0
  4031bc:	460c      	mov	r4, r1
  4031be:	4618      	mov	r0, r3
  4031c0:	4b9a      	ldr	r3, [pc, #616]	; (40342c <main+0x2f0>)
  4031c2:	4798      	blx	r3
	temp = *Application_Address;
  4031c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  4031c6:	681b      	ldr	r3, [r3, #0]
  4031c8:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t Reprogram_Info_Data = *Reprogram_Info;
  4031ca:	4b99      	ldr	r3, [pc, #612]	; (403430 <main+0x2f4>)
  4031cc:	681b      	ldr	r3, [r3, #0]
  4031ce:	677b      	str	r3, [r7, #116]	; 0x74
	if ((*Application_Address != 0xFFFFFFFFu) && (*Application_Address != 0x00000000u) && (Reprogram_Info_Data != 0x01))
  4031d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  4031d2:	681b      	ldr	r3, [r3, #0]
  4031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4031d8:	d008      	beq.n	4031ec <main+0xb0>
  4031da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  4031dc:	681b      	ldr	r3, [r3, #0]
  4031de:	2b00      	cmp	r3, #0
  4031e0:	d004      	beq.n	4031ec <main+0xb0>
  4031e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4031e4:	2b01      	cmp	r3, #1
  4031e6:	d001      	beq.n	4031ec <main+0xb0>
	{
		Flash_Jump_To_Application();
  4031e8:	4b92      	ldr	r3, [pc, #584]	; (403434 <main+0x2f8>)
  4031ea:	4798      	blx	r3
	}
	sprintf((char *)buf,"\r\n========================================\r\n");
  4031ec:	f107 0310 	add.w	r3, r7, #16
  4031f0:	4a91      	ldr	r2, [pc, #580]	; (403438 <main+0x2fc>)
  4031f2:	461c      	mov	r4, r3
  4031f4:	4615      	mov	r5, r2
  4031f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4031f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4031fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4031fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4031fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  403202:	c407      	stmia	r4!, {r0, r1, r2}
  403204:	7023      	strb	r3, [r4, #0]
	Uart_Transmit_Str(buf);
  403206:	f107 0310 	add.w	r3, r7, #16
  40320a:	4618      	mov	r0, r3
  40320c:	4b8b      	ldr	r3, [pc, #556]	; (40343c <main+0x300>)
  40320e:	4798      	blx	r3
	sprintf((char *)buf,"=  ATSAM4S Firmware Update Bootloader  =\r\n");
  403210:	f107 0310 	add.w	r3, r7, #16
  403214:	4a8a      	ldr	r2, [pc, #552]	; (403440 <main+0x304>)
  403216:	461c      	mov	r4, r3
  403218:	4615      	mov	r5, r2
  40321a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40321c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40321e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403222:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  403226:	c403      	stmia	r4!, {r0, r1}
  403228:	8022      	strh	r2, [r4, #0]
  40322a:	3402      	adds	r4, #2
  40322c:	0c13      	lsrs	r3, r2, #16
  40322e:	7023      	strb	r3, [r4, #0]
	Uart_Transmit_Str(buf);
  403230:	f107 0310 	add.w	r3, r7, #16
  403234:	4618      	mov	r0, r3
  403236:	4b81      	ldr	r3, [pc, #516]	; (40343c <main+0x300>)
  403238:	4798      	blx	r3
	sprintf((char *)buf,"========================================\r\n");
  40323a:	f107 0310 	add.w	r3, r7, #16
  40323e:	4a81      	ldr	r2, [pc, #516]	; (403444 <main+0x308>)
  403240:	461c      	mov	r4, r3
  403242:	4615      	mov	r5, r2
  403244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40324a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40324c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  403250:	c403      	stmia	r4!, {r0, r1}
  403252:	8022      	strh	r2, [r4, #0]
  403254:	3402      	adds	r4, #2
  403256:	0c13      	lsrs	r3, r2, #16
  403258:	7023      	strb	r3, [r4, #0]
	Uart_Transmit_Str(buf);
  40325a:	f107 0310 	add.w	r3, r7, #16
  40325e:	4618      	mov	r0, r3
  403260:	4b76      	ldr	r3, [pc, #472]	; (40343c <main+0x300>)
  403262:	4798      	blx	r3
	sprintf((char *)buf,"\r\n\r\nErase App2 Flash Section\r\n");
  403264:	f107 0310 	add.w	r3, r7, #16
  403268:	4a77      	ldr	r2, [pc, #476]	; (403448 <main+0x30c>)
  40326a:	461c      	mov	r4, r3
  40326c:	4615      	mov	r5, r2
  40326e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403272:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  403276:	c407      	stmia	r4!, {r0, r1, r2}
  403278:	8023      	strh	r3, [r4, #0]
  40327a:	3402      	adds	r4, #2
  40327c:	0c1b      	lsrs	r3, r3, #16
  40327e:	7023      	strb	r3, [r4, #0]
	Uart_Transmit_Str(buf);
  403280:	f107 0310 	add.w	r3, r7, #16
  403284:	4618      	mov	r0, r3
  403286:	4b6d      	ldr	r3, [pc, #436]	; (40343c <main+0x300>)
  403288:	4798      	blx	r3
	Flash_Erase(FLASH_APP2_START_ADDRESS,104);
  40328a:	2168      	movs	r1, #104	; 0x68
  40328c:	486f      	ldr	r0, [pc, #444]	; (40344c <main+0x310>)
  40328e:	4b70      	ldr	r3, [pc, #448]	; (403450 <main+0x314>)
  403290:	4798      	blx	r3
	flash_unlock(0x0041FFF8, 0x0041FFF8 + 8 - 1, 0, 0);
  403292:	2300      	movs	r3, #0
  403294:	2200      	movs	r2, #0
  403296:	496f      	ldr	r1, [pc, #444]	; (403454 <main+0x318>)
  403298:	4865      	ldr	r0, [pc, #404]	; (403430 <main+0x2f4>)
  40329a:	4c6f      	ldr	r4, [pc, #444]	; (403458 <main+0x31c>)
  40329c:	47a0      	blx	r4
	delay_ms(10);
  40329e:	4b61      	ldr	r3, [pc, #388]	; (403424 <main+0x2e8>)
  4032a0:	4798      	blx	r3
  4032a2:	4603      	mov	r3, r0
  4032a4:	4619      	mov	r1, r3
  4032a6:	f04f 0200 	mov.w	r2, #0
  4032aa:	460b      	mov	r3, r1
  4032ac:	4614      	mov	r4, r2
  4032ae:	00a0      	lsls	r0, r4, #2
  4032b0:	6078      	str	r0, [r7, #4]
  4032b2:	6878      	ldr	r0, [r7, #4]
  4032b4:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4032b8:	6078      	str	r0, [r7, #4]
  4032ba:	009b      	lsls	r3, r3, #2
  4032bc:	603b      	str	r3, [r7, #0]
  4032be:	e9d7 3400 	ldrd	r3, r4, [r7]
  4032c2:	185b      	adds	r3, r3, r1
  4032c4:	eb44 0402 	adc.w	r4, r4, r2
  4032c8:	18db      	adds	r3, r3, r3
  4032ca:	eb44 0404 	adc.w	r4, r4, r4
  4032ce:	4619      	mov	r1, r3
  4032d0:	4622      	mov	r2, r4
  4032d2:	f243 63af 	movw	r3, #13999	; 0x36af
  4032d6:	f04f 0400 	mov.w	r4, #0
  4032da:	18cd      	adds	r5, r1, r3
  4032dc:	eb42 0604 	adc.w	r6, r2, r4
  4032e0:	4628      	mov	r0, r5
  4032e2:	4631      	mov	r1, r6
  4032e4:	4c50      	ldr	r4, [pc, #320]	; (403428 <main+0x2ec>)
  4032e6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4032ea:	f04f 0300 	mov.w	r3, #0
  4032ee:	47a0      	blx	r4
  4032f0:	4603      	mov	r3, r0
  4032f2:	460c      	mov	r4, r1
  4032f4:	4618      	mov	r0, r3
  4032f6:	4b4d      	ldr	r3, [pc, #308]	; (40342c <main+0x2f0>)
  4032f8:	4798      	blx	r3
	flash_write(0x0041FFF8, Reprogram_Buffer, 8, 0);
  4032fa:	f107 0108 	add.w	r1, r7, #8
  4032fe:	2300      	movs	r3, #0
  403300:	2208      	movs	r2, #8
  403302:	484b      	ldr	r0, [pc, #300]	; (403430 <main+0x2f4>)
  403304:	4c55      	ldr	r4, [pc, #340]	; (40345c <main+0x320>)
  403306:	47a0      	blx	r4
	delay_ms(10);
  403308:	4b46      	ldr	r3, [pc, #280]	; (403424 <main+0x2e8>)
  40330a:	4798      	blx	r3
  40330c:	4603      	mov	r3, r0
  40330e:	4619      	mov	r1, r3
  403310:	f04f 0200 	mov.w	r2, #0
  403314:	460b      	mov	r3, r1
  403316:	4614      	mov	r4, r2
  403318:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  40331c:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  403320:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  403324:	4653      	mov	r3, sl
  403326:	465c      	mov	r4, fp
  403328:	185b      	adds	r3, r3, r1
  40332a:	eb44 0402 	adc.w	r4, r4, r2
  40332e:	18db      	adds	r3, r3, r3
  403330:	eb44 0404 	adc.w	r4, r4, r4
  403334:	4619      	mov	r1, r3
  403336:	4622      	mov	r2, r4
  403338:	f243 63af 	movw	r3, #13999	; 0x36af
  40333c:	f04f 0400 	mov.w	r4, #0
  403340:	18cd      	adds	r5, r1, r3
  403342:	eb42 0604 	adc.w	r6, r2, r4
  403346:	4628      	mov	r0, r5
  403348:	4631      	mov	r1, r6
  40334a:	4c37      	ldr	r4, [pc, #220]	; (403428 <main+0x2ec>)
  40334c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403350:	f04f 0300 	mov.w	r3, #0
  403354:	47a0      	blx	r4
  403356:	4603      	mov	r3, r0
  403358:	460c      	mov	r4, r1
  40335a:	4618      	mov	r0, r3
  40335c:	4b33      	ldr	r3, [pc, #204]	; (40342c <main+0x2f0>)
  40335e:	4798      	blx	r3
	flash_lock(0x0041FFF8, 0x0041FFF8 + 8 - 1, 0, 0);
  403360:	2300      	movs	r3, #0
  403362:	2200      	movs	r2, #0
  403364:	493b      	ldr	r1, [pc, #236]	; (403454 <main+0x318>)
  403366:	4832      	ldr	r0, [pc, #200]	; (403430 <main+0x2f4>)
  403368:	4c3d      	ldr	r4, [pc, #244]	; (403460 <main+0x324>)
  40336a:	47a0      	blx	r4
	delay_ms(10);
  40336c:	4b2d      	ldr	r3, [pc, #180]	; (403424 <main+0x2e8>)
  40336e:	4798      	blx	r3
  403370:	4603      	mov	r3, r0
  403372:	4619      	mov	r1, r3
  403374:	f04f 0200 	mov.w	r2, #0
  403378:	460b      	mov	r3, r1
  40337a:	4614      	mov	r4, r2
  40337c:	ea4f 0984 	mov.w	r9, r4, lsl #2
  403380:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  403384:	ea4f 0883 	mov.w	r8, r3, lsl #2
  403388:	4643      	mov	r3, r8
  40338a:	464c      	mov	r4, r9
  40338c:	185b      	adds	r3, r3, r1
  40338e:	eb44 0402 	adc.w	r4, r4, r2
  403392:	18db      	adds	r3, r3, r3
  403394:	eb44 0404 	adc.w	r4, r4, r4
  403398:	4619      	mov	r1, r3
  40339a:	4622      	mov	r2, r4
  40339c:	f243 63af 	movw	r3, #13999	; 0x36af
  4033a0:	f04f 0400 	mov.w	r4, #0
  4033a4:	18cd      	adds	r5, r1, r3
  4033a6:	eb42 0604 	adc.w	r6, r2, r4
  4033aa:	4628      	mov	r0, r5
  4033ac:	4631      	mov	r1, r6
  4033ae:	4c1e      	ldr	r4, [pc, #120]	; (403428 <main+0x2ec>)
  4033b0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4033b4:	f04f 0300 	mov.w	r3, #0
  4033b8:	47a0      	blx	r4
  4033ba:	4603      	mov	r3, r0
  4033bc:	460c      	mov	r4, r1
  4033be:	4618      	mov	r0, r3
  4033c0:	4b1a      	ldr	r3, [pc, #104]	; (40342c <main+0x2f0>)
  4033c2:	4798      	blx	r3
	while(1)
	{
		sprintf((char *)buf,"Please send a new binary file with Xmodem protocol to update the firmware.\r\n");
  4033c4:	f107 0310 	add.w	r3, r7, #16
  4033c8:	4a26      	ldr	r2, [pc, #152]	; (403464 <main+0x328>)
  4033ca:	4618      	mov	r0, r3
  4033cc:	4611      	mov	r1, r2
  4033ce:	234d      	movs	r3, #77	; 0x4d
  4033d0:	461a      	mov	r2, r3
  4033d2:	4b25      	ldr	r3, [pc, #148]	; (403468 <main+0x32c>)
  4033d4:	4798      	blx	r3
		Uart_Transmit_Str(buf);
  4033d6:	f107 0310 	add.w	r3, r7, #16
  4033da:	4618      	mov	r0, r3
  4033dc:	4b17      	ldr	r3, [pc, #92]	; (40343c <main+0x300>)
  4033de:	4798      	blx	r3
		xmodem_receive();		
  4033e0:	4b22      	ldr	r3, [pc, #136]	; (40346c <main+0x330>)
  4033e2:	4798      	blx	r3
		sprintf((char *)buf,"\r\nFailed... Please try again.\r\n");
  4033e4:	f107 0310 	add.w	r3, r7, #16
  4033e8:	4a21      	ldr	r2, [pc, #132]	; (403470 <main+0x334>)
  4033ea:	461c      	mov	r4, r3
  4033ec:	4615      	mov	r5, r2
  4033ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4033f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4033f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4033f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Uart_Transmit_Str(buf);
  4033fa:	f107 0310 	add.w	r3, r7, #16
  4033fe:	4618      	mov	r0, r3
  403400:	4b0e      	ldr	r3, [pc, #56]	; (40343c <main+0x300>)
  403402:	4798      	blx	r3
		Flash_Jump_To_Application();
  403404:	4b0b      	ldr	r3, [pc, #44]	; (403434 <main+0x2f8>)
  403406:	4798      	blx	r3
		sprintf((char *)buf,"Please send a new binary file with Xmodem protocol to update the firmware.\r\n");
  403408:	e7dc      	b.n	4033c4 <main+0x288>
  40340a:	bf00      	nop
  40340c:	00403e79 	.word	0x00403e79
  403410:	00406000 	.word	0x00406000
  403414:	00401655 	.word	0x00401655
  403418:	004019cd 	.word	0x004019cd
  40341c:	00402c65 	.word	0x00402c65
  403420:	00400ad9 	.word	0x00400ad9
  403424:	00403129 	.word	0x00403129
  403428:	00403475 	.word	0x00403475
  40342c:	20000101 	.word	0x20000101
  403430:	0041fff8 	.word	0x0041fff8
  403434:	00402fcd 	.word	0x00402fcd
  403438:	00404aac 	.word	0x00404aac
  40343c:	00400b61 	.word	0x00400b61
  403440:	00404adc 	.word	0x00404adc
  403444:	00404b08 	.word	0x00404b08
  403448:	00404b34 	.word	0x00404b34
  40344c:	00413000 	.word	0x00413000
  403450:	00402c91 	.word	0x00402c91
  403454:	0041ffff 	.word	0x0041ffff
  403458:	00400625 	.word	0x00400625
  40345c:	00400459 	.word	0x00400459
  403460:	00400589 	.word	0x00400589
  403464:	00404b54 	.word	0x00404b54
  403468:	00403d45 	.word	0x00403d45
  40346c:	00400eb1 	.word	0x00400eb1
  403470:	00404ba4 	.word	0x00404ba4

00403474 <__aeabi_uldivmod>:
  403474:	b953      	cbnz	r3, 40348c <__aeabi_uldivmod+0x18>
  403476:	b94a      	cbnz	r2, 40348c <__aeabi_uldivmod+0x18>
  403478:	2900      	cmp	r1, #0
  40347a:	bf08      	it	eq
  40347c:	2800      	cmpeq	r0, #0
  40347e:	bf1c      	itt	ne
  403480:	f04f 31ff 	movne.w	r1, #4294967295
  403484:	f04f 30ff 	movne.w	r0, #4294967295
  403488:	f000 b97a 	b.w	403780 <__aeabi_idiv0>
  40348c:	f1ad 0c08 	sub.w	ip, sp, #8
  403490:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403494:	f000 f806 	bl	4034a4 <__udivmoddi4>
  403498:	f8dd e004 	ldr.w	lr, [sp, #4]
  40349c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4034a0:	b004      	add	sp, #16
  4034a2:	4770      	bx	lr

004034a4 <__udivmoddi4>:
  4034a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4034a8:	468c      	mov	ip, r1
  4034aa:	460d      	mov	r5, r1
  4034ac:	4604      	mov	r4, r0
  4034ae:	9e08      	ldr	r6, [sp, #32]
  4034b0:	2b00      	cmp	r3, #0
  4034b2:	d151      	bne.n	403558 <__udivmoddi4+0xb4>
  4034b4:	428a      	cmp	r2, r1
  4034b6:	4617      	mov	r7, r2
  4034b8:	d96d      	bls.n	403596 <__udivmoddi4+0xf2>
  4034ba:	fab2 fe82 	clz	lr, r2
  4034be:	f1be 0f00 	cmp.w	lr, #0
  4034c2:	d00b      	beq.n	4034dc <__udivmoddi4+0x38>
  4034c4:	f1ce 0c20 	rsb	ip, lr, #32
  4034c8:	fa01 f50e 	lsl.w	r5, r1, lr
  4034cc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4034d0:	fa02 f70e 	lsl.w	r7, r2, lr
  4034d4:	ea4c 0c05 	orr.w	ip, ip, r5
  4034d8:	fa00 f40e 	lsl.w	r4, r0, lr
  4034dc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4034e0:	0c25      	lsrs	r5, r4, #16
  4034e2:	fbbc f8fa 	udiv	r8, ip, sl
  4034e6:	fa1f f987 	uxth.w	r9, r7
  4034ea:	fb0a cc18 	mls	ip, sl, r8, ip
  4034ee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4034f2:	fb08 f309 	mul.w	r3, r8, r9
  4034f6:	42ab      	cmp	r3, r5
  4034f8:	d90a      	bls.n	403510 <__udivmoddi4+0x6c>
  4034fa:	19ed      	adds	r5, r5, r7
  4034fc:	f108 32ff 	add.w	r2, r8, #4294967295
  403500:	f080 8123 	bcs.w	40374a <__udivmoddi4+0x2a6>
  403504:	42ab      	cmp	r3, r5
  403506:	f240 8120 	bls.w	40374a <__udivmoddi4+0x2a6>
  40350a:	f1a8 0802 	sub.w	r8, r8, #2
  40350e:	443d      	add	r5, r7
  403510:	1aed      	subs	r5, r5, r3
  403512:	b2a4      	uxth	r4, r4
  403514:	fbb5 f0fa 	udiv	r0, r5, sl
  403518:	fb0a 5510 	mls	r5, sl, r0, r5
  40351c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403520:	fb00 f909 	mul.w	r9, r0, r9
  403524:	45a1      	cmp	r9, r4
  403526:	d909      	bls.n	40353c <__udivmoddi4+0x98>
  403528:	19e4      	adds	r4, r4, r7
  40352a:	f100 33ff 	add.w	r3, r0, #4294967295
  40352e:	f080 810a 	bcs.w	403746 <__udivmoddi4+0x2a2>
  403532:	45a1      	cmp	r9, r4
  403534:	f240 8107 	bls.w	403746 <__udivmoddi4+0x2a2>
  403538:	3802      	subs	r0, #2
  40353a:	443c      	add	r4, r7
  40353c:	eba4 0409 	sub.w	r4, r4, r9
  403540:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403544:	2100      	movs	r1, #0
  403546:	2e00      	cmp	r6, #0
  403548:	d061      	beq.n	40360e <__udivmoddi4+0x16a>
  40354a:	fa24 f40e 	lsr.w	r4, r4, lr
  40354e:	2300      	movs	r3, #0
  403550:	6034      	str	r4, [r6, #0]
  403552:	6073      	str	r3, [r6, #4]
  403554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403558:	428b      	cmp	r3, r1
  40355a:	d907      	bls.n	40356c <__udivmoddi4+0xc8>
  40355c:	2e00      	cmp	r6, #0
  40355e:	d054      	beq.n	40360a <__udivmoddi4+0x166>
  403560:	2100      	movs	r1, #0
  403562:	e886 0021 	stmia.w	r6, {r0, r5}
  403566:	4608      	mov	r0, r1
  403568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40356c:	fab3 f183 	clz	r1, r3
  403570:	2900      	cmp	r1, #0
  403572:	f040 808e 	bne.w	403692 <__udivmoddi4+0x1ee>
  403576:	42ab      	cmp	r3, r5
  403578:	d302      	bcc.n	403580 <__udivmoddi4+0xdc>
  40357a:	4282      	cmp	r2, r0
  40357c:	f200 80fa 	bhi.w	403774 <__udivmoddi4+0x2d0>
  403580:	1a84      	subs	r4, r0, r2
  403582:	eb65 0503 	sbc.w	r5, r5, r3
  403586:	2001      	movs	r0, #1
  403588:	46ac      	mov	ip, r5
  40358a:	2e00      	cmp	r6, #0
  40358c:	d03f      	beq.n	40360e <__udivmoddi4+0x16a>
  40358e:	e886 1010 	stmia.w	r6, {r4, ip}
  403592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403596:	b912      	cbnz	r2, 40359e <__udivmoddi4+0xfa>
  403598:	2701      	movs	r7, #1
  40359a:	fbb7 f7f2 	udiv	r7, r7, r2
  40359e:	fab7 fe87 	clz	lr, r7
  4035a2:	f1be 0f00 	cmp.w	lr, #0
  4035a6:	d134      	bne.n	403612 <__udivmoddi4+0x16e>
  4035a8:	1beb      	subs	r3, r5, r7
  4035aa:	0c3a      	lsrs	r2, r7, #16
  4035ac:	fa1f fc87 	uxth.w	ip, r7
  4035b0:	2101      	movs	r1, #1
  4035b2:	fbb3 f8f2 	udiv	r8, r3, r2
  4035b6:	0c25      	lsrs	r5, r4, #16
  4035b8:	fb02 3318 	mls	r3, r2, r8, r3
  4035bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4035c0:	fb0c f308 	mul.w	r3, ip, r8
  4035c4:	42ab      	cmp	r3, r5
  4035c6:	d907      	bls.n	4035d8 <__udivmoddi4+0x134>
  4035c8:	19ed      	adds	r5, r5, r7
  4035ca:	f108 30ff 	add.w	r0, r8, #4294967295
  4035ce:	d202      	bcs.n	4035d6 <__udivmoddi4+0x132>
  4035d0:	42ab      	cmp	r3, r5
  4035d2:	f200 80d1 	bhi.w	403778 <__udivmoddi4+0x2d4>
  4035d6:	4680      	mov	r8, r0
  4035d8:	1aed      	subs	r5, r5, r3
  4035da:	b2a3      	uxth	r3, r4
  4035dc:	fbb5 f0f2 	udiv	r0, r5, r2
  4035e0:	fb02 5510 	mls	r5, r2, r0, r5
  4035e4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4035e8:	fb0c fc00 	mul.w	ip, ip, r0
  4035ec:	45a4      	cmp	ip, r4
  4035ee:	d907      	bls.n	403600 <__udivmoddi4+0x15c>
  4035f0:	19e4      	adds	r4, r4, r7
  4035f2:	f100 33ff 	add.w	r3, r0, #4294967295
  4035f6:	d202      	bcs.n	4035fe <__udivmoddi4+0x15a>
  4035f8:	45a4      	cmp	ip, r4
  4035fa:	f200 80b8 	bhi.w	40376e <__udivmoddi4+0x2ca>
  4035fe:	4618      	mov	r0, r3
  403600:	eba4 040c 	sub.w	r4, r4, ip
  403604:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403608:	e79d      	b.n	403546 <__udivmoddi4+0xa2>
  40360a:	4631      	mov	r1, r6
  40360c:	4630      	mov	r0, r6
  40360e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403612:	f1ce 0420 	rsb	r4, lr, #32
  403616:	fa05 f30e 	lsl.w	r3, r5, lr
  40361a:	fa07 f70e 	lsl.w	r7, r7, lr
  40361e:	fa20 f804 	lsr.w	r8, r0, r4
  403622:	0c3a      	lsrs	r2, r7, #16
  403624:	fa25 f404 	lsr.w	r4, r5, r4
  403628:	ea48 0803 	orr.w	r8, r8, r3
  40362c:	fbb4 f1f2 	udiv	r1, r4, r2
  403630:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403634:	fb02 4411 	mls	r4, r2, r1, r4
  403638:	fa1f fc87 	uxth.w	ip, r7
  40363c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403640:	fb01 f30c 	mul.w	r3, r1, ip
  403644:	42ab      	cmp	r3, r5
  403646:	fa00 f40e 	lsl.w	r4, r0, lr
  40364a:	d909      	bls.n	403660 <__udivmoddi4+0x1bc>
  40364c:	19ed      	adds	r5, r5, r7
  40364e:	f101 30ff 	add.w	r0, r1, #4294967295
  403652:	f080 808a 	bcs.w	40376a <__udivmoddi4+0x2c6>
  403656:	42ab      	cmp	r3, r5
  403658:	f240 8087 	bls.w	40376a <__udivmoddi4+0x2c6>
  40365c:	3902      	subs	r1, #2
  40365e:	443d      	add	r5, r7
  403660:	1aeb      	subs	r3, r5, r3
  403662:	fa1f f588 	uxth.w	r5, r8
  403666:	fbb3 f0f2 	udiv	r0, r3, r2
  40366a:	fb02 3310 	mls	r3, r2, r0, r3
  40366e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403672:	fb00 f30c 	mul.w	r3, r0, ip
  403676:	42ab      	cmp	r3, r5
  403678:	d907      	bls.n	40368a <__udivmoddi4+0x1e6>
  40367a:	19ed      	adds	r5, r5, r7
  40367c:	f100 38ff 	add.w	r8, r0, #4294967295
  403680:	d26f      	bcs.n	403762 <__udivmoddi4+0x2be>
  403682:	42ab      	cmp	r3, r5
  403684:	d96d      	bls.n	403762 <__udivmoddi4+0x2be>
  403686:	3802      	subs	r0, #2
  403688:	443d      	add	r5, r7
  40368a:	1aeb      	subs	r3, r5, r3
  40368c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403690:	e78f      	b.n	4035b2 <__udivmoddi4+0x10e>
  403692:	f1c1 0720 	rsb	r7, r1, #32
  403696:	fa22 f807 	lsr.w	r8, r2, r7
  40369a:	408b      	lsls	r3, r1
  40369c:	fa05 f401 	lsl.w	r4, r5, r1
  4036a0:	ea48 0303 	orr.w	r3, r8, r3
  4036a4:	fa20 fe07 	lsr.w	lr, r0, r7
  4036a8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4036ac:	40fd      	lsrs	r5, r7
  4036ae:	ea4e 0e04 	orr.w	lr, lr, r4
  4036b2:	fbb5 f9fc 	udiv	r9, r5, ip
  4036b6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4036ba:	fb0c 5519 	mls	r5, ip, r9, r5
  4036be:	fa1f f883 	uxth.w	r8, r3
  4036c2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4036c6:	fb09 f408 	mul.w	r4, r9, r8
  4036ca:	42ac      	cmp	r4, r5
  4036cc:	fa02 f201 	lsl.w	r2, r2, r1
  4036d0:	fa00 fa01 	lsl.w	sl, r0, r1
  4036d4:	d908      	bls.n	4036e8 <__udivmoddi4+0x244>
  4036d6:	18ed      	adds	r5, r5, r3
  4036d8:	f109 30ff 	add.w	r0, r9, #4294967295
  4036dc:	d243      	bcs.n	403766 <__udivmoddi4+0x2c2>
  4036de:	42ac      	cmp	r4, r5
  4036e0:	d941      	bls.n	403766 <__udivmoddi4+0x2c2>
  4036e2:	f1a9 0902 	sub.w	r9, r9, #2
  4036e6:	441d      	add	r5, r3
  4036e8:	1b2d      	subs	r5, r5, r4
  4036ea:	fa1f fe8e 	uxth.w	lr, lr
  4036ee:	fbb5 f0fc 	udiv	r0, r5, ip
  4036f2:	fb0c 5510 	mls	r5, ip, r0, r5
  4036f6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4036fa:	fb00 f808 	mul.w	r8, r0, r8
  4036fe:	45a0      	cmp	r8, r4
  403700:	d907      	bls.n	403712 <__udivmoddi4+0x26e>
  403702:	18e4      	adds	r4, r4, r3
  403704:	f100 35ff 	add.w	r5, r0, #4294967295
  403708:	d229      	bcs.n	40375e <__udivmoddi4+0x2ba>
  40370a:	45a0      	cmp	r8, r4
  40370c:	d927      	bls.n	40375e <__udivmoddi4+0x2ba>
  40370e:	3802      	subs	r0, #2
  403710:	441c      	add	r4, r3
  403712:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403716:	eba4 0408 	sub.w	r4, r4, r8
  40371a:	fba0 8902 	umull	r8, r9, r0, r2
  40371e:	454c      	cmp	r4, r9
  403720:	46c6      	mov	lr, r8
  403722:	464d      	mov	r5, r9
  403724:	d315      	bcc.n	403752 <__udivmoddi4+0x2ae>
  403726:	d012      	beq.n	40374e <__udivmoddi4+0x2aa>
  403728:	b156      	cbz	r6, 403740 <__udivmoddi4+0x29c>
  40372a:	ebba 030e 	subs.w	r3, sl, lr
  40372e:	eb64 0405 	sbc.w	r4, r4, r5
  403732:	fa04 f707 	lsl.w	r7, r4, r7
  403736:	40cb      	lsrs	r3, r1
  403738:	431f      	orrs	r7, r3
  40373a:	40cc      	lsrs	r4, r1
  40373c:	6037      	str	r7, [r6, #0]
  40373e:	6074      	str	r4, [r6, #4]
  403740:	2100      	movs	r1, #0
  403742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403746:	4618      	mov	r0, r3
  403748:	e6f8      	b.n	40353c <__udivmoddi4+0x98>
  40374a:	4690      	mov	r8, r2
  40374c:	e6e0      	b.n	403510 <__udivmoddi4+0x6c>
  40374e:	45c2      	cmp	sl, r8
  403750:	d2ea      	bcs.n	403728 <__udivmoddi4+0x284>
  403752:	ebb8 0e02 	subs.w	lr, r8, r2
  403756:	eb69 0503 	sbc.w	r5, r9, r3
  40375a:	3801      	subs	r0, #1
  40375c:	e7e4      	b.n	403728 <__udivmoddi4+0x284>
  40375e:	4628      	mov	r0, r5
  403760:	e7d7      	b.n	403712 <__udivmoddi4+0x26e>
  403762:	4640      	mov	r0, r8
  403764:	e791      	b.n	40368a <__udivmoddi4+0x1e6>
  403766:	4681      	mov	r9, r0
  403768:	e7be      	b.n	4036e8 <__udivmoddi4+0x244>
  40376a:	4601      	mov	r1, r0
  40376c:	e778      	b.n	403660 <__udivmoddi4+0x1bc>
  40376e:	3802      	subs	r0, #2
  403770:	443c      	add	r4, r7
  403772:	e745      	b.n	403600 <__udivmoddi4+0x15c>
  403774:	4608      	mov	r0, r1
  403776:	e708      	b.n	40358a <__udivmoddi4+0xe6>
  403778:	f1a8 0802 	sub.w	r8, r8, #2
  40377c:	443d      	add	r5, r7
  40377e:	e72b      	b.n	4035d8 <__udivmoddi4+0x134>

00403780 <__aeabi_idiv0>:
  403780:	4770      	bx	lr
  403782:	bf00      	nop

00403784 <__libc_init_array>:
  403784:	b570      	push	{r4, r5, r6, lr}
  403786:	4e0f      	ldr	r6, [pc, #60]	; (4037c4 <__libc_init_array+0x40>)
  403788:	4d0f      	ldr	r5, [pc, #60]	; (4037c8 <__libc_init_array+0x44>)
  40378a:	1b76      	subs	r6, r6, r5
  40378c:	10b6      	asrs	r6, r6, #2
  40378e:	bf18      	it	ne
  403790:	2400      	movne	r4, #0
  403792:	d005      	beq.n	4037a0 <__libc_init_array+0x1c>
  403794:	3401      	adds	r4, #1
  403796:	f855 3b04 	ldr.w	r3, [r5], #4
  40379a:	4798      	blx	r3
  40379c:	42a6      	cmp	r6, r4
  40379e:	d1f9      	bne.n	403794 <__libc_init_array+0x10>
  4037a0:	4e0a      	ldr	r6, [pc, #40]	; (4037cc <__libc_init_array+0x48>)
  4037a2:	4d0b      	ldr	r5, [pc, #44]	; (4037d0 <__libc_init_array+0x4c>)
  4037a4:	1b76      	subs	r6, r6, r5
  4037a6:	f001 fa0f 	bl	404bc8 <_init>
  4037aa:	10b6      	asrs	r6, r6, #2
  4037ac:	bf18      	it	ne
  4037ae:	2400      	movne	r4, #0
  4037b0:	d006      	beq.n	4037c0 <__libc_init_array+0x3c>
  4037b2:	3401      	adds	r4, #1
  4037b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4037b8:	4798      	blx	r3
  4037ba:	42a6      	cmp	r6, r4
  4037bc:	d1f9      	bne.n	4037b2 <__libc_init_array+0x2e>
  4037be:	bd70      	pop	{r4, r5, r6, pc}
  4037c0:	bd70      	pop	{r4, r5, r6, pc}
  4037c2:	bf00      	nop
  4037c4:	00404bd4 	.word	0x00404bd4
  4037c8:	00404bd4 	.word	0x00404bd4
  4037cc:	00404bdc 	.word	0x00404bdc
  4037d0:	00404bd4 	.word	0x00404bd4

004037d4 <malloc>:
  4037d4:	4b02      	ldr	r3, [pc, #8]	; (4037e0 <malloc+0xc>)
  4037d6:	4601      	mov	r1, r0
  4037d8:	6818      	ldr	r0, [r3, #0]
  4037da:	f000 b803 	b.w	4037e4 <_malloc_r>
  4037de:	bf00      	nop
  4037e0:	20000110 	.word	0x20000110

004037e4 <_malloc_r>:
  4037e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037e8:	f101 060b 	add.w	r6, r1, #11
  4037ec:	2e16      	cmp	r6, #22
  4037ee:	b083      	sub	sp, #12
  4037f0:	4605      	mov	r5, r0
  4037f2:	f240 809e 	bls.w	403932 <_malloc_r+0x14e>
  4037f6:	f036 0607 	bics.w	r6, r6, #7
  4037fa:	f100 80bd 	bmi.w	403978 <_malloc_r+0x194>
  4037fe:	42b1      	cmp	r1, r6
  403800:	f200 80ba 	bhi.w	403978 <_malloc_r+0x194>
  403804:	f000 fb86 	bl	403f14 <__malloc_lock>
  403808:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40380c:	f0c0 8293 	bcc.w	403d36 <_malloc_r+0x552>
  403810:	0a73      	lsrs	r3, r6, #9
  403812:	f000 80b8 	beq.w	403986 <_malloc_r+0x1a2>
  403816:	2b04      	cmp	r3, #4
  403818:	f200 8179 	bhi.w	403b0e <_malloc_r+0x32a>
  40381c:	09b3      	lsrs	r3, r6, #6
  40381e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403822:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403826:	00c3      	lsls	r3, r0, #3
  403828:	4fbf      	ldr	r7, [pc, #764]	; (403b28 <_malloc_r+0x344>)
  40382a:	443b      	add	r3, r7
  40382c:	f1a3 0108 	sub.w	r1, r3, #8
  403830:	685c      	ldr	r4, [r3, #4]
  403832:	42a1      	cmp	r1, r4
  403834:	d106      	bne.n	403844 <_malloc_r+0x60>
  403836:	e00c      	b.n	403852 <_malloc_r+0x6e>
  403838:	2a00      	cmp	r2, #0
  40383a:	f280 80aa 	bge.w	403992 <_malloc_r+0x1ae>
  40383e:	68e4      	ldr	r4, [r4, #12]
  403840:	42a1      	cmp	r1, r4
  403842:	d006      	beq.n	403852 <_malloc_r+0x6e>
  403844:	6863      	ldr	r3, [r4, #4]
  403846:	f023 0303 	bic.w	r3, r3, #3
  40384a:	1b9a      	subs	r2, r3, r6
  40384c:	2a0f      	cmp	r2, #15
  40384e:	ddf3      	ble.n	403838 <_malloc_r+0x54>
  403850:	4670      	mov	r0, lr
  403852:	693c      	ldr	r4, [r7, #16]
  403854:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403b3c <_malloc_r+0x358>
  403858:	4574      	cmp	r4, lr
  40385a:	f000 81ab 	beq.w	403bb4 <_malloc_r+0x3d0>
  40385e:	6863      	ldr	r3, [r4, #4]
  403860:	f023 0303 	bic.w	r3, r3, #3
  403864:	1b9a      	subs	r2, r3, r6
  403866:	2a0f      	cmp	r2, #15
  403868:	f300 8190 	bgt.w	403b8c <_malloc_r+0x3a8>
  40386c:	2a00      	cmp	r2, #0
  40386e:	f8c7 e014 	str.w	lr, [r7, #20]
  403872:	f8c7 e010 	str.w	lr, [r7, #16]
  403876:	f280 809d 	bge.w	4039b4 <_malloc_r+0x1d0>
  40387a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40387e:	f080 8161 	bcs.w	403b44 <_malloc_r+0x360>
  403882:	08db      	lsrs	r3, r3, #3
  403884:	f103 0c01 	add.w	ip, r3, #1
  403888:	1099      	asrs	r1, r3, #2
  40388a:	687a      	ldr	r2, [r7, #4]
  40388c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403890:	f8c4 8008 	str.w	r8, [r4, #8]
  403894:	2301      	movs	r3, #1
  403896:	408b      	lsls	r3, r1
  403898:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40389c:	4313      	orrs	r3, r2
  40389e:	3908      	subs	r1, #8
  4038a0:	60e1      	str	r1, [r4, #12]
  4038a2:	607b      	str	r3, [r7, #4]
  4038a4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4038a8:	f8c8 400c 	str.w	r4, [r8, #12]
  4038ac:	1082      	asrs	r2, r0, #2
  4038ae:	2401      	movs	r4, #1
  4038b0:	4094      	lsls	r4, r2
  4038b2:	429c      	cmp	r4, r3
  4038b4:	f200 808b 	bhi.w	4039ce <_malloc_r+0x1ea>
  4038b8:	421c      	tst	r4, r3
  4038ba:	d106      	bne.n	4038ca <_malloc_r+0xe6>
  4038bc:	f020 0003 	bic.w	r0, r0, #3
  4038c0:	0064      	lsls	r4, r4, #1
  4038c2:	421c      	tst	r4, r3
  4038c4:	f100 0004 	add.w	r0, r0, #4
  4038c8:	d0fa      	beq.n	4038c0 <_malloc_r+0xdc>
  4038ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4038ce:	46cc      	mov	ip, r9
  4038d0:	4680      	mov	r8, r0
  4038d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4038d6:	459c      	cmp	ip, r3
  4038d8:	d107      	bne.n	4038ea <_malloc_r+0x106>
  4038da:	e16d      	b.n	403bb8 <_malloc_r+0x3d4>
  4038dc:	2a00      	cmp	r2, #0
  4038de:	f280 817b 	bge.w	403bd8 <_malloc_r+0x3f4>
  4038e2:	68db      	ldr	r3, [r3, #12]
  4038e4:	459c      	cmp	ip, r3
  4038e6:	f000 8167 	beq.w	403bb8 <_malloc_r+0x3d4>
  4038ea:	6859      	ldr	r1, [r3, #4]
  4038ec:	f021 0103 	bic.w	r1, r1, #3
  4038f0:	1b8a      	subs	r2, r1, r6
  4038f2:	2a0f      	cmp	r2, #15
  4038f4:	ddf2      	ble.n	4038dc <_malloc_r+0xf8>
  4038f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4038fa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4038fe:	9300      	str	r3, [sp, #0]
  403900:	199c      	adds	r4, r3, r6
  403902:	4628      	mov	r0, r5
  403904:	f046 0601 	orr.w	r6, r6, #1
  403908:	f042 0501 	orr.w	r5, r2, #1
  40390c:	605e      	str	r6, [r3, #4]
  40390e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403912:	f8cc 8008 	str.w	r8, [ip, #8]
  403916:	617c      	str	r4, [r7, #20]
  403918:	613c      	str	r4, [r7, #16]
  40391a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40391e:	f8c4 e008 	str.w	lr, [r4, #8]
  403922:	6065      	str	r5, [r4, #4]
  403924:	505a      	str	r2, [r3, r1]
  403926:	f000 fafb 	bl	403f20 <__malloc_unlock>
  40392a:	9b00      	ldr	r3, [sp, #0]
  40392c:	f103 0408 	add.w	r4, r3, #8
  403930:	e01e      	b.n	403970 <_malloc_r+0x18c>
  403932:	2910      	cmp	r1, #16
  403934:	d820      	bhi.n	403978 <_malloc_r+0x194>
  403936:	f000 faed 	bl	403f14 <__malloc_lock>
  40393a:	2610      	movs	r6, #16
  40393c:	2318      	movs	r3, #24
  40393e:	2002      	movs	r0, #2
  403940:	4f79      	ldr	r7, [pc, #484]	; (403b28 <_malloc_r+0x344>)
  403942:	443b      	add	r3, r7
  403944:	f1a3 0208 	sub.w	r2, r3, #8
  403948:	685c      	ldr	r4, [r3, #4]
  40394a:	4294      	cmp	r4, r2
  40394c:	f000 813d 	beq.w	403bca <_malloc_r+0x3e6>
  403950:	6863      	ldr	r3, [r4, #4]
  403952:	68e1      	ldr	r1, [r4, #12]
  403954:	68a6      	ldr	r6, [r4, #8]
  403956:	f023 0303 	bic.w	r3, r3, #3
  40395a:	4423      	add	r3, r4
  40395c:	4628      	mov	r0, r5
  40395e:	685a      	ldr	r2, [r3, #4]
  403960:	60f1      	str	r1, [r6, #12]
  403962:	f042 0201 	orr.w	r2, r2, #1
  403966:	608e      	str	r6, [r1, #8]
  403968:	605a      	str	r2, [r3, #4]
  40396a:	f000 fad9 	bl	403f20 <__malloc_unlock>
  40396e:	3408      	adds	r4, #8
  403970:	4620      	mov	r0, r4
  403972:	b003      	add	sp, #12
  403974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403978:	2400      	movs	r4, #0
  40397a:	230c      	movs	r3, #12
  40397c:	4620      	mov	r0, r4
  40397e:	602b      	str	r3, [r5, #0]
  403980:	b003      	add	sp, #12
  403982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403986:	2040      	movs	r0, #64	; 0x40
  403988:	f44f 7300 	mov.w	r3, #512	; 0x200
  40398c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403990:	e74a      	b.n	403828 <_malloc_r+0x44>
  403992:	4423      	add	r3, r4
  403994:	68e1      	ldr	r1, [r4, #12]
  403996:	685a      	ldr	r2, [r3, #4]
  403998:	68a6      	ldr	r6, [r4, #8]
  40399a:	f042 0201 	orr.w	r2, r2, #1
  40399e:	60f1      	str	r1, [r6, #12]
  4039a0:	4628      	mov	r0, r5
  4039a2:	608e      	str	r6, [r1, #8]
  4039a4:	605a      	str	r2, [r3, #4]
  4039a6:	f000 fabb 	bl	403f20 <__malloc_unlock>
  4039aa:	3408      	adds	r4, #8
  4039ac:	4620      	mov	r0, r4
  4039ae:	b003      	add	sp, #12
  4039b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039b4:	4423      	add	r3, r4
  4039b6:	4628      	mov	r0, r5
  4039b8:	685a      	ldr	r2, [r3, #4]
  4039ba:	f042 0201 	orr.w	r2, r2, #1
  4039be:	605a      	str	r2, [r3, #4]
  4039c0:	f000 faae 	bl	403f20 <__malloc_unlock>
  4039c4:	3408      	adds	r4, #8
  4039c6:	4620      	mov	r0, r4
  4039c8:	b003      	add	sp, #12
  4039ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039ce:	68bc      	ldr	r4, [r7, #8]
  4039d0:	6863      	ldr	r3, [r4, #4]
  4039d2:	f023 0803 	bic.w	r8, r3, #3
  4039d6:	45b0      	cmp	r8, r6
  4039d8:	d304      	bcc.n	4039e4 <_malloc_r+0x200>
  4039da:	eba8 0306 	sub.w	r3, r8, r6
  4039de:	2b0f      	cmp	r3, #15
  4039e0:	f300 8085 	bgt.w	403aee <_malloc_r+0x30a>
  4039e4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403b40 <_malloc_r+0x35c>
  4039e8:	4b50      	ldr	r3, [pc, #320]	; (403b2c <_malloc_r+0x348>)
  4039ea:	f8d9 2000 	ldr.w	r2, [r9]
  4039ee:	681b      	ldr	r3, [r3, #0]
  4039f0:	3201      	adds	r2, #1
  4039f2:	4433      	add	r3, r6
  4039f4:	eb04 0a08 	add.w	sl, r4, r8
  4039f8:	f000 8155 	beq.w	403ca6 <_malloc_r+0x4c2>
  4039fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403a00:	330f      	adds	r3, #15
  403a02:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403a06:	f02b 0b0f 	bic.w	fp, fp, #15
  403a0a:	4659      	mov	r1, fp
  403a0c:	4628      	mov	r0, r5
  403a0e:	f000 fa8d 	bl	403f2c <_sbrk_r>
  403a12:	1c41      	adds	r1, r0, #1
  403a14:	4602      	mov	r2, r0
  403a16:	f000 80fc 	beq.w	403c12 <_malloc_r+0x42e>
  403a1a:	4582      	cmp	sl, r0
  403a1c:	f200 80f7 	bhi.w	403c0e <_malloc_r+0x42a>
  403a20:	4b43      	ldr	r3, [pc, #268]	; (403b30 <_malloc_r+0x34c>)
  403a22:	6819      	ldr	r1, [r3, #0]
  403a24:	4459      	add	r1, fp
  403a26:	6019      	str	r1, [r3, #0]
  403a28:	f000 814d 	beq.w	403cc6 <_malloc_r+0x4e2>
  403a2c:	f8d9 0000 	ldr.w	r0, [r9]
  403a30:	3001      	adds	r0, #1
  403a32:	bf1b      	ittet	ne
  403a34:	eba2 0a0a 	subne.w	sl, r2, sl
  403a38:	4451      	addne	r1, sl
  403a3a:	f8c9 2000 	streq.w	r2, [r9]
  403a3e:	6019      	strne	r1, [r3, #0]
  403a40:	f012 0107 	ands.w	r1, r2, #7
  403a44:	f000 8115 	beq.w	403c72 <_malloc_r+0x48e>
  403a48:	f1c1 0008 	rsb	r0, r1, #8
  403a4c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403a50:	4402      	add	r2, r0
  403a52:	3108      	adds	r1, #8
  403a54:	eb02 090b 	add.w	r9, r2, fp
  403a58:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403a5c:	eba1 0909 	sub.w	r9, r1, r9
  403a60:	4649      	mov	r1, r9
  403a62:	4628      	mov	r0, r5
  403a64:	9301      	str	r3, [sp, #4]
  403a66:	9200      	str	r2, [sp, #0]
  403a68:	f000 fa60 	bl	403f2c <_sbrk_r>
  403a6c:	1c43      	adds	r3, r0, #1
  403a6e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403a72:	f000 8143 	beq.w	403cfc <_malloc_r+0x518>
  403a76:	1a80      	subs	r0, r0, r2
  403a78:	4448      	add	r0, r9
  403a7a:	f040 0001 	orr.w	r0, r0, #1
  403a7e:	6819      	ldr	r1, [r3, #0]
  403a80:	60ba      	str	r2, [r7, #8]
  403a82:	4449      	add	r1, r9
  403a84:	42bc      	cmp	r4, r7
  403a86:	6050      	str	r0, [r2, #4]
  403a88:	6019      	str	r1, [r3, #0]
  403a8a:	d017      	beq.n	403abc <_malloc_r+0x2d8>
  403a8c:	f1b8 0f0f 	cmp.w	r8, #15
  403a90:	f240 80fb 	bls.w	403c8a <_malloc_r+0x4a6>
  403a94:	6860      	ldr	r0, [r4, #4]
  403a96:	f1a8 020c 	sub.w	r2, r8, #12
  403a9a:	f022 0207 	bic.w	r2, r2, #7
  403a9e:	eb04 0e02 	add.w	lr, r4, r2
  403aa2:	f000 0001 	and.w	r0, r0, #1
  403aa6:	f04f 0c05 	mov.w	ip, #5
  403aaa:	4310      	orrs	r0, r2
  403aac:	2a0f      	cmp	r2, #15
  403aae:	6060      	str	r0, [r4, #4]
  403ab0:	f8ce c004 	str.w	ip, [lr, #4]
  403ab4:	f8ce c008 	str.w	ip, [lr, #8]
  403ab8:	f200 8117 	bhi.w	403cea <_malloc_r+0x506>
  403abc:	4b1d      	ldr	r3, [pc, #116]	; (403b34 <_malloc_r+0x350>)
  403abe:	68bc      	ldr	r4, [r7, #8]
  403ac0:	681a      	ldr	r2, [r3, #0]
  403ac2:	4291      	cmp	r1, r2
  403ac4:	bf88      	it	hi
  403ac6:	6019      	strhi	r1, [r3, #0]
  403ac8:	4b1b      	ldr	r3, [pc, #108]	; (403b38 <_malloc_r+0x354>)
  403aca:	681a      	ldr	r2, [r3, #0]
  403acc:	4291      	cmp	r1, r2
  403ace:	6862      	ldr	r2, [r4, #4]
  403ad0:	bf88      	it	hi
  403ad2:	6019      	strhi	r1, [r3, #0]
  403ad4:	f022 0203 	bic.w	r2, r2, #3
  403ad8:	4296      	cmp	r6, r2
  403ada:	eba2 0306 	sub.w	r3, r2, r6
  403ade:	d801      	bhi.n	403ae4 <_malloc_r+0x300>
  403ae0:	2b0f      	cmp	r3, #15
  403ae2:	dc04      	bgt.n	403aee <_malloc_r+0x30a>
  403ae4:	4628      	mov	r0, r5
  403ae6:	f000 fa1b 	bl	403f20 <__malloc_unlock>
  403aea:	2400      	movs	r4, #0
  403aec:	e740      	b.n	403970 <_malloc_r+0x18c>
  403aee:	19a2      	adds	r2, r4, r6
  403af0:	f043 0301 	orr.w	r3, r3, #1
  403af4:	f046 0601 	orr.w	r6, r6, #1
  403af8:	6066      	str	r6, [r4, #4]
  403afa:	4628      	mov	r0, r5
  403afc:	60ba      	str	r2, [r7, #8]
  403afe:	6053      	str	r3, [r2, #4]
  403b00:	f000 fa0e 	bl	403f20 <__malloc_unlock>
  403b04:	3408      	adds	r4, #8
  403b06:	4620      	mov	r0, r4
  403b08:	b003      	add	sp, #12
  403b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b0e:	2b14      	cmp	r3, #20
  403b10:	d971      	bls.n	403bf6 <_malloc_r+0x412>
  403b12:	2b54      	cmp	r3, #84	; 0x54
  403b14:	f200 80a3 	bhi.w	403c5e <_malloc_r+0x47a>
  403b18:	0b33      	lsrs	r3, r6, #12
  403b1a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403b1e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403b22:	00c3      	lsls	r3, r0, #3
  403b24:	e680      	b.n	403828 <_malloc_r+0x44>
  403b26:	bf00      	nop
  403b28:	20000540 	.word	0x20000540
  403b2c:	20000c24 	.word	0x20000c24
  403b30:	20000bf4 	.word	0x20000bf4
  403b34:	20000c1c 	.word	0x20000c1c
  403b38:	20000c20 	.word	0x20000c20
  403b3c:	20000548 	.word	0x20000548
  403b40:	20000948 	.word	0x20000948
  403b44:	0a5a      	lsrs	r2, r3, #9
  403b46:	2a04      	cmp	r2, #4
  403b48:	d95b      	bls.n	403c02 <_malloc_r+0x41e>
  403b4a:	2a14      	cmp	r2, #20
  403b4c:	f200 80ae 	bhi.w	403cac <_malloc_r+0x4c8>
  403b50:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403b54:	00c9      	lsls	r1, r1, #3
  403b56:	325b      	adds	r2, #91	; 0x5b
  403b58:	eb07 0c01 	add.w	ip, r7, r1
  403b5c:	5879      	ldr	r1, [r7, r1]
  403b5e:	f1ac 0c08 	sub.w	ip, ip, #8
  403b62:	458c      	cmp	ip, r1
  403b64:	f000 8088 	beq.w	403c78 <_malloc_r+0x494>
  403b68:	684a      	ldr	r2, [r1, #4]
  403b6a:	f022 0203 	bic.w	r2, r2, #3
  403b6e:	4293      	cmp	r3, r2
  403b70:	d273      	bcs.n	403c5a <_malloc_r+0x476>
  403b72:	6889      	ldr	r1, [r1, #8]
  403b74:	458c      	cmp	ip, r1
  403b76:	d1f7      	bne.n	403b68 <_malloc_r+0x384>
  403b78:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403b7c:	687b      	ldr	r3, [r7, #4]
  403b7e:	60e2      	str	r2, [r4, #12]
  403b80:	f8c4 c008 	str.w	ip, [r4, #8]
  403b84:	6094      	str	r4, [r2, #8]
  403b86:	f8cc 400c 	str.w	r4, [ip, #12]
  403b8a:	e68f      	b.n	4038ac <_malloc_r+0xc8>
  403b8c:	19a1      	adds	r1, r4, r6
  403b8e:	f046 0c01 	orr.w	ip, r6, #1
  403b92:	f042 0601 	orr.w	r6, r2, #1
  403b96:	f8c4 c004 	str.w	ip, [r4, #4]
  403b9a:	4628      	mov	r0, r5
  403b9c:	6179      	str	r1, [r7, #20]
  403b9e:	6139      	str	r1, [r7, #16]
  403ba0:	f8c1 e00c 	str.w	lr, [r1, #12]
  403ba4:	f8c1 e008 	str.w	lr, [r1, #8]
  403ba8:	604e      	str	r6, [r1, #4]
  403baa:	50e2      	str	r2, [r4, r3]
  403bac:	f000 f9b8 	bl	403f20 <__malloc_unlock>
  403bb0:	3408      	adds	r4, #8
  403bb2:	e6dd      	b.n	403970 <_malloc_r+0x18c>
  403bb4:	687b      	ldr	r3, [r7, #4]
  403bb6:	e679      	b.n	4038ac <_malloc_r+0xc8>
  403bb8:	f108 0801 	add.w	r8, r8, #1
  403bbc:	f018 0f03 	tst.w	r8, #3
  403bc0:	f10c 0c08 	add.w	ip, ip, #8
  403bc4:	f47f ae85 	bne.w	4038d2 <_malloc_r+0xee>
  403bc8:	e02d      	b.n	403c26 <_malloc_r+0x442>
  403bca:	68dc      	ldr	r4, [r3, #12]
  403bcc:	42a3      	cmp	r3, r4
  403bce:	bf08      	it	eq
  403bd0:	3002      	addeq	r0, #2
  403bd2:	f43f ae3e 	beq.w	403852 <_malloc_r+0x6e>
  403bd6:	e6bb      	b.n	403950 <_malloc_r+0x16c>
  403bd8:	4419      	add	r1, r3
  403bda:	461c      	mov	r4, r3
  403bdc:	684a      	ldr	r2, [r1, #4]
  403bde:	68db      	ldr	r3, [r3, #12]
  403be0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403be4:	f042 0201 	orr.w	r2, r2, #1
  403be8:	604a      	str	r2, [r1, #4]
  403bea:	4628      	mov	r0, r5
  403bec:	60f3      	str	r3, [r6, #12]
  403bee:	609e      	str	r6, [r3, #8]
  403bf0:	f000 f996 	bl	403f20 <__malloc_unlock>
  403bf4:	e6bc      	b.n	403970 <_malloc_r+0x18c>
  403bf6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403bfa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403bfe:	00c3      	lsls	r3, r0, #3
  403c00:	e612      	b.n	403828 <_malloc_r+0x44>
  403c02:	099a      	lsrs	r2, r3, #6
  403c04:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403c08:	00c9      	lsls	r1, r1, #3
  403c0a:	3238      	adds	r2, #56	; 0x38
  403c0c:	e7a4      	b.n	403b58 <_malloc_r+0x374>
  403c0e:	42bc      	cmp	r4, r7
  403c10:	d054      	beq.n	403cbc <_malloc_r+0x4d8>
  403c12:	68bc      	ldr	r4, [r7, #8]
  403c14:	6862      	ldr	r2, [r4, #4]
  403c16:	f022 0203 	bic.w	r2, r2, #3
  403c1a:	e75d      	b.n	403ad8 <_malloc_r+0x2f4>
  403c1c:	f859 3908 	ldr.w	r3, [r9], #-8
  403c20:	4599      	cmp	r9, r3
  403c22:	f040 8086 	bne.w	403d32 <_malloc_r+0x54e>
  403c26:	f010 0f03 	tst.w	r0, #3
  403c2a:	f100 30ff 	add.w	r0, r0, #4294967295
  403c2e:	d1f5      	bne.n	403c1c <_malloc_r+0x438>
  403c30:	687b      	ldr	r3, [r7, #4]
  403c32:	ea23 0304 	bic.w	r3, r3, r4
  403c36:	607b      	str	r3, [r7, #4]
  403c38:	0064      	lsls	r4, r4, #1
  403c3a:	429c      	cmp	r4, r3
  403c3c:	f63f aec7 	bhi.w	4039ce <_malloc_r+0x1ea>
  403c40:	2c00      	cmp	r4, #0
  403c42:	f43f aec4 	beq.w	4039ce <_malloc_r+0x1ea>
  403c46:	421c      	tst	r4, r3
  403c48:	4640      	mov	r0, r8
  403c4a:	f47f ae3e 	bne.w	4038ca <_malloc_r+0xe6>
  403c4e:	0064      	lsls	r4, r4, #1
  403c50:	421c      	tst	r4, r3
  403c52:	f100 0004 	add.w	r0, r0, #4
  403c56:	d0fa      	beq.n	403c4e <_malloc_r+0x46a>
  403c58:	e637      	b.n	4038ca <_malloc_r+0xe6>
  403c5a:	468c      	mov	ip, r1
  403c5c:	e78c      	b.n	403b78 <_malloc_r+0x394>
  403c5e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403c62:	d815      	bhi.n	403c90 <_malloc_r+0x4ac>
  403c64:	0bf3      	lsrs	r3, r6, #15
  403c66:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403c6a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403c6e:	00c3      	lsls	r3, r0, #3
  403c70:	e5da      	b.n	403828 <_malloc_r+0x44>
  403c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403c76:	e6ed      	b.n	403a54 <_malloc_r+0x270>
  403c78:	687b      	ldr	r3, [r7, #4]
  403c7a:	1092      	asrs	r2, r2, #2
  403c7c:	2101      	movs	r1, #1
  403c7e:	fa01 f202 	lsl.w	r2, r1, r2
  403c82:	4313      	orrs	r3, r2
  403c84:	607b      	str	r3, [r7, #4]
  403c86:	4662      	mov	r2, ip
  403c88:	e779      	b.n	403b7e <_malloc_r+0x39a>
  403c8a:	2301      	movs	r3, #1
  403c8c:	6053      	str	r3, [r2, #4]
  403c8e:	e729      	b.n	403ae4 <_malloc_r+0x300>
  403c90:	f240 5254 	movw	r2, #1364	; 0x554
  403c94:	4293      	cmp	r3, r2
  403c96:	d822      	bhi.n	403cde <_malloc_r+0x4fa>
  403c98:	0cb3      	lsrs	r3, r6, #18
  403c9a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403c9e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403ca2:	00c3      	lsls	r3, r0, #3
  403ca4:	e5c0      	b.n	403828 <_malloc_r+0x44>
  403ca6:	f103 0b10 	add.w	fp, r3, #16
  403caa:	e6ae      	b.n	403a0a <_malloc_r+0x226>
  403cac:	2a54      	cmp	r2, #84	; 0x54
  403cae:	d829      	bhi.n	403d04 <_malloc_r+0x520>
  403cb0:	0b1a      	lsrs	r2, r3, #12
  403cb2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403cb6:	00c9      	lsls	r1, r1, #3
  403cb8:	326e      	adds	r2, #110	; 0x6e
  403cba:	e74d      	b.n	403b58 <_malloc_r+0x374>
  403cbc:	4b20      	ldr	r3, [pc, #128]	; (403d40 <_malloc_r+0x55c>)
  403cbe:	6819      	ldr	r1, [r3, #0]
  403cc0:	4459      	add	r1, fp
  403cc2:	6019      	str	r1, [r3, #0]
  403cc4:	e6b2      	b.n	403a2c <_malloc_r+0x248>
  403cc6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403cca:	2800      	cmp	r0, #0
  403ccc:	f47f aeae 	bne.w	403a2c <_malloc_r+0x248>
  403cd0:	eb08 030b 	add.w	r3, r8, fp
  403cd4:	68ba      	ldr	r2, [r7, #8]
  403cd6:	f043 0301 	orr.w	r3, r3, #1
  403cda:	6053      	str	r3, [r2, #4]
  403cdc:	e6ee      	b.n	403abc <_malloc_r+0x2d8>
  403cde:	207f      	movs	r0, #127	; 0x7f
  403ce0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403ce4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403ce8:	e59e      	b.n	403828 <_malloc_r+0x44>
  403cea:	f104 0108 	add.w	r1, r4, #8
  403cee:	4628      	mov	r0, r5
  403cf0:	9300      	str	r3, [sp, #0]
  403cf2:	f000 fc1d 	bl	404530 <_free_r>
  403cf6:	9b00      	ldr	r3, [sp, #0]
  403cf8:	6819      	ldr	r1, [r3, #0]
  403cfa:	e6df      	b.n	403abc <_malloc_r+0x2d8>
  403cfc:	2001      	movs	r0, #1
  403cfe:	f04f 0900 	mov.w	r9, #0
  403d02:	e6bc      	b.n	403a7e <_malloc_r+0x29a>
  403d04:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403d08:	d805      	bhi.n	403d16 <_malloc_r+0x532>
  403d0a:	0bda      	lsrs	r2, r3, #15
  403d0c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403d10:	00c9      	lsls	r1, r1, #3
  403d12:	3277      	adds	r2, #119	; 0x77
  403d14:	e720      	b.n	403b58 <_malloc_r+0x374>
  403d16:	f240 5154 	movw	r1, #1364	; 0x554
  403d1a:	428a      	cmp	r2, r1
  403d1c:	d805      	bhi.n	403d2a <_malloc_r+0x546>
  403d1e:	0c9a      	lsrs	r2, r3, #18
  403d20:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403d24:	00c9      	lsls	r1, r1, #3
  403d26:	327c      	adds	r2, #124	; 0x7c
  403d28:	e716      	b.n	403b58 <_malloc_r+0x374>
  403d2a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403d2e:	227e      	movs	r2, #126	; 0x7e
  403d30:	e712      	b.n	403b58 <_malloc_r+0x374>
  403d32:	687b      	ldr	r3, [r7, #4]
  403d34:	e780      	b.n	403c38 <_malloc_r+0x454>
  403d36:	08f0      	lsrs	r0, r6, #3
  403d38:	f106 0308 	add.w	r3, r6, #8
  403d3c:	e600      	b.n	403940 <_malloc_r+0x15c>
  403d3e:	bf00      	nop
  403d40:	20000bf4 	.word	0x20000bf4

00403d44 <memcpy>:
  403d44:	4684      	mov	ip, r0
  403d46:	ea41 0300 	orr.w	r3, r1, r0
  403d4a:	f013 0303 	ands.w	r3, r3, #3
  403d4e:	d16d      	bne.n	403e2c <memcpy+0xe8>
  403d50:	3a40      	subs	r2, #64	; 0x40
  403d52:	d341      	bcc.n	403dd8 <memcpy+0x94>
  403d54:	f851 3b04 	ldr.w	r3, [r1], #4
  403d58:	f840 3b04 	str.w	r3, [r0], #4
  403d5c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d60:	f840 3b04 	str.w	r3, [r0], #4
  403d64:	f851 3b04 	ldr.w	r3, [r1], #4
  403d68:	f840 3b04 	str.w	r3, [r0], #4
  403d6c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d70:	f840 3b04 	str.w	r3, [r0], #4
  403d74:	f851 3b04 	ldr.w	r3, [r1], #4
  403d78:	f840 3b04 	str.w	r3, [r0], #4
  403d7c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d80:	f840 3b04 	str.w	r3, [r0], #4
  403d84:	f851 3b04 	ldr.w	r3, [r1], #4
  403d88:	f840 3b04 	str.w	r3, [r0], #4
  403d8c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d90:	f840 3b04 	str.w	r3, [r0], #4
  403d94:	f851 3b04 	ldr.w	r3, [r1], #4
  403d98:	f840 3b04 	str.w	r3, [r0], #4
  403d9c:	f851 3b04 	ldr.w	r3, [r1], #4
  403da0:	f840 3b04 	str.w	r3, [r0], #4
  403da4:	f851 3b04 	ldr.w	r3, [r1], #4
  403da8:	f840 3b04 	str.w	r3, [r0], #4
  403dac:	f851 3b04 	ldr.w	r3, [r1], #4
  403db0:	f840 3b04 	str.w	r3, [r0], #4
  403db4:	f851 3b04 	ldr.w	r3, [r1], #4
  403db8:	f840 3b04 	str.w	r3, [r0], #4
  403dbc:	f851 3b04 	ldr.w	r3, [r1], #4
  403dc0:	f840 3b04 	str.w	r3, [r0], #4
  403dc4:	f851 3b04 	ldr.w	r3, [r1], #4
  403dc8:	f840 3b04 	str.w	r3, [r0], #4
  403dcc:	f851 3b04 	ldr.w	r3, [r1], #4
  403dd0:	f840 3b04 	str.w	r3, [r0], #4
  403dd4:	3a40      	subs	r2, #64	; 0x40
  403dd6:	d2bd      	bcs.n	403d54 <memcpy+0x10>
  403dd8:	3230      	adds	r2, #48	; 0x30
  403dda:	d311      	bcc.n	403e00 <memcpy+0xbc>
  403ddc:	f851 3b04 	ldr.w	r3, [r1], #4
  403de0:	f840 3b04 	str.w	r3, [r0], #4
  403de4:	f851 3b04 	ldr.w	r3, [r1], #4
  403de8:	f840 3b04 	str.w	r3, [r0], #4
  403dec:	f851 3b04 	ldr.w	r3, [r1], #4
  403df0:	f840 3b04 	str.w	r3, [r0], #4
  403df4:	f851 3b04 	ldr.w	r3, [r1], #4
  403df8:	f840 3b04 	str.w	r3, [r0], #4
  403dfc:	3a10      	subs	r2, #16
  403dfe:	d2ed      	bcs.n	403ddc <memcpy+0x98>
  403e00:	320c      	adds	r2, #12
  403e02:	d305      	bcc.n	403e10 <memcpy+0xcc>
  403e04:	f851 3b04 	ldr.w	r3, [r1], #4
  403e08:	f840 3b04 	str.w	r3, [r0], #4
  403e0c:	3a04      	subs	r2, #4
  403e0e:	d2f9      	bcs.n	403e04 <memcpy+0xc0>
  403e10:	3204      	adds	r2, #4
  403e12:	d008      	beq.n	403e26 <memcpy+0xe2>
  403e14:	07d2      	lsls	r2, r2, #31
  403e16:	bf1c      	itt	ne
  403e18:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403e1c:	f800 3b01 	strbne.w	r3, [r0], #1
  403e20:	d301      	bcc.n	403e26 <memcpy+0xe2>
  403e22:	880b      	ldrh	r3, [r1, #0]
  403e24:	8003      	strh	r3, [r0, #0]
  403e26:	4660      	mov	r0, ip
  403e28:	4770      	bx	lr
  403e2a:	bf00      	nop
  403e2c:	2a08      	cmp	r2, #8
  403e2e:	d313      	bcc.n	403e58 <memcpy+0x114>
  403e30:	078b      	lsls	r3, r1, #30
  403e32:	d08d      	beq.n	403d50 <memcpy+0xc>
  403e34:	f010 0303 	ands.w	r3, r0, #3
  403e38:	d08a      	beq.n	403d50 <memcpy+0xc>
  403e3a:	f1c3 0304 	rsb	r3, r3, #4
  403e3e:	1ad2      	subs	r2, r2, r3
  403e40:	07db      	lsls	r3, r3, #31
  403e42:	bf1c      	itt	ne
  403e44:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403e48:	f800 3b01 	strbne.w	r3, [r0], #1
  403e4c:	d380      	bcc.n	403d50 <memcpy+0xc>
  403e4e:	f831 3b02 	ldrh.w	r3, [r1], #2
  403e52:	f820 3b02 	strh.w	r3, [r0], #2
  403e56:	e77b      	b.n	403d50 <memcpy+0xc>
  403e58:	3a04      	subs	r2, #4
  403e5a:	d3d9      	bcc.n	403e10 <memcpy+0xcc>
  403e5c:	3a01      	subs	r2, #1
  403e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403e62:	f800 3b01 	strb.w	r3, [r0], #1
  403e66:	d2f9      	bcs.n	403e5c <memcpy+0x118>
  403e68:	780b      	ldrb	r3, [r1, #0]
  403e6a:	7003      	strb	r3, [r0, #0]
  403e6c:	784b      	ldrb	r3, [r1, #1]
  403e6e:	7043      	strb	r3, [r0, #1]
  403e70:	788b      	ldrb	r3, [r1, #2]
  403e72:	7083      	strb	r3, [r0, #2]
  403e74:	4660      	mov	r0, ip
  403e76:	4770      	bx	lr

00403e78 <memset>:
  403e78:	b470      	push	{r4, r5, r6}
  403e7a:	0786      	lsls	r6, r0, #30
  403e7c:	d046      	beq.n	403f0c <memset+0x94>
  403e7e:	1e54      	subs	r4, r2, #1
  403e80:	2a00      	cmp	r2, #0
  403e82:	d041      	beq.n	403f08 <memset+0x90>
  403e84:	b2ca      	uxtb	r2, r1
  403e86:	4603      	mov	r3, r0
  403e88:	e002      	b.n	403e90 <memset+0x18>
  403e8a:	f114 34ff 	adds.w	r4, r4, #4294967295
  403e8e:	d33b      	bcc.n	403f08 <memset+0x90>
  403e90:	f803 2b01 	strb.w	r2, [r3], #1
  403e94:	079d      	lsls	r5, r3, #30
  403e96:	d1f8      	bne.n	403e8a <memset+0x12>
  403e98:	2c03      	cmp	r4, #3
  403e9a:	d92e      	bls.n	403efa <memset+0x82>
  403e9c:	b2cd      	uxtb	r5, r1
  403e9e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403ea2:	2c0f      	cmp	r4, #15
  403ea4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403ea8:	d919      	bls.n	403ede <memset+0x66>
  403eaa:	f103 0210 	add.w	r2, r3, #16
  403eae:	4626      	mov	r6, r4
  403eb0:	3e10      	subs	r6, #16
  403eb2:	2e0f      	cmp	r6, #15
  403eb4:	f842 5c10 	str.w	r5, [r2, #-16]
  403eb8:	f842 5c0c 	str.w	r5, [r2, #-12]
  403ebc:	f842 5c08 	str.w	r5, [r2, #-8]
  403ec0:	f842 5c04 	str.w	r5, [r2, #-4]
  403ec4:	f102 0210 	add.w	r2, r2, #16
  403ec8:	d8f2      	bhi.n	403eb0 <memset+0x38>
  403eca:	f1a4 0210 	sub.w	r2, r4, #16
  403ece:	f022 020f 	bic.w	r2, r2, #15
  403ed2:	f004 040f 	and.w	r4, r4, #15
  403ed6:	3210      	adds	r2, #16
  403ed8:	2c03      	cmp	r4, #3
  403eda:	4413      	add	r3, r2
  403edc:	d90d      	bls.n	403efa <memset+0x82>
  403ede:	461e      	mov	r6, r3
  403ee0:	4622      	mov	r2, r4
  403ee2:	3a04      	subs	r2, #4
  403ee4:	2a03      	cmp	r2, #3
  403ee6:	f846 5b04 	str.w	r5, [r6], #4
  403eea:	d8fa      	bhi.n	403ee2 <memset+0x6a>
  403eec:	1f22      	subs	r2, r4, #4
  403eee:	f022 0203 	bic.w	r2, r2, #3
  403ef2:	3204      	adds	r2, #4
  403ef4:	4413      	add	r3, r2
  403ef6:	f004 0403 	and.w	r4, r4, #3
  403efa:	b12c      	cbz	r4, 403f08 <memset+0x90>
  403efc:	b2c9      	uxtb	r1, r1
  403efe:	441c      	add	r4, r3
  403f00:	f803 1b01 	strb.w	r1, [r3], #1
  403f04:	429c      	cmp	r4, r3
  403f06:	d1fb      	bne.n	403f00 <memset+0x88>
  403f08:	bc70      	pop	{r4, r5, r6}
  403f0a:	4770      	bx	lr
  403f0c:	4614      	mov	r4, r2
  403f0e:	4603      	mov	r3, r0
  403f10:	e7c2      	b.n	403e98 <memset+0x20>
  403f12:	bf00      	nop

00403f14 <__malloc_lock>:
  403f14:	4801      	ldr	r0, [pc, #4]	; (403f1c <__malloc_lock+0x8>)
  403f16:	f000 bc1f 	b.w	404758 <__retarget_lock_acquire_recursive>
  403f1a:	bf00      	nop
  403f1c:	20003054 	.word	0x20003054

00403f20 <__malloc_unlock>:
  403f20:	4801      	ldr	r0, [pc, #4]	; (403f28 <__malloc_unlock+0x8>)
  403f22:	f000 bc1b 	b.w	40475c <__retarget_lock_release_recursive>
  403f26:	bf00      	nop
  403f28:	20003054 	.word	0x20003054

00403f2c <_sbrk_r>:
  403f2c:	b538      	push	{r3, r4, r5, lr}
  403f2e:	4c07      	ldr	r4, [pc, #28]	; (403f4c <_sbrk_r+0x20>)
  403f30:	2300      	movs	r3, #0
  403f32:	4605      	mov	r5, r0
  403f34:	4608      	mov	r0, r1
  403f36:	6023      	str	r3, [r4, #0]
  403f38:	f7fe fdce 	bl	402ad8 <_sbrk>
  403f3c:	1c43      	adds	r3, r0, #1
  403f3e:	d000      	beq.n	403f42 <_sbrk_r+0x16>
  403f40:	bd38      	pop	{r3, r4, r5, pc}
  403f42:	6823      	ldr	r3, [r4, #0]
  403f44:	2b00      	cmp	r3, #0
  403f46:	d0fb      	beq.n	403f40 <_sbrk_r+0x14>
  403f48:	602b      	str	r3, [r5, #0]
  403f4a:	bd38      	pop	{r3, r4, r5, pc}
  403f4c:	20003068 	.word	0x20003068

00403f50 <setbuf>:
  403f50:	2900      	cmp	r1, #0
  403f52:	bf0c      	ite	eq
  403f54:	2202      	moveq	r2, #2
  403f56:	2200      	movne	r2, #0
  403f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403f5c:	f000 b800 	b.w	403f60 <setvbuf>

00403f60 <setvbuf>:
  403f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403f64:	4c61      	ldr	r4, [pc, #388]	; (4040ec <setvbuf+0x18c>)
  403f66:	6825      	ldr	r5, [r4, #0]
  403f68:	b083      	sub	sp, #12
  403f6a:	4604      	mov	r4, r0
  403f6c:	460f      	mov	r7, r1
  403f6e:	4690      	mov	r8, r2
  403f70:	461e      	mov	r6, r3
  403f72:	b115      	cbz	r5, 403f7a <setvbuf+0x1a>
  403f74:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403f76:	2b00      	cmp	r3, #0
  403f78:	d064      	beq.n	404044 <setvbuf+0xe4>
  403f7a:	f1b8 0f02 	cmp.w	r8, #2
  403f7e:	d006      	beq.n	403f8e <setvbuf+0x2e>
  403f80:	f1b8 0f01 	cmp.w	r8, #1
  403f84:	f200 809f 	bhi.w	4040c6 <setvbuf+0x166>
  403f88:	2e00      	cmp	r6, #0
  403f8a:	f2c0 809c 	blt.w	4040c6 <setvbuf+0x166>
  403f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403f90:	07d8      	lsls	r0, r3, #31
  403f92:	d534      	bpl.n	403ffe <setvbuf+0x9e>
  403f94:	4621      	mov	r1, r4
  403f96:	4628      	mov	r0, r5
  403f98:	f000 f9d0 	bl	40433c <_fflush_r>
  403f9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403f9e:	b141      	cbz	r1, 403fb2 <setvbuf+0x52>
  403fa0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403fa4:	4299      	cmp	r1, r3
  403fa6:	d002      	beq.n	403fae <setvbuf+0x4e>
  403fa8:	4628      	mov	r0, r5
  403faa:	f000 fac1 	bl	404530 <_free_r>
  403fae:	2300      	movs	r3, #0
  403fb0:	6323      	str	r3, [r4, #48]	; 0x30
  403fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403fb6:	2200      	movs	r2, #0
  403fb8:	61a2      	str	r2, [r4, #24]
  403fba:	6062      	str	r2, [r4, #4]
  403fbc:	061a      	lsls	r2, r3, #24
  403fbe:	d43a      	bmi.n	404036 <setvbuf+0xd6>
  403fc0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403fc4:	f023 0303 	bic.w	r3, r3, #3
  403fc8:	f1b8 0f02 	cmp.w	r8, #2
  403fcc:	81a3      	strh	r3, [r4, #12]
  403fce:	d01d      	beq.n	40400c <setvbuf+0xac>
  403fd0:	ab01      	add	r3, sp, #4
  403fd2:	466a      	mov	r2, sp
  403fd4:	4621      	mov	r1, r4
  403fd6:	4628      	mov	r0, r5
  403fd8:	f000 fbc2 	bl	404760 <__swhatbuf_r>
  403fdc:	89a3      	ldrh	r3, [r4, #12]
  403fde:	4318      	orrs	r0, r3
  403fe0:	81a0      	strh	r0, [r4, #12]
  403fe2:	2e00      	cmp	r6, #0
  403fe4:	d132      	bne.n	40404c <setvbuf+0xec>
  403fe6:	9e00      	ldr	r6, [sp, #0]
  403fe8:	4630      	mov	r0, r6
  403fea:	f7ff fbf3 	bl	4037d4 <malloc>
  403fee:	4607      	mov	r7, r0
  403ff0:	2800      	cmp	r0, #0
  403ff2:	d06b      	beq.n	4040cc <setvbuf+0x16c>
  403ff4:	89a3      	ldrh	r3, [r4, #12]
  403ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403ffa:	81a3      	strh	r3, [r4, #12]
  403ffc:	e028      	b.n	404050 <setvbuf+0xf0>
  403ffe:	89a3      	ldrh	r3, [r4, #12]
  404000:	0599      	lsls	r1, r3, #22
  404002:	d4c7      	bmi.n	403f94 <setvbuf+0x34>
  404004:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404006:	f000 fba7 	bl	404758 <__retarget_lock_acquire_recursive>
  40400a:	e7c3      	b.n	403f94 <setvbuf+0x34>
  40400c:	2500      	movs	r5, #0
  40400e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404010:	2600      	movs	r6, #0
  404012:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404016:	f043 0302 	orr.w	r3, r3, #2
  40401a:	2001      	movs	r0, #1
  40401c:	60a6      	str	r6, [r4, #8]
  40401e:	07ce      	lsls	r6, r1, #31
  404020:	81a3      	strh	r3, [r4, #12]
  404022:	6022      	str	r2, [r4, #0]
  404024:	6122      	str	r2, [r4, #16]
  404026:	6160      	str	r0, [r4, #20]
  404028:	d401      	bmi.n	40402e <setvbuf+0xce>
  40402a:	0598      	lsls	r0, r3, #22
  40402c:	d53e      	bpl.n	4040ac <setvbuf+0x14c>
  40402e:	4628      	mov	r0, r5
  404030:	b003      	add	sp, #12
  404032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404036:	6921      	ldr	r1, [r4, #16]
  404038:	4628      	mov	r0, r5
  40403a:	f000 fa79 	bl	404530 <_free_r>
  40403e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404042:	e7bd      	b.n	403fc0 <setvbuf+0x60>
  404044:	4628      	mov	r0, r5
  404046:	f000 f9d1 	bl	4043ec <__sinit>
  40404a:	e796      	b.n	403f7a <setvbuf+0x1a>
  40404c:	2f00      	cmp	r7, #0
  40404e:	d0cb      	beq.n	403fe8 <setvbuf+0x88>
  404050:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404052:	2b00      	cmp	r3, #0
  404054:	d033      	beq.n	4040be <setvbuf+0x15e>
  404056:	9b00      	ldr	r3, [sp, #0]
  404058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40405c:	6027      	str	r7, [r4, #0]
  40405e:	429e      	cmp	r6, r3
  404060:	bf1c      	itt	ne
  404062:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404066:	81a2      	strhne	r2, [r4, #12]
  404068:	f1b8 0f01 	cmp.w	r8, #1
  40406c:	bf04      	itt	eq
  40406e:	f042 0201 	orreq.w	r2, r2, #1
  404072:	81a2      	strheq	r2, [r4, #12]
  404074:	b292      	uxth	r2, r2
  404076:	f012 0308 	ands.w	r3, r2, #8
  40407a:	6127      	str	r7, [r4, #16]
  40407c:	6166      	str	r6, [r4, #20]
  40407e:	d00e      	beq.n	40409e <setvbuf+0x13e>
  404080:	07d1      	lsls	r1, r2, #31
  404082:	d51a      	bpl.n	4040ba <setvbuf+0x15a>
  404084:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404086:	4276      	negs	r6, r6
  404088:	2300      	movs	r3, #0
  40408a:	f015 0501 	ands.w	r5, r5, #1
  40408e:	61a6      	str	r6, [r4, #24]
  404090:	60a3      	str	r3, [r4, #8]
  404092:	d009      	beq.n	4040a8 <setvbuf+0x148>
  404094:	2500      	movs	r5, #0
  404096:	4628      	mov	r0, r5
  404098:	b003      	add	sp, #12
  40409a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40409e:	60a3      	str	r3, [r4, #8]
  4040a0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4040a2:	f015 0501 	ands.w	r5, r5, #1
  4040a6:	d1f5      	bne.n	404094 <setvbuf+0x134>
  4040a8:	0593      	lsls	r3, r2, #22
  4040aa:	d4c0      	bmi.n	40402e <setvbuf+0xce>
  4040ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4040ae:	f000 fb55 	bl	40475c <__retarget_lock_release_recursive>
  4040b2:	4628      	mov	r0, r5
  4040b4:	b003      	add	sp, #12
  4040b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4040ba:	60a6      	str	r6, [r4, #8]
  4040bc:	e7f0      	b.n	4040a0 <setvbuf+0x140>
  4040be:	4628      	mov	r0, r5
  4040c0:	f000 f994 	bl	4043ec <__sinit>
  4040c4:	e7c7      	b.n	404056 <setvbuf+0xf6>
  4040c6:	f04f 35ff 	mov.w	r5, #4294967295
  4040ca:	e7b0      	b.n	40402e <setvbuf+0xce>
  4040cc:	f8dd 9000 	ldr.w	r9, [sp]
  4040d0:	45b1      	cmp	r9, r6
  4040d2:	d004      	beq.n	4040de <setvbuf+0x17e>
  4040d4:	4648      	mov	r0, r9
  4040d6:	f7ff fb7d 	bl	4037d4 <malloc>
  4040da:	4607      	mov	r7, r0
  4040dc:	b920      	cbnz	r0, 4040e8 <setvbuf+0x188>
  4040de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040e2:	f04f 35ff 	mov.w	r5, #4294967295
  4040e6:	e792      	b.n	40400e <setvbuf+0xae>
  4040e8:	464e      	mov	r6, r9
  4040ea:	e783      	b.n	403ff4 <setvbuf+0x94>
  4040ec:	20000110 	.word	0x20000110
	...

00404100 <strlen>:
  404100:	f890 f000 	pld	[r0]
  404104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404108:	f020 0107 	bic.w	r1, r0, #7
  40410c:	f06f 0c00 	mvn.w	ip, #0
  404110:	f010 0407 	ands.w	r4, r0, #7
  404114:	f891 f020 	pld	[r1, #32]
  404118:	f040 8049 	bne.w	4041ae <strlen+0xae>
  40411c:	f04f 0400 	mov.w	r4, #0
  404120:	f06f 0007 	mvn.w	r0, #7
  404124:	e9d1 2300 	ldrd	r2, r3, [r1]
  404128:	f891 f040 	pld	[r1, #64]	; 0x40
  40412c:	f100 0008 	add.w	r0, r0, #8
  404130:	fa82 f24c 	uadd8	r2, r2, ip
  404134:	faa4 f28c 	sel	r2, r4, ip
  404138:	fa83 f34c 	uadd8	r3, r3, ip
  40413c:	faa2 f38c 	sel	r3, r2, ip
  404140:	bb4b      	cbnz	r3, 404196 <strlen+0x96>
  404142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404146:	fa82 f24c 	uadd8	r2, r2, ip
  40414a:	f100 0008 	add.w	r0, r0, #8
  40414e:	faa4 f28c 	sel	r2, r4, ip
  404152:	fa83 f34c 	uadd8	r3, r3, ip
  404156:	faa2 f38c 	sel	r3, r2, ip
  40415a:	b9e3      	cbnz	r3, 404196 <strlen+0x96>
  40415c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404160:	fa82 f24c 	uadd8	r2, r2, ip
  404164:	f100 0008 	add.w	r0, r0, #8
  404168:	faa4 f28c 	sel	r2, r4, ip
  40416c:	fa83 f34c 	uadd8	r3, r3, ip
  404170:	faa2 f38c 	sel	r3, r2, ip
  404174:	b97b      	cbnz	r3, 404196 <strlen+0x96>
  404176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40417a:	f101 0120 	add.w	r1, r1, #32
  40417e:	fa82 f24c 	uadd8	r2, r2, ip
  404182:	f100 0008 	add.w	r0, r0, #8
  404186:	faa4 f28c 	sel	r2, r4, ip
  40418a:	fa83 f34c 	uadd8	r3, r3, ip
  40418e:	faa2 f38c 	sel	r3, r2, ip
  404192:	2b00      	cmp	r3, #0
  404194:	d0c6      	beq.n	404124 <strlen+0x24>
  404196:	2a00      	cmp	r2, #0
  404198:	bf04      	itt	eq
  40419a:	3004      	addeq	r0, #4
  40419c:	461a      	moveq	r2, r3
  40419e:	ba12      	rev	r2, r2
  4041a0:	fab2 f282 	clz	r2, r2
  4041a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4041a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4041ac:	4770      	bx	lr
  4041ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4041b2:	f004 0503 	and.w	r5, r4, #3
  4041b6:	f1c4 0000 	rsb	r0, r4, #0
  4041ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4041be:	f014 0f04 	tst.w	r4, #4
  4041c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4041c6:	fa0c f505 	lsl.w	r5, ip, r5
  4041ca:	ea62 0205 	orn	r2, r2, r5
  4041ce:	bf1c      	itt	ne
  4041d0:	ea63 0305 	ornne	r3, r3, r5
  4041d4:	4662      	movne	r2, ip
  4041d6:	f04f 0400 	mov.w	r4, #0
  4041da:	e7a9      	b.n	404130 <strlen+0x30>

004041dc <register_fini>:
  4041dc:	4b02      	ldr	r3, [pc, #8]	; (4041e8 <register_fini+0xc>)
  4041de:	b113      	cbz	r3, 4041e6 <register_fini+0xa>
  4041e0:	4802      	ldr	r0, [pc, #8]	; (4041ec <register_fini+0x10>)
  4041e2:	f000 b805 	b.w	4041f0 <atexit>
  4041e6:	4770      	bx	lr
  4041e8:	00000000 	.word	0x00000000
  4041ec:	0040445d 	.word	0x0040445d

004041f0 <atexit>:
  4041f0:	2300      	movs	r3, #0
  4041f2:	4601      	mov	r1, r0
  4041f4:	461a      	mov	r2, r3
  4041f6:	4618      	mov	r0, r3
  4041f8:	f000 bb3a 	b.w	404870 <__register_exitproc>

004041fc <__sflush_r>:
  4041fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404200:	b29a      	uxth	r2, r3
  404202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404206:	460d      	mov	r5, r1
  404208:	0711      	lsls	r1, r2, #28
  40420a:	4680      	mov	r8, r0
  40420c:	d43a      	bmi.n	404284 <__sflush_r+0x88>
  40420e:	686a      	ldr	r2, [r5, #4]
  404210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404214:	2a00      	cmp	r2, #0
  404216:	81ab      	strh	r3, [r5, #12]
  404218:	dd6f      	ble.n	4042fa <__sflush_r+0xfe>
  40421a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40421c:	2c00      	cmp	r4, #0
  40421e:	d049      	beq.n	4042b4 <__sflush_r+0xb8>
  404220:	2200      	movs	r2, #0
  404222:	b29b      	uxth	r3, r3
  404224:	f8d8 6000 	ldr.w	r6, [r8]
  404228:	f8c8 2000 	str.w	r2, [r8]
  40422c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  404230:	d067      	beq.n	404302 <__sflush_r+0x106>
  404232:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404234:	075f      	lsls	r7, r3, #29
  404236:	d505      	bpl.n	404244 <__sflush_r+0x48>
  404238:	6869      	ldr	r1, [r5, #4]
  40423a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40423c:	1a52      	subs	r2, r2, r1
  40423e:	b10b      	cbz	r3, 404244 <__sflush_r+0x48>
  404240:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404242:	1ad2      	subs	r2, r2, r3
  404244:	2300      	movs	r3, #0
  404246:	69e9      	ldr	r1, [r5, #28]
  404248:	4640      	mov	r0, r8
  40424a:	47a0      	blx	r4
  40424c:	1c44      	adds	r4, r0, #1
  40424e:	d03c      	beq.n	4042ca <__sflush_r+0xce>
  404250:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404254:	692a      	ldr	r2, [r5, #16]
  404256:	602a      	str	r2, [r5, #0]
  404258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40425c:	2200      	movs	r2, #0
  40425e:	81ab      	strh	r3, [r5, #12]
  404260:	04db      	lsls	r3, r3, #19
  404262:	606a      	str	r2, [r5, #4]
  404264:	d447      	bmi.n	4042f6 <__sflush_r+0xfa>
  404266:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404268:	f8c8 6000 	str.w	r6, [r8]
  40426c:	b311      	cbz	r1, 4042b4 <__sflush_r+0xb8>
  40426e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404272:	4299      	cmp	r1, r3
  404274:	d002      	beq.n	40427c <__sflush_r+0x80>
  404276:	4640      	mov	r0, r8
  404278:	f000 f95a 	bl	404530 <_free_r>
  40427c:	2000      	movs	r0, #0
  40427e:	6328      	str	r0, [r5, #48]	; 0x30
  404280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404284:	692e      	ldr	r6, [r5, #16]
  404286:	b1ae      	cbz	r6, 4042b4 <__sflush_r+0xb8>
  404288:	682c      	ldr	r4, [r5, #0]
  40428a:	602e      	str	r6, [r5, #0]
  40428c:	0791      	lsls	r1, r2, #30
  40428e:	bf0c      	ite	eq
  404290:	696b      	ldreq	r3, [r5, #20]
  404292:	2300      	movne	r3, #0
  404294:	1ba4      	subs	r4, r4, r6
  404296:	60ab      	str	r3, [r5, #8]
  404298:	e00a      	b.n	4042b0 <__sflush_r+0xb4>
  40429a:	4623      	mov	r3, r4
  40429c:	4632      	mov	r2, r6
  40429e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4042a0:	69e9      	ldr	r1, [r5, #28]
  4042a2:	4640      	mov	r0, r8
  4042a4:	47b8      	blx	r7
  4042a6:	2800      	cmp	r0, #0
  4042a8:	eba4 0400 	sub.w	r4, r4, r0
  4042ac:	4406      	add	r6, r0
  4042ae:	dd04      	ble.n	4042ba <__sflush_r+0xbe>
  4042b0:	2c00      	cmp	r4, #0
  4042b2:	dcf2      	bgt.n	40429a <__sflush_r+0x9e>
  4042b4:	2000      	movs	r0, #0
  4042b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4042ba:	89ab      	ldrh	r3, [r5, #12]
  4042bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4042c0:	81ab      	strh	r3, [r5, #12]
  4042c2:	f04f 30ff 	mov.w	r0, #4294967295
  4042c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4042ca:	f8d8 4000 	ldr.w	r4, [r8]
  4042ce:	2c1d      	cmp	r4, #29
  4042d0:	d8f3      	bhi.n	4042ba <__sflush_r+0xbe>
  4042d2:	4b19      	ldr	r3, [pc, #100]	; (404338 <__sflush_r+0x13c>)
  4042d4:	40e3      	lsrs	r3, r4
  4042d6:	43db      	mvns	r3, r3
  4042d8:	f013 0301 	ands.w	r3, r3, #1
  4042dc:	d1ed      	bne.n	4042ba <__sflush_r+0xbe>
  4042de:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4042e2:	606b      	str	r3, [r5, #4]
  4042e4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4042e8:	6929      	ldr	r1, [r5, #16]
  4042ea:	81ab      	strh	r3, [r5, #12]
  4042ec:	04da      	lsls	r2, r3, #19
  4042ee:	6029      	str	r1, [r5, #0]
  4042f0:	d5b9      	bpl.n	404266 <__sflush_r+0x6a>
  4042f2:	2c00      	cmp	r4, #0
  4042f4:	d1b7      	bne.n	404266 <__sflush_r+0x6a>
  4042f6:	6528      	str	r0, [r5, #80]	; 0x50
  4042f8:	e7b5      	b.n	404266 <__sflush_r+0x6a>
  4042fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4042fc:	2a00      	cmp	r2, #0
  4042fe:	dc8c      	bgt.n	40421a <__sflush_r+0x1e>
  404300:	e7d8      	b.n	4042b4 <__sflush_r+0xb8>
  404302:	2301      	movs	r3, #1
  404304:	69e9      	ldr	r1, [r5, #28]
  404306:	4640      	mov	r0, r8
  404308:	47a0      	blx	r4
  40430a:	1c43      	adds	r3, r0, #1
  40430c:	4602      	mov	r2, r0
  40430e:	d002      	beq.n	404316 <__sflush_r+0x11a>
  404310:	89ab      	ldrh	r3, [r5, #12]
  404312:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404314:	e78e      	b.n	404234 <__sflush_r+0x38>
  404316:	f8d8 3000 	ldr.w	r3, [r8]
  40431a:	2b00      	cmp	r3, #0
  40431c:	d0f8      	beq.n	404310 <__sflush_r+0x114>
  40431e:	2b1d      	cmp	r3, #29
  404320:	d001      	beq.n	404326 <__sflush_r+0x12a>
  404322:	2b16      	cmp	r3, #22
  404324:	d102      	bne.n	40432c <__sflush_r+0x130>
  404326:	f8c8 6000 	str.w	r6, [r8]
  40432a:	e7c3      	b.n	4042b4 <__sflush_r+0xb8>
  40432c:	89ab      	ldrh	r3, [r5, #12]
  40432e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404332:	81ab      	strh	r3, [r5, #12]
  404334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404338:	20400001 	.word	0x20400001

0040433c <_fflush_r>:
  40433c:	b538      	push	{r3, r4, r5, lr}
  40433e:	460d      	mov	r5, r1
  404340:	4604      	mov	r4, r0
  404342:	b108      	cbz	r0, 404348 <_fflush_r+0xc>
  404344:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404346:	b1bb      	cbz	r3, 404378 <_fflush_r+0x3c>
  404348:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40434c:	b188      	cbz	r0, 404372 <_fflush_r+0x36>
  40434e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404350:	07db      	lsls	r3, r3, #31
  404352:	d401      	bmi.n	404358 <_fflush_r+0x1c>
  404354:	0581      	lsls	r1, r0, #22
  404356:	d517      	bpl.n	404388 <_fflush_r+0x4c>
  404358:	4620      	mov	r0, r4
  40435a:	4629      	mov	r1, r5
  40435c:	f7ff ff4e 	bl	4041fc <__sflush_r>
  404360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404362:	07da      	lsls	r2, r3, #31
  404364:	4604      	mov	r4, r0
  404366:	d402      	bmi.n	40436e <_fflush_r+0x32>
  404368:	89ab      	ldrh	r3, [r5, #12]
  40436a:	059b      	lsls	r3, r3, #22
  40436c:	d507      	bpl.n	40437e <_fflush_r+0x42>
  40436e:	4620      	mov	r0, r4
  404370:	bd38      	pop	{r3, r4, r5, pc}
  404372:	4604      	mov	r4, r0
  404374:	4620      	mov	r0, r4
  404376:	bd38      	pop	{r3, r4, r5, pc}
  404378:	f000 f838 	bl	4043ec <__sinit>
  40437c:	e7e4      	b.n	404348 <_fflush_r+0xc>
  40437e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404380:	f000 f9ec 	bl	40475c <__retarget_lock_release_recursive>
  404384:	4620      	mov	r0, r4
  404386:	bd38      	pop	{r3, r4, r5, pc}
  404388:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40438a:	f000 f9e5 	bl	404758 <__retarget_lock_acquire_recursive>
  40438e:	e7e3      	b.n	404358 <_fflush_r+0x1c>

00404390 <_cleanup_r>:
  404390:	4901      	ldr	r1, [pc, #4]	; (404398 <_cleanup_r+0x8>)
  404392:	f000 b9b3 	b.w	4046fc <_fwalk_reent>
  404396:	bf00      	nop
  404398:	00404959 	.word	0x00404959

0040439c <std.isra.0>:
  40439c:	b510      	push	{r4, lr}
  40439e:	2300      	movs	r3, #0
  4043a0:	4604      	mov	r4, r0
  4043a2:	8181      	strh	r1, [r0, #12]
  4043a4:	81c2      	strh	r2, [r0, #14]
  4043a6:	6003      	str	r3, [r0, #0]
  4043a8:	6043      	str	r3, [r0, #4]
  4043aa:	6083      	str	r3, [r0, #8]
  4043ac:	6643      	str	r3, [r0, #100]	; 0x64
  4043ae:	6103      	str	r3, [r0, #16]
  4043b0:	6143      	str	r3, [r0, #20]
  4043b2:	6183      	str	r3, [r0, #24]
  4043b4:	4619      	mov	r1, r3
  4043b6:	2208      	movs	r2, #8
  4043b8:	305c      	adds	r0, #92	; 0x5c
  4043ba:	f7ff fd5d 	bl	403e78 <memset>
  4043be:	4807      	ldr	r0, [pc, #28]	; (4043dc <std.isra.0+0x40>)
  4043c0:	4907      	ldr	r1, [pc, #28]	; (4043e0 <std.isra.0+0x44>)
  4043c2:	4a08      	ldr	r2, [pc, #32]	; (4043e4 <std.isra.0+0x48>)
  4043c4:	4b08      	ldr	r3, [pc, #32]	; (4043e8 <std.isra.0+0x4c>)
  4043c6:	6220      	str	r0, [r4, #32]
  4043c8:	61e4      	str	r4, [r4, #28]
  4043ca:	6261      	str	r1, [r4, #36]	; 0x24
  4043cc:	62a2      	str	r2, [r4, #40]	; 0x28
  4043ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  4043d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4043d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4043d8:	f000 b9ba 	b.w	404750 <__retarget_lock_init_recursive>
  4043dc:	004047bd 	.word	0x004047bd
  4043e0:	004047e1 	.word	0x004047e1
  4043e4:	0040481d 	.word	0x0040481d
  4043e8:	0040483d 	.word	0x0040483d

004043ec <__sinit>:
  4043ec:	b510      	push	{r4, lr}
  4043ee:	4604      	mov	r4, r0
  4043f0:	4812      	ldr	r0, [pc, #72]	; (40443c <__sinit+0x50>)
  4043f2:	f000 f9b1 	bl	404758 <__retarget_lock_acquire_recursive>
  4043f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4043f8:	b9d2      	cbnz	r2, 404430 <__sinit+0x44>
  4043fa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4043fe:	4810      	ldr	r0, [pc, #64]	; (404440 <__sinit+0x54>)
  404400:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404404:	2103      	movs	r1, #3
  404406:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40440a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40440c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404410:	6860      	ldr	r0, [r4, #4]
  404412:	2104      	movs	r1, #4
  404414:	f7ff ffc2 	bl	40439c <std.isra.0>
  404418:	2201      	movs	r2, #1
  40441a:	2109      	movs	r1, #9
  40441c:	68a0      	ldr	r0, [r4, #8]
  40441e:	f7ff ffbd 	bl	40439c <std.isra.0>
  404422:	2202      	movs	r2, #2
  404424:	2112      	movs	r1, #18
  404426:	68e0      	ldr	r0, [r4, #12]
  404428:	f7ff ffb8 	bl	40439c <std.isra.0>
  40442c:	2301      	movs	r3, #1
  40442e:	63a3      	str	r3, [r4, #56]	; 0x38
  404430:	4802      	ldr	r0, [pc, #8]	; (40443c <__sinit+0x50>)
  404432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404436:	f000 b991 	b.w	40475c <__retarget_lock_release_recursive>
  40443a:	bf00      	nop
  40443c:	20003050 	.word	0x20003050
  404440:	00404391 	.word	0x00404391

00404444 <__sfp_lock_acquire>:
  404444:	4801      	ldr	r0, [pc, #4]	; (40444c <__sfp_lock_acquire+0x8>)
  404446:	f000 b987 	b.w	404758 <__retarget_lock_acquire_recursive>
  40444a:	bf00      	nop
  40444c:	20003064 	.word	0x20003064

00404450 <__sfp_lock_release>:
  404450:	4801      	ldr	r0, [pc, #4]	; (404458 <__sfp_lock_release+0x8>)
  404452:	f000 b983 	b.w	40475c <__retarget_lock_release_recursive>
  404456:	bf00      	nop
  404458:	20003064 	.word	0x20003064

0040445c <__libc_fini_array>:
  40445c:	b538      	push	{r3, r4, r5, lr}
  40445e:	4c0a      	ldr	r4, [pc, #40]	; (404488 <__libc_fini_array+0x2c>)
  404460:	4d0a      	ldr	r5, [pc, #40]	; (40448c <__libc_fini_array+0x30>)
  404462:	1b64      	subs	r4, r4, r5
  404464:	10a4      	asrs	r4, r4, #2
  404466:	d00a      	beq.n	40447e <__libc_fini_array+0x22>
  404468:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40446c:	3b01      	subs	r3, #1
  40446e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404472:	3c01      	subs	r4, #1
  404474:	f855 3904 	ldr.w	r3, [r5], #-4
  404478:	4798      	blx	r3
  40447a:	2c00      	cmp	r4, #0
  40447c:	d1f9      	bne.n	404472 <__libc_fini_array+0x16>
  40447e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404482:	f000 bbab 	b.w	404bdc <_fini>
  404486:	bf00      	nop
  404488:	00404bec 	.word	0x00404bec
  40448c:	00404be8 	.word	0x00404be8

00404490 <_malloc_trim_r>:
  404490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404492:	4f24      	ldr	r7, [pc, #144]	; (404524 <_malloc_trim_r+0x94>)
  404494:	460c      	mov	r4, r1
  404496:	4606      	mov	r6, r0
  404498:	f7ff fd3c 	bl	403f14 <__malloc_lock>
  40449c:	68bb      	ldr	r3, [r7, #8]
  40449e:	685d      	ldr	r5, [r3, #4]
  4044a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4044a4:	310f      	adds	r1, #15
  4044a6:	f025 0503 	bic.w	r5, r5, #3
  4044aa:	4429      	add	r1, r5
  4044ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4044b0:	f021 010f 	bic.w	r1, r1, #15
  4044b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4044b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4044bc:	db07      	blt.n	4044ce <_malloc_trim_r+0x3e>
  4044be:	2100      	movs	r1, #0
  4044c0:	4630      	mov	r0, r6
  4044c2:	f7ff fd33 	bl	403f2c <_sbrk_r>
  4044c6:	68bb      	ldr	r3, [r7, #8]
  4044c8:	442b      	add	r3, r5
  4044ca:	4298      	cmp	r0, r3
  4044cc:	d004      	beq.n	4044d8 <_malloc_trim_r+0x48>
  4044ce:	4630      	mov	r0, r6
  4044d0:	f7ff fd26 	bl	403f20 <__malloc_unlock>
  4044d4:	2000      	movs	r0, #0
  4044d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044d8:	4261      	negs	r1, r4
  4044da:	4630      	mov	r0, r6
  4044dc:	f7ff fd26 	bl	403f2c <_sbrk_r>
  4044e0:	3001      	adds	r0, #1
  4044e2:	d00d      	beq.n	404500 <_malloc_trim_r+0x70>
  4044e4:	4b10      	ldr	r3, [pc, #64]	; (404528 <_malloc_trim_r+0x98>)
  4044e6:	68ba      	ldr	r2, [r7, #8]
  4044e8:	6819      	ldr	r1, [r3, #0]
  4044ea:	1b2d      	subs	r5, r5, r4
  4044ec:	f045 0501 	orr.w	r5, r5, #1
  4044f0:	4630      	mov	r0, r6
  4044f2:	1b09      	subs	r1, r1, r4
  4044f4:	6055      	str	r5, [r2, #4]
  4044f6:	6019      	str	r1, [r3, #0]
  4044f8:	f7ff fd12 	bl	403f20 <__malloc_unlock>
  4044fc:	2001      	movs	r0, #1
  4044fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404500:	2100      	movs	r1, #0
  404502:	4630      	mov	r0, r6
  404504:	f7ff fd12 	bl	403f2c <_sbrk_r>
  404508:	68ba      	ldr	r2, [r7, #8]
  40450a:	1a83      	subs	r3, r0, r2
  40450c:	2b0f      	cmp	r3, #15
  40450e:	ddde      	ble.n	4044ce <_malloc_trim_r+0x3e>
  404510:	4c06      	ldr	r4, [pc, #24]	; (40452c <_malloc_trim_r+0x9c>)
  404512:	4905      	ldr	r1, [pc, #20]	; (404528 <_malloc_trim_r+0x98>)
  404514:	6824      	ldr	r4, [r4, #0]
  404516:	f043 0301 	orr.w	r3, r3, #1
  40451a:	1b00      	subs	r0, r0, r4
  40451c:	6053      	str	r3, [r2, #4]
  40451e:	6008      	str	r0, [r1, #0]
  404520:	e7d5      	b.n	4044ce <_malloc_trim_r+0x3e>
  404522:	bf00      	nop
  404524:	20000540 	.word	0x20000540
  404528:	20000bf4 	.word	0x20000bf4
  40452c:	20000948 	.word	0x20000948

00404530 <_free_r>:
  404530:	2900      	cmp	r1, #0
  404532:	d044      	beq.n	4045be <_free_r+0x8e>
  404534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404538:	460d      	mov	r5, r1
  40453a:	4680      	mov	r8, r0
  40453c:	f7ff fcea 	bl	403f14 <__malloc_lock>
  404540:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404544:	4969      	ldr	r1, [pc, #420]	; (4046ec <_free_r+0x1bc>)
  404546:	f027 0301 	bic.w	r3, r7, #1
  40454a:	f1a5 0408 	sub.w	r4, r5, #8
  40454e:	18e2      	adds	r2, r4, r3
  404550:	688e      	ldr	r6, [r1, #8]
  404552:	6850      	ldr	r0, [r2, #4]
  404554:	42b2      	cmp	r2, r6
  404556:	f020 0003 	bic.w	r0, r0, #3
  40455a:	d05e      	beq.n	40461a <_free_r+0xea>
  40455c:	07fe      	lsls	r6, r7, #31
  40455e:	6050      	str	r0, [r2, #4]
  404560:	d40b      	bmi.n	40457a <_free_r+0x4a>
  404562:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404566:	1be4      	subs	r4, r4, r7
  404568:	f101 0e08 	add.w	lr, r1, #8
  40456c:	68a5      	ldr	r5, [r4, #8]
  40456e:	4575      	cmp	r5, lr
  404570:	443b      	add	r3, r7
  404572:	d06d      	beq.n	404650 <_free_r+0x120>
  404574:	68e7      	ldr	r7, [r4, #12]
  404576:	60ef      	str	r7, [r5, #12]
  404578:	60bd      	str	r5, [r7, #8]
  40457a:	1815      	adds	r5, r2, r0
  40457c:	686d      	ldr	r5, [r5, #4]
  40457e:	07ed      	lsls	r5, r5, #31
  404580:	d53e      	bpl.n	404600 <_free_r+0xd0>
  404582:	f043 0201 	orr.w	r2, r3, #1
  404586:	6062      	str	r2, [r4, #4]
  404588:	50e3      	str	r3, [r4, r3]
  40458a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40458e:	d217      	bcs.n	4045c0 <_free_r+0x90>
  404590:	08db      	lsrs	r3, r3, #3
  404592:	1c58      	adds	r0, r3, #1
  404594:	109a      	asrs	r2, r3, #2
  404596:	684d      	ldr	r5, [r1, #4]
  404598:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40459c:	60a7      	str	r7, [r4, #8]
  40459e:	2301      	movs	r3, #1
  4045a0:	4093      	lsls	r3, r2
  4045a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4045a6:	432b      	orrs	r3, r5
  4045a8:	3a08      	subs	r2, #8
  4045aa:	60e2      	str	r2, [r4, #12]
  4045ac:	604b      	str	r3, [r1, #4]
  4045ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4045b2:	60fc      	str	r4, [r7, #12]
  4045b4:	4640      	mov	r0, r8
  4045b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4045ba:	f7ff bcb1 	b.w	403f20 <__malloc_unlock>
  4045be:	4770      	bx	lr
  4045c0:	0a5a      	lsrs	r2, r3, #9
  4045c2:	2a04      	cmp	r2, #4
  4045c4:	d852      	bhi.n	40466c <_free_r+0x13c>
  4045c6:	099a      	lsrs	r2, r3, #6
  4045c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4045cc:	00ff      	lsls	r7, r7, #3
  4045ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4045d2:	19c8      	adds	r0, r1, r7
  4045d4:	59ca      	ldr	r2, [r1, r7]
  4045d6:	3808      	subs	r0, #8
  4045d8:	4290      	cmp	r0, r2
  4045da:	d04f      	beq.n	40467c <_free_r+0x14c>
  4045dc:	6851      	ldr	r1, [r2, #4]
  4045de:	f021 0103 	bic.w	r1, r1, #3
  4045e2:	428b      	cmp	r3, r1
  4045e4:	d232      	bcs.n	40464c <_free_r+0x11c>
  4045e6:	6892      	ldr	r2, [r2, #8]
  4045e8:	4290      	cmp	r0, r2
  4045ea:	d1f7      	bne.n	4045dc <_free_r+0xac>
  4045ec:	68c3      	ldr	r3, [r0, #12]
  4045ee:	60a0      	str	r0, [r4, #8]
  4045f0:	60e3      	str	r3, [r4, #12]
  4045f2:	609c      	str	r4, [r3, #8]
  4045f4:	60c4      	str	r4, [r0, #12]
  4045f6:	4640      	mov	r0, r8
  4045f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4045fc:	f7ff bc90 	b.w	403f20 <__malloc_unlock>
  404600:	6895      	ldr	r5, [r2, #8]
  404602:	4f3b      	ldr	r7, [pc, #236]	; (4046f0 <_free_r+0x1c0>)
  404604:	42bd      	cmp	r5, r7
  404606:	4403      	add	r3, r0
  404608:	d040      	beq.n	40468c <_free_r+0x15c>
  40460a:	68d0      	ldr	r0, [r2, #12]
  40460c:	60e8      	str	r0, [r5, #12]
  40460e:	f043 0201 	orr.w	r2, r3, #1
  404612:	6085      	str	r5, [r0, #8]
  404614:	6062      	str	r2, [r4, #4]
  404616:	50e3      	str	r3, [r4, r3]
  404618:	e7b7      	b.n	40458a <_free_r+0x5a>
  40461a:	07ff      	lsls	r7, r7, #31
  40461c:	4403      	add	r3, r0
  40461e:	d407      	bmi.n	404630 <_free_r+0x100>
  404620:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404624:	1aa4      	subs	r4, r4, r2
  404626:	4413      	add	r3, r2
  404628:	68a0      	ldr	r0, [r4, #8]
  40462a:	68e2      	ldr	r2, [r4, #12]
  40462c:	60c2      	str	r2, [r0, #12]
  40462e:	6090      	str	r0, [r2, #8]
  404630:	4a30      	ldr	r2, [pc, #192]	; (4046f4 <_free_r+0x1c4>)
  404632:	6812      	ldr	r2, [r2, #0]
  404634:	f043 0001 	orr.w	r0, r3, #1
  404638:	4293      	cmp	r3, r2
  40463a:	6060      	str	r0, [r4, #4]
  40463c:	608c      	str	r4, [r1, #8]
  40463e:	d3b9      	bcc.n	4045b4 <_free_r+0x84>
  404640:	4b2d      	ldr	r3, [pc, #180]	; (4046f8 <_free_r+0x1c8>)
  404642:	4640      	mov	r0, r8
  404644:	6819      	ldr	r1, [r3, #0]
  404646:	f7ff ff23 	bl	404490 <_malloc_trim_r>
  40464a:	e7b3      	b.n	4045b4 <_free_r+0x84>
  40464c:	4610      	mov	r0, r2
  40464e:	e7cd      	b.n	4045ec <_free_r+0xbc>
  404650:	1811      	adds	r1, r2, r0
  404652:	6849      	ldr	r1, [r1, #4]
  404654:	07c9      	lsls	r1, r1, #31
  404656:	d444      	bmi.n	4046e2 <_free_r+0x1b2>
  404658:	6891      	ldr	r1, [r2, #8]
  40465a:	68d2      	ldr	r2, [r2, #12]
  40465c:	60ca      	str	r2, [r1, #12]
  40465e:	4403      	add	r3, r0
  404660:	f043 0001 	orr.w	r0, r3, #1
  404664:	6091      	str	r1, [r2, #8]
  404666:	6060      	str	r0, [r4, #4]
  404668:	50e3      	str	r3, [r4, r3]
  40466a:	e7a3      	b.n	4045b4 <_free_r+0x84>
  40466c:	2a14      	cmp	r2, #20
  40466e:	d816      	bhi.n	40469e <_free_r+0x16e>
  404670:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404674:	00ff      	lsls	r7, r7, #3
  404676:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40467a:	e7aa      	b.n	4045d2 <_free_r+0xa2>
  40467c:	10aa      	asrs	r2, r5, #2
  40467e:	2301      	movs	r3, #1
  404680:	684d      	ldr	r5, [r1, #4]
  404682:	4093      	lsls	r3, r2
  404684:	432b      	orrs	r3, r5
  404686:	604b      	str	r3, [r1, #4]
  404688:	4603      	mov	r3, r0
  40468a:	e7b0      	b.n	4045ee <_free_r+0xbe>
  40468c:	f043 0201 	orr.w	r2, r3, #1
  404690:	614c      	str	r4, [r1, #20]
  404692:	610c      	str	r4, [r1, #16]
  404694:	60e5      	str	r5, [r4, #12]
  404696:	60a5      	str	r5, [r4, #8]
  404698:	6062      	str	r2, [r4, #4]
  40469a:	50e3      	str	r3, [r4, r3]
  40469c:	e78a      	b.n	4045b4 <_free_r+0x84>
  40469e:	2a54      	cmp	r2, #84	; 0x54
  4046a0:	d806      	bhi.n	4046b0 <_free_r+0x180>
  4046a2:	0b1a      	lsrs	r2, r3, #12
  4046a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4046a8:	00ff      	lsls	r7, r7, #3
  4046aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4046ae:	e790      	b.n	4045d2 <_free_r+0xa2>
  4046b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4046b4:	d806      	bhi.n	4046c4 <_free_r+0x194>
  4046b6:	0bda      	lsrs	r2, r3, #15
  4046b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4046bc:	00ff      	lsls	r7, r7, #3
  4046be:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4046c2:	e786      	b.n	4045d2 <_free_r+0xa2>
  4046c4:	f240 5054 	movw	r0, #1364	; 0x554
  4046c8:	4282      	cmp	r2, r0
  4046ca:	d806      	bhi.n	4046da <_free_r+0x1aa>
  4046cc:	0c9a      	lsrs	r2, r3, #18
  4046ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4046d2:	00ff      	lsls	r7, r7, #3
  4046d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4046d8:	e77b      	b.n	4045d2 <_free_r+0xa2>
  4046da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4046de:	257e      	movs	r5, #126	; 0x7e
  4046e0:	e777      	b.n	4045d2 <_free_r+0xa2>
  4046e2:	f043 0101 	orr.w	r1, r3, #1
  4046e6:	6061      	str	r1, [r4, #4]
  4046e8:	6013      	str	r3, [r2, #0]
  4046ea:	e763      	b.n	4045b4 <_free_r+0x84>
  4046ec:	20000540 	.word	0x20000540
  4046f0:	20000548 	.word	0x20000548
  4046f4:	2000094c 	.word	0x2000094c
  4046f8:	20000c24 	.word	0x20000c24

004046fc <_fwalk_reent>:
  4046fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404700:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404704:	d01f      	beq.n	404746 <_fwalk_reent+0x4a>
  404706:	4688      	mov	r8, r1
  404708:	4606      	mov	r6, r0
  40470a:	f04f 0900 	mov.w	r9, #0
  40470e:	687d      	ldr	r5, [r7, #4]
  404710:	68bc      	ldr	r4, [r7, #8]
  404712:	3d01      	subs	r5, #1
  404714:	d411      	bmi.n	40473a <_fwalk_reent+0x3e>
  404716:	89a3      	ldrh	r3, [r4, #12]
  404718:	2b01      	cmp	r3, #1
  40471a:	f105 35ff 	add.w	r5, r5, #4294967295
  40471e:	d908      	bls.n	404732 <_fwalk_reent+0x36>
  404720:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404724:	3301      	adds	r3, #1
  404726:	4621      	mov	r1, r4
  404728:	4630      	mov	r0, r6
  40472a:	d002      	beq.n	404732 <_fwalk_reent+0x36>
  40472c:	47c0      	blx	r8
  40472e:	ea49 0900 	orr.w	r9, r9, r0
  404732:	1c6b      	adds	r3, r5, #1
  404734:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404738:	d1ed      	bne.n	404716 <_fwalk_reent+0x1a>
  40473a:	683f      	ldr	r7, [r7, #0]
  40473c:	2f00      	cmp	r7, #0
  40473e:	d1e6      	bne.n	40470e <_fwalk_reent+0x12>
  404740:	4648      	mov	r0, r9
  404742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404746:	46b9      	mov	r9, r7
  404748:	4648      	mov	r0, r9
  40474a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40474e:	bf00      	nop

00404750 <__retarget_lock_init_recursive>:
  404750:	4770      	bx	lr
  404752:	bf00      	nop

00404754 <__retarget_lock_close_recursive>:
  404754:	4770      	bx	lr
  404756:	bf00      	nop

00404758 <__retarget_lock_acquire_recursive>:
  404758:	4770      	bx	lr
  40475a:	bf00      	nop

0040475c <__retarget_lock_release_recursive>:
  40475c:	4770      	bx	lr
  40475e:	bf00      	nop

00404760 <__swhatbuf_r>:
  404760:	b570      	push	{r4, r5, r6, lr}
  404762:	460c      	mov	r4, r1
  404764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404768:	2900      	cmp	r1, #0
  40476a:	b090      	sub	sp, #64	; 0x40
  40476c:	4615      	mov	r5, r2
  40476e:	461e      	mov	r6, r3
  404770:	db14      	blt.n	40479c <__swhatbuf_r+0x3c>
  404772:	aa01      	add	r2, sp, #4
  404774:	f000 f952 	bl	404a1c <_fstat_r>
  404778:	2800      	cmp	r0, #0
  40477a:	db0f      	blt.n	40479c <__swhatbuf_r+0x3c>
  40477c:	9a02      	ldr	r2, [sp, #8]
  40477e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404782:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404786:	fab2 f282 	clz	r2, r2
  40478a:	0952      	lsrs	r2, r2, #5
  40478c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404790:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404794:	6032      	str	r2, [r6, #0]
  404796:	602b      	str	r3, [r5, #0]
  404798:	b010      	add	sp, #64	; 0x40
  40479a:	bd70      	pop	{r4, r5, r6, pc}
  40479c:	89a2      	ldrh	r2, [r4, #12]
  40479e:	2300      	movs	r3, #0
  4047a0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4047a4:	6033      	str	r3, [r6, #0]
  4047a6:	d004      	beq.n	4047b2 <__swhatbuf_r+0x52>
  4047a8:	2240      	movs	r2, #64	; 0x40
  4047aa:	4618      	mov	r0, r3
  4047ac:	602a      	str	r2, [r5, #0]
  4047ae:	b010      	add	sp, #64	; 0x40
  4047b0:	bd70      	pop	{r4, r5, r6, pc}
  4047b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4047b6:	602b      	str	r3, [r5, #0]
  4047b8:	b010      	add	sp, #64	; 0x40
  4047ba:	bd70      	pop	{r4, r5, r6, pc}

004047bc <__sread>:
  4047bc:	b510      	push	{r4, lr}
  4047be:	460c      	mov	r4, r1
  4047c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4047c4:	f000 f954 	bl	404a70 <_read_r>
  4047c8:	2800      	cmp	r0, #0
  4047ca:	db03      	blt.n	4047d4 <__sread+0x18>
  4047cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4047ce:	4403      	add	r3, r0
  4047d0:	6523      	str	r3, [r4, #80]	; 0x50
  4047d2:	bd10      	pop	{r4, pc}
  4047d4:	89a3      	ldrh	r3, [r4, #12]
  4047d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4047da:	81a3      	strh	r3, [r4, #12]
  4047dc:	bd10      	pop	{r4, pc}
  4047de:	bf00      	nop

004047e0 <__swrite>:
  4047e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4047e4:	4616      	mov	r6, r2
  4047e6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4047ea:	461f      	mov	r7, r3
  4047ec:	05d3      	lsls	r3, r2, #23
  4047ee:	460c      	mov	r4, r1
  4047f0:	4605      	mov	r5, r0
  4047f2:	d507      	bpl.n	404804 <__swrite+0x24>
  4047f4:	2200      	movs	r2, #0
  4047f6:	2302      	movs	r3, #2
  4047f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4047fc:	f000 f922 	bl	404a44 <_lseek_r>
  404800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404808:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40480c:	81a2      	strh	r2, [r4, #12]
  40480e:	463b      	mov	r3, r7
  404810:	4632      	mov	r2, r6
  404812:	4628      	mov	r0, r5
  404814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404818:	f000 b814 	b.w	404844 <_write_r>

0040481c <__sseek>:
  40481c:	b510      	push	{r4, lr}
  40481e:	460c      	mov	r4, r1
  404820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404824:	f000 f90e 	bl	404a44 <_lseek_r>
  404828:	89a3      	ldrh	r3, [r4, #12]
  40482a:	1c42      	adds	r2, r0, #1
  40482c:	bf0e      	itee	eq
  40482e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404836:	6520      	strne	r0, [r4, #80]	; 0x50
  404838:	81a3      	strh	r3, [r4, #12]
  40483a:	bd10      	pop	{r4, pc}

0040483c <__sclose>:
  40483c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404840:	f000 b878 	b.w	404934 <_close_r>

00404844 <_write_r>:
  404844:	b570      	push	{r4, r5, r6, lr}
  404846:	460d      	mov	r5, r1
  404848:	4c08      	ldr	r4, [pc, #32]	; (40486c <_write_r+0x28>)
  40484a:	4611      	mov	r1, r2
  40484c:	4606      	mov	r6, r0
  40484e:	461a      	mov	r2, r3
  404850:	4628      	mov	r0, r5
  404852:	2300      	movs	r3, #0
  404854:	6023      	str	r3, [r4, #0]
  404856:	f7fc ff5f 	bl	401718 <_write>
  40485a:	1c43      	adds	r3, r0, #1
  40485c:	d000      	beq.n	404860 <_write_r+0x1c>
  40485e:	bd70      	pop	{r4, r5, r6, pc}
  404860:	6823      	ldr	r3, [r4, #0]
  404862:	2b00      	cmp	r3, #0
  404864:	d0fb      	beq.n	40485e <_write_r+0x1a>
  404866:	6033      	str	r3, [r6, #0]
  404868:	bd70      	pop	{r4, r5, r6, pc}
  40486a:	bf00      	nop
  40486c:	20003068 	.word	0x20003068

00404870 <__register_exitproc>:
  404870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404874:	4d2c      	ldr	r5, [pc, #176]	; (404928 <__register_exitproc+0xb8>)
  404876:	4606      	mov	r6, r0
  404878:	6828      	ldr	r0, [r5, #0]
  40487a:	4698      	mov	r8, r3
  40487c:	460f      	mov	r7, r1
  40487e:	4691      	mov	r9, r2
  404880:	f7ff ff6a 	bl	404758 <__retarget_lock_acquire_recursive>
  404884:	4b29      	ldr	r3, [pc, #164]	; (40492c <__register_exitproc+0xbc>)
  404886:	681c      	ldr	r4, [r3, #0]
  404888:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40488c:	2b00      	cmp	r3, #0
  40488e:	d03e      	beq.n	40490e <__register_exitproc+0x9e>
  404890:	685a      	ldr	r2, [r3, #4]
  404892:	2a1f      	cmp	r2, #31
  404894:	dc1c      	bgt.n	4048d0 <__register_exitproc+0x60>
  404896:	f102 0e01 	add.w	lr, r2, #1
  40489a:	b176      	cbz	r6, 4048ba <__register_exitproc+0x4a>
  40489c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4048a0:	2401      	movs	r4, #1
  4048a2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4048a6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4048aa:	4094      	lsls	r4, r2
  4048ac:	4320      	orrs	r0, r4
  4048ae:	2e02      	cmp	r6, #2
  4048b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4048b4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4048b8:	d023      	beq.n	404902 <__register_exitproc+0x92>
  4048ba:	3202      	adds	r2, #2
  4048bc:	f8c3 e004 	str.w	lr, [r3, #4]
  4048c0:	6828      	ldr	r0, [r5, #0]
  4048c2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4048c6:	f7ff ff49 	bl	40475c <__retarget_lock_release_recursive>
  4048ca:	2000      	movs	r0, #0
  4048cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4048d0:	4b17      	ldr	r3, [pc, #92]	; (404930 <__register_exitproc+0xc0>)
  4048d2:	b30b      	cbz	r3, 404918 <__register_exitproc+0xa8>
  4048d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4048d8:	f7fe ff7c 	bl	4037d4 <malloc>
  4048dc:	4603      	mov	r3, r0
  4048de:	b1d8      	cbz	r0, 404918 <__register_exitproc+0xa8>
  4048e0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4048e4:	6002      	str	r2, [r0, #0]
  4048e6:	2100      	movs	r1, #0
  4048e8:	6041      	str	r1, [r0, #4]
  4048ea:	460a      	mov	r2, r1
  4048ec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4048f0:	f04f 0e01 	mov.w	lr, #1
  4048f4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4048f8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4048fc:	2e00      	cmp	r6, #0
  4048fe:	d0dc      	beq.n	4048ba <__register_exitproc+0x4a>
  404900:	e7cc      	b.n	40489c <__register_exitproc+0x2c>
  404902:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  404906:	430c      	orrs	r4, r1
  404908:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40490c:	e7d5      	b.n	4048ba <__register_exitproc+0x4a>
  40490e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404912:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  404916:	e7bb      	b.n	404890 <__register_exitproc+0x20>
  404918:	6828      	ldr	r0, [r5, #0]
  40491a:	f7ff ff1f 	bl	40475c <__retarget_lock_release_recursive>
  40491e:	f04f 30ff 	mov.w	r0, #4294967295
  404922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404926:	bf00      	nop
  404928:	20000950 	.word	0x20000950
  40492c:	00404bc4 	.word	0x00404bc4
  404930:	004037d5 	.word	0x004037d5

00404934 <_close_r>:
  404934:	b538      	push	{r3, r4, r5, lr}
  404936:	4c07      	ldr	r4, [pc, #28]	; (404954 <_close_r+0x20>)
  404938:	2300      	movs	r3, #0
  40493a:	4605      	mov	r5, r0
  40493c:	4608      	mov	r0, r1
  40493e:	6023      	str	r3, [r4, #0]
  404940:	f7fe f8f6 	bl	402b30 <_close>
  404944:	1c43      	adds	r3, r0, #1
  404946:	d000      	beq.n	40494a <_close_r+0x16>
  404948:	bd38      	pop	{r3, r4, r5, pc}
  40494a:	6823      	ldr	r3, [r4, #0]
  40494c:	2b00      	cmp	r3, #0
  40494e:	d0fb      	beq.n	404948 <_close_r+0x14>
  404950:	602b      	str	r3, [r5, #0]
  404952:	bd38      	pop	{r3, r4, r5, pc}
  404954:	20003068 	.word	0x20003068

00404958 <_fclose_r>:
  404958:	b570      	push	{r4, r5, r6, lr}
  40495a:	b159      	cbz	r1, 404974 <_fclose_r+0x1c>
  40495c:	4605      	mov	r5, r0
  40495e:	460c      	mov	r4, r1
  404960:	b110      	cbz	r0, 404968 <_fclose_r+0x10>
  404962:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404964:	2b00      	cmp	r3, #0
  404966:	d03c      	beq.n	4049e2 <_fclose_r+0x8a>
  404968:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40496a:	07d8      	lsls	r0, r3, #31
  40496c:	d505      	bpl.n	40497a <_fclose_r+0x22>
  40496e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404972:	b92b      	cbnz	r3, 404980 <_fclose_r+0x28>
  404974:	2600      	movs	r6, #0
  404976:	4630      	mov	r0, r6
  404978:	bd70      	pop	{r4, r5, r6, pc}
  40497a:	89a3      	ldrh	r3, [r4, #12]
  40497c:	0599      	lsls	r1, r3, #22
  40497e:	d53c      	bpl.n	4049fa <_fclose_r+0xa2>
  404980:	4621      	mov	r1, r4
  404982:	4628      	mov	r0, r5
  404984:	f7ff fc3a 	bl	4041fc <__sflush_r>
  404988:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40498a:	4606      	mov	r6, r0
  40498c:	b133      	cbz	r3, 40499c <_fclose_r+0x44>
  40498e:	69e1      	ldr	r1, [r4, #28]
  404990:	4628      	mov	r0, r5
  404992:	4798      	blx	r3
  404994:	2800      	cmp	r0, #0
  404996:	bfb8      	it	lt
  404998:	f04f 36ff 	movlt.w	r6, #4294967295
  40499c:	89a3      	ldrh	r3, [r4, #12]
  40499e:	061a      	lsls	r2, r3, #24
  4049a0:	d422      	bmi.n	4049e8 <_fclose_r+0x90>
  4049a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4049a4:	b141      	cbz	r1, 4049b8 <_fclose_r+0x60>
  4049a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4049aa:	4299      	cmp	r1, r3
  4049ac:	d002      	beq.n	4049b4 <_fclose_r+0x5c>
  4049ae:	4628      	mov	r0, r5
  4049b0:	f7ff fdbe 	bl	404530 <_free_r>
  4049b4:	2300      	movs	r3, #0
  4049b6:	6323      	str	r3, [r4, #48]	; 0x30
  4049b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4049ba:	b121      	cbz	r1, 4049c6 <_fclose_r+0x6e>
  4049bc:	4628      	mov	r0, r5
  4049be:	f7ff fdb7 	bl	404530 <_free_r>
  4049c2:	2300      	movs	r3, #0
  4049c4:	6463      	str	r3, [r4, #68]	; 0x44
  4049c6:	f7ff fd3d 	bl	404444 <__sfp_lock_acquire>
  4049ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4049cc:	2200      	movs	r2, #0
  4049ce:	07db      	lsls	r3, r3, #31
  4049d0:	81a2      	strh	r2, [r4, #12]
  4049d2:	d50e      	bpl.n	4049f2 <_fclose_r+0x9a>
  4049d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049d6:	f7ff febd 	bl	404754 <__retarget_lock_close_recursive>
  4049da:	f7ff fd39 	bl	404450 <__sfp_lock_release>
  4049de:	4630      	mov	r0, r6
  4049e0:	bd70      	pop	{r4, r5, r6, pc}
  4049e2:	f7ff fd03 	bl	4043ec <__sinit>
  4049e6:	e7bf      	b.n	404968 <_fclose_r+0x10>
  4049e8:	6921      	ldr	r1, [r4, #16]
  4049ea:	4628      	mov	r0, r5
  4049ec:	f7ff fda0 	bl	404530 <_free_r>
  4049f0:	e7d7      	b.n	4049a2 <_fclose_r+0x4a>
  4049f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049f4:	f7ff feb2 	bl	40475c <__retarget_lock_release_recursive>
  4049f8:	e7ec      	b.n	4049d4 <_fclose_r+0x7c>
  4049fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049fc:	f7ff feac 	bl	404758 <__retarget_lock_acquire_recursive>
  404a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a04:	2b00      	cmp	r3, #0
  404a06:	d1bb      	bne.n	404980 <_fclose_r+0x28>
  404a08:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404a0a:	f016 0601 	ands.w	r6, r6, #1
  404a0e:	d1b1      	bne.n	404974 <_fclose_r+0x1c>
  404a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404a12:	f7ff fea3 	bl	40475c <__retarget_lock_release_recursive>
  404a16:	4630      	mov	r0, r6
  404a18:	bd70      	pop	{r4, r5, r6, pc}
  404a1a:	bf00      	nop

00404a1c <_fstat_r>:
  404a1c:	b538      	push	{r3, r4, r5, lr}
  404a1e:	460b      	mov	r3, r1
  404a20:	4c07      	ldr	r4, [pc, #28]	; (404a40 <_fstat_r+0x24>)
  404a22:	4605      	mov	r5, r0
  404a24:	4611      	mov	r1, r2
  404a26:	4618      	mov	r0, r3
  404a28:	2300      	movs	r3, #0
  404a2a:	6023      	str	r3, [r4, #0]
  404a2c:	f7fe f88b 	bl	402b46 <_fstat>
  404a30:	1c43      	adds	r3, r0, #1
  404a32:	d000      	beq.n	404a36 <_fstat_r+0x1a>
  404a34:	bd38      	pop	{r3, r4, r5, pc}
  404a36:	6823      	ldr	r3, [r4, #0]
  404a38:	2b00      	cmp	r3, #0
  404a3a:	d0fb      	beq.n	404a34 <_fstat_r+0x18>
  404a3c:	602b      	str	r3, [r5, #0]
  404a3e:	bd38      	pop	{r3, r4, r5, pc}
  404a40:	20003068 	.word	0x20003068

00404a44 <_lseek_r>:
  404a44:	b570      	push	{r4, r5, r6, lr}
  404a46:	460d      	mov	r5, r1
  404a48:	4c08      	ldr	r4, [pc, #32]	; (404a6c <_lseek_r+0x28>)
  404a4a:	4611      	mov	r1, r2
  404a4c:	4606      	mov	r6, r0
  404a4e:	461a      	mov	r2, r3
  404a50:	4628      	mov	r0, r5
  404a52:	2300      	movs	r3, #0
  404a54:	6023      	str	r3, [r4, #0]
  404a56:	f7fe f885 	bl	402b64 <_lseek>
  404a5a:	1c43      	adds	r3, r0, #1
  404a5c:	d000      	beq.n	404a60 <_lseek_r+0x1c>
  404a5e:	bd70      	pop	{r4, r5, r6, pc}
  404a60:	6823      	ldr	r3, [r4, #0]
  404a62:	2b00      	cmp	r3, #0
  404a64:	d0fb      	beq.n	404a5e <_lseek_r+0x1a>
  404a66:	6033      	str	r3, [r6, #0]
  404a68:	bd70      	pop	{r4, r5, r6, pc}
  404a6a:	bf00      	nop
  404a6c:	20003068 	.word	0x20003068

00404a70 <_read_r>:
  404a70:	b570      	push	{r4, r5, r6, lr}
  404a72:	460d      	mov	r5, r1
  404a74:	4c08      	ldr	r4, [pc, #32]	; (404a98 <_read_r+0x28>)
  404a76:	4611      	mov	r1, r2
  404a78:	4606      	mov	r6, r0
  404a7a:	461a      	mov	r2, r3
  404a7c:	4628      	mov	r0, r5
  404a7e:	2300      	movs	r3, #0
  404a80:	6023      	str	r3, [r4, #0]
  404a82:	f7fc fe1f 	bl	4016c4 <_read>
  404a86:	1c43      	adds	r3, r0, #1
  404a88:	d000      	beq.n	404a8c <_read_r+0x1c>
  404a8a:	bd70      	pop	{r4, r5, r6, pc}
  404a8c:	6823      	ldr	r3, [r4, #0]
  404a8e:	2b00      	cmp	r3, #0
  404a90:	d0fb      	beq.n	404a8a <_read_r+0x1a>
  404a92:	6033      	str	r3, [r6, #0]
  404a94:	bd70      	pop	{r4, r5, r6, pc}
  404a96:	bf00      	nop
  404a98:	20003068 	.word	0x20003068
  404a9c:	0001c200 	.word	0x0001c200
  404aa0:	000000c0 	.word	0x000000c0
  404aa4:	00000800 	.word	0x00000800
  404aa8:	00000000 	.word	0x00000000
  404aac:	3d3d0a0d 	.word	0x3d3d0a0d
  404ab0:	3d3d3d3d 	.word	0x3d3d3d3d
  404ab4:	3d3d3d3d 	.word	0x3d3d3d3d
  404ab8:	3d3d3d3d 	.word	0x3d3d3d3d
  404abc:	3d3d3d3d 	.word	0x3d3d3d3d
  404ac0:	3d3d3d3d 	.word	0x3d3d3d3d
  404ac4:	3d3d3d3d 	.word	0x3d3d3d3d
  404ac8:	3d3d3d3d 	.word	0x3d3d3d3d
  404acc:	3d3d3d3d 	.word	0x3d3d3d3d
  404ad0:	3d3d3d3d 	.word	0x3d3d3d3d
  404ad4:	0a0d3d3d 	.word	0x0a0d3d3d
  404ad8:	00000000 	.word	0x00000000
  404adc:	4120203d 	.word	0x4120203d
  404ae0:	4d415354 	.word	0x4d415354
  404ae4:	46205334 	.word	0x46205334
  404ae8:	776d7269 	.word	0x776d7269
  404aec:	20657261 	.word	0x20657261
  404af0:	61647055 	.word	0x61647055
  404af4:	42206574 	.word	0x42206574
  404af8:	6c746f6f 	.word	0x6c746f6f
  404afc:	6564616f 	.word	0x6564616f
  404b00:	3d202072 	.word	0x3d202072
  404b04:	00000a0d 	.word	0x00000a0d
  404b08:	3d3d3d3d 	.word	0x3d3d3d3d
  404b0c:	3d3d3d3d 	.word	0x3d3d3d3d
  404b10:	3d3d3d3d 	.word	0x3d3d3d3d
  404b14:	3d3d3d3d 	.word	0x3d3d3d3d
  404b18:	3d3d3d3d 	.word	0x3d3d3d3d
  404b1c:	3d3d3d3d 	.word	0x3d3d3d3d
  404b20:	3d3d3d3d 	.word	0x3d3d3d3d
  404b24:	3d3d3d3d 	.word	0x3d3d3d3d
  404b28:	3d3d3d3d 	.word	0x3d3d3d3d
  404b2c:	3d3d3d3d 	.word	0x3d3d3d3d
  404b30:	00000a0d 	.word	0x00000a0d
  404b34:	0a0d0a0d 	.word	0x0a0d0a0d
  404b38:	73617245 	.word	0x73617245
  404b3c:	70412065 	.word	0x70412065
  404b40:	46203270 	.word	0x46203270
  404b44:	6873616c 	.word	0x6873616c
  404b48:	63655320 	.word	0x63655320
  404b4c:	6e6f6974 	.word	0x6e6f6974
  404b50:	00000a0d 	.word	0x00000a0d
  404b54:	61656c50 	.word	0x61656c50
  404b58:	73206573 	.word	0x73206573
  404b5c:	20646e65 	.word	0x20646e65
  404b60:	656e2061 	.word	0x656e2061
  404b64:	69622077 	.word	0x69622077
  404b68:	7972616e 	.word	0x7972616e
  404b6c:	6c696620 	.word	0x6c696620
  404b70:	69772065 	.word	0x69772065
  404b74:	58206874 	.word	0x58206874
  404b78:	65646f6d 	.word	0x65646f6d
  404b7c:	7270206d 	.word	0x7270206d
  404b80:	636f746f 	.word	0x636f746f
  404b84:	74206c6f 	.word	0x74206c6f
  404b88:	7075206f 	.word	0x7075206f
  404b8c:	65746164 	.word	0x65746164
  404b90:	65687420 	.word	0x65687420
  404b94:	72696620 	.word	0x72696620
  404b98:	7261776d 	.word	0x7261776d
  404b9c:	0a0d2e65 	.word	0x0a0d2e65
  404ba0:	00000000 	.word	0x00000000
  404ba4:	61460a0d 	.word	0x61460a0d
  404ba8:	64656c69 	.word	0x64656c69
  404bac:	202e2e2e 	.word	0x202e2e2e
  404bb0:	61656c50 	.word	0x61656c50
  404bb4:	74206573 	.word	0x74206573
  404bb8:	61207972 	.word	0x61207972
  404bbc:	6e696167 	.word	0x6e696167
  404bc0:	000a0d2e 	.word	0x000a0d2e

00404bc4 <_global_impure_ptr>:
  404bc4:	20000118                                ... 

00404bc8 <_init>:
  404bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404bca:	bf00      	nop
  404bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404bce:	bc08      	pop	{r3}
  404bd0:	469e      	mov	lr, r3
  404bd2:	4770      	bx	lr

00404bd4 <__init_array_start>:
  404bd4:	004041dd 	.word	0x004041dd

00404bd8 <__frame_dummy_init_array_entry>:
  404bd8:	004000f1                                ..@.

00404bdc <_fini>:
  404bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404bde:	bf00      	nop
  404be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404be2:	bc08      	pop	{r3}
  404be4:	469e      	mov	lr, r3
  404be6:	4770      	bx	lr

00404be8 <__fini_array_start>:
  404be8:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2000000e:	68fb      	ldr	r3, [r7, #12]
20000010:	4a27      	ldr	r2, [pc, #156]	; (200000b0 <efc_perform_read_sequence+0xb0>)
20000012:	4293      	cmp	r3, r2
20000014:	d102      	bne.n	2000001c <efc_perform_read_sequence+0x1c>
20000016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000001a:	e001      	b.n	20000020 <efc_perform_read_sequence+0x20>
2000001c:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
	uint32_t *p_ul_data =
20000020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000022:	683b      	ldr	r3, [r7, #0]
20000024:	2b00      	cmp	r3, #0
20000026:	d101      	bne.n	2000002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20000028:	2302      	movs	r3, #2
2000002a:	e03c      	b.n	200000a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000002c:	68fb      	ldr	r3, [r7, #12]
2000002e:	681b      	ldr	r3, [r3, #0]
20000030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000034:	68fb      	ldr	r3, [r7, #12]
20000036:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000038:	68bb      	ldr	r3, [r7, #8]
2000003a:	b2db      	uxtb	r3, r3
2000003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000040:	68fb      	ldr	r3, [r7, #12]
20000042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	68fb      	ldr	r3, [r7, #12]
20000046:	689b      	ldr	r3, [r3, #8]
20000048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000004a:	697b      	ldr	r3, [r7, #20]
2000004c:	f003 0301 	and.w	r3, r3, #1
20000050:	2b01      	cmp	r3, #1
20000052:	d0f7      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000054:	2300      	movs	r3, #0
20000056:	61fb      	str	r3, [r7, #28]
20000058:	e00c      	b.n	20000074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000005a:	69fb      	ldr	r3, [r7, #28]
2000005c:	009b      	lsls	r3, r3, #2
2000005e:	683a      	ldr	r2, [r7, #0]
20000060:	4413      	add	r3, r2
20000062:	69fa      	ldr	r2, [r7, #28]
20000064:	0092      	lsls	r2, r2, #2
20000066:	69b9      	ldr	r1, [r7, #24]
20000068:	440a      	add	r2, r1
2000006a:	6812      	ldr	r2, [r2, #0]
2000006c:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000006e:	69fb      	ldr	r3, [r7, #28]
20000070:	3301      	adds	r3, #1
20000072:	61fb      	str	r3, [r7, #28]
20000074:	69fa      	ldr	r2, [r7, #28]
20000076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000078:	429a      	cmp	r2, r3
2000007a:	d3ee      	bcc.n	2000005a <efc_perform_read_sequence+0x5a>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
20000080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000088:	68fb      	ldr	r3, [r7, #12]
2000008a:	689b      	ldr	r3, [r3, #8]
2000008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000008e:	697b      	ldr	r3, [r7, #20]
20000090:	f003 0301 	and.w	r3, r3, #1
20000094:	2b01      	cmp	r3, #1
20000096:	d1f7      	bne.n	20000088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000098:	68fb      	ldr	r3, [r7, #12]
2000009a:	681b      	ldr	r3, [r3, #0]
2000009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200000a0:	68fb      	ldr	r3, [r7, #12]
200000a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200000a4:	2300      	movs	r3, #0
}
200000a6:	4618      	mov	r0, r3
200000a8:	3724      	adds	r7, #36	; 0x24
200000aa:	46bd      	mov	sp, r7
200000ac:	bc80      	pop	{r7}
200000ae:	4770      	bx	lr
200000b0:	400e0a00 	.word	0x400e0a00

200000b4 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000b4:	b480      	push	{r7}
200000b6:	b083      	sub	sp, #12
200000b8:	af00      	add	r7, sp, #0
200000ba:	6078      	str	r0, [r7, #4]
200000bc:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000be:	687b      	ldr	r3, [r7, #4]
200000c0:	683a      	ldr	r2, [r7, #0]
200000c2:	601a      	str	r2, [r3, #0]
}
200000c4:	bf00      	nop
200000c6:	370c      	adds	r7, #12
200000c8:	46bd      	mov	sp, r7
200000ca:	bc80      	pop	{r7}
200000cc:	4770      	bx	lr

200000ce <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000ce:	b480      	push	{r7}
200000d0:	b085      	sub	sp, #20
200000d2:	af00      	add	r7, sp, #0
200000d4:	6078      	str	r0, [r7, #4]
200000d6:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000d8:	687b      	ldr	r3, [r7, #4]
200000da:	683a      	ldr	r2, [r7, #0]
200000dc:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000de:	687b      	ldr	r3, [r7, #4]
200000e0:	689b      	ldr	r3, [r3, #8]
200000e2:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000e4:	68fb      	ldr	r3, [r7, #12]
200000e6:	f003 0301 	and.w	r3, r3, #1
200000ea:	2b01      	cmp	r3, #1
200000ec:	d1f7      	bne.n	200000de <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000ee:	68fb      	ldr	r3, [r7, #12]
200000f0:	f003 030e 	and.w	r3, r3, #14
}
200000f4:	4618      	mov	r0, r3
200000f6:	3714      	adds	r7, #20
200000f8:	46bd      	mov	sp, r7
200000fa:	bc80      	pop	{r7}
200000fc:	4770      	bx	lr
200000fe:	bf00      	nop

20000100 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000100:	f3bf 8f5f 	dmb	sy
20000104:	3801      	subs	r0, #1
20000106:	d1fb      	bne.n	20000100 <portable_delay_cycles>
20000108:	4770      	bx	lr

2000010a <xmodem_packet_number>:
2000010a:	0101                                             .

2000010b <g_interrupt_enabled>:
2000010b:	0001                                             .

2000010c <SystemCoreClock>:
2000010c:	0900 003d                                   ..=.

20000110 <_impure_ptr>:
20000110:	0118 2000 0000 0000                         ... ....

20000118 <impure_data>:
20000118:	0000 0000 0404 2000 046c 2000 04d4 2000     ....... l.. ... 
	...
200001c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200001d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000540 <__malloc_av_>:
	...
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 

20000948 <__malloc_sbrk_base>:
20000948:	ffff ffff                                   ....

2000094c <__malloc_trim_threshold>:
2000094c:	0000 0002                                   ....

20000950 <__atexit_recursive_mutex>:
20000950:	3044 2000                                   D0. 

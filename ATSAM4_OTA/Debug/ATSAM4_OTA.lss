
ATSAM4_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051b0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004051b0  004051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  004051b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000d0c  200009c0  00405b78  000209c0  2**2
                  ALLOC
  4 .stack        00003004  200016cc  00406884  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001115b  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024e3  00000000  00000000  00031b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005cdc  00000000  00000000  00034081  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a40  00000000  00000000  00039d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000988  00000000  00000000  0003a79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000149e9  00000000  00000000  0003b125  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c567  00000000  00000000  0004fb0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055d02  00000000  00000000  0005c075  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000037c4  00000000  00000000  000b1d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 46 00 20 e9 1a 40 00 b1 1b 40 00 b1 1b 40 00     .F. ..@...@...@.
  400010:	b1 1b 40 00 b1 1b 40 00 b1 1b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b1 1b 40 00 b1 1b 40 00 00 00 00 00 b1 1b 40 00     ..@...@.......@.
  40003c:	b1 1b 40 00 b1 1b 40 00 b1 1b 40 00 b1 1b 40 00     ..@...@...@...@.
  40004c:	b1 1b 40 00 b1 1b 40 00 b1 1b 40 00 b1 1b 40 00     ..@...@...@...@.
  40005c:	b1 1b 40 00 b1 1b 40 00 b9 05 40 00 00 00 00 00     ..@...@...@.....
  40006c:	fd 13 40 00 15 14 40 00 2d 14 40 00 b1 1b 40 00     ..@...@.-.@...@.
  40007c:	b1 1b 40 00 00 00 00 00 00 00 00 00 b1 1b 40 00     ..@...........@.
  40008c:	b1 1b 40 00 b1 1b 40 00 b1 1b 40 00 b1 1b 40 00     ..@...@...@...@.
  40009c:	b1 1b 40 00 b1 1b 40 00 b1 1b 40 00 b1 1b 40 00     ..@...@...@...@.
  4000ac:	b1 1b 40 00 b1 1b 40 00 b1 1b 40 00 b1 1b 40 00     ..@...@...@...@.
  4000bc:	b1 1b 40 00 b1 1b 40 00 b1 1b 40 00 b1 1b 40 00     ..@...@...@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009c0 	.word	0x200009c0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004051b8 	.word	0x004051b8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004051b8 	.word	0x004051b8
  40012c:	200009c4 	.word	0x200009c4
  400130:	004051b8 	.word	0x004051b8
  400134:	00000000 	.word	0x00000000

00400138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400138:	b480      	push	{r7}
  40013a:	b083      	sub	sp, #12
  40013c:	af00      	add	r7, sp, #0
  40013e:	4603      	mov	r3, r0
  400140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400142:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400146:	2b00      	cmp	r3, #0
  400148:	db0b      	blt.n	400162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40014a:	4908      	ldr	r1, [pc, #32]	; (40016c <__NVIC_EnableIRQ+0x34>)
  40014c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400150:	095b      	lsrs	r3, r3, #5
  400152:	79fa      	ldrb	r2, [r7, #7]
  400154:	f002 021f 	and.w	r2, r2, #31
  400158:	2001      	movs	r0, #1
  40015a:	fa00 f202 	lsl.w	r2, r0, r2
  40015e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400162:	bf00      	nop
  400164:	370c      	adds	r7, #12
  400166:	46bd      	mov	sp, r7
  400168:	bc80      	pop	{r7}
  40016a:	4770      	bx	lr
  40016c:	e000e100 	.word	0xe000e100

00400170 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400178:	687b      	ldr	r3, [r7, #4]
  40017a:	2b07      	cmp	r3, #7
  40017c:	d825      	bhi.n	4001ca <osc_get_rate+0x5a>
  40017e:	a201      	add	r2, pc, #4	; (adr r2, 400184 <osc_get_rate+0x14>)
  400180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400184:	004001a5 	.word	0x004001a5
  400188:	004001ab 	.word	0x004001ab
  40018c:	004001b1 	.word	0x004001b1
  400190:	004001b7 	.word	0x004001b7
  400194:	004001bb 	.word	0x004001bb
  400198:	004001bf 	.word	0x004001bf
  40019c:	004001c3 	.word	0x004001c3
  4001a0:	004001c7 	.word	0x004001c7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4001a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4001a8:	e010      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4001aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001ae:	e00d      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4001b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001b4:	e00a      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4001b6:	4b08      	ldr	r3, [pc, #32]	; (4001d8 <osc_get_rate+0x68>)
  4001b8:	e008      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4001ba:	4b08      	ldr	r3, [pc, #32]	; (4001dc <osc_get_rate+0x6c>)
  4001bc:	e006      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4001be:	4b08      	ldr	r3, [pc, #32]	; (4001e0 <osc_get_rate+0x70>)
  4001c0:	e004      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4001c2:	4b07      	ldr	r3, [pc, #28]	; (4001e0 <osc_get_rate+0x70>)
  4001c4:	e002      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4001c6:	4b06      	ldr	r3, [pc, #24]	; (4001e0 <osc_get_rate+0x70>)
  4001c8:	e000      	b.n	4001cc <osc_get_rate+0x5c>
	}

	return 0;
  4001ca:	2300      	movs	r3, #0
}
  4001cc:	4618      	mov	r0, r3
  4001ce:	370c      	adds	r7, #12
  4001d0:	46bd      	mov	sp, r7
  4001d2:	bc80      	pop	{r7}
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	003d0900 	.word	0x003d0900
  4001dc:	007a1200 	.word	0x007a1200
  4001e0:	00b71b00 	.word	0x00b71b00

004001e4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4001e4:	b580      	push	{r7, lr}
  4001e6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001e8:	2006      	movs	r0, #6
  4001ea:	4b04      	ldr	r3, [pc, #16]	; (4001fc <sysclk_get_main_hz+0x18>)
  4001ec:	4798      	blx	r3
  4001ee:	4602      	mov	r2, r0
  4001f0:	4613      	mov	r3, r2
  4001f2:	009b      	lsls	r3, r3, #2
  4001f4:	4413      	add	r3, r2
  4001f6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001f8:	4618      	mov	r0, r3
  4001fa:	bd80      	pop	{r7, pc}
  4001fc:	00400171 	.word	0x00400171

00400200 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400200:	b580      	push	{r7, lr}
  400202:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400204:	4b02      	ldr	r3, [pc, #8]	; (400210 <sysclk_get_peripheral_hz+0x10>)
  400206:	4798      	blx	r3
  400208:	4603      	mov	r3, r0
  40020a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40020c:	4618      	mov	r0, r3
  40020e:	bd80      	pop	{r7, pc}
  400210:	004001e5 	.word	0x004001e5

00400214 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400214:	b580      	push	{r7, lr}
  400216:	b082      	sub	sp, #8
  400218:	af00      	add	r7, sp, #0
  40021a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40021c:	6878      	ldr	r0, [r7, #4]
  40021e:	4b03      	ldr	r3, [pc, #12]	; (40022c <sysclk_enable_peripheral_clock+0x18>)
  400220:	4798      	blx	r3
}
  400222:	bf00      	nop
  400224:	3708      	adds	r7, #8
  400226:	46bd      	mov	sp, r7
  400228:	bd80      	pop	{r7, pc}
  40022a:	bf00      	nop
  40022c:	00401691 	.word	0x00401691

00400230 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  400230:	b580      	push	{r7, lr}
  400232:	b08c      	sub	sp, #48	; 0x30
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
  400238:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40023a:	4b31      	ldr	r3, [pc, #196]	; (400300 <usart_serial_init+0xd0>)
  40023c:	4798      	blx	r3
  40023e:	4603      	mov	r3, r0
  400240:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  400242:	683b      	ldr	r3, [r7, #0]
  400244:	681b      	ldr	r3, [r3, #0]
  400246:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  400248:	683b      	ldr	r3, [r7, #0]
  40024a:	689b      	ldr	r3, [r3, #8]
  40024c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40024e:	683b      	ldr	r3, [r7, #0]
  400250:	681b      	ldr	r3, [r3, #0]
  400252:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  400254:	683b      	ldr	r3, [r7, #0]
  400256:	685b      	ldr	r3, [r3, #4]
  400258:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40025a:	683b      	ldr	r3, [r7, #0]
  40025c:	689b      	ldr	r3, [r3, #8]
  40025e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  400260:	683b      	ldr	r3, [r7, #0]
  400262:	68db      	ldr	r3, [r3, #12]
  400264:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400266:	2300      	movs	r3, #0
  400268:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40026a:	687b      	ldr	r3, [r7, #4]
  40026c:	4a25      	ldr	r2, [pc, #148]	; (400304 <usart_serial_init+0xd4>)
  40026e:	4293      	cmp	r3, r2
  400270:	d108      	bne.n	400284 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  400272:	2008      	movs	r0, #8
  400274:	4b24      	ldr	r3, [pc, #144]	; (400308 <usart_serial_init+0xd8>)
  400276:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400278:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40027c:	4619      	mov	r1, r3
  40027e:	6878      	ldr	r0, [r7, #4]
  400280:	4b22      	ldr	r3, [pc, #136]	; (40030c <usart_serial_init+0xdc>)
  400282:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	4a22      	ldr	r2, [pc, #136]	; (400310 <usart_serial_init+0xe0>)
  400288:	4293      	cmp	r3, r2
  40028a:	d108      	bne.n	40029e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40028c:	2009      	movs	r0, #9
  40028e:	4b1e      	ldr	r3, [pc, #120]	; (400308 <usart_serial_init+0xd8>)
  400290:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400292:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400296:	4619      	mov	r1, r3
  400298:	6878      	ldr	r0, [r7, #4]
  40029a:	4b1c      	ldr	r3, [pc, #112]	; (40030c <usart_serial_init+0xdc>)
  40029c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40029e:	687b      	ldr	r3, [r7, #4]
  4002a0:	4a1c      	ldr	r2, [pc, #112]	; (400314 <usart_serial_init+0xe4>)
  4002a2:	4293      	cmp	r3, r2
  4002a4:	d111      	bne.n	4002ca <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4002a6:	200e      	movs	r0, #14
  4002a8:	4b17      	ldr	r3, [pc, #92]	; (400308 <usart_serial_init+0xd8>)
  4002aa:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002ac:	4b14      	ldr	r3, [pc, #80]	; (400300 <usart_serial_init+0xd0>)
  4002ae:	4798      	blx	r3
  4002b0:	4602      	mov	r2, r0
  4002b2:	f107 030c 	add.w	r3, r7, #12
  4002b6:	4619      	mov	r1, r3
  4002b8:	6878      	ldr	r0, [r7, #4]
  4002ba:	4b17      	ldr	r3, [pc, #92]	; (400318 <usart_serial_init+0xe8>)
  4002bc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002be:	6878      	ldr	r0, [r7, #4]
  4002c0:	4b16      	ldr	r3, [pc, #88]	; (40031c <usart_serial_init+0xec>)
  4002c2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4002c4:	6878      	ldr	r0, [r7, #4]
  4002c6:	4b16      	ldr	r3, [pc, #88]	; (400320 <usart_serial_init+0xf0>)
  4002c8:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	4a15      	ldr	r2, [pc, #84]	; (400324 <usart_serial_init+0xf4>)
  4002ce:	4293      	cmp	r3, r2
  4002d0:	d111      	bne.n	4002f6 <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4002d2:	200f      	movs	r0, #15
  4002d4:	4b0c      	ldr	r3, [pc, #48]	; (400308 <usart_serial_init+0xd8>)
  4002d6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002d8:	4b09      	ldr	r3, [pc, #36]	; (400300 <usart_serial_init+0xd0>)
  4002da:	4798      	blx	r3
  4002dc:	4602      	mov	r2, r0
  4002de:	f107 030c 	add.w	r3, r7, #12
  4002e2:	4619      	mov	r1, r3
  4002e4:	6878      	ldr	r0, [r7, #4]
  4002e6:	4b0c      	ldr	r3, [pc, #48]	; (400318 <usart_serial_init+0xe8>)
  4002e8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002ea:	6878      	ldr	r0, [r7, #4]
  4002ec:	4b0b      	ldr	r3, [pc, #44]	; (40031c <usart_serial_init+0xec>)
  4002ee:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4002f0:	6878      	ldr	r0, [r7, #4]
  4002f2:	4b0b      	ldr	r3, [pc, #44]	; (400320 <usart_serial_init+0xf0>)
  4002f4:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4002f6:	bf00      	nop
  4002f8:	3730      	adds	r7, #48	; 0x30
  4002fa:	46bd      	mov	sp, r7
  4002fc:	bd80      	pop	{r7, pc}
  4002fe:	bf00      	nop
  400300:	00400201 	.word	0x00400201
  400304:	400e0600 	.word	0x400e0600
  400308:	00400215 	.word	0x00400215
  40030c:	00401711 	.word	0x00401711
  400310:	400e0800 	.word	0x400e0800
  400314:	40024000 	.word	0x40024000
  400318:	004018b9 	.word	0x004018b9
  40031c:	0040193d 	.word	0x0040193d
  400320:	0040196d 	.word	0x0040196d
  400324:	40028000 	.word	0x40028000

00400328 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400328:	b580      	push	{r7, lr}
  40032a:	b082      	sub	sp, #8
  40032c:	af00      	add	r7, sp, #0
  40032e:	6078      	str	r0, [r7, #4]
  400330:	460b      	mov	r3, r1
  400332:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400334:	687b      	ldr	r3, [r7, #4]
  400336:	4a20      	ldr	r2, [pc, #128]	; (4003b8 <usart_serial_putchar+0x90>)
  400338:	4293      	cmp	r3, r2
  40033a:	d10a      	bne.n	400352 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40033c:	bf00      	nop
  40033e:	78fb      	ldrb	r3, [r7, #3]
  400340:	4619      	mov	r1, r3
  400342:	6878      	ldr	r0, [r7, #4]
  400344:	4b1d      	ldr	r3, [pc, #116]	; (4003bc <usart_serial_putchar+0x94>)
  400346:	4798      	blx	r3
  400348:	4603      	mov	r3, r0
  40034a:	2b00      	cmp	r3, #0
  40034c:	d1f7      	bne.n	40033e <usart_serial_putchar+0x16>
		return 1;
  40034e:	2301      	movs	r3, #1
  400350:	e02d      	b.n	4003ae <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400352:	687b      	ldr	r3, [r7, #4]
  400354:	4a1a      	ldr	r2, [pc, #104]	; (4003c0 <usart_serial_putchar+0x98>)
  400356:	4293      	cmp	r3, r2
  400358:	d10a      	bne.n	400370 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40035a:	bf00      	nop
  40035c:	78fb      	ldrb	r3, [r7, #3]
  40035e:	4619      	mov	r1, r3
  400360:	6878      	ldr	r0, [r7, #4]
  400362:	4b16      	ldr	r3, [pc, #88]	; (4003bc <usart_serial_putchar+0x94>)
  400364:	4798      	blx	r3
  400366:	4603      	mov	r3, r0
  400368:	2b00      	cmp	r3, #0
  40036a:	d1f7      	bne.n	40035c <usart_serial_putchar+0x34>
		return 1;
  40036c:	2301      	movs	r3, #1
  40036e:	e01e      	b.n	4003ae <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	4a14      	ldr	r2, [pc, #80]	; (4003c4 <usart_serial_putchar+0x9c>)
  400374:	4293      	cmp	r3, r2
  400376:	d10a      	bne.n	40038e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  400378:	bf00      	nop
  40037a:	78fb      	ldrb	r3, [r7, #3]
  40037c:	4619      	mov	r1, r3
  40037e:	6878      	ldr	r0, [r7, #4]
  400380:	4b11      	ldr	r3, [pc, #68]	; (4003c8 <usart_serial_putchar+0xa0>)
  400382:	4798      	blx	r3
  400384:	4603      	mov	r3, r0
  400386:	2b00      	cmp	r3, #0
  400388:	d1f7      	bne.n	40037a <usart_serial_putchar+0x52>
		return 1;
  40038a:	2301      	movs	r3, #1
  40038c:	e00f      	b.n	4003ae <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40038e:	687b      	ldr	r3, [r7, #4]
  400390:	4a0e      	ldr	r2, [pc, #56]	; (4003cc <usart_serial_putchar+0xa4>)
  400392:	4293      	cmp	r3, r2
  400394:	d10a      	bne.n	4003ac <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  400396:	bf00      	nop
  400398:	78fb      	ldrb	r3, [r7, #3]
  40039a:	4619      	mov	r1, r3
  40039c:	6878      	ldr	r0, [r7, #4]
  40039e:	4b0a      	ldr	r3, [pc, #40]	; (4003c8 <usart_serial_putchar+0xa0>)
  4003a0:	4798      	blx	r3
  4003a2:	4603      	mov	r3, r0
  4003a4:	2b00      	cmp	r3, #0
  4003a6:	d1f7      	bne.n	400398 <usart_serial_putchar+0x70>
		return 1;
  4003a8:	2301      	movs	r3, #1
  4003aa:	e000      	b.n	4003ae <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4003ac:	2300      	movs	r3, #0
}
  4003ae:	4618      	mov	r0, r3
  4003b0:	3708      	adds	r7, #8
  4003b2:	46bd      	mov	sp, r7
  4003b4:	bd80      	pop	{r7, pc}
  4003b6:	bf00      	nop
  4003b8:	400e0600 	.word	0x400e0600
  4003bc:	00401771 	.word	0x00401771
  4003c0:	400e0800 	.word	0x400e0800
  4003c4:	40024000 	.word	0x40024000
  4003c8:	00401a1b 	.word	0x00401a1b
  4003cc:	40028000 	.word	0x40028000

004003d0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4003d0:	b580      	push	{r7, lr}
  4003d2:	b084      	sub	sp, #16
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4003da:	2300      	movs	r3, #0
  4003dc:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4003de:	687b      	ldr	r3, [r7, #4]
  4003e0:	4a1f      	ldr	r2, [pc, #124]	; (400460 <usart_serial_getchar+0x90>)
  4003e2:	4293      	cmp	r3, r2
  4003e4:	d107      	bne.n	4003f6 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4003e6:	bf00      	nop
  4003e8:	6839      	ldr	r1, [r7, #0]
  4003ea:	6878      	ldr	r0, [r7, #4]
  4003ec:	4b1d      	ldr	r3, [pc, #116]	; (400464 <usart_serial_getchar+0x94>)
  4003ee:	4798      	blx	r3
  4003f0:	4603      	mov	r3, r0
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	d1f8      	bne.n	4003e8 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4003f6:	687b      	ldr	r3, [r7, #4]
  4003f8:	4a1b      	ldr	r2, [pc, #108]	; (400468 <usart_serial_getchar+0x98>)
  4003fa:	4293      	cmp	r3, r2
  4003fc:	d107      	bne.n	40040e <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4003fe:	bf00      	nop
  400400:	6839      	ldr	r1, [r7, #0]
  400402:	6878      	ldr	r0, [r7, #4]
  400404:	4b17      	ldr	r3, [pc, #92]	; (400464 <usart_serial_getchar+0x94>)
  400406:	4798      	blx	r3
  400408:	4603      	mov	r3, r0
  40040a:	2b00      	cmp	r3, #0
  40040c:	d1f8      	bne.n	400400 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40040e:	687b      	ldr	r3, [r7, #4]
  400410:	4a16      	ldr	r2, [pc, #88]	; (40046c <usart_serial_getchar+0x9c>)
  400412:	4293      	cmp	r3, r2
  400414:	d10d      	bne.n	400432 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  400416:	bf00      	nop
  400418:	f107 030c 	add.w	r3, r7, #12
  40041c:	4619      	mov	r1, r3
  40041e:	6878      	ldr	r0, [r7, #4]
  400420:	4b13      	ldr	r3, [pc, #76]	; (400470 <usart_serial_getchar+0xa0>)
  400422:	4798      	blx	r3
  400424:	4603      	mov	r3, r0
  400426:	2b00      	cmp	r3, #0
  400428:	d1f6      	bne.n	400418 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  40042a:	68fb      	ldr	r3, [r7, #12]
  40042c:	b2da      	uxtb	r2, r3
  40042e:	683b      	ldr	r3, [r7, #0]
  400430:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400432:	687b      	ldr	r3, [r7, #4]
  400434:	4a0f      	ldr	r2, [pc, #60]	; (400474 <usart_serial_getchar+0xa4>)
  400436:	4293      	cmp	r3, r2
  400438:	d10d      	bne.n	400456 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  40043a:	bf00      	nop
  40043c:	f107 030c 	add.w	r3, r7, #12
  400440:	4619      	mov	r1, r3
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b0a      	ldr	r3, [pc, #40]	; (400470 <usart_serial_getchar+0xa0>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d1f6      	bne.n	40043c <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  40044e:	68fb      	ldr	r3, [r7, #12]
  400450:	b2da      	uxtb	r2, r3
  400452:	683b      	ldr	r3, [r7, #0]
  400454:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400456:	bf00      	nop
  400458:	3710      	adds	r7, #16
  40045a:	46bd      	mov	sp, r7
  40045c:	bd80      	pop	{r7, pc}
  40045e:	bf00      	nop
  400460:	400e0600 	.word	0x400e0600
  400464:	0040179f 	.word	0x0040179f
  400468:	400e0800 	.word	0x400e0800
  40046c:	40024000 	.word	0x40024000
  400470:	00401a4b 	.word	0x00401a4b
  400474:	40028000 	.word	0x40028000

00400478 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  400478:	b580      	push	{r7, lr}
  40047a:	b082      	sub	sp, #8
  40047c:	af00      	add	r7, sp, #0
  40047e:	6078      	str	r0, [r7, #4]
  400480:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  400482:	4a0f      	ldr	r2, [pc, #60]	; (4004c0 <stdio_serial_init+0x48>)
  400484:	687b      	ldr	r3, [r7, #4]
  400486:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400488:	4b0e      	ldr	r3, [pc, #56]	; (4004c4 <stdio_serial_init+0x4c>)
  40048a:	4a0f      	ldr	r2, [pc, #60]	; (4004c8 <stdio_serial_init+0x50>)
  40048c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40048e:	4b0f      	ldr	r3, [pc, #60]	; (4004cc <stdio_serial_init+0x54>)
  400490:	4a0f      	ldr	r2, [pc, #60]	; (4004d0 <stdio_serial_init+0x58>)
  400492:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  400494:	6839      	ldr	r1, [r7, #0]
  400496:	6878      	ldr	r0, [r7, #4]
  400498:	4b0e      	ldr	r3, [pc, #56]	; (4004d4 <stdio_serial_init+0x5c>)
  40049a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40049c:	4b0e      	ldr	r3, [pc, #56]	; (4004d8 <stdio_serial_init+0x60>)
  40049e:	681b      	ldr	r3, [r3, #0]
  4004a0:	689b      	ldr	r3, [r3, #8]
  4004a2:	2100      	movs	r1, #0
  4004a4:	4618      	mov	r0, r3
  4004a6:	4b0d      	ldr	r3, [pc, #52]	; (4004dc <stdio_serial_init+0x64>)
  4004a8:	4798      	blx	r3
	setbuf(stdin, NULL);
  4004aa:	4b0b      	ldr	r3, [pc, #44]	; (4004d8 <stdio_serial_init+0x60>)
  4004ac:	681b      	ldr	r3, [r3, #0]
  4004ae:	685b      	ldr	r3, [r3, #4]
  4004b0:	2100      	movs	r1, #0
  4004b2:	4618      	mov	r0, r3
  4004b4:	4b09      	ldr	r3, [pc, #36]	; (4004dc <stdio_serial_init+0x64>)
  4004b6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4004b8:	bf00      	nop
  4004ba:	3708      	adds	r7, #8
  4004bc:	46bd      	mov	sp, r7
  4004be:	bd80      	pop	{r7, pc}
  4004c0:	2000169c 	.word	0x2000169c
  4004c4:	20001698 	.word	0x20001698
  4004c8:	00400329 	.word	0x00400329
  4004cc:	20001694 	.word	0x20001694
  4004d0:	004003d1 	.word	0x004003d1
  4004d4:	00400231 	.word	0x00400231
  4004d8:	20000010 	.word	0x20000010
  4004dc:	00402a51 	.word	0x00402a51

004004e0 <Boot_Uart_Init>:
uint8_t Uart_Packet_Received_Flag;

static void Uart_Packet_Parsing(uint8_t data);

void Boot_Uart_Init(void)
{
  4004e0:	b590      	push	{r4, r7, lr}
  4004e2:	b085      	sub	sp, #20
  4004e4:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = 
  4004e6:	4b0c      	ldr	r3, [pc, #48]	; (400518 <Boot_Uart_Init+0x38>)
  4004e8:	463c      	mov	r4, r7
  4004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4004ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits =	CONF_UART_STOP_BITS,
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(ID_UART1);
  4004f0:	2009      	movs	r0, #9
  4004f2:	4b0a      	ldr	r3, [pc, #40]	; (40051c <Boot_Uart_Init+0x3c>)
  4004f4:	4798      	blx	r3
	stdio_serial_init(UART1, &uart_serial_options);
  4004f6:	463b      	mov	r3, r7
  4004f8:	4619      	mov	r1, r3
  4004fa:	4809      	ldr	r0, [pc, #36]	; (400520 <Boot_Uart_Init+0x40>)
  4004fc:	4b09      	ldr	r3, [pc, #36]	; (400524 <Boot_Uart_Init+0x44>)
  4004fe:	4798      	blx	r3
	usart_enable_interrupt(UART1, US_IER_RXRDY); // UART RX 인터럽트 활성화
  400500:	2101      	movs	r1, #1
  400502:	4807      	ldr	r0, [pc, #28]	; (400520 <Boot_Uart_Init+0x40>)
  400504:	4b08      	ldr	r3, [pc, #32]	; (400528 <Boot_Uart_Init+0x48>)
  400506:	4798      	blx	r3
    NVIC_EnableIRQ(UART1_IRQn); // 전체 인터럽트 활성화
  400508:	2009      	movs	r0, #9
  40050a:	4b08      	ldr	r3, [pc, #32]	; (40052c <Boot_Uart_Init+0x4c>)
  40050c:	4798      	blx	r3
}
  40050e:	bf00      	nop
  400510:	3714      	adds	r7, #20
  400512:	46bd      	mov	sp, r7
  400514:	bd90      	pop	{r4, r7, pc}
  400516:	bf00      	nop
  400518:	00404ffc 	.word	0x00404ffc
  40051c:	00400215 	.word	0x00400215
  400520:	400e0800 	.word	0x400e0800
  400524:	00400479 	.word	0x00400479
  400528:	0040199d 	.word	0x0040199d
  40052c:	00400139 	.word	0x00400139

00400530 <uart_transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_ch(uint8_t data)
{
  400530:	b580      	push	{r7, lr}
  400532:	b084      	sub	sp, #16
  400534:	af00      	add	r7, sp, #0
  400536:	4603      	mov	r3, r0
  400538:	71fb      	strb	r3, [r7, #7]
	uart_status status = UART_ERROR;
  40053a:	23ff      	movs	r3, #255	; 0xff
  40053c:	73fb      	strb	r3, [r7, #15]

	if(uart_write(UART1,data) == 0)
  40053e:	79fb      	ldrb	r3, [r7, #7]
  400540:	4619      	mov	r1, r3
  400542:	4806      	ldr	r0, [pc, #24]	; (40055c <uart_transmit_ch+0x2c>)
  400544:	4b06      	ldr	r3, [pc, #24]	; (400560 <uart_transmit_ch+0x30>)
  400546:	4798      	blx	r3
  400548:	4603      	mov	r3, r0
  40054a:	2b00      	cmp	r3, #0
  40054c:	d101      	bne.n	400552 <uart_transmit_ch+0x22>
	{
		status = UART_OK;
  40054e:	2300      	movs	r3, #0
  400550:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  400552:	7bfb      	ldrb	r3, [r7, #15]
}
  400554:	4618      	mov	r0, r3
  400556:	3710      	adds	r7, #16
  400558:	46bd      	mov	sp, r7
  40055a:	bd80      	pop	{r7, pc}
  40055c:	400e0800 	.word	0x400e0800
  400560:	00401771 	.word	0x00401771

00400564 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
  400564:	b590      	push	{r4, r7, lr}
  400566:	b085      	sub	sp, #20
  400568:	af00      	add	r7, sp, #0
  40056a:	6078      	str	r0, [r7, #4]
	uart_status status = UART_ERROR;
  40056c:	23ff      	movs	r3, #255	; 0xff
  40056e:	737b      	strb	r3, [r7, #13]

	/* Calculate the length. */
	for(uint16_t i = 0; i < strlen(data); i++)
  400570:	2300      	movs	r3, #0
  400572:	81fb      	strh	r3, [r7, #14]
  400574:	e00e      	b.n	400594 <uart_transmit_str+0x30>
	{
		if (UART_ERROR == uart_transmit_ch(*(data+i)))
  400576:	89fb      	ldrh	r3, [r7, #14]
  400578:	687a      	ldr	r2, [r7, #4]
  40057a:	4413      	add	r3, r2
  40057c:	781b      	ldrb	r3, [r3, #0]
  40057e:	4618      	mov	r0, r3
  400580:	4b0b      	ldr	r3, [pc, #44]	; (4005b0 <uart_transmit_str+0x4c>)
  400582:	4798      	blx	r3
  400584:	4603      	mov	r3, r0
  400586:	2bff      	cmp	r3, #255	; 0xff
  400588:	d101      	bne.n	40058e <uart_transmit_str+0x2a>
		{
			return status;
  40058a:	7b7b      	ldrb	r3, [r7, #13]
  40058c:	e00c      	b.n	4005a8 <uart_transmit_str+0x44>
	for(uint16_t i = 0; i < strlen(data); i++)
  40058e:	89fb      	ldrh	r3, [r7, #14]
  400590:	3301      	adds	r3, #1
  400592:	81fb      	strh	r3, [r7, #14]
  400594:	89fc      	ldrh	r4, [r7, #14]
  400596:	6878      	ldr	r0, [r7, #4]
  400598:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <uart_transmit_str+0x50>)
  40059a:	4798      	blx	r3
  40059c:	4603      	mov	r3, r0
  40059e:	429c      	cmp	r4, r3
  4005a0:	d3e9      	bcc.n	400576 <uart_transmit_str+0x12>
		}
	}

	status = UART_OK;
  4005a2:	2300      	movs	r3, #0
  4005a4:	737b      	strb	r3, [r7, #13]

	return status;
  4005a6:	7b7b      	ldrb	r3, [r7, #13]
}
  4005a8:	4618      	mov	r0, r3
  4005aa:	3714      	adds	r7, #20
  4005ac:	46bd      	mov	sp, r7
  4005ae:	bd90      	pop	{r4, r7, pc}
  4005b0:	00400531 	.word	0x00400531
  4005b4:	00402c01 	.word	0x00402c01

004005b8 <UART1_Handler>:

	return status;
}

void UART1_Handler(void)
{
  4005b8:	b580      	push	{r7, lr}
  4005ba:	af00      	add	r7, sp, #0
    if (usart_get_interrupt_mask(UART1) & US_IER_RXRDY) 
  4005bc:	4832      	ldr	r0, [pc, #200]	; (400688 <UART1_Handler+0xd0>)
  4005be:	4b33      	ldr	r3, [pc, #204]	; (40068c <UART1_Handler+0xd4>)
  4005c0:	4798      	blx	r3
  4005c2:	4603      	mov	r3, r0
  4005c4:	f003 0301 	and.w	r3, r3, #1
  4005c8:	2b00      	cmp	r3, #0
  4005ca:	d05b      	beq.n	400684 <UART1_Handler+0xcc>
	{
        usart_getchar(UART1,(uint32_t *)&Uart_Buffer[Uart_Buffer_Length]); 
  4005cc:	4b30      	ldr	r3, [pc, #192]	; (400690 <UART1_Handler+0xd8>)
  4005ce:	881b      	ldrh	r3, [r3, #0]
  4005d0:	461a      	mov	r2, r3
  4005d2:	4b30      	ldr	r3, [pc, #192]	; (400694 <UART1_Handler+0xdc>)
  4005d4:	4413      	add	r3, r2
  4005d6:	4619      	mov	r1, r3
  4005d8:	482b      	ldr	r0, [pc, #172]	; (400688 <UART1_Handler+0xd0>)
  4005da:	4b2f      	ldr	r3, [pc, #188]	; (400698 <UART1_Handler+0xe0>)
  4005dc:	4798      	blx	r3
		if (Uart_Buffer_Length < 1)
  4005de:	4b2c      	ldr	r3, [pc, #176]	; (400690 <UART1_Handler+0xd8>)
  4005e0:	881b      	ldrh	r3, [r3, #0]
  4005e2:	2b00      	cmp	r3, #0
  4005e4:	d107      	bne.n	4005f6 <UART1_Handler+0x3e>
		{
			Uart_Packet.header = Uart_Buffer[Uart_Buffer_Length];
  4005e6:	4b2a      	ldr	r3, [pc, #168]	; (400690 <UART1_Handler+0xd8>)
  4005e8:	881b      	ldrh	r3, [r3, #0]
  4005ea:	461a      	mov	r2, r3
  4005ec:	4b29      	ldr	r3, [pc, #164]	; (400694 <UART1_Handler+0xdc>)
  4005ee:	5c9a      	ldrb	r2, [r3, r2]
  4005f0:	4b2a      	ldr	r3, [pc, #168]	; (40069c <UART1_Handler+0xe4>)
  4005f2:	701a      	strb	r2, [r3, #0]
  4005f4:	e037      	b.n	400666 <UART1_Handler+0xae>
		}
		else if (Uart_Buffer_Length < 3)
  4005f6:	4b26      	ldr	r3, [pc, #152]	; (400690 <UART1_Handler+0xd8>)
  4005f8:	881b      	ldrh	r3, [r3, #0]
  4005fa:	2b02      	cmp	r3, #2
  4005fc:	d80c      	bhi.n	400618 <UART1_Handler+0x60>
		{
			Uart_Packet.packet_num[Uart_Buffer_Length - 1] = Uart_Buffer[Uart_Buffer_Length];
  4005fe:	4b24      	ldr	r3, [pc, #144]	; (400690 <UART1_Handler+0xd8>)
  400600:	881b      	ldrh	r3, [r3, #0]
  400602:	3b01      	subs	r3, #1
  400604:	4a22      	ldr	r2, [pc, #136]	; (400690 <UART1_Handler+0xd8>)
  400606:	8812      	ldrh	r2, [r2, #0]
  400608:	4611      	mov	r1, r2
  40060a:	4a22      	ldr	r2, [pc, #136]	; (400694 <UART1_Handler+0xdc>)
  40060c:	5c51      	ldrb	r1, [r2, r1]
  40060e:	4a23      	ldr	r2, [pc, #140]	; (40069c <UART1_Handler+0xe4>)
  400610:	4413      	add	r3, r2
  400612:	460a      	mov	r2, r1
  400614:	705a      	strb	r2, [r3, #1]
  400616:	e026      	b.n	400666 <UART1_Handler+0xae>
		}
		else if (Uart_Buffer_Length < 1027)
  400618:	4b1d      	ldr	r3, [pc, #116]	; (400690 <UART1_Handler+0xd8>)
  40061a:	881b      	ldrh	r3, [r3, #0]
  40061c:	f240 4202 	movw	r2, #1026	; 0x402
  400620:	4293      	cmp	r3, r2
  400622:	d80c      	bhi.n	40063e <UART1_Handler+0x86>
		{
			Uart_Packet.data[Uart_Buffer_Length - 3] = Uart_Buffer[Uart_Buffer_Length];
  400624:	4b1a      	ldr	r3, [pc, #104]	; (400690 <UART1_Handler+0xd8>)
  400626:	881b      	ldrh	r3, [r3, #0]
  400628:	3b03      	subs	r3, #3
  40062a:	4a19      	ldr	r2, [pc, #100]	; (400690 <UART1_Handler+0xd8>)
  40062c:	8812      	ldrh	r2, [r2, #0]
  40062e:	4611      	mov	r1, r2
  400630:	4a18      	ldr	r2, [pc, #96]	; (400694 <UART1_Handler+0xdc>)
  400632:	5c51      	ldrb	r1, [r2, r1]
  400634:	4a19      	ldr	r2, [pc, #100]	; (40069c <UART1_Handler+0xe4>)
  400636:	4413      	add	r3, r2
  400638:	460a      	mov	r2, r1
  40063a:	70da      	strb	r2, [r3, #3]
  40063c:	e013      	b.n	400666 <UART1_Handler+0xae>
		}
		else if (Uart_Buffer_Length < 1029)
  40063e:	4b14      	ldr	r3, [pc, #80]	; (400690 <UART1_Handler+0xd8>)
  400640:	881b      	ldrh	r3, [r3, #0]
  400642:	f240 4204 	movw	r2, #1028	; 0x404
  400646:	4293      	cmp	r3, r2
  400648:	d80d      	bhi.n	400666 <UART1_Handler+0xae>
		{
			Uart_Packet.checksum[Uart_Buffer_Length - 1027] = Uart_Buffer[Uart_Buffer_Length];
  40064a:	4b11      	ldr	r3, [pc, #68]	; (400690 <UART1_Handler+0xd8>)
  40064c:	881b      	ldrh	r3, [r3, #0]
  40064e:	f2a3 4303 	subw	r3, r3, #1027	; 0x403
  400652:	4a0f      	ldr	r2, [pc, #60]	; (400690 <UART1_Handler+0xd8>)
  400654:	8812      	ldrh	r2, [r2, #0]
  400656:	4611      	mov	r1, r2
  400658:	4a0e      	ldr	r2, [pc, #56]	; (400694 <UART1_Handler+0xdc>)
  40065a:	5c51      	ldrb	r1, [r2, r1]
  40065c:	4a0f      	ldr	r2, [pc, #60]	; (40069c <UART1_Handler+0xe4>)
  40065e:	4413      	add	r3, r2
  400660:	460a      	mov	r2, r1
  400662:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
		}
		
		if(Uart_Buffer_Length >= 1028)
  400666:	4b0a      	ldr	r3, [pc, #40]	; (400690 <UART1_Handler+0xd8>)
  400668:	881b      	ldrh	r3, [r3, #0]
  40066a:	f240 4203 	movw	r2, #1027	; 0x403
  40066e:	4293      	cmp	r3, r2
  400670:	d902      	bls.n	400678 <UART1_Handler+0xc0>
		{
			Uart_Packet_Received_Flag = 1;
  400672:	4b0b      	ldr	r3, [pc, #44]	; (4006a0 <UART1_Handler+0xe8>)
  400674:	2201      	movs	r2, #1
  400676:	701a      	strb	r2, [r3, #0]
		}
		Uart_Buffer_Length++;
  400678:	4b05      	ldr	r3, [pc, #20]	; (400690 <UART1_Handler+0xd8>)
  40067a:	881b      	ldrh	r3, [r3, #0]
  40067c:	3301      	adds	r3, #1
  40067e:	b29a      	uxth	r2, r3
  400680:	4b03      	ldr	r3, [pc, #12]	; (400690 <UART1_Handler+0xd8>)
  400682:	801a      	strh	r2, [r3, #0]
    }
}
  400684:	bf00      	nop
  400686:	bd80      	pop	{r7, pc}
  400688:	400e0800 	.word	0x400e0800
  40068c:	004019b7 	.word	0x004019b7
  400690:	20000e92 	.word	0x20000e92
  400694:	20000e94 	.word	0x20000e94
  400698:	00401a7d 	.word	0x00401a7d
  40069c:	20000a8c 	.word	0x20000a8c
  4006a0:	20000e91 	.word	0x20000e91

004006a4 <osc_enable>:
{
  4006a4:	b580      	push	{r7, lr}
  4006a6:	b082      	sub	sp, #8
  4006a8:	af00      	add	r7, sp, #0
  4006aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4006ac:	687b      	ldr	r3, [r7, #4]
  4006ae:	2b07      	cmp	r3, #7
  4006b0:	d831      	bhi.n	400716 <osc_enable+0x72>
  4006b2:	a201      	add	r2, pc, #4	; (adr r2, 4006b8 <osc_enable+0x14>)
  4006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4006b8:	00400715 	.word	0x00400715
  4006bc:	004006d9 	.word	0x004006d9
  4006c0:	004006e1 	.word	0x004006e1
  4006c4:	004006e9 	.word	0x004006e9
  4006c8:	004006f1 	.word	0x004006f1
  4006cc:	004006f9 	.word	0x004006f9
  4006d0:	00400701 	.word	0x00400701
  4006d4:	0040070b 	.word	0x0040070b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4006d8:	2000      	movs	r0, #0
  4006da:	4b11      	ldr	r3, [pc, #68]	; (400720 <osc_enable+0x7c>)
  4006dc:	4798      	blx	r3
		break;
  4006de:	e01a      	b.n	400716 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4006e0:	2001      	movs	r0, #1
  4006e2:	4b0f      	ldr	r3, [pc, #60]	; (400720 <osc_enable+0x7c>)
  4006e4:	4798      	blx	r3
		break;
  4006e6:	e016      	b.n	400716 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4006e8:	2000      	movs	r0, #0
  4006ea:	4b0e      	ldr	r3, [pc, #56]	; (400724 <osc_enable+0x80>)
  4006ec:	4798      	blx	r3
		break;
  4006ee:	e012      	b.n	400716 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4006f0:	2010      	movs	r0, #16
  4006f2:	4b0c      	ldr	r3, [pc, #48]	; (400724 <osc_enable+0x80>)
  4006f4:	4798      	blx	r3
		break;
  4006f6:	e00e      	b.n	400716 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4006f8:	2020      	movs	r0, #32
  4006fa:	4b0a      	ldr	r3, [pc, #40]	; (400724 <osc_enable+0x80>)
  4006fc:	4798      	blx	r3
		break;
  4006fe:	e00a      	b.n	400716 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400700:	213e      	movs	r1, #62	; 0x3e
  400702:	2000      	movs	r0, #0
  400704:	4b08      	ldr	r3, [pc, #32]	; (400728 <osc_enable+0x84>)
  400706:	4798      	blx	r3
		break;
  400708:	e005      	b.n	400716 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40070a:	213e      	movs	r1, #62	; 0x3e
  40070c:	2001      	movs	r0, #1
  40070e:	4b06      	ldr	r3, [pc, #24]	; (400728 <osc_enable+0x84>)
  400710:	4798      	blx	r3
		break;
  400712:	e000      	b.n	400716 <osc_enable+0x72>
		break;
  400714:	bf00      	nop
}
  400716:	bf00      	nop
  400718:	3708      	adds	r7, #8
  40071a:	46bd      	mov	sp, r7
  40071c:	bd80      	pop	{r7, pc}
  40071e:	bf00      	nop
  400720:	004014c5 	.word	0x004014c5
  400724:	00401531 	.word	0x00401531
  400728:	004015a1 	.word	0x004015a1

0040072c <osc_is_ready>:
{
  40072c:	b580      	push	{r7, lr}
  40072e:	b082      	sub	sp, #8
  400730:	af00      	add	r7, sp, #0
  400732:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400734:	687b      	ldr	r3, [r7, #4]
  400736:	2b07      	cmp	r3, #7
  400738:	d826      	bhi.n	400788 <osc_is_ready+0x5c>
  40073a:	a201      	add	r2, pc, #4	; (adr r2, 400740 <osc_is_ready+0x14>)
  40073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400740:	00400761 	.word	0x00400761
  400744:	00400765 	.word	0x00400765
  400748:	00400765 	.word	0x00400765
  40074c:	00400777 	.word	0x00400777
  400750:	00400777 	.word	0x00400777
  400754:	00400777 	.word	0x00400777
  400758:	00400777 	.word	0x00400777
  40075c:	00400777 	.word	0x00400777
		return 1;
  400760:	2301      	movs	r3, #1
  400762:	e012      	b.n	40078a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  400764:	4b0b      	ldr	r3, [pc, #44]	; (400794 <osc_is_ready+0x68>)
  400766:	4798      	blx	r3
  400768:	4603      	mov	r3, r0
  40076a:	2b00      	cmp	r3, #0
  40076c:	bf14      	ite	ne
  40076e:	2301      	movne	r3, #1
  400770:	2300      	moveq	r3, #0
  400772:	b2db      	uxtb	r3, r3
  400774:	e009      	b.n	40078a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  400776:	4b08      	ldr	r3, [pc, #32]	; (400798 <osc_is_ready+0x6c>)
  400778:	4798      	blx	r3
  40077a:	4603      	mov	r3, r0
  40077c:	2b00      	cmp	r3, #0
  40077e:	bf14      	ite	ne
  400780:	2301      	movne	r3, #1
  400782:	2300      	moveq	r3, #0
  400784:	b2db      	uxtb	r3, r3
  400786:	e000      	b.n	40078a <osc_is_ready+0x5e>
	return 0;
  400788:	2300      	movs	r3, #0
}
  40078a:	4618      	mov	r0, r3
  40078c:	3708      	adds	r7, #8
  40078e:	46bd      	mov	sp, r7
  400790:	bd80      	pop	{r7, pc}
  400792:	bf00      	nop
  400794:	004014fd 	.word	0x004014fd
  400798:	00401619 	.word	0x00401619

0040079c <osc_get_rate>:
{
  40079c:	b480      	push	{r7}
  40079e:	b083      	sub	sp, #12
  4007a0:	af00      	add	r7, sp, #0
  4007a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4007a4:	687b      	ldr	r3, [r7, #4]
  4007a6:	2b07      	cmp	r3, #7
  4007a8:	d825      	bhi.n	4007f6 <osc_get_rate+0x5a>
  4007aa:	a201      	add	r2, pc, #4	; (adr r2, 4007b0 <osc_get_rate+0x14>)
  4007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4007b0:	004007d1 	.word	0x004007d1
  4007b4:	004007d7 	.word	0x004007d7
  4007b8:	004007dd 	.word	0x004007dd
  4007bc:	004007e3 	.word	0x004007e3
  4007c0:	004007e7 	.word	0x004007e7
  4007c4:	004007eb 	.word	0x004007eb
  4007c8:	004007ef 	.word	0x004007ef
  4007cc:	004007f3 	.word	0x004007f3
		return OSC_SLCK_32K_RC_HZ;
  4007d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4007d4:	e010      	b.n	4007f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4007d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4007da:	e00d      	b.n	4007f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4007dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4007e0:	e00a      	b.n	4007f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4007e2:	4b08      	ldr	r3, [pc, #32]	; (400804 <osc_get_rate+0x68>)
  4007e4:	e008      	b.n	4007f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4007e6:	4b08      	ldr	r3, [pc, #32]	; (400808 <osc_get_rate+0x6c>)
  4007e8:	e006      	b.n	4007f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4007ea:	4b08      	ldr	r3, [pc, #32]	; (40080c <osc_get_rate+0x70>)
  4007ec:	e004      	b.n	4007f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4007ee:	4b07      	ldr	r3, [pc, #28]	; (40080c <osc_get_rate+0x70>)
  4007f0:	e002      	b.n	4007f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4007f2:	4b06      	ldr	r3, [pc, #24]	; (40080c <osc_get_rate+0x70>)
  4007f4:	e000      	b.n	4007f8 <osc_get_rate+0x5c>
	return 0;
  4007f6:	2300      	movs	r3, #0
}
  4007f8:	4618      	mov	r0, r3
  4007fa:	370c      	adds	r7, #12
  4007fc:	46bd      	mov	sp, r7
  4007fe:	bc80      	pop	{r7}
  400800:	4770      	bx	lr
  400802:	bf00      	nop
  400804:	003d0900 	.word	0x003d0900
  400808:	007a1200 	.word	0x007a1200
  40080c:	00b71b00 	.word	0x00b71b00

00400810 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400810:	b580      	push	{r7, lr}
  400812:	b082      	sub	sp, #8
  400814:	af00      	add	r7, sp, #0
  400816:	4603      	mov	r3, r0
  400818:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40081a:	bf00      	nop
  40081c:	79fb      	ldrb	r3, [r7, #7]
  40081e:	4618      	mov	r0, r3
  400820:	4b05      	ldr	r3, [pc, #20]	; (400838 <osc_wait_ready+0x28>)
  400822:	4798      	blx	r3
  400824:	4603      	mov	r3, r0
  400826:	f083 0301 	eor.w	r3, r3, #1
  40082a:	b2db      	uxtb	r3, r3
  40082c:	2b00      	cmp	r3, #0
  40082e:	d1f5      	bne.n	40081c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400830:	bf00      	nop
  400832:	3708      	adds	r7, #8
  400834:	46bd      	mov	sp, r7
  400836:	bd80      	pop	{r7, pc}
  400838:	0040072d 	.word	0x0040072d

0040083c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40083c:	b580      	push	{r7, lr}
  40083e:	b086      	sub	sp, #24
  400840:	af00      	add	r7, sp, #0
  400842:	60f8      	str	r0, [r7, #12]
  400844:	607a      	str	r2, [r7, #4]
  400846:	603b      	str	r3, [r7, #0]
  400848:	460b      	mov	r3, r1
  40084a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40084c:	7afb      	ldrb	r3, [r7, #11]
  40084e:	4618      	mov	r0, r3
  400850:	4b0d      	ldr	r3, [pc, #52]	; (400888 <pll_config_init+0x4c>)
  400852:	4798      	blx	r3
  400854:	4602      	mov	r2, r0
  400856:	687b      	ldr	r3, [r7, #4]
  400858:	fbb2 f3f3 	udiv	r3, r2, r3
  40085c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40085e:	697b      	ldr	r3, [r7, #20]
  400860:	683a      	ldr	r2, [r7, #0]
  400862:	fb02 f303 	mul.w	r3, r2, r3
  400866:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400868:	683b      	ldr	r3, [r7, #0]
  40086a:	3b01      	subs	r3, #1
  40086c:	041a      	lsls	r2, r3, #16
  40086e:	4b07      	ldr	r3, [pc, #28]	; (40088c <pll_config_init+0x50>)
  400870:	4013      	ands	r3, r2
  400872:	687a      	ldr	r2, [r7, #4]
  400874:	b2d2      	uxtb	r2, r2
  400876:	4313      	orrs	r3, r2
  400878:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40087c:	68fb      	ldr	r3, [r7, #12]
  40087e:	601a      	str	r2, [r3, #0]
}
  400880:	bf00      	nop
  400882:	3718      	adds	r7, #24
  400884:	46bd      	mov	sp, r7
  400886:	bd80      	pop	{r7, pc}
  400888:	0040079d 	.word	0x0040079d
  40088c:	07ff0000 	.word	0x07ff0000

00400890 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400890:	b580      	push	{r7, lr}
  400892:	b082      	sub	sp, #8
  400894:	af00      	add	r7, sp, #0
  400896:	6078      	str	r0, [r7, #4]
  400898:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40089a:	683b      	ldr	r3, [r7, #0]
  40089c:	2b00      	cmp	r3, #0
  40089e:	d108      	bne.n	4008b2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4008a0:	4b09      	ldr	r3, [pc, #36]	; (4008c8 <pll_enable+0x38>)
  4008a2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4008a4:	4a09      	ldr	r2, [pc, #36]	; (4008cc <pll_enable+0x3c>)
  4008a6:	687b      	ldr	r3, [r7, #4]
  4008a8:	681b      	ldr	r3, [r3, #0]
  4008aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4008ae:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4008b0:	e005      	b.n	4008be <pll_enable+0x2e>
		pmc_disable_pllbck();
  4008b2:	4b07      	ldr	r3, [pc, #28]	; (4008d0 <pll_enable+0x40>)
  4008b4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4008b6:	4a05      	ldr	r2, [pc, #20]	; (4008cc <pll_enable+0x3c>)
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	681b      	ldr	r3, [r3, #0]
  4008bc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4008be:	bf00      	nop
  4008c0:	3708      	adds	r7, #8
  4008c2:	46bd      	mov	sp, r7
  4008c4:	bd80      	pop	{r7, pc}
  4008c6:	bf00      	nop
  4008c8:	00401631 	.word	0x00401631
  4008cc:	400e0400 	.word	0x400e0400
  4008d0:	00401661 	.word	0x00401661

004008d4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4008d4:	b580      	push	{r7, lr}
  4008d6:	b082      	sub	sp, #8
  4008d8:	af00      	add	r7, sp, #0
  4008da:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4008dc:	687b      	ldr	r3, [r7, #4]
  4008de:	2b00      	cmp	r3, #0
  4008e0:	d103      	bne.n	4008ea <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4008e2:	4b05      	ldr	r3, [pc, #20]	; (4008f8 <pll_is_locked+0x24>)
  4008e4:	4798      	blx	r3
  4008e6:	4603      	mov	r3, r0
  4008e8:	e002      	b.n	4008f0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4008ea:	4b04      	ldr	r3, [pc, #16]	; (4008fc <pll_is_locked+0x28>)
  4008ec:	4798      	blx	r3
  4008ee:	4603      	mov	r3, r0
	}
}
  4008f0:	4618      	mov	r0, r3
  4008f2:	3708      	adds	r7, #8
  4008f4:	46bd      	mov	sp, r7
  4008f6:	bd80      	pop	{r7, pc}
  4008f8:	00401649 	.word	0x00401649
  4008fc:	00401679 	.word	0x00401679

00400900 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400900:	b580      	push	{r7, lr}
  400902:	b082      	sub	sp, #8
  400904:	af00      	add	r7, sp, #0
  400906:	4603      	mov	r3, r0
  400908:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40090a:	79fb      	ldrb	r3, [r7, #7]
  40090c:	3b03      	subs	r3, #3
  40090e:	2b04      	cmp	r3, #4
  400910:	d808      	bhi.n	400924 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400912:	79fb      	ldrb	r3, [r7, #7]
  400914:	4618      	mov	r0, r3
  400916:	4b06      	ldr	r3, [pc, #24]	; (400930 <pll_enable_source+0x30>)
  400918:	4798      	blx	r3
		osc_wait_ready(e_src);
  40091a:	79fb      	ldrb	r3, [r7, #7]
  40091c:	4618      	mov	r0, r3
  40091e:	4b05      	ldr	r3, [pc, #20]	; (400934 <pll_enable_source+0x34>)
  400920:	4798      	blx	r3
		break;
  400922:	e000      	b.n	400926 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400924:	bf00      	nop
	}
}
  400926:	bf00      	nop
  400928:	3708      	adds	r7, #8
  40092a:	46bd      	mov	sp, r7
  40092c:	bd80      	pop	{r7, pc}
  40092e:	bf00      	nop
  400930:	004006a5 	.word	0x004006a5
  400934:	00400811 	.word	0x00400811

00400938 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400938:	b580      	push	{r7, lr}
  40093a:	b082      	sub	sp, #8
  40093c:	af00      	add	r7, sp, #0
  40093e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400940:	bf00      	nop
  400942:	6878      	ldr	r0, [r7, #4]
  400944:	4b04      	ldr	r3, [pc, #16]	; (400958 <pll_wait_for_lock+0x20>)
  400946:	4798      	blx	r3
  400948:	4603      	mov	r3, r0
  40094a:	2b00      	cmp	r3, #0
  40094c:	d0f9      	beq.n	400942 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40094e:	2300      	movs	r3, #0
}
  400950:	4618      	mov	r0, r3
  400952:	3708      	adds	r7, #8
  400954:	46bd      	mov	sp, r7
  400956:	bd80      	pop	{r7, pc}
  400958:	004008d5 	.word	0x004008d5

0040095c <sysclk_get_main_hz>:
{
  40095c:	b580      	push	{r7, lr}
  40095e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400960:	2006      	movs	r0, #6
  400962:	4b04      	ldr	r3, [pc, #16]	; (400974 <sysclk_get_main_hz+0x18>)
  400964:	4798      	blx	r3
  400966:	4602      	mov	r2, r0
  400968:	4613      	mov	r3, r2
  40096a:	009b      	lsls	r3, r3, #2
  40096c:	4413      	add	r3, r2
  40096e:	009b      	lsls	r3, r3, #2
}
  400970:	4618      	mov	r0, r3
  400972:	bd80      	pop	{r7, pc}
  400974:	0040079d 	.word	0x0040079d

00400978 <sysclk_get_cpu_hz>:
{
  400978:	b580      	push	{r7, lr}
  40097a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40097c:	4b02      	ldr	r3, [pc, #8]	; (400988 <sysclk_get_cpu_hz+0x10>)
  40097e:	4798      	blx	r3
  400980:	4603      	mov	r3, r0
  400982:	085b      	lsrs	r3, r3, #1
}
  400984:	4618      	mov	r0, r3
  400986:	bd80      	pop	{r7, pc}
  400988:	0040095d 	.word	0x0040095d

0040098c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40098c:	b590      	push	{r4, r7, lr}
  40098e:	b083      	sub	sp, #12
  400990:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400992:	4811      	ldr	r0, [pc, #68]	; (4009d8 <sysclk_init+0x4c>)
  400994:	4b11      	ldr	r3, [pc, #68]	; (4009dc <sysclk_init+0x50>)
  400996:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400998:	2006      	movs	r0, #6
  40099a:	4b11      	ldr	r3, [pc, #68]	; (4009e0 <sysclk_init+0x54>)
  40099c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40099e:	1d38      	adds	r0, r7, #4
  4009a0:	2314      	movs	r3, #20
  4009a2:	2201      	movs	r2, #1
  4009a4:	2106      	movs	r1, #6
  4009a6:	4c0f      	ldr	r4, [pc, #60]	; (4009e4 <sysclk_init+0x58>)
  4009a8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4009aa:	1d3b      	adds	r3, r7, #4
  4009ac:	2100      	movs	r1, #0
  4009ae:	4618      	mov	r0, r3
  4009b0:	4b0d      	ldr	r3, [pc, #52]	; (4009e8 <sysclk_init+0x5c>)
  4009b2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4009b4:	2000      	movs	r0, #0
  4009b6:	4b0d      	ldr	r3, [pc, #52]	; (4009ec <sysclk_init+0x60>)
  4009b8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4009ba:	2010      	movs	r0, #16
  4009bc:	4b0c      	ldr	r3, [pc, #48]	; (4009f0 <sysclk_init+0x64>)
  4009be:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4009c0:	4b0c      	ldr	r3, [pc, #48]	; (4009f4 <sysclk_init+0x68>)
  4009c2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4009c4:	4b0c      	ldr	r3, [pc, #48]	; (4009f8 <sysclk_init+0x6c>)
  4009c6:	4798      	blx	r3
  4009c8:	4603      	mov	r3, r0
  4009ca:	4618      	mov	r0, r3
  4009cc:	4b03      	ldr	r3, [pc, #12]	; (4009dc <sysclk_init+0x50>)
  4009ce:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4009d0:	bf00      	nop
  4009d2:	370c      	adds	r7, #12
  4009d4:	46bd      	mov	sp, r7
  4009d6:	bd90      	pop	{r4, r7, pc}
  4009d8:	07270e00 	.word	0x07270e00
  4009dc:	00401d51 	.word	0x00401d51
  4009e0:	00400901 	.word	0x00400901
  4009e4:	0040083d 	.word	0x0040083d
  4009e8:	00400891 	.word	0x00400891
  4009ec:	00400939 	.word	0x00400939
  4009f0:	00401445 	.word	0x00401445
  4009f4:	00401bb9 	.word	0x00401bb9
  4009f8:	00400979 	.word	0x00400979

004009fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4009fc:	b580      	push	{r7, lr}
  4009fe:	b086      	sub	sp, #24
  400a00:	af00      	add	r7, sp, #0
  400a02:	60f8      	str	r0, [r7, #12]
  400a04:	60b9      	str	r1, [r7, #8]
  400a06:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400a08:	2300      	movs	r3, #0
  400a0a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	2b00      	cmp	r3, #0
  400a10:	d012      	beq.n	400a38 <_read+0x3c>
		return -1;
  400a12:	f04f 33ff 	mov.w	r3, #4294967295
  400a16:	e013      	b.n	400a40 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400a18:	4b0b      	ldr	r3, [pc, #44]	; (400a48 <_read+0x4c>)
  400a1a:	681b      	ldr	r3, [r3, #0]
  400a1c:	4a0b      	ldr	r2, [pc, #44]	; (400a4c <_read+0x50>)
  400a1e:	6812      	ldr	r2, [r2, #0]
  400a20:	68b9      	ldr	r1, [r7, #8]
  400a22:	4610      	mov	r0, r2
  400a24:	4798      	blx	r3
		ptr++;
  400a26:	68bb      	ldr	r3, [r7, #8]
  400a28:	3301      	adds	r3, #1
  400a2a:	60bb      	str	r3, [r7, #8]
		nChars++;
  400a2c:	697b      	ldr	r3, [r7, #20]
  400a2e:	3301      	adds	r3, #1
  400a30:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  400a32:	687b      	ldr	r3, [r7, #4]
  400a34:	3b01      	subs	r3, #1
  400a36:	607b      	str	r3, [r7, #4]
  400a38:	687b      	ldr	r3, [r7, #4]
  400a3a:	2b00      	cmp	r3, #0
  400a3c:	dcec      	bgt.n	400a18 <_read+0x1c>
	}
	return nChars;
  400a3e:	697b      	ldr	r3, [r7, #20]
}
  400a40:	4618      	mov	r0, r3
  400a42:	3718      	adds	r7, #24
  400a44:	46bd      	mov	sp, r7
  400a46:	bd80      	pop	{r7, pc}
  400a48:	20001694 	.word	0x20001694
  400a4c:	2000169c 	.word	0x2000169c

00400a50 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400a50:	b580      	push	{r7, lr}
  400a52:	b086      	sub	sp, #24
  400a54:	af00      	add	r7, sp, #0
  400a56:	60f8      	str	r0, [r7, #12]
  400a58:	60b9      	str	r1, [r7, #8]
  400a5a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400a5c:	2300      	movs	r3, #0
  400a5e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400a60:	68fb      	ldr	r3, [r7, #12]
  400a62:	2b01      	cmp	r3, #1
  400a64:	d01e      	beq.n	400aa4 <_write+0x54>
  400a66:	68fb      	ldr	r3, [r7, #12]
  400a68:	2b02      	cmp	r3, #2
  400a6a:	d01b      	beq.n	400aa4 <_write+0x54>
  400a6c:	68fb      	ldr	r3, [r7, #12]
  400a6e:	2b03      	cmp	r3, #3
  400a70:	d018      	beq.n	400aa4 <_write+0x54>
		return -1;
  400a72:	f04f 33ff 	mov.w	r3, #4294967295
  400a76:	e019      	b.n	400aac <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400a78:	4b0e      	ldr	r3, [pc, #56]	; (400ab4 <_write+0x64>)
  400a7a:	681a      	ldr	r2, [r3, #0]
  400a7c:	4b0e      	ldr	r3, [pc, #56]	; (400ab8 <_write+0x68>)
  400a7e:	6818      	ldr	r0, [r3, #0]
  400a80:	68bb      	ldr	r3, [r7, #8]
  400a82:	1c59      	adds	r1, r3, #1
  400a84:	60b9      	str	r1, [r7, #8]
  400a86:	781b      	ldrb	r3, [r3, #0]
  400a88:	4619      	mov	r1, r3
  400a8a:	4790      	blx	r2
  400a8c:	4603      	mov	r3, r0
  400a8e:	2b00      	cmp	r3, #0
  400a90:	da02      	bge.n	400a98 <_write+0x48>
			return -1;
  400a92:	f04f 33ff 	mov.w	r3, #4294967295
  400a96:	e009      	b.n	400aac <_write+0x5c>
		}
		++nChars;
  400a98:	697b      	ldr	r3, [r7, #20]
  400a9a:	3301      	adds	r3, #1
  400a9c:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  400a9e:	687b      	ldr	r3, [r7, #4]
  400aa0:	3b01      	subs	r3, #1
  400aa2:	607b      	str	r3, [r7, #4]
  400aa4:	687b      	ldr	r3, [r7, #4]
  400aa6:	2b00      	cmp	r3, #0
  400aa8:	d1e6      	bne.n	400a78 <_write+0x28>
	}
	return nChars;
  400aaa:	697b      	ldr	r3, [r7, #20]
}
  400aac:	4618      	mov	r0, r3
  400aae:	3718      	adds	r7, #24
  400ab0:	46bd      	mov	sp, r7
  400ab2:	bd80      	pop	{r7, pc}
  400ab4:	20001698 	.word	0x20001698
  400ab8:	2000169c 	.word	0x2000169c

00400abc <sysclk_enable_peripheral_clock>:
{
  400abc:	b580      	push	{r7, lr}
  400abe:	b082      	sub	sp, #8
  400ac0:	af00      	add	r7, sp, #0
  400ac2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400ac4:	6878      	ldr	r0, [r7, #4]
  400ac6:	4b03      	ldr	r3, [pc, #12]	; (400ad4 <sysclk_enable_peripheral_clock+0x18>)
  400ac8:	4798      	blx	r3
}
  400aca:	bf00      	nop
  400acc:	3708      	adds	r7, #8
  400ace:	46bd      	mov	sp, r7
  400ad0:	bd80      	pop	{r7, pc}
  400ad2:	bf00      	nop
  400ad4:	00401691 	.word	0x00401691

00400ad8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400ad8:	b580      	push	{r7, lr}
  400ada:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400adc:	200b      	movs	r0, #11
  400ade:	4b05      	ldr	r3, [pc, #20]	; (400af4 <ioport_init+0x1c>)
  400ae0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400ae2:	200c      	movs	r0, #12
  400ae4:	4b03      	ldr	r3, [pc, #12]	; (400af4 <ioport_init+0x1c>)
  400ae6:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400ae8:	200d      	movs	r0, #13
  400aea:	4b02      	ldr	r3, [pc, #8]	; (400af4 <ioport_init+0x1c>)
  400aec:	4798      	blx	r3
	arch_ioport_init();
}
  400aee:	bf00      	nop
  400af0:	bd80      	pop	{r7, pc}
  400af2:	bf00      	nop
  400af4:	00400abd 	.word	0x00400abd

00400af8 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400af8:	b480      	push	{r7}
  400afa:	b08d      	sub	sp, #52	; 0x34
  400afc:	af00      	add	r7, sp, #0
  400afe:	6078      	str	r0, [r7, #4]
  400b00:	6039      	str	r1, [r7, #0]
  400b02:	687b      	ldr	r3, [r7, #4]
  400b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  400b06:	683b      	ldr	r3, [r7, #0]
  400b08:	62bb      	str	r3, [r7, #40]	; 0x28
  400b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b0c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b10:	095a      	lsrs	r2, r3, #5
  400b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400b14:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400b16:	6a3b      	ldr	r3, [r7, #32]
  400b18:	f003 031f 	and.w	r3, r3, #31
  400b1c:	2101      	movs	r1, #1
  400b1e:	fa01 f303 	lsl.w	r3, r1, r3
  400b22:	61fa      	str	r2, [r7, #28]
  400b24:	61bb      	str	r3, [r7, #24]
  400b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400b28:	617b      	str	r3, [r7, #20]
  400b2a:	69fb      	ldr	r3, [r7, #28]
  400b2c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400b2e:	693b      	ldr	r3, [r7, #16]
  400b30:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b34:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b38:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400b3a:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400b3c:	697b      	ldr	r3, [r7, #20]
  400b3e:	f003 0308 	and.w	r3, r3, #8
  400b42:	2b00      	cmp	r3, #0
  400b44:	d003      	beq.n	400b4e <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  400b46:	68fb      	ldr	r3, [r7, #12]
  400b48:	69ba      	ldr	r2, [r7, #24]
  400b4a:	665a      	str	r2, [r3, #100]	; 0x64
  400b4c:	e002      	b.n	400b54 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  400b4e:	68fb      	ldr	r3, [r7, #12]
  400b50:	69ba      	ldr	r2, [r7, #24]
  400b52:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400b54:	697b      	ldr	r3, [r7, #20]
  400b56:	f003 0310 	and.w	r3, r3, #16
  400b5a:	2b00      	cmp	r3, #0
  400b5c:	d004      	beq.n	400b68 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  400b5e:	68fb      	ldr	r3, [r7, #12]
  400b60:	69ba      	ldr	r2, [r7, #24]
  400b62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400b66:	e003      	b.n	400b70 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  400b68:	68fb      	ldr	r3, [r7, #12]
  400b6a:	69ba      	ldr	r2, [r7, #24]
  400b6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400b70:	697b      	ldr	r3, [r7, #20]
  400b72:	f003 0320 	and.w	r3, r3, #32
  400b76:	2b00      	cmp	r3, #0
  400b78:	d003      	beq.n	400b82 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  400b7a:	68fb      	ldr	r3, [r7, #12]
  400b7c:	69ba      	ldr	r2, [r7, #24]
  400b7e:	651a      	str	r2, [r3, #80]	; 0x50
  400b80:	e002      	b.n	400b88 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  400b82:	68fb      	ldr	r3, [r7, #12]
  400b84:	69ba      	ldr	r2, [r7, #24]
  400b86:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400b88:	697b      	ldr	r3, [r7, #20]
  400b8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400b8e:	2b00      	cmp	r3, #0
  400b90:	d003      	beq.n	400b9a <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  400b92:	68fb      	ldr	r3, [r7, #12]
  400b94:	69ba      	ldr	r2, [r7, #24]
  400b96:	621a      	str	r2, [r3, #32]
  400b98:	e002      	b.n	400ba0 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  400b9a:	68fb      	ldr	r3, [r7, #12]
  400b9c:	69ba      	ldr	r2, [r7, #24]
  400b9e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400ba0:	697b      	ldr	r3, [r7, #20]
  400ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400ba6:	2b00      	cmp	r3, #0
  400ba8:	d004      	beq.n	400bb4 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400baa:	68fb      	ldr	r3, [r7, #12]
  400bac:	69ba      	ldr	r2, [r7, #24]
  400bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400bb2:	e003      	b.n	400bbc <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400bb4:	68fb      	ldr	r3, [r7, #12]
  400bb6:	69ba      	ldr	r2, [r7, #24]
  400bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400bbc:	697b      	ldr	r3, [r7, #20]
  400bbe:	f003 0301 	and.w	r3, r3, #1
  400bc2:	2b00      	cmp	r3, #0
  400bc4:	d006      	beq.n	400bd4 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  400bc6:	68fb      	ldr	r3, [r7, #12]
  400bc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400bca:	69bb      	ldr	r3, [r7, #24]
  400bcc:	431a      	orrs	r2, r3
  400bce:	68fb      	ldr	r3, [r7, #12]
  400bd0:	671a      	str	r2, [r3, #112]	; 0x70
  400bd2:	e006      	b.n	400be2 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400bd8:	69bb      	ldr	r3, [r7, #24]
  400bda:	43db      	mvns	r3, r3
  400bdc:	401a      	ands	r2, r3
  400bde:	68fb      	ldr	r3, [r7, #12]
  400be0:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400be2:	697b      	ldr	r3, [r7, #20]
  400be4:	f003 0302 	and.w	r3, r3, #2
  400be8:	2b00      	cmp	r3, #0
  400bea:	d006      	beq.n	400bfa <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  400bec:	68fb      	ldr	r3, [r7, #12]
  400bee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400bf0:	69bb      	ldr	r3, [r7, #24]
  400bf2:	431a      	orrs	r2, r3
  400bf4:	68fb      	ldr	r3, [r7, #12]
  400bf6:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400bf8:	e006      	b.n	400c08 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400bfa:	68fb      	ldr	r3, [r7, #12]
  400bfc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400bfe:	69bb      	ldr	r3, [r7, #24]
  400c00:	43db      	mvns	r3, r3
  400c02:	401a      	ands	r2, r3
  400c04:	68fb      	ldr	r3, [r7, #12]
  400c06:	675a      	str	r2, [r3, #116]	; 0x74
  400c08:	bf00      	nop
  400c0a:	3734      	adds	r7, #52	; 0x34
  400c0c:	46bd      	mov	sp, r7
  400c0e:	bc80      	pop	{r7}
  400c10:	4770      	bx	lr

00400c12 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400c12:	b480      	push	{r7}
  400c14:	b08d      	sub	sp, #52	; 0x34
  400c16:	af00      	add	r7, sp, #0
  400c18:	6078      	str	r0, [r7, #4]
  400c1a:	460b      	mov	r3, r1
  400c1c:	70fb      	strb	r3, [r7, #3]
  400c1e:	687b      	ldr	r3, [r7, #4]
  400c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  400c22:	78fb      	ldrb	r3, [r7, #3]
  400c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c2a:	627b      	str	r3, [r7, #36]	; 0x24
  400c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c2e:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400c30:	6a3b      	ldr	r3, [r7, #32]
  400c32:	095b      	lsrs	r3, r3, #5
  400c34:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c36:	69fb      	ldr	r3, [r7, #28]
  400c38:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400c3c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400c40:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400c42:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400c44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400c48:	2b01      	cmp	r3, #1
  400c4a:	d109      	bne.n	400c60 <ioport_set_pin_dir+0x4e>
  400c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c4e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400c50:	697b      	ldr	r3, [r7, #20]
  400c52:	f003 031f 	and.w	r3, r3, #31
  400c56:	2201      	movs	r2, #1
  400c58:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c5a:	69bb      	ldr	r3, [r7, #24]
  400c5c:	611a      	str	r2, [r3, #16]
  400c5e:	e00c      	b.n	400c7a <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  400c60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400c64:	2b00      	cmp	r3, #0
  400c66:	d108      	bne.n	400c7a <ioport_set_pin_dir+0x68>
  400c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c6a:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400c6c:	693b      	ldr	r3, [r7, #16]
  400c6e:	f003 031f 	and.w	r3, r3, #31
  400c72:	2201      	movs	r2, #1
  400c74:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400c76:	69bb      	ldr	r3, [r7, #24]
  400c78:	615a      	str	r2, [r3, #20]
  400c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c7c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400c7e:	68fb      	ldr	r3, [r7, #12]
  400c80:	f003 031f 	and.w	r3, r3, #31
  400c84:	2201      	movs	r2, #1
  400c86:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c88:	69bb      	ldr	r3, [r7, #24]
  400c8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400c8e:	bf00      	nop
  400c90:	3734      	adds	r7, #52	; 0x34
  400c92:	46bd      	mov	sp, r7
  400c94:	bc80      	pop	{r7}
  400c96:	4770      	bx	lr

00400c98 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400c98:	b480      	push	{r7}
  400c9a:	b08b      	sub	sp, #44	; 0x2c
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	6078      	str	r0, [r7, #4]
  400ca0:	460b      	mov	r3, r1
  400ca2:	70fb      	strb	r3, [r7, #3]
  400ca4:	687b      	ldr	r3, [r7, #4]
  400ca6:	627b      	str	r3, [r7, #36]	; 0x24
  400ca8:	78fb      	ldrb	r3, [r7, #3]
  400caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400cb0:	61fb      	str	r3, [r7, #28]
  400cb2:	69fb      	ldr	r3, [r7, #28]
  400cb4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400cb6:	69bb      	ldr	r3, [r7, #24]
  400cb8:	095b      	lsrs	r3, r3, #5
  400cba:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400cbc:	697b      	ldr	r3, [r7, #20]
  400cbe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400cc2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400cc6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400cc8:	613b      	str	r3, [r7, #16]

	if (level) {
  400cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400cce:	2b00      	cmp	r3, #0
  400cd0:	d009      	beq.n	400ce6 <ioport_set_pin_level+0x4e>
  400cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400cd4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400cd6:	68fb      	ldr	r3, [r7, #12]
  400cd8:	f003 031f 	and.w	r3, r3, #31
  400cdc:	2201      	movs	r2, #1
  400cde:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ce0:	693b      	ldr	r3, [r7, #16]
  400ce2:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400ce4:	e008      	b.n	400cf8 <ioport_set_pin_level+0x60>
  400ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ce8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400cea:	68bb      	ldr	r3, [r7, #8]
  400cec:	f003 031f 	and.w	r3, r3, #31
  400cf0:	2201      	movs	r2, #1
  400cf2:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400cf4:	693b      	ldr	r3, [r7, #16]
  400cf6:	635a      	str	r2, [r3, #52]	; 0x34
  400cf8:	bf00      	nop
  400cfa:	372c      	adds	r7, #44	; 0x2c
  400cfc:	46bd      	mov	sp, r7
  400cfe:	bc80      	pop	{r7}
  400d00:	4770      	bx	lr
	...

00400d04 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400d04:	b580      	push	{r7, lr}
  400d06:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  400d08:	4824      	ldr	r0, [pc, #144]	; (400d9c <board_init+0x98>)
  400d0a:	4b25      	ldr	r3, [pc, #148]	; (400da0 <board_init+0x9c>)
  400d0c:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  400d0e:	4b25      	ldr	r3, [pc, #148]	; (400da4 <board_init+0xa0>)
  400d10:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  400d12:	2101      	movs	r1, #1
  400d14:	2057      	movs	r0, #87	; 0x57
  400d16:	4b24      	ldr	r3, [pc, #144]	; (400da8 <board_init+0xa4>)
  400d18:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  400d1a:	2101      	movs	r1, #1
  400d1c:	2057      	movs	r0, #87	; 0x57
  400d1e:	4b23      	ldr	r3, [pc, #140]	; (400dac <board_init+0xa8>)
  400d20:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  400d22:	2100      	movs	r1, #0
  400d24:	2002      	movs	r0, #2
  400d26:	4b21      	ldr	r3, [pc, #132]	; (400dac <board_init+0xa8>)
  400d28:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  400d2a:	2108      	movs	r1, #8
  400d2c:	2002      	movs	r0, #2
  400d2e:	4b20      	ldr	r3, [pc, #128]	; (400db0 <board_init+0xac>)
  400d30:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  400d32:	2101      	movs	r1, #1
  400d34:	2054      	movs	r0, #84	; 0x54
  400d36:	4b1c      	ldr	r3, [pc, #112]	; (400da8 <board_init+0xa4>)
  400d38:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  400d3a:	2101      	movs	r1, #1
  400d3c:	2054      	movs	r0, #84	; 0x54
  400d3e:	4b1b      	ldr	r3, [pc, #108]	; (400dac <board_init+0xa8>)
  400d40:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  400d42:	2101      	movs	r1, #1
  400d44:	2010      	movs	r0, #16
  400d46:	4b18      	ldr	r3, [pc, #96]	; (400da8 <board_init+0xa4>)
  400d48:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  400d4a:	2101      	movs	r1, #1
  400d4c:	2010      	movs	r0, #16
  400d4e:	4b17      	ldr	r3, [pc, #92]	; (400dac <board_init+0xa8>)
  400d50:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  400d52:	2101      	movs	r1, #1
  400d54:	2056      	movs	r0, #86	; 0x56
  400d56:	4b14      	ldr	r3, [pc, #80]	; (400da8 <board_init+0xa4>)
  400d58:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  400d5a:	2101      	movs	r1, #1
  400d5c:	2056      	movs	r0, #86	; 0x56
  400d5e:	4b13      	ldr	r3, [pc, #76]	; (400dac <board_init+0xa8>)
  400d60:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d66:	210c      	movs	r1, #12
  400d68:	4812      	ldr	r0, [pc, #72]	; (400db4 <board_init+0xb0>)
  400d6a:	4b13      	ldr	r3, [pc, #76]	; (400db8 <board_init+0xb4>)
  400d6c:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400d6e:	4913      	ldr	r1, [pc, #76]	; (400dbc <board_init+0xb8>)
  400d70:	200c      	movs	r0, #12
  400d72:	4b13      	ldr	r3, [pc, #76]	; (400dc0 <board_init+0xbc>)
  400d74:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400d76:	4911      	ldr	r1, [pc, #68]	; (400dbc <board_init+0xb8>)
  400d78:	200d      	movs	r0, #13
  400d7a:	4b11      	ldr	r3, [pc, #68]	; (400dc0 <board_init+0xbc>)
  400d7c:	4798      	blx	r3
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400d7e:	490f      	ldr	r1, [pc, #60]	; (400dbc <board_init+0xb8>)
  400d80:	200e      	movs	r0, #14
  400d82:	4b0f      	ldr	r3, [pc, #60]	; (400dc0 <board_init+0xbc>)
  400d84:	4798      	blx	r3
	 * Depending on the application requirements, the default PIN may not be available.
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */
#ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400d86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d8a:	200b      	movs	r0, #11
  400d8c:	4b0c      	ldr	r3, [pc, #48]	; (400dc0 <board_init+0xbc>)
  400d8e:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  400d90:	2108      	movs	r1, #8
  400d92:	2002      	movs	r0, #2
  400d94:	4b06      	ldr	r3, [pc, #24]	; (400db0 <board_init+0xac>)
  400d96:	4798      	blx	r3

#endif



}
  400d98:	bf00      	nop
  400d9a:	bd80      	pop	{r7, pc}
  400d9c:	400e1450 	.word	0x400e1450
  400da0:	00401acd 	.word	0x00401acd
  400da4:	00400ad9 	.word	0x00400ad9
  400da8:	00400c99 	.word	0x00400c99
  400dac:	00400c13 	.word	0x00400c13
  400db0:	00400af9 	.word	0x00400af9
  400db4:	400e1000 	.word	0x400e1000
  400db8:	004011d9 	.word	0x004011d9
  400dbc:	08000001 	.word	0x08000001
  400dc0:	00401029 	.word	0x00401029

00400dc4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400dc4:	b480      	push	{r7}
  400dc6:	b085      	sub	sp, #20
  400dc8:	af00      	add	r7, sp, #0
  400dca:	60f8      	str	r0, [r7, #12]
  400dcc:	60b9      	str	r1, [r7, #8]
  400dce:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400dd0:	687b      	ldr	r3, [r7, #4]
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d003      	beq.n	400dde <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400dd6:	68fb      	ldr	r3, [r7, #12]
  400dd8:	68ba      	ldr	r2, [r7, #8]
  400dda:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400ddc:	e002      	b.n	400de4 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400dde:	68fb      	ldr	r3, [r7, #12]
  400de0:	68ba      	ldr	r2, [r7, #8]
  400de2:	661a      	str	r2, [r3, #96]	; 0x60
}
  400de4:	bf00      	nop
  400de6:	3714      	adds	r7, #20
  400de8:	46bd      	mov	sp, r7
  400dea:	bc80      	pop	{r7}
  400dec:	4770      	bx	lr

00400dee <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400dee:	b480      	push	{r7}
  400df0:	b087      	sub	sp, #28
  400df2:	af00      	add	r7, sp, #0
  400df4:	60f8      	str	r0, [r7, #12]
  400df6:	60b9      	str	r1, [r7, #8]
  400df8:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400dfa:	68fb      	ldr	r3, [r7, #12]
  400dfc:	687a      	ldr	r2, [r7, #4]
  400dfe:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e00:	68bb      	ldr	r3, [r7, #8]
  400e02:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e06:	d04a      	beq.n	400e9e <pio_set_peripheral+0xb0>
  400e08:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e0c:	d808      	bhi.n	400e20 <pio_set_peripheral+0x32>
  400e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400e12:	d016      	beq.n	400e42 <pio_set_peripheral+0x54>
  400e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400e18:	d02c      	beq.n	400e74 <pio_set_peripheral+0x86>
  400e1a:	2b00      	cmp	r3, #0
  400e1c:	d069      	beq.n	400ef2 <pio_set_peripheral+0x104>
  400e1e:	e064      	b.n	400eea <pio_set_peripheral+0xfc>
  400e20:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e24:	d065      	beq.n	400ef2 <pio_set_peripheral+0x104>
  400e26:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e2a:	d803      	bhi.n	400e34 <pio_set_peripheral+0x46>
  400e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400e30:	d04a      	beq.n	400ec8 <pio_set_peripheral+0xda>
  400e32:	e05a      	b.n	400eea <pio_set_peripheral+0xfc>
  400e34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400e38:	d05b      	beq.n	400ef2 <pio_set_peripheral+0x104>
  400e3a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400e3e:	d058      	beq.n	400ef2 <pio_set_peripheral+0x104>
  400e40:	e053      	b.n	400eea <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e42:	68fb      	ldr	r3, [r7, #12]
  400e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e46:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400e48:	68fb      	ldr	r3, [r7, #12]
  400e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e4c:	687b      	ldr	r3, [r7, #4]
  400e4e:	43d9      	mvns	r1, r3
  400e50:	697b      	ldr	r3, [r7, #20]
  400e52:	400b      	ands	r3, r1
  400e54:	401a      	ands	r2, r3
  400e56:	68fb      	ldr	r3, [r7, #12]
  400e58:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e5a:	68fb      	ldr	r3, [r7, #12]
  400e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400e5e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e60:	68fb      	ldr	r3, [r7, #12]
  400e62:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e64:	687b      	ldr	r3, [r7, #4]
  400e66:	43d9      	mvns	r1, r3
  400e68:	697b      	ldr	r3, [r7, #20]
  400e6a:	400b      	ands	r3, r1
  400e6c:	401a      	ands	r2, r3
  400e6e:	68fb      	ldr	r3, [r7, #12]
  400e70:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e72:	e03a      	b.n	400eea <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e74:	68fb      	ldr	r3, [r7, #12]
  400e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e78:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e7a:	687a      	ldr	r2, [r7, #4]
  400e7c:	697b      	ldr	r3, [r7, #20]
  400e7e:	431a      	orrs	r2, r3
  400e80:	68fb      	ldr	r3, [r7, #12]
  400e82:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e84:	68fb      	ldr	r3, [r7, #12]
  400e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400e88:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400e8a:	68fb      	ldr	r3, [r7, #12]
  400e8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e8e:	687b      	ldr	r3, [r7, #4]
  400e90:	43d9      	mvns	r1, r3
  400e92:	697b      	ldr	r3, [r7, #20]
  400e94:	400b      	ands	r3, r1
  400e96:	401a      	ands	r2, r3
  400e98:	68fb      	ldr	r3, [r7, #12]
  400e9a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400e9c:	e025      	b.n	400eea <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e9e:	68fb      	ldr	r3, [r7, #12]
  400ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400ea2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ea4:	68fb      	ldr	r3, [r7, #12]
  400ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ea8:	687b      	ldr	r3, [r7, #4]
  400eaa:	43d9      	mvns	r1, r3
  400eac:	697b      	ldr	r3, [r7, #20]
  400eae:	400b      	ands	r3, r1
  400eb0:	401a      	ands	r2, r3
  400eb2:	68fb      	ldr	r3, [r7, #12]
  400eb4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400eb6:	68fb      	ldr	r3, [r7, #12]
  400eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400eba:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ebc:	687a      	ldr	r2, [r7, #4]
  400ebe:	697b      	ldr	r3, [r7, #20]
  400ec0:	431a      	orrs	r2, r3
  400ec2:	68fb      	ldr	r3, [r7, #12]
  400ec4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ec6:	e010      	b.n	400eea <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ec8:	68fb      	ldr	r3, [r7, #12]
  400eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400ecc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ece:	687a      	ldr	r2, [r7, #4]
  400ed0:	697b      	ldr	r3, [r7, #20]
  400ed2:	431a      	orrs	r2, r3
  400ed4:	68fb      	ldr	r3, [r7, #12]
  400ed6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ed8:	68fb      	ldr	r3, [r7, #12]
  400eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400edc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ede:	687a      	ldr	r2, [r7, #4]
  400ee0:	697b      	ldr	r3, [r7, #20]
  400ee2:	431a      	orrs	r2, r3
  400ee4:	68fb      	ldr	r3, [r7, #12]
  400ee6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ee8:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400eea:	68fb      	ldr	r3, [r7, #12]
  400eec:	687a      	ldr	r2, [r7, #4]
  400eee:	605a      	str	r2, [r3, #4]
  400ef0:	e000      	b.n	400ef4 <pio_set_peripheral+0x106>
		return;
  400ef2:	bf00      	nop
}
  400ef4:	371c      	adds	r7, #28
  400ef6:	46bd      	mov	sp, r7
  400ef8:	bc80      	pop	{r7}
  400efa:	4770      	bx	lr

00400efc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	b084      	sub	sp, #16
  400f00:	af00      	add	r7, sp, #0
  400f02:	60f8      	str	r0, [r7, #12]
  400f04:	60b9      	str	r1, [r7, #8]
  400f06:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400f08:	68b9      	ldr	r1, [r7, #8]
  400f0a:	68f8      	ldr	r0, [r7, #12]
  400f0c:	4b19      	ldr	r3, [pc, #100]	; (400f74 <pio_set_input+0x78>)
  400f0e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400f10:	687b      	ldr	r3, [r7, #4]
  400f12:	f003 0301 	and.w	r3, r3, #1
  400f16:	461a      	mov	r2, r3
  400f18:	68b9      	ldr	r1, [r7, #8]
  400f1a:	68f8      	ldr	r0, [r7, #12]
  400f1c:	4b16      	ldr	r3, [pc, #88]	; (400f78 <pio_set_input+0x7c>)
  400f1e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400f20:	687b      	ldr	r3, [r7, #4]
  400f22:	f003 030a 	and.w	r3, r3, #10
  400f26:	2b00      	cmp	r3, #0
  400f28:	d003      	beq.n	400f32 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400f2a:	68fb      	ldr	r3, [r7, #12]
  400f2c:	68ba      	ldr	r2, [r7, #8]
  400f2e:	621a      	str	r2, [r3, #32]
  400f30:	e002      	b.n	400f38 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400f32:	68fb      	ldr	r3, [r7, #12]
  400f34:	68ba      	ldr	r2, [r7, #8]
  400f36:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400f38:	687b      	ldr	r3, [r7, #4]
  400f3a:	f003 0302 	and.w	r3, r3, #2
  400f3e:	2b00      	cmp	r3, #0
  400f40:	d004      	beq.n	400f4c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400f42:	68fb      	ldr	r3, [r7, #12]
  400f44:	68ba      	ldr	r2, [r7, #8]
  400f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400f4a:	e008      	b.n	400f5e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400f4c:	687b      	ldr	r3, [r7, #4]
  400f4e:	f003 0308 	and.w	r3, r3, #8
  400f52:	2b00      	cmp	r3, #0
  400f54:	d003      	beq.n	400f5e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400f56:	68fb      	ldr	r3, [r7, #12]
  400f58:	68ba      	ldr	r2, [r7, #8]
  400f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400f5e:	68fb      	ldr	r3, [r7, #12]
  400f60:	68ba      	ldr	r2, [r7, #8]
  400f62:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400f64:	68fb      	ldr	r3, [r7, #12]
  400f66:	68ba      	ldr	r2, [r7, #8]
  400f68:	601a      	str	r2, [r3, #0]
}
  400f6a:	bf00      	nop
  400f6c:	3710      	adds	r7, #16
  400f6e:	46bd      	mov	sp, r7
  400f70:	bd80      	pop	{r7, pc}
  400f72:	bf00      	nop
  400f74:	00400fe1 	.word	0x00400fe1
  400f78:	00400dc5 	.word	0x00400dc5

00400f7c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400f7c:	b580      	push	{r7, lr}
  400f7e:	b084      	sub	sp, #16
  400f80:	af00      	add	r7, sp, #0
  400f82:	60f8      	str	r0, [r7, #12]
  400f84:	60b9      	str	r1, [r7, #8]
  400f86:	607a      	str	r2, [r7, #4]
  400f88:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400f8a:	68b9      	ldr	r1, [r7, #8]
  400f8c:	68f8      	ldr	r0, [r7, #12]
  400f8e:	4b12      	ldr	r3, [pc, #72]	; (400fd8 <pio_set_output+0x5c>)
  400f90:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400f92:	69ba      	ldr	r2, [r7, #24]
  400f94:	68b9      	ldr	r1, [r7, #8]
  400f96:	68f8      	ldr	r0, [r7, #12]
  400f98:	4b10      	ldr	r3, [pc, #64]	; (400fdc <pio_set_output+0x60>)
  400f9a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400f9c:	683b      	ldr	r3, [r7, #0]
  400f9e:	2b00      	cmp	r3, #0
  400fa0:	d003      	beq.n	400faa <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400fa2:	68fb      	ldr	r3, [r7, #12]
  400fa4:	68ba      	ldr	r2, [r7, #8]
  400fa6:	651a      	str	r2, [r3, #80]	; 0x50
  400fa8:	e002      	b.n	400fb0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400faa:	68fb      	ldr	r3, [r7, #12]
  400fac:	68ba      	ldr	r2, [r7, #8]
  400fae:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400fb0:	687b      	ldr	r3, [r7, #4]
  400fb2:	2b00      	cmp	r3, #0
  400fb4:	d003      	beq.n	400fbe <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400fb6:	68fb      	ldr	r3, [r7, #12]
  400fb8:	68ba      	ldr	r2, [r7, #8]
  400fba:	631a      	str	r2, [r3, #48]	; 0x30
  400fbc:	e002      	b.n	400fc4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400fbe:	68fb      	ldr	r3, [r7, #12]
  400fc0:	68ba      	ldr	r2, [r7, #8]
  400fc2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400fc4:	68fb      	ldr	r3, [r7, #12]
  400fc6:	68ba      	ldr	r2, [r7, #8]
  400fc8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400fca:	68fb      	ldr	r3, [r7, #12]
  400fcc:	68ba      	ldr	r2, [r7, #8]
  400fce:	601a      	str	r2, [r3, #0]
}
  400fd0:	bf00      	nop
  400fd2:	3710      	adds	r7, #16
  400fd4:	46bd      	mov	sp, r7
  400fd6:	bd80      	pop	{r7, pc}
  400fd8:	00400fe1 	.word	0x00400fe1
  400fdc:	00400dc5 	.word	0x00400dc5

00400fe0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400fe0:	b480      	push	{r7}
  400fe2:	b083      	sub	sp, #12
  400fe4:	af00      	add	r7, sp, #0
  400fe6:	6078      	str	r0, [r7, #4]
  400fe8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400fea:	687b      	ldr	r3, [r7, #4]
  400fec:	683a      	ldr	r2, [r7, #0]
  400fee:	645a      	str	r2, [r3, #68]	; 0x44
}
  400ff0:	bf00      	nop
  400ff2:	370c      	adds	r7, #12
  400ff4:	46bd      	mov	sp, r7
  400ff6:	bc80      	pop	{r7}
  400ff8:	4770      	bx	lr

00400ffa <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400ffa:	b480      	push	{r7}
  400ffc:	b083      	sub	sp, #12
  400ffe:	af00      	add	r7, sp, #0
  401000:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401002:	687b      	ldr	r3, [r7, #4]
  401004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401006:	4618      	mov	r0, r3
  401008:	370c      	adds	r7, #12
  40100a:	46bd      	mov	sp, r7
  40100c:	bc80      	pop	{r7}
  40100e:	4770      	bx	lr

00401010 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401010:	b480      	push	{r7}
  401012:	b083      	sub	sp, #12
  401014:	af00      	add	r7, sp, #0
  401016:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401018:	687b      	ldr	r3, [r7, #4]
  40101a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40101c:	4618      	mov	r0, r3
  40101e:	370c      	adds	r7, #12
  401020:	46bd      	mov	sp, r7
  401022:	bc80      	pop	{r7}
  401024:	4770      	bx	lr
	...

00401028 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401028:	b590      	push	{r4, r7, lr}
  40102a:	b087      	sub	sp, #28
  40102c:	af02      	add	r7, sp, #8
  40102e:	6078      	str	r0, [r7, #4]
  401030:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401032:	6878      	ldr	r0, [r7, #4]
  401034:	4b63      	ldr	r3, [pc, #396]	; (4011c4 <pio_configure_pin+0x19c>)
  401036:	4798      	blx	r3
  401038:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40103a:	683b      	ldr	r3, [r7, #0]
  40103c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401044:	d067      	beq.n	401116 <pio_configure_pin+0xee>
  401046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40104a:	d809      	bhi.n	401060 <pio_configure_pin+0x38>
  40104c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401050:	d02b      	beq.n	4010aa <pio_configure_pin+0x82>
  401052:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401056:	d043      	beq.n	4010e0 <pio_configure_pin+0xb8>
  401058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40105c:	d00a      	beq.n	401074 <pio_configure_pin+0x4c>
  40105e:	e0a9      	b.n	4011b4 <pio_configure_pin+0x18c>
  401060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401064:	d07e      	beq.n	401164 <pio_configure_pin+0x13c>
  401066:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40106a:	d07b      	beq.n	401164 <pio_configure_pin+0x13c>
  40106c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401070:	d06c      	beq.n	40114c <pio_configure_pin+0x124>
  401072:	e09f      	b.n	4011b4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401074:	687b      	ldr	r3, [r7, #4]
  401076:	f003 031f 	and.w	r3, r3, #31
  40107a:	2201      	movs	r2, #1
  40107c:	fa02 f303 	lsl.w	r3, r2, r3
  401080:	461a      	mov	r2, r3
  401082:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401086:	68f8      	ldr	r0, [r7, #12]
  401088:	4b4f      	ldr	r3, [pc, #316]	; (4011c8 <pio_configure_pin+0x1a0>)
  40108a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40108c:	687b      	ldr	r3, [r7, #4]
  40108e:	f003 031f 	and.w	r3, r3, #31
  401092:	2201      	movs	r2, #1
  401094:	fa02 f303 	lsl.w	r3, r2, r3
  401098:	4619      	mov	r1, r3
  40109a:	683b      	ldr	r3, [r7, #0]
  40109c:	f003 0301 	and.w	r3, r3, #1
  4010a0:	461a      	mov	r2, r3
  4010a2:	68f8      	ldr	r0, [r7, #12]
  4010a4:	4b49      	ldr	r3, [pc, #292]	; (4011cc <pio_configure_pin+0x1a4>)
  4010a6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010a8:	e086      	b.n	4011b8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4010aa:	687b      	ldr	r3, [r7, #4]
  4010ac:	f003 031f 	and.w	r3, r3, #31
  4010b0:	2201      	movs	r2, #1
  4010b2:	fa02 f303 	lsl.w	r3, r2, r3
  4010b6:	461a      	mov	r2, r3
  4010b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4010bc:	68f8      	ldr	r0, [r7, #12]
  4010be:	4b42      	ldr	r3, [pc, #264]	; (4011c8 <pio_configure_pin+0x1a0>)
  4010c0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	f003 031f 	and.w	r3, r3, #31
  4010c8:	2201      	movs	r2, #1
  4010ca:	fa02 f303 	lsl.w	r3, r2, r3
  4010ce:	4619      	mov	r1, r3
  4010d0:	683b      	ldr	r3, [r7, #0]
  4010d2:	f003 0301 	and.w	r3, r3, #1
  4010d6:	461a      	mov	r2, r3
  4010d8:	68f8      	ldr	r0, [r7, #12]
  4010da:	4b3c      	ldr	r3, [pc, #240]	; (4011cc <pio_configure_pin+0x1a4>)
  4010dc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010de:	e06b      	b.n	4011b8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	f003 031f 	and.w	r3, r3, #31
  4010e6:	2201      	movs	r2, #1
  4010e8:	fa02 f303 	lsl.w	r3, r2, r3
  4010ec:	461a      	mov	r2, r3
  4010ee:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4010f2:	68f8      	ldr	r0, [r7, #12]
  4010f4:	4b34      	ldr	r3, [pc, #208]	; (4011c8 <pio_configure_pin+0x1a0>)
  4010f6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4010f8:	687b      	ldr	r3, [r7, #4]
  4010fa:	f003 031f 	and.w	r3, r3, #31
  4010fe:	2201      	movs	r2, #1
  401100:	fa02 f303 	lsl.w	r3, r2, r3
  401104:	4619      	mov	r1, r3
  401106:	683b      	ldr	r3, [r7, #0]
  401108:	f003 0301 	and.w	r3, r3, #1
  40110c:	461a      	mov	r2, r3
  40110e:	68f8      	ldr	r0, [r7, #12]
  401110:	4b2e      	ldr	r3, [pc, #184]	; (4011cc <pio_configure_pin+0x1a4>)
  401112:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401114:	e050      	b.n	4011b8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401116:	687b      	ldr	r3, [r7, #4]
  401118:	f003 031f 	and.w	r3, r3, #31
  40111c:	2201      	movs	r2, #1
  40111e:	fa02 f303 	lsl.w	r3, r2, r3
  401122:	461a      	mov	r2, r3
  401124:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401128:	68f8      	ldr	r0, [r7, #12]
  40112a:	4b27      	ldr	r3, [pc, #156]	; (4011c8 <pio_configure_pin+0x1a0>)
  40112c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40112e:	687b      	ldr	r3, [r7, #4]
  401130:	f003 031f 	and.w	r3, r3, #31
  401134:	2201      	movs	r2, #1
  401136:	fa02 f303 	lsl.w	r3, r2, r3
  40113a:	4619      	mov	r1, r3
  40113c:	683b      	ldr	r3, [r7, #0]
  40113e:	f003 0301 	and.w	r3, r3, #1
  401142:	461a      	mov	r2, r3
  401144:	68f8      	ldr	r0, [r7, #12]
  401146:	4b21      	ldr	r3, [pc, #132]	; (4011cc <pio_configure_pin+0x1a4>)
  401148:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40114a:	e035      	b.n	4011b8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40114c:	687b      	ldr	r3, [r7, #4]
  40114e:	f003 031f 	and.w	r3, r3, #31
  401152:	2201      	movs	r2, #1
  401154:	fa02 f303 	lsl.w	r3, r2, r3
  401158:	683a      	ldr	r2, [r7, #0]
  40115a:	4619      	mov	r1, r3
  40115c:	68f8      	ldr	r0, [r7, #12]
  40115e:	4b1c      	ldr	r3, [pc, #112]	; (4011d0 <pio_configure_pin+0x1a8>)
  401160:	4798      	blx	r3
		break;
  401162:	e029      	b.n	4011b8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401164:	687b      	ldr	r3, [r7, #4]
  401166:	f003 031f 	and.w	r3, r3, #31
  40116a:	2201      	movs	r2, #1
  40116c:	fa02 f303 	lsl.w	r3, r2, r3
  401170:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401172:	683b      	ldr	r3, [r7, #0]
  401174:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401178:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40117c:	bf0c      	ite	eq
  40117e:	2301      	moveq	r3, #1
  401180:	2300      	movne	r3, #0
  401182:	b2db      	uxtb	r3, r3
  401184:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401186:	683b      	ldr	r3, [r7, #0]
  401188:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40118c:	2b00      	cmp	r3, #0
  40118e:	bf14      	ite	ne
  401190:	2301      	movne	r3, #1
  401192:	2300      	moveq	r3, #0
  401194:	b2db      	uxtb	r3, r3
  401196:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401198:	683b      	ldr	r3, [r7, #0]
  40119a:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40119e:	2b00      	cmp	r3, #0
  4011a0:	bf14      	ite	ne
  4011a2:	2301      	movne	r3, #1
  4011a4:	2300      	moveq	r3, #0
  4011a6:	b2db      	uxtb	r3, r3
  4011a8:	9300      	str	r3, [sp, #0]
  4011aa:	4603      	mov	r3, r0
  4011ac:	68f8      	ldr	r0, [r7, #12]
  4011ae:	4c09      	ldr	r4, [pc, #36]	; (4011d4 <pio_configure_pin+0x1ac>)
  4011b0:	47a0      	blx	r4
		break;
  4011b2:	e001      	b.n	4011b8 <pio_configure_pin+0x190>

	default:
		return 0;
  4011b4:	2300      	movs	r3, #0
  4011b6:	e000      	b.n	4011ba <pio_configure_pin+0x192>
	}

	return 1;
  4011b8:	2301      	movs	r3, #1
}
  4011ba:	4618      	mov	r0, r3
  4011bc:	3714      	adds	r7, #20
  4011be:	46bd      	mov	sp, r7
  4011c0:	bd90      	pop	{r4, r7, pc}
  4011c2:	bf00      	nop
  4011c4:	00401305 	.word	0x00401305
  4011c8:	00400def 	.word	0x00400def
  4011cc:	00400dc5 	.word	0x00400dc5
  4011d0:	00400efd 	.word	0x00400efd
  4011d4:	00400f7d 	.word	0x00400f7d

004011d8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4011d8:	b590      	push	{r4, r7, lr}
  4011da:	b087      	sub	sp, #28
  4011dc:	af02      	add	r7, sp, #8
  4011de:	60f8      	str	r0, [r7, #12]
  4011e0:	60b9      	str	r1, [r7, #8]
  4011e2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4011e4:	687b      	ldr	r3, [r7, #4]
  4011e6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4011ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4011ee:	d043      	beq.n	401278 <pio_configure_pin_group+0xa0>
  4011f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4011f4:	d809      	bhi.n	40120a <pio_configure_pin_group+0x32>
  4011f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4011fa:	d01f      	beq.n	40123c <pio_configure_pin_group+0x64>
  4011fc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401200:	d02b      	beq.n	40125a <pio_configure_pin_group+0x82>
  401202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401206:	d00a      	beq.n	40121e <pio_configure_pin_group+0x46>
  401208:	e06d      	b.n	4012e6 <pio_configure_pin_group+0x10e>
  40120a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40120e:	d048      	beq.n	4012a2 <pio_configure_pin_group+0xca>
  401210:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401214:	d045      	beq.n	4012a2 <pio_configure_pin_group+0xca>
  401216:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40121a:	d03c      	beq.n	401296 <pio_configure_pin_group+0xbe>
  40121c:	e063      	b.n	4012e6 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40121e:	68ba      	ldr	r2, [r7, #8]
  401220:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401224:	68f8      	ldr	r0, [r7, #12]
  401226:	4b33      	ldr	r3, [pc, #204]	; (4012f4 <pio_configure_pin_group+0x11c>)
  401228:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40122a:	687b      	ldr	r3, [r7, #4]
  40122c:	f003 0301 	and.w	r3, r3, #1
  401230:	461a      	mov	r2, r3
  401232:	68b9      	ldr	r1, [r7, #8]
  401234:	68f8      	ldr	r0, [r7, #12]
  401236:	4b30      	ldr	r3, [pc, #192]	; (4012f8 <pio_configure_pin_group+0x120>)
  401238:	4798      	blx	r3
		break;
  40123a:	e056      	b.n	4012ea <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40123c:	68ba      	ldr	r2, [r7, #8]
  40123e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401242:	68f8      	ldr	r0, [r7, #12]
  401244:	4b2b      	ldr	r3, [pc, #172]	; (4012f4 <pio_configure_pin_group+0x11c>)
  401246:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401248:	687b      	ldr	r3, [r7, #4]
  40124a:	f003 0301 	and.w	r3, r3, #1
  40124e:	461a      	mov	r2, r3
  401250:	68b9      	ldr	r1, [r7, #8]
  401252:	68f8      	ldr	r0, [r7, #12]
  401254:	4b28      	ldr	r3, [pc, #160]	; (4012f8 <pio_configure_pin_group+0x120>)
  401256:	4798      	blx	r3
		break;
  401258:	e047      	b.n	4012ea <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40125a:	68ba      	ldr	r2, [r7, #8]
  40125c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401260:	68f8      	ldr	r0, [r7, #12]
  401262:	4b24      	ldr	r3, [pc, #144]	; (4012f4 <pio_configure_pin_group+0x11c>)
  401264:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401266:	687b      	ldr	r3, [r7, #4]
  401268:	f003 0301 	and.w	r3, r3, #1
  40126c:	461a      	mov	r2, r3
  40126e:	68b9      	ldr	r1, [r7, #8]
  401270:	68f8      	ldr	r0, [r7, #12]
  401272:	4b21      	ldr	r3, [pc, #132]	; (4012f8 <pio_configure_pin_group+0x120>)
  401274:	4798      	blx	r3
		break;
  401276:	e038      	b.n	4012ea <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401278:	68ba      	ldr	r2, [r7, #8]
  40127a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40127e:	68f8      	ldr	r0, [r7, #12]
  401280:	4b1c      	ldr	r3, [pc, #112]	; (4012f4 <pio_configure_pin_group+0x11c>)
  401282:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401284:	687b      	ldr	r3, [r7, #4]
  401286:	f003 0301 	and.w	r3, r3, #1
  40128a:	461a      	mov	r2, r3
  40128c:	68b9      	ldr	r1, [r7, #8]
  40128e:	68f8      	ldr	r0, [r7, #12]
  401290:	4b19      	ldr	r3, [pc, #100]	; (4012f8 <pio_configure_pin_group+0x120>)
  401292:	4798      	blx	r3
		break;
  401294:	e029      	b.n	4012ea <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401296:	687a      	ldr	r2, [r7, #4]
  401298:	68b9      	ldr	r1, [r7, #8]
  40129a:	68f8      	ldr	r0, [r7, #12]
  40129c:	4b17      	ldr	r3, [pc, #92]	; (4012fc <pio_configure_pin_group+0x124>)
  40129e:	4798      	blx	r3
		break;
  4012a0:	e023      	b.n	4012ea <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4012a2:	687b      	ldr	r3, [r7, #4]
  4012a4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  4012a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4012ac:	bf0c      	ite	eq
  4012ae:	2301      	moveq	r3, #1
  4012b0:	2300      	movne	r3, #0
  4012b2:	b2db      	uxtb	r3, r3
  4012b4:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4012b6:	687b      	ldr	r3, [r7, #4]
  4012b8:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
  4012bc:	2b00      	cmp	r3, #0
  4012be:	bf14      	ite	ne
  4012c0:	2301      	movne	r3, #1
  4012c2:	2300      	moveq	r3, #0
  4012c4:	b2db      	uxtb	r3, r3
  4012c6:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
  4012ce:	2b00      	cmp	r3, #0
  4012d0:	bf14      	ite	ne
  4012d2:	2301      	movne	r3, #1
  4012d4:	2300      	moveq	r3, #0
  4012d6:	b2db      	uxtb	r3, r3
  4012d8:	9300      	str	r3, [sp, #0]
  4012da:	460b      	mov	r3, r1
  4012dc:	68b9      	ldr	r1, [r7, #8]
  4012de:	68f8      	ldr	r0, [r7, #12]
  4012e0:	4c07      	ldr	r4, [pc, #28]	; (401300 <pio_configure_pin_group+0x128>)
  4012e2:	47a0      	blx	r4
		break;
  4012e4:	e001      	b.n	4012ea <pio_configure_pin_group+0x112>

	default:
		return 0;
  4012e6:	2300      	movs	r3, #0
  4012e8:	e000      	b.n	4012ec <pio_configure_pin_group+0x114>
	}

	return 1;
  4012ea:	2301      	movs	r3, #1
}
  4012ec:	4618      	mov	r0, r3
  4012ee:	3714      	adds	r7, #20
  4012f0:	46bd      	mov	sp, r7
  4012f2:	bd90      	pop	{r4, r7, pc}
  4012f4:	00400def 	.word	0x00400def
  4012f8:	00400dc5 	.word	0x00400dc5
  4012fc:	00400efd 	.word	0x00400efd
  401300:	00400f7d 	.word	0x00400f7d

00401304 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401304:	b480      	push	{r7}
  401306:	b085      	sub	sp, #20
  401308:	af00      	add	r7, sp, #0
  40130a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40130c:	687b      	ldr	r3, [r7, #4]
  40130e:	095b      	lsrs	r3, r3, #5
  401310:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401314:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401318:	025b      	lsls	r3, r3, #9
  40131a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40131c:	68fb      	ldr	r3, [r7, #12]
}
  40131e:	4618      	mov	r0, r3
  401320:	3714      	adds	r7, #20
  401322:	46bd      	mov	sp, r7
  401324:	bc80      	pop	{r7}
  401326:	4770      	bx	lr

00401328 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401328:	b580      	push	{r7, lr}
  40132a:	b084      	sub	sp, #16
  40132c:	af00      	add	r7, sp, #0
  40132e:	6078      	str	r0, [r7, #4]
  401330:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401332:	6878      	ldr	r0, [r7, #4]
  401334:	4b2c      	ldr	r3, [pc, #176]	; (4013e8 <pio_handler_process+0xc0>)
  401336:	4798      	blx	r3
  401338:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40133a:	6878      	ldr	r0, [r7, #4]
  40133c:	4b2b      	ldr	r3, [pc, #172]	; (4013ec <pio_handler_process+0xc4>)
  40133e:	4798      	blx	r3
  401340:	4602      	mov	r2, r0
  401342:	68fb      	ldr	r3, [r7, #12]
  401344:	4013      	ands	r3, r2
  401346:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401348:	68fb      	ldr	r3, [r7, #12]
  40134a:	2b00      	cmp	r3, #0
  40134c:	d03c      	beq.n	4013c8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40134e:	2300      	movs	r3, #0
  401350:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401352:	e034      	b.n	4013be <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401354:	4a26      	ldr	r2, [pc, #152]	; (4013f0 <pio_handler_process+0xc8>)
  401356:	68bb      	ldr	r3, [r7, #8]
  401358:	011b      	lsls	r3, r3, #4
  40135a:	4413      	add	r3, r2
  40135c:	681a      	ldr	r2, [r3, #0]
  40135e:	683b      	ldr	r3, [r7, #0]
  401360:	429a      	cmp	r2, r3
  401362:	d126      	bne.n	4013b2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401364:	4a22      	ldr	r2, [pc, #136]	; (4013f0 <pio_handler_process+0xc8>)
  401366:	68bb      	ldr	r3, [r7, #8]
  401368:	011b      	lsls	r3, r3, #4
  40136a:	4413      	add	r3, r2
  40136c:	3304      	adds	r3, #4
  40136e:	681a      	ldr	r2, [r3, #0]
  401370:	68fb      	ldr	r3, [r7, #12]
  401372:	4013      	ands	r3, r2
  401374:	2b00      	cmp	r3, #0
  401376:	d01c      	beq.n	4013b2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401378:	4a1d      	ldr	r2, [pc, #116]	; (4013f0 <pio_handler_process+0xc8>)
  40137a:	68bb      	ldr	r3, [r7, #8]
  40137c:	011b      	lsls	r3, r3, #4
  40137e:	4413      	add	r3, r2
  401380:	330c      	adds	r3, #12
  401382:	681b      	ldr	r3, [r3, #0]
  401384:	491a      	ldr	r1, [pc, #104]	; (4013f0 <pio_handler_process+0xc8>)
  401386:	68ba      	ldr	r2, [r7, #8]
  401388:	0112      	lsls	r2, r2, #4
  40138a:	440a      	add	r2, r1
  40138c:	6810      	ldr	r0, [r2, #0]
  40138e:	4918      	ldr	r1, [pc, #96]	; (4013f0 <pio_handler_process+0xc8>)
  401390:	68ba      	ldr	r2, [r7, #8]
  401392:	0112      	lsls	r2, r2, #4
  401394:	440a      	add	r2, r1
  401396:	3204      	adds	r2, #4
  401398:	6812      	ldr	r2, [r2, #0]
  40139a:	4611      	mov	r1, r2
  40139c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40139e:	4a14      	ldr	r2, [pc, #80]	; (4013f0 <pio_handler_process+0xc8>)
  4013a0:	68bb      	ldr	r3, [r7, #8]
  4013a2:	011b      	lsls	r3, r3, #4
  4013a4:	4413      	add	r3, r2
  4013a6:	3304      	adds	r3, #4
  4013a8:	681b      	ldr	r3, [r3, #0]
  4013aa:	43db      	mvns	r3, r3
  4013ac:	68fa      	ldr	r2, [r7, #12]
  4013ae:	4013      	ands	r3, r2
  4013b0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4013b2:	68bb      	ldr	r3, [r7, #8]
  4013b4:	3301      	adds	r3, #1
  4013b6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4013b8:	68bb      	ldr	r3, [r7, #8]
  4013ba:	2b06      	cmp	r3, #6
  4013bc:	d803      	bhi.n	4013c6 <pio_handler_process+0x9e>
		while (status != 0) {
  4013be:	68fb      	ldr	r3, [r7, #12]
  4013c0:	2b00      	cmp	r3, #0
  4013c2:	d1c7      	bne.n	401354 <pio_handler_process+0x2c>
  4013c4:	e000      	b.n	4013c8 <pio_handler_process+0xa0>
				break;
  4013c6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4013c8:	4b0a      	ldr	r3, [pc, #40]	; (4013f4 <pio_handler_process+0xcc>)
  4013ca:	681b      	ldr	r3, [r3, #0]
  4013cc:	2b00      	cmp	r3, #0
  4013ce:	d007      	beq.n	4013e0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4013d0:	4b09      	ldr	r3, [pc, #36]	; (4013f8 <pio_handler_process+0xd0>)
  4013d2:	681b      	ldr	r3, [r3, #0]
  4013d4:	2b00      	cmp	r3, #0
  4013d6:	d003      	beq.n	4013e0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4013d8:	4b07      	ldr	r3, [pc, #28]	; (4013f8 <pio_handler_process+0xd0>)
  4013da:	681b      	ldr	r3, [r3, #0]
  4013dc:	6878      	ldr	r0, [r7, #4]
  4013de:	4798      	blx	r3
		}
	}
#endif
}
  4013e0:	bf00      	nop
  4013e2:	3710      	adds	r7, #16
  4013e4:	46bd      	mov	sp, r7
  4013e6:	bd80      	pop	{r7, pc}
  4013e8:	00400ffb 	.word	0x00400ffb
  4013ec:	00401011 	.word	0x00401011
  4013f0:	200009dc 	.word	0x200009dc
  4013f4:	200016a0 	.word	0x200016a0
  4013f8:	20000a4c 	.word	0x20000a4c

004013fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4013fc:	b580      	push	{r7, lr}
  4013fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401400:	210b      	movs	r1, #11
  401402:	4802      	ldr	r0, [pc, #8]	; (40140c <PIOA_Handler+0x10>)
  401404:	4b02      	ldr	r3, [pc, #8]	; (401410 <PIOA_Handler+0x14>)
  401406:	4798      	blx	r3
}
  401408:	bf00      	nop
  40140a:	bd80      	pop	{r7, pc}
  40140c:	400e0e00 	.word	0x400e0e00
  401410:	00401329 	.word	0x00401329

00401414 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401414:	b580      	push	{r7, lr}
  401416:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401418:	210c      	movs	r1, #12
  40141a:	4802      	ldr	r0, [pc, #8]	; (401424 <PIOB_Handler+0x10>)
  40141c:	4b02      	ldr	r3, [pc, #8]	; (401428 <PIOB_Handler+0x14>)
  40141e:	4798      	blx	r3
}
  401420:	bf00      	nop
  401422:	bd80      	pop	{r7, pc}
  401424:	400e1000 	.word	0x400e1000
  401428:	00401329 	.word	0x00401329

0040142c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40142c:	b580      	push	{r7, lr}
  40142e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401430:	210d      	movs	r1, #13
  401432:	4802      	ldr	r0, [pc, #8]	; (40143c <PIOC_Handler+0x10>)
  401434:	4b02      	ldr	r3, [pc, #8]	; (401440 <PIOC_Handler+0x14>)
  401436:	4798      	blx	r3
}
  401438:	bf00      	nop
  40143a:	bd80      	pop	{r7, pc}
  40143c:	400e1200 	.word	0x400e1200
  401440:	00401329 	.word	0x00401329

00401444 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401444:	b480      	push	{r7}
  401446:	b085      	sub	sp, #20
  401448:	af00      	add	r7, sp, #0
  40144a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40144c:	491c      	ldr	r1, [pc, #112]	; (4014c0 <pmc_switch_mck_to_pllack+0x7c>)
  40144e:	4b1c      	ldr	r3, [pc, #112]	; (4014c0 <pmc_switch_mck_to_pllack+0x7c>)
  401450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401456:	687b      	ldr	r3, [r7, #4]
  401458:	4313      	orrs	r3, r2
  40145a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40145c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401460:	60fb      	str	r3, [r7, #12]
  401462:	e007      	b.n	401474 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401464:	68fb      	ldr	r3, [r7, #12]
  401466:	2b00      	cmp	r3, #0
  401468:	d101      	bne.n	40146e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40146a:	2301      	movs	r3, #1
  40146c:	e023      	b.n	4014b6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40146e:	68fb      	ldr	r3, [r7, #12]
  401470:	3b01      	subs	r3, #1
  401472:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401474:	4b12      	ldr	r3, [pc, #72]	; (4014c0 <pmc_switch_mck_to_pllack+0x7c>)
  401476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401478:	f003 0308 	and.w	r3, r3, #8
  40147c:	2b00      	cmp	r3, #0
  40147e:	d0f1      	beq.n	401464 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401480:	4a0f      	ldr	r2, [pc, #60]	; (4014c0 <pmc_switch_mck_to_pllack+0x7c>)
  401482:	4b0f      	ldr	r3, [pc, #60]	; (4014c0 <pmc_switch_mck_to_pllack+0x7c>)
  401484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401486:	f023 0303 	bic.w	r3, r3, #3
  40148a:	f043 0302 	orr.w	r3, r3, #2
  40148e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401490:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401494:	60fb      	str	r3, [r7, #12]
  401496:	e007      	b.n	4014a8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401498:	68fb      	ldr	r3, [r7, #12]
  40149a:	2b00      	cmp	r3, #0
  40149c:	d101      	bne.n	4014a2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40149e:	2301      	movs	r3, #1
  4014a0:	e009      	b.n	4014b6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4014a2:	68fb      	ldr	r3, [r7, #12]
  4014a4:	3b01      	subs	r3, #1
  4014a6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014a8:	4b05      	ldr	r3, [pc, #20]	; (4014c0 <pmc_switch_mck_to_pllack+0x7c>)
  4014aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014ac:	f003 0308 	and.w	r3, r3, #8
  4014b0:	2b00      	cmp	r3, #0
  4014b2:	d0f1      	beq.n	401498 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4014b4:	2300      	movs	r3, #0
}
  4014b6:	4618      	mov	r0, r3
  4014b8:	3714      	adds	r7, #20
  4014ba:	46bd      	mov	sp, r7
  4014bc:	bc80      	pop	{r7}
  4014be:	4770      	bx	lr
  4014c0:	400e0400 	.word	0x400e0400

004014c4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4014c4:	b480      	push	{r7}
  4014c6:	b083      	sub	sp, #12
  4014c8:	af00      	add	r7, sp, #0
  4014ca:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4014cc:	687b      	ldr	r3, [r7, #4]
  4014ce:	2b01      	cmp	r3, #1
  4014d0:	d107      	bne.n	4014e2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4014d2:	4a08      	ldr	r2, [pc, #32]	; (4014f4 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014d4:	4b07      	ldr	r3, [pc, #28]	; (4014f4 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014d6:	689b      	ldr	r3, [r3, #8]
  4014d8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4014dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4014e0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4014e2:	4b04      	ldr	r3, [pc, #16]	; (4014f4 <pmc_switch_sclk_to_32kxtal+0x30>)
  4014e4:	4a04      	ldr	r2, [pc, #16]	; (4014f8 <pmc_switch_sclk_to_32kxtal+0x34>)
  4014e6:	601a      	str	r2, [r3, #0]
}
  4014e8:	bf00      	nop
  4014ea:	370c      	adds	r7, #12
  4014ec:	46bd      	mov	sp, r7
  4014ee:	bc80      	pop	{r7}
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop
  4014f4:	400e1410 	.word	0x400e1410
  4014f8:	a5000008 	.word	0xa5000008

004014fc <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4014fc:	b480      	push	{r7}
  4014fe:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401500:	4b09      	ldr	r3, [pc, #36]	; (401528 <pmc_osc_is_ready_32kxtal+0x2c>)
  401502:	695b      	ldr	r3, [r3, #20]
  401504:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401508:	2b00      	cmp	r3, #0
  40150a:	d007      	beq.n	40151c <pmc_osc_is_ready_32kxtal+0x20>
  40150c:	4b07      	ldr	r3, [pc, #28]	; (40152c <pmc_osc_is_ready_32kxtal+0x30>)
  40150e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401510:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401514:	2b00      	cmp	r3, #0
  401516:	d001      	beq.n	40151c <pmc_osc_is_ready_32kxtal+0x20>
  401518:	2301      	movs	r3, #1
  40151a:	e000      	b.n	40151e <pmc_osc_is_ready_32kxtal+0x22>
  40151c:	2300      	movs	r3, #0
}
  40151e:	4618      	mov	r0, r3
  401520:	46bd      	mov	sp, r7
  401522:	bc80      	pop	{r7}
  401524:	4770      	bx	lr
  401526:	bf00      	nop
  401528:	400e1410 	.word	0x400e1410
  40152c:	400e0400 	.word	0x400e0400

00401530 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401530:	b480      	push	{r7}
  401532:	b083      	sub	sp, #12
  401534:	af00      	add	r7, sp, #0
  401536:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401538:	4a18      	ldr	r2, [pc, #96]	; (40159c <pmc_switch_mainck_to_fastrc+0x6c>)
  40153a:	4b18      	ldr	r3, [pc, #96]	; (40159c <pmc_switch_mainck_to_fastrc+0x6c>)
  40153c:	6a1b      	ldr	r3, [r3, #32]
  40153e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401542:	f043 0308 	orr.w	r3, r3, #8
  401546:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401548:	bf00      	nop
  40154a:	4b14      	ldr	r3, [pc, #80]	; (40159c <pmc_switch_mainck_to_fastrc+0x6c>)
  40154c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401552:	2b00      	cmp	r3, #0
  401554:	d0f9      	beq.n	40154a <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401556:	4911      	ldr	r1, [pc, #68]	; (40159c <pmc_switch_mainck_to_fastrc+0x6c>)
  401558:	4b10      	ldr	r3, [pc, #64]	; (40159c <pmc_switch_mainck_to_fastrc+0x6c>)
  40155a:	6a1b      	ldr	r3, [r3, #32]
  40155c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401564:	687a      	ldr	r2, [r7, #4]
  401566:	4313      	orrs	r3, r2
  401568:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40156c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40156e:	bf00      	nop
  401570:	4b0a      	ldr	r3, [pc, #40]	; (40159c <pmc_switch_mainck_to_fastrc+0x6c>)
  401572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401578:	2b00      	cmp	r3, #0
  40157a:	d0f9      	beq.n	401570 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40157c:	4a07      	ldr	r2, [pc, #28]	; (40159c <pmc_switch_mainck_to_fastrc+0x6c>)
  40157e:	4b07      	ldr	r3, [pc, #28]	; (40159c <pmc_switch_mainck_to_fastrc+0x6c>)
  401580:	6a1b      	ldr	r3, [r3, #32]
  401582:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40158a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40158e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401590:	bf00      	nop
  401592:	370c      	adds	r7, #12
  401594:	46bd      	mov	sp, r7
  401596:	bc80      	pop	{r7}
  401598:	4770      	bx	lr
  40159a:	bf00      	nop
  40159c:	400e0400 	.word	0x400e0400

004015a0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4015a0:	b480      	push	{r7}
  4015a2:	b083      	sub	sp, #12
  4015a4:	af00      	add	r7, sp, #0
  4015a6:	6078      	str	r0, [r7, #4]
  4015a8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4015aa:	687b      	ldr	r3, [r7, #4]
  4015ac:	2b00      	cmp	r3, #0
  4015ae:	d008      	beq.n	4015c2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015b0:	4916      	ldr	r1, [pc, #88]	; (40160c <pmc_switch_mainck_to_xtal+0x6c>)
  4015b2:	4b16      	ldr	r3, [pc, #88]	; (40160c <pmc_switch_mainck_to_xtal+0x6c>)
  4015b4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015b6:	4a16      	ldr	r2, [pc, #88]	; (401610 <pmc_switch_mainck_to_xtal+0x70>)
  4015b8:	401a      	ands	r2, r3
  4015ba:	4b16      	ldr	r3, [pc, #88]	; (401614 <pmc_switch_mainck_to_xtal+0x74>)
  4015bc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015be:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4015c0:	e01e      	b.n	401600 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015c2:	4912      	ldr	r1, [pc, #72]	; (40160c <pmc_switch_mainck_to_xtal+0x6c>)
  4015c4:	4b11      	ldr	r3, [pc, #68]	; (40160c <pmc_switch_mainck_to_xtal+0x6c>)
  4015c6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015c8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4015cc:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4015d0:	683a      	ldr	r2, [r7, #0]
  4015d2:	0212      	lsls	r2, r2, #8
  4015d4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015d6:	4313      	orrs	r3, r2
  4015d8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015dc:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015e0:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4015e2:	bf00      	nop
  4015e4:	4b09      	ldr	r3, [pc, #36]	; (40160c <pmc_switch_mainck_to_xtal+0x6c>)
  4015e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015e8:	f003 0301 	and.w	r3, r3, #1
  4015ec:	2b00      	cmp	r3, #0
  4015ee:	d0f9      	beq.n	4015e4 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4015f0:	4a06      	ldr	r2, [pc, #24]	; (40160c <pmc_switch_mainck_to_xtal+0x6c>)
  4015f2:	4b06      	ldr	r3, [pc, #24]	; (40160c <pmc_switch_mainck_to_xtal+0x6c>)
  4015f4:	6a1b      	ldr	r3, [r3, #32]
  4015f6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4015fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4015fe:	6213      	str	r3, [r2, #32]
}
  401600:	bf00      	nop
  401602:	370c      	adds	r7, #12
  401604:	46bd      	mov	sp, r7
  401606:	bc80      	pop	{r7}
  401608:	4770      	bx	lr
  40160a:	bf00      	nop
  40160c:	400e0400 	.word	0x400e0400
  401610:	fec8fffc 	.word	0xfec8fffc
  401614:	01370002 	.word	0x01370002

00401618 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401618:	b480      	push	{r7}
  40161a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40161c:	4b03      	ldr	r3, [pc, #12]	; (40162c <pmc_osc_is_ready_mainck+0x14>)
  40161e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401624:	4618      	mov	r0, r3
  401626:	46bd      	mov	sp, r7
  401628:	bc80      	pop	{r7}
  40162a:	4770      	bx	lr
  40162c:	400e0400 	.word	0x400e0400

00401630 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401630:	b480      	push	{r7}
  401632:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401634:	4b03      	ldr	r3, [pc, #12]	; (401644 <pmc_disable_pllack+0x14>)
  401636:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40163a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40163c:	bf00      	nop
  40163e:	46bd      	mov	sp, r7
  401640:	bc80      	pop	{r7}
  401642:	4770      	bx	lr
  401644:	400e0400 	.word	0x400e0400

00401648 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401648:	b480      	push	{r7}
  40164a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40164c:	4b03      	ldr	r3, [pc, #12]	; (40165c <pmc_is_locked_pllack+0x14>)
  40164e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401650:	f003 0302 	and.w	r3, r3, #2
}
  401654:	4618      	mov	r0, r3
  401656:	46bd      	mov	sp, r7
  401658:	bc80      	pop	{r7}
  40165a:	4770      	bx	lr
  40165c:	400e0400 	.word	0x400e0400

00401660 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401660:	b480      	push	{r7}
  401662:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401664:	4b03      	ldr	r3, [pc, #12]	; (401674 <pmc_disable_pllbck+0x14>)
  401666:	2200      	movs	r2, #0
  401668:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40166a:	bf00      	nop
  40166c:	46bd      	mov	sp, r7
  40166e:	bc80      	pop	{r7}
  401670:	4770      	bx	lr
  401672:	bf00      	nop
  401674:	400e0400 	.word	0x400e0400

00401678 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401678:	b480      	push	{r7}
  40167a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40167c:	4b03      	ldr	r3, [pc, #12]	; (40168c <pmc_is_locked_pllbck+0x14>)
  40167e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401680:	f003 0304 	and.w	r3, r3, #4
}
  401684:	4618      	mov	r0, r3
  401686:	46bd      	mov	sp, r7
  401688:	bc80      	pop	{r7}
  40168a:	4770      	bx	lr
  40168c:	400e0400 	.word	0x400e0400

00401690 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401690:	b480      	push	{r7}
  401692:	b083      	sub	sp, #12
  401694:	af00      	add	r7, sp, #0
  401696:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401698:	687b      	ldr	r3, [r7, #4]
  40169a:	2b22      	cmp	r3, #34	; 0x22
  40169c:	d901      	bls.n	4016a2 <pmc_enable_periph_clk+0x12>
		return 1;
  40169e:	2301      	movs	r3, #1
  4016a0:	e02f      	b.n	401702 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016a2:	687b      	ldr	r3, [r7, #4]
  4016a4:	2b1f      	cmp	r3, #31
  4016a6:	d813      	bhi.n	4016d0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016a8:	4b18      	ldr	r3, [pc, #96]	; (40170c <pmc_enable_periph_clk+0x7c>)
  4016aa:	699a      	ldr	r2, [r3, #24]
  4016ac:	2101      	movs	r1, #1
  4016ae:	687b      	ldr	r3, [r7, #4]
  4016b0:	fa01 f303 	lsl.w	r3, r1, r3
  4016b4:	401a      	ands	r2, r3
  4016b6:	2101      	movs	r1, #1
  4016b8:	687b      	ldr	r3, [r7, #4]
  4016ba:	fa01 f303 	lsl.w	r3, r1, r3
  4016be:	429a      	cmp	r2, r3
  4016c0:	d01e      	beq.n	401700 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4016c2:	4a12      	ldr	r2, [pc, #72]	; (40170c <pmc_enable_periph_clk+0x7c>)
  4016c4:	2101      	movs	r1, #1
  4016c6:	687b      	ldr	r3, [r7, #4]
  4016c8:	fa01 f303 	lsl.w	r3, r1, r3
  4016cc:	6113      	str	r3, [r2, #16]
  4016ce:	e017      	b.n	401700 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4016d0:	687b      	ldr	r3, [r7, #4]
  4016d2:	3b20      	subs	r3, #32
  4016d4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4016d6:	4b0d      	ldr	r3, [pc, #52]	; (40170c <pmc_enable_periph_clk+0x7c>)
  4016d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4016dc:	2101      	movs	r1, #1
  4016de:	687b      	ldr	r3, [r7, #4]
  4016e0:	fa01 f303 	lsl.w	r3, r1, r3
  4016e4:	401a      	ands	r2, r3
  4016e6:	2101      	movs	r1, #1
  4016e8:	687b      	ldr	r3, [r7, #4]
  4016ea:	fa01 f303 	lsl.w	r3, r1, r3
  4016ee:	429a      	cmp	r2, r3
  4016f0:	d006      	beq.n	401700 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4016f2:	4a06      	ldr	r2, [pc, #24]	; (40170c <pmc_enable_periph_clk+0x7c>)
  4016f4:	2101      	movs	r1, #1
  4016f6:	687b      	ldr	r3, [r7, #4]
  4016f8:	fa01 f303 	lsl.w	r3, r1, r3
  4016fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401700:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401702:	4618      	mov	r0, r3
  401704:	370c      	adds	r7, #12
  401706:	46bd      	mov	sp, r7
  401708:	bc80      	pop	{r7}
  40170a:	4770      	bx	lr
  40170c:	400e0400 	.word	0x400e0400

00401710 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401710:	b480      	push	{r7}
  401712:	b085      	sub	sp, #20
  401714:	af00      	add	r7, sp, #0
  401716:	6078      	str	r0, [r7, #4]
  401718:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40171a:	2300      	movs	r3, #0
  40171c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40171e:	687b      	ldr	r3, [r7, #4]
  401720:	22ac      	movs	r2, #172	; 0xac
  401722:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401724:	683b      	ldr	r3, [r7, #0]
  401726:	681a      	ldr	r2, [r3, #0]
  401728:	683b      	ldr	r3, [r7, #0]
  40172a:	685b      	ldr	r3, [r3, #4]
  40172c:	fbb2 f3f3 	udiv	r3, r2, r3
  401730:	091b      	lsrs	r3, r3, #4
  401732:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401734:	68fb      	ldr	r3, [r7, #12]
  401736:	2b00      	cmp	r3, #0
  401738:	d003      	beq.n	401742 <uart_init+0x32>
  40173a:	68fb      	ldr	r3, [r7, #12]
  40173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401740:	d301      	bcc.n	401746 <uart_init+0x36>
		return 1;
  401742:	2301      	movs	r3, #1
  401744:	e00f      	b.n	401766 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  401746:	687b      	ldr	r3, [r7, #4]
  401748:	68fa      	ldr	r2, [r7, #12]
  40174a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40174c:	683b      	ldr	r3, [r7, #0]
  40174e:	689a      	ldr	r2, [r3, #8]
  401750:	687b      	ldr	r3, [r7, #4]
  401752:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401754:	687b      	ldr	r3, [r7, #4]
  401756:	f240 2202 	movw	r2, #514	; 0x202
  40175a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40175e:	687b      	ldr	r3, [r7, #4]
  401760:	2250      	movs	r2, #80	; 0x50
  401762:	601a      	str	r2, [r3, #0]

	return 0;
  401764:	2300      	movs	r3, #0
}
  401766:	4618      	mov	r0, r3
  401768:	3714      	adds	r7, #20
  40176a:	46bd      	mov	sp, r7
  40176c:	bc80      	pop	{r7}
  40176e:	4770      	bx	lr

00401770 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401770:	b480      	push	{r7}
  401772:	b083      	sub	sp, #12
  401774:	af00      	add	r7, sp, #0
  401776:	6078      	str	r0, [r7, #4]
  401778:	460b      	mov	r3, r1
  40177a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40177c:	687b      	ldr	r3, [r7, #4]
  40177e:	695b      	ldr	r3, [r3, #20]
  401780:	f003 0302 	and.w	r3, r3, #2
  401784:	2b00      	cmp	r3, #0
  401786:	d101      	bne.n	40178c <uart_write+0x1c>
		return 1;
  401788:	2301      	movs	r3, #1
  40178a:	e003      	b.n	401794 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40178c:	78fa      	ldrb	r2, [r7, #3]
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	61da      	str	r2, [r3, #28]
	return 0;
  401792:	2300      	movs	r3, #0
}
  401794:	4618      	mov	r0, r3
  401796:	370c      	adds	r7, #12
  401798:	46bd      	mov	sp, r7
  40179a:	bc80      	pop	{r7}
  40179c:	4770      	bx	lr

0040179e <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  40179e:	b480      	push	{r7}
  4017a0:	b083      	sub	sp, #12
  4017a2:	af00      	add	r7, sp, #0
  4017a4:	6078      	str	r0, [r7, #4]
  4017a6:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4017a8:	687b      	ldr	r3, [r7, #4]
  4017aa:	695b      	ldr	r3, [r3, #20]
  4017ac:	f003 0301 	and.w	r3, r3, #1
  4017b0:	2b00      	cmp	r3, #0
  4017b2:	d101      	bne.n	4017b8 <uart_read+0x1a>
		return 1;
  4017b4:	2301      	movs	r3, #1
  4017b6:	e005      	b.n	4017c4 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4017b8:	687b      	ldr	r3, [r7, #4]
  4017ba:	699b      	ldr	r3, [r3, #24]
  4017bc:	b2da      	uxtb	r2, r3
  4017be:	683b      	ldr	r3, [r7, #0]
  4017c0:	701a      	strb	r2, [r3, #0]
	return 0;
  4017c2:	2300      	movs	r3, #0
}
  4017c4:	4618      	mov	r0, r3
  4017c6:	370c      	adds	r7, #12
  4017c8:	46bd      	mov	sp, r7
  4017ca:	bc80      	pop	{r7}
  4017cc:	4770      	bx	lr

004017ce <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4017ce:	b480      	push	{r7}
  4017d0:	b089      	sub	sp, #36	; 0x24
  4017d2:	af00      	add	r7, sp, #0
  4017d4:	60f8      	str	r0, [r7, #12]
  4017d6:	60b9      	str	r1, [r7, #8]
  4017d8:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4017da:	68bb      	ldr	r3, [r7, #8]
  4017dc:	011a      	lsls	r2, r3, #4
  4017de:	687b      	ldr	r3, [r7, #4]
  4017e0:	429a      	cmp	r2, r3
  4017e2:	d802      	bhi.n	4017ea <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4017e4:	2310      	movs	r3, #16
  4017e6:	61fb      	str	r3, [r7, #28]
  4017e8:	e001      	b.n	4017ee <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4017ea:	2308      	movs	r3, #8
  4017ec:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4017ee:	687b      	ldr	r3, [r7, #4]
  4017f0:	00da      	lsls	r2, r3, #3
  4017f2:	69fb      	ldr	r3, [r7, #28]
  4017f4:	68b9      	ldr	r1, [r7, #8]
  4017f6:	fb01 f303 	mul.w	r3, r1, r3
  4017fa:	085b      	lsrs	r3, r3, #1
  4017fc:	441a      	add	r2, r3
  4017fe:	69fb      	ldr	r3, [r7, #28]
  401800:	68b9      	ldr	r1, [r7, #8]
  401802:	fb01 f303 	mul.w	r3, r1, r3
  401806:	fbb2 f3f3 	udiv	r3, r2, r3
  40180a:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40180c:	69bb      	ldr	r3, [r7, #24]
  40180e:	08db      	lsrs	r3, r3, #3
  401810:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401812:	69bb      	ldr	r3, [r7, #24]
  401814:	f003 0307 	and.w	r3, r3, #7
  401818:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40181a:	697b      	ldr	r3, [r7, #20]
  40181c:	2b00      	cmp	r3, #0
  40181e:	d003      	beq.n	401828 <usart_set_async_baudrate+0x5a>
  401820:	697b      	ldr	r3, [r7, #20]
  401822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401826:	d301      	bcc.n	40182c <usart_set_async_baudrate+0x5e>
		return 1;
  401828:	2301      	movs	r3, #1
  40182a:	e00f      	b.n	40184c <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40182c:	69fb      	ldr	r3, [r7, #28]
  40182e:	2b08      	cmp	r3, #8
  401830:	d105      	bne.n	40183e <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401832:	68fb      	ldr	r3, [r7, #12]
  401834:	685b      	ldr	r3, [r3, #4]
  401836:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40183a:	68fb      	ldr	r3, [r7, #12]
  40183c:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40183e:	693b      	ldr	r3, [r7, #16]
  401840:	041a      	lsls	r2, r3, #16
  401842:	697b      	ldr	r3, [r7, #20]
  401844:	431a      	orrs	r2, r3
  401846:	68fb      	ldr	r3, [r7, #12]
  401848:	621a      	str	r2, [r3, #32]

	return 0;
  40184a:	2300      	movs	r3, #0
}
  40184c:	4618      	mov	r0, r3
  40184e:	3724      	adds	r7, #36	; 0x24
  401850:	46bd      	mov	sp, r7
  401852:	bc80      	pop	{r7}
  401854:	4770      	bx	lr
	...

00401858 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401858:	b580      	push	{r7, lr}
  40185a:	b082      	sub	sp, #8
  40185c:	af00      	add	r7, sp, #0
  40185e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401860:	6878      	ldr	r0, [r7, #4]
  401862:	4b0f      	ldr	r3, [pc, #60]	; (4018a0 <usart_reset+0x48>)
  401864:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401866:	687b      	ldr	r3, [r7, #4]
  401868:	2200      	movs	r2, #0
  40186a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40186c:	687b      	ldr	r3, [r7, #4]
  40186e:	2200      	movs	r2, #0
  401870:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401872:	687b      	ldr	r3, [r7, #4]
  401874:	2200      	movs	r2, #0
  401876:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401878:	6878      	ldr	r0, [r7, #4]
  40187a:	4b0a      	ldr	r3, [pc, #40]	; (4018a4 <usart_reset+0x4c>)
  40187c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40187e:	6878      	ldr	r0, [r7, #4]
  401880:	4b09      	ldr	r3, [pc, #36]	; (4018a8 <usart_reset+0x50>)
  401882:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401884:	6878      	ldr	r0, [r7, #4]
  401886:	4b09      	ldr	r3, [pc, #36]	; (4018ac <usart_reset+0x54>)
  401888:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40188a:	6878      	ldr	r0, [r7, #4]
  40188c:	4b08      	ldr	r3, [pc, #32]	; (4018b0 <usart_reset+0x58>)
  40188e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  401890:	6878      	ldr	r0, [r7, #4]
  401892:	4b08      	ldr	r3, [pc, #32]	; (4018b4 <usart_reset+0x5c>)
  401894:	4798      	blx	r3
#endif
}
  401896:	bf00      	nop
  401898:	3708      	adds	r7, #8
  40189a:	46bd      	mov	sp, r7
  40189c:	bd80      	pop	{r7, pc}
  40189e:	bf00      	nop
  4018a0:	00401aad 	.word	0x00401aad
  4018a4:	00401955 	.word	0x00401955
  4018a8:	00401985 	.word	0x00401985
  4018ac:	004019cd 	.word	0x004019cd
  4018b0:	00401a01 	.word	0x00401a01
  4018b4:	004019e7 	.word	0x004019e7

004018b8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4018b8:	b580      	push	{r7, lr}
  4018ba:	b084      	sub	sp, #16
  4018bc:	af00      	add	r7, sp, #0
  4018be:	60f8      	str	r0, [r7, #12]
  4018c0:	60b9      	str	r1, [r7, #8]
  4018c2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4018c4:	68f8      	ldr	r0, [r7, #12]
  4018c6:	4b1a      	ldr	r3, [pc, #104]	; (401930 <usart_init_rs232+0x78>)
  4018c8:	4798      	blx	r3

	ul_reg_val = 0;
  4018ca:	4b1a      	ldr	r3, [pc, #104]	; (401934 <usart_init_rs232+0x7c>)
  4018cc:	2200      	movs	r2, #0
  4018ce:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4018d0:	68bb      	ldr	r3, [r7, #8]
  4018d2:	2b00      	cmp	r3, #0
  4018d4:	d009      	beq.n	4018ea <usart_init_rs232+0x32>
  4018d6:	68bb      	ldr	r3, [r7, #8]
  4018d8:	681b      	ldr	r3, [r3, #0]
  4018da:	687a      	ldr	r2, [r7, #4]
  4018dc:	4619      	mov	r1, r3
  4018de:	68f8      	ldr	r0, [r7, #12]
  4018e0:	4b15      	ldr	r3, [pc, #84]	; (401938 <usart_init_rs232+0x80>)
  4018e2:	4798      	blx	r3
  4018e4:	4603      	mov	r3, r0
  4018e6:	2b00      	cmp	r3, #0
  4018e8:	d001      	beq.n	4018ee <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4018ea:	2301      	movs	r3, #1
  4018ec:	e01b      	b.n	401926 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4018ee:	68bb      	ldr	r3, [r7, #8]
  4018f0:	685a      	ldr	r2, [r3, #4]
  4018f2:	68bb      	ldr	r3, [r7, #8]
  4018f4:	689b      	ldr	r3, [r3, #8]
  4018f6:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4018f8:	68bb      	ldr	r3, [r7, #8]
  4018fa:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4018fc:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4018fe:	68bb      	ldr	r3, [r7, #8]
  401900:	68db      	ldr	r3, [r3, #12]
  401902:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401904:	4b0b      	ldr	r3, [pc, #44]	; (401934 <usart_init_rs232+0x7c>)
  401906:	681b      	ldr	r3, [r3, #0]
  401908:	4313      	orrs	r3, r2
  40190a:	4a0a      	ldr	r2, [pc, #40]	; (401934 <usart_init_rs232+0x7c>)
  40190c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40190e:	4b09      	ldr	r3, [pc, #36]	; (401934 <usart_init_rs232+0x7c>)
  401910:	681b      	ldr	r3, [r3, #0]
  401912:	4a08      	ldr	r2, [pc, #32]	; (401934 <usart_init_rs232+0x7c>)
  401914:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401916:	68fb      	ldr	r3, [r7, #12]
  401918:	685a      	ldr	r2, [r3, #4]
  40191a:	4b06      	ldr	r3, [pc, #24]	; (401934 <usart_init_rs232+0x7c>)
  40191c:	681b      	ldr	r3, [r3, #0]
  40191e:	431a      	orrs	r2, r3
  401920:	68fb      	ldr	r3, [r7, #12]
  401922:	605a      	str	r2, [r3, #4]

	return 0;
  401924:	2300      	movs	r3, #0
}
  401926:	4618      	mov	r0, r3
  401928:	3710      	adds	r7, #16
  40192a:	46bd      	mov	sp, r7
  40192c:	bd80      	pop	{r7, pc}
  40192e:	bf00      	nop
  401930:	00401859 	.word	0x00401859
  401934:	20000a50 	.word	0x20000a50
  401938:	004017cf 	.word	0x004017cf

0040193c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40193c:	b480      	push	{r7}
  40193e:	b083      	sub	sp, #12
  401940:	af00      	add	r7, sp, #0
  401942:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401944:	687b      	ldr	r3, [r7, #4]
  401946:	2240      	movs	r2, #64	; 0x40
  401948:	601a      	str	r2, [r3, #0]
}
  40194a:	bf00      	nop
  40194c:	370c      	adds	r7, #12
  40194e:	46bd      	mov	sp, r7
  401950:	bc80      	pop	{r7}
  401952:	4770      	bx	lr

00401954 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401954:	b480      	push	{r7}
  401956:	b083      	sub	sp, #12
  401958:	af00      	add	r7, sp, #0
  40195a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40195c:	687b      	ldr	r3, [r7, #4]
  40195e:	2288      	movs	r2, #136	; 0x88
  401960:	601a      	str	r2, [r3, #0]
}
  401962:	bf00      	nop
  401964:	370c      	adds	r7, #12
  401966:	46bd      	mov	sp, r7
  401968:	bc80      	pop	{r7}
  40196a:	4770      	bx	lr

0040196c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  40196c:	b480      	push	{r7}
  40196e:	b083      	sub	sp, #12
  401970:	af00      	add	r7, sp, #0
  401972:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401974:	687b      	ldr	r3, [r7, #4]
  401976:	2210      	movs	r2, #16
  401978:	601a      	str	r2, [r3, #0]
}
  40197a:	bf00      	nop
  40197c:	370c      	adds	r7, #12
  40197e:	46bd      	mov	sp, r7
  401980:	bc80      	pop	{r7}
  401982:	4770      	bx	lr

00401984 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401984:	b480      	push	{r7}
  401986:	b083      	sub	sp, #12
  401988:	af00      	add	r7, sp, #0
  40198a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40198c:	687b      	ldr	r3, [r7, #4]
  40198e:	2224      	movs	r2, #36	; 0x24
  401990:	601a      	str	r2, [r3, #0]
}
  401992:	bf00      	nop
  401994:	370c      	adds	r7, #12
  401996:	46bd      	mov	sp, r7
  401998:	bc80      	pop	{r7}
  40199a:	4770      	bx	lr

0040199c <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40199c:	b480      	push	{r7}
  40199e:	b083      	sub	sp, #12
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	6078      	str	r0, [r7, #4]
  4019a4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4019a6:	687b      	ldr	r3, [r7, #4]
  4019a8:	683a      	ldr	r2, [r7, #0]
  4019aa:	609a      	str	r2, [r3, #8]
}
  4019ac:	bf00      	nop
  4019ae:	370c      	adds	r7, #12
  4019b0:	46bd      	mov	sp, r7
  4019b2:	bc80      	pop	{r7}
  4019b4:	4770      	bx	lr

004019b6 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  4019b6:	b480      	push	{r7}
  4019b8:	b083      	sub	sp, #12
  4019ba:	af00      	add	r7, sp, #0
  4019bc:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  4019be:	687b      	ldr	r3, [r7, #4]
  4019c0:	691b      	ldr	r3, [r3, #16]
}
  4019c2:	4618      	mov	r0, r3
  4019c4:	370c      	adds	r7, #12
  4019c6:	46bd      	mov	sp, r7
  4019c8:	bc80      	pop	{r7}
  4019ca:	4770      	bx	lr

004019cc <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4019cc:	b480      	push	{r7}
  4019ce:	b083      	sub	sp, #12
  4019d0:	af00      	add	r7, sp, #0
  4019d2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4019d4:	687b      	ldr	r3, [r7, #4]
  4019d6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019da:	601a      	str	r2, [r3, #0]
}
  4019dc:	bf00      	nop
  4019de:	370c      	adds	r7, #12
  4019e0:	46bd      	mov	sp, r7
  4019e2:	bc80      	pop	{r7}
  4019e4:	4770      	bx	lr

004019e6 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4019e6:	b480      	push	{r7}
  4019e8:	b083      	sub	sp, #12
  4019ea:	af00      	add	r7, sp, #0
  4019ec:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4019ee:	687b      	ldr	r3, [r7, #4]
  4019f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4019f4:	601a      	str	r2, [r3, #0]
}
  4019f6:	bf00      	nop
  4019f8:	370c      	adds	r7, #12
  4019fa:	46bd      	mov	sp, r7
  4019fc:	bc80      	pop	{r7}
  4019fe:	4770      	bx	lr

00401a00 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401a00:	b480      	push	{r7}
  401a02:	b083      	sub	sp, #12
  401a04:	af00      	add	r7, sp, #0
  401a06:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401a08:	687b      	ldr	r3, [r7, #4]
  401a0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401a0e:	601a      	str	r2, [r3, #0]
}
  401a10:	bf00      	nop
  401a12:	370c      	adds	r7, #12
  401a14:	46bd      	mov	sp, r7
  401a16:	bc80      	pop	{r7}
  401a18:	4770      	bx	lr

00401a1a <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401a1a:	b480      	push	{r7}
  401a1c:	b083      	sub	sp, #12
  401a1e:	af00      	add	r7, sp, #0
  401a20:	6078      	str	r0, [r7, #4]
  401a22:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401a24:	687b      	ldr	r3, [r7, #4]
  401a26:	695b      	ldr	r3, [r3, #20]
  401a28:	f003 0302 	and.w	r3, r3, #2
  401a2c:	2b00      	cmp	r3, #0
  401a2e:	d101      	bne.n	401a34 <usart_write+0x1a>
		return 1;
  401a30:	2301      	movs	r3, #1
  401a32:	e005      	b.n	401a40 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401a34:	683b      	ldr	r3, [r7, #0]
  401a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401a3a:	687b      	ldr	r3, [r7, #4]
  401a3c:	61da      	str	r2, [r3, #28]
	return 0;
  401a3e:	2300      	movs	r3, #0
}
  401a40:	4618      	mov	r0, r3
  401a42:	370c      	adds	r7, #12
  401a44:	46bd      	mov	sp, r7
  401a46:	bc80      	pop	{r7}
  401a48:	4770      	bx	lr

00401a4a <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401a4a:	b480      	push	{r7}
  401a4c:	b083      	sub	sp, #12
  401a4e:	af00      	add	r7, sp, #0
  401a50:	6078      	str	r0, [r7, #4]
  401a52:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401a54:	687b      	ldr	r3, [r7, #4]
  401a56:	695b      	ldr	r3, [r3, #20]
  401a58:	f003 0301 	and.w	r3, r3, #1
  401a5c:	2b00      	cmp	r3, #0
  401a5e:	d101      	bne.n	401a64 <usart_read+0x1a>
		return 1;
  401a60:	2301      	movs	r3, #1
  401a62:	e006      	b.n	401a72 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401a64:	687b      	ldr	r3, [r7, #4]
  401a66:	699b      	ldr	r3, [r3, #24]
  401a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401a6c:	683b      	ldr	r3, [r7, #0]
  401a6e:	601a      	str	r2, [r3, #0]

	return 0;
  401a70:	2300      	movs	r3, #0
}
  401a72:	4618      	mov	r0, r3
  401a74:	370c      	adds	r7, #12
  401a76:	46bd      	mov	sp, r7
  401a78:	bc80      	pop	{r7}
  401a7a:	4770      	bx	lr

00401a7c <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  401a7c:	b480      	push	{r7}
  401a7e:	b083      	sub	sp, #12
  401a80:	af00      	add	r7, sp, #0
  401a82:	6078      	str	r0, [r7, #4]
  401a84:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401a86:	bf00      	nop
  401a88:	687b      	ldr	r3, [r7, #4]
  401a8a:	695b      	ldr	r3, [r3, #20]
  401a8c:	f003 0301 	and.w	r3, r3, #1
  401a90:	2b00      	cmp	r3, #0
  401a92:	d0f9      	beq.n	401a88 <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401a94:	687b      	ldr	r3, [r7, #4]
  401a96:	699b      	ldr	r3, [r3, #24]
  401a98:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401a9c:	683b      	ldr	r3, [r7, #0]
  401a9e:	601a      	str	r2, [r3, #0]

	return 0;
  401aa0:	2300      	movs	r3, #0
}
  401aa2:	4618      	mov	r0, r3
  401aa4:	370c      	adds	r7, #12
  401aa6:	46bd      	mov	sp, r7
  401aa8:	bc80      	pop	{r7}
  401aaa:	4770      	bx	lr

00401aac <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401aac:	b480      	push	{r7}
  401aae:	b083      	sub	sp, #12
  401ab0:	af00      	add	r7, sp, #0
  401ab2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401ab4:	687b      	ldr	r3, [r7, #4]
  401ab6:	4a04      	ldr	r2, [pc, #16]	; (401ac8 <usart_disable_writeprotect+0x1c>)
  401ab8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401abc:	bf00      	nop
  401abe:	370c      	adds	r7, #12
  401ac0:	46bd      	mov	sp, r7
  401ac2:	bc80      	pop	{r7}
  401ac4:	4770      	bx	lr
  401ac6:	bf00      	nop
  401ac8:	55534100 	.word	0x55534100

00401acc <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401acc:	b480      	push	{r7}
  401ace:	b083      	sub	sp, #12
  401ad0:	af00      	add	r7, sp, #0
  401ad2:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401ad4:	687b      	ldr	r3, [r7, #4]
  401ad6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ada:	605a      	str	r2, [r3, #4]

}
  401adc:	bf00      	nop
  401ade:	370c      	adds	r7, #12
  401ae0:	46bd      	mov	sp, r7
  401ae2:	bc80      	pop	{r7}
  401ae4:	4770      	bx	lr
	...

00401ae8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401ae8:	b580      	push	{r7, lr}
  401aea:	b084      	sub	sp, #16
  401aec:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401aee:	4b27      	ldr	r3, [pc, #156]	; (401b8c <Reset_Handler+0xa4>)
  401af0:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401af2:	4b27      	ldr	r3, [pc, #156]	; (401b90 <Reset_Handler+0xa8>)
  401af4:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401af6:	68fa      	ldr	r2, [r7, #12]
  401af8:	68bb      	ldr	r3, [r7, #8]
  401afa:	429a      	cmp	r2, r3
  401afc:	d90d      	bls.n	401b1a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401afe:	e007      	b.n	401b10 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401b00:	68bb      	ldr	r3, [r7, #8]
  401b02:	1d1a      	adds	r2, r3, #4
  401b04:	60ba      	str	r2, [r7, #8]
  401b06:	68fa      	ldr	r2, [r7, #12]
  401b08:	1d11      	adds	r1, r2, #4
  401b0a:	60f9      	str	r1, [r7, #12]
  401b0c:	6812      	ldr	r2, [r2, #0]
  401b0e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401b10:	68bb      	ldr	r3, [r7, #8]
  401b12:	4a20      	ldr	r2, [pc, #128]	; (401b94 <Reset_Handler+0xac>)
  401b14:	4293      	cmp	r3, r2
  401b16:	d3f3      	bcc.n	401b00 <Reset_Handler+0x18>
  401b18:	e020      	b.n	401b5c <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  401b1a:	68fa      	ldr	r2, [r7, #12]
  401b1c:	68bb      	ldr	r3, [r7, #8]
  401b1e:	429a      	cmp	r2, r3
  401b20:	d21c      	bcs.n	401b5c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401b22:	4a1c      	ldr	r2, [pc, #112]	; (401b94 <Reset_Handler+0xac>)
  401b24:	4b1a      	ldr	r3, [pc, #104]	; (401b90 <Reset_Handler+0xa8>)
  401b26:	1ad3      	subs	r3, r2, r3
  401b28:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401b2a:	68fa      	ldr	r2, [r7, #12]
  401b2c:	687b      	ldr	r3, [r7, #4]
  401b2e:	4413      	add	r3, r2
  401b30:	3b04      	subs	r3, #4
  401b32:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401b34:	68ba      	ldr	r2, [r7, #8]
  401b36:	687b      	ldr	r3, [r7, #4]
  401b38:	4413      	add	r3, r2
  401b3a:	3b04      	subs	r3, #4
  401b3c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401b3e:	e00a      	b.n	401b56 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401b40:	68bb      	ldr	r3, [r7, #8]
  401b42:	1f1a      	subs	r2, r3, #4
  401b44:	60ba      	str	r2, [r7, #8]
  401b46:	68fa      	ldr	r2, [r7, #12]
  401b48:	1f11      	subs	r1, r2, #4
  401b4a:	60f9      	str	r1, [r7, #12]
  401b4c:	6812      	ldr	r2, [r2, #0]
  401b4e:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  401b50:	687b      	ldr	r3, [r7, #4]
  401b52:	3b04      	subs	r3, #4
  401b54:	607b      	str	r3, [r7, #4]
  401b56:	687b      	ldr	r3, [r7, #4]
  401b58:	2b00      	cmp	r3, #0
  401b5a:	d1f1      	bne.n	401b40 <Reset_Handler+0x58>
		}
	}
	__NOP();
  401b5c:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401b5e:	4b0e      	ldr	r3, [pc, #56]	; (401b98 <Reset_Handler+0xb0>)
  401b60:	60bb      	str	r3, [r7, #8]
  401b62:	e004      	b.n	401b6e <Reset_Handler+0x86>
		*pDest++ = 0;
  401b64:	68bb      	ldr	r3, [r7, #8]
  401b66:	1d1a      	adds	r2, r3, #4
  401b68:	60ba      	str	r2, [r7, #8]
  401b6a:	2200      	movs	r2, #0
  401b6c:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  401b6e:	68bb      	ldr	r3, [r7, #8]
  401b70:	4a0a      	ldr	r2, [pc, #40]	; (401b9c <Reset_Handler+0xb4>)
  401b72:	4293      	cmp	r3, r2
  401b74:	d3f6      	bcc.n	401b64 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401b76:	4b0a      	ldr	r3, [pc, #40]	; (401ba0 <Reset_Handler+0xb8>)
  401b78:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401b7a:	4a0a      	ldr	r2, [pc, #40]	; (401ba4 <Reset_Handler+0xbc>)
  401b7c:	68fb      	ldr	r3, [r7, #12]
  401b7e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401b80:	4b09      	ldr	r3, [pc, #36]	; (401ba8 <Reset_Handler+0xc0>)
  401b82:	4798      	blx	r3

	/* Branch to main function */
	main();
  401b84:	4b09      	ldr	r3, [pc, #36]	; (401bac <Reset_Handler+0xc4>)
  401b86:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401b88:	e7fe      	b.n	401b88 <Reset_Handler+0xa0>
  401b8a:	bf00      	nop
  401b8c:	004051b8 	.word	0x004051b8
  401b90:	20000000 	.word	0x20000000
  401b94:	200009c0 	.word	0x200009c0
  401b98:	200009c0 	.word	0x200009c0
  401b9c:	200016cc 	.word	0x200016cc
  401ba0:	00400000 	.word	0x00400000
  401ba4:	e000ed00 	.word	0xe000ed00
  401ba8:	00402391 	.word	0x00402391
  401bac:	00401f6d 	.word	0x00401f6d

00401bb0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401bb0:	b480      	push	{r7}
  401bb2:	af00      	add	r7, sp, #0
	while (1) {
  401bb4:	e7fe      	b.n	401bb4 <Dummy_Handler+0x4>
	...

00401bb8 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401bb8:	b480      	push	{r7}
  401bba:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401bbc:	4b5d      	ldr	r3, [pc, #372]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bc0:	f003 0303 	and.w	r3, r3, #3
  401bc4:	2b03      	cmp	r3, #3
  401bc6:	f200 8096 	bhi.w	401cf6 <SystemCoreClockUpdate+0x13e>
  401bca:	a201      	add	r2, pc, #4	; (adr r2, 401bd0 <SystemCoreClockUpdate+0x18>)
  401bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401bd0:	00401be1 	.word	0x00401be1
  401bd4:	00401c01 	.word	0x00401c01
  401bd8:	00401c4b 	.word	0x00401c4b
  401bdc:	00401c4b 	.word	0x00401c4b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401be0:	4b55      	ldr	r3, [pc, #340]	; (401d38 <SystemCoreClockUpdate+0x180>)
  401be2:	695b      	ldr	r3, [r3, #20]
  401be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401be8:	2b00      	cmp	r3, #0
  401bea:	d004      	beq.n	401bf6 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401bec:	4b53      	ldr	r3, [pc, #332]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401bee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401bf2:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401bf4:	e080      	b.n	401cf8 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401bf6:	4b51      	ldr	r3, [pc, #324]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401bf8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401bfc:	601a      	str	r2, [r3, #0]
		break;
  401bfe:	e07b      	b.n	401cf8 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401c00:	4b4c      	ldr	r3, [pc, #304]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401c02:	6a1b      	ldr	r3, [r3, #32]
  401c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c08:	2b00      	cmp	r3, #0
  401c0a:	d003      	beq.n	401c14 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401c0c:	4b4b      	ldr	r3, [pc, #300]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c0e:	4a4c      	ldr	r2, [pc, #304]	; (401d40 <SystemCoreClockUpdate+0x188>)
  401c10:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401c12:	e071      	b.n	401cf8 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c14:	4b49      	ldr	r3, [pc, #292]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c16:	4a4b      	ldr	r2, [pc, #300]	; (401d44 <SystemCoreClockUpdate+0x18c>)
  401c18:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401c1a:	4b46      	ldr	r3, [pc, #280]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401c1c:	6a1b      	ldr	r3, [r3, #32]
  401c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c22:	2b10      	cmp	r3, #16
  401c24:	d008      	beq.n	401c38 <SystemCoreClockUpdate+0x80>
  401c26:	2b20      	cmp	r3, #32
  401c28:	d00a      	beq.n	401c40 <SystemCoreClockUpdate+0x88>
  401c2a:	2b00      	cmp	r3, #0
  401c2c:	d000      	beq.n	401c30 <SystemCoreClockUpdate+0x78>
			break;
  401c2e:	e00b      	b.n	401c48 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c30:	4b42      	ldr	r3, [pc, #264]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c32:	4a44      	ldr	r2, [pc, #272]	; (401d44 <SystemCoreClockUpdate+0x18c>)
  401c34:	601a      	str	r2, [r3, #0]
			break;
  401c36:	e007      	b.n	401c48 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401c38:	4b40      	ldr	r3, [pc, #256]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c3a:	4a43      	ldr	r2, [pc, #268]	; (401d48 <SystemCoreClockUpdate+0x190>)
  401c3c:	601a      	str	r2, [r3, #0]
			break;
  401c3e:	e003      	b.n	401c48 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401c40:	4b3e      	ldr	r3, [pc, #248]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c42:	4a3f      	ldr	r2, [pc, #252]	; (401d40 <SystemCoreClockUpdate+0x188>)
  401c44:	601a      	str	r2, [r3, #0]
			break;
  401c46:	bf00      	nop
		break;
  401c48:	e056      	b.n	401cf8 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401c4a:	4b3a      	ldr	r3, [pc, #232]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401c4c:	6a1b      	ldr	r3, [r3, #32]
  401c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c52:	2b00      	cmp	r3, #0
  401c54:	d003      	beq.n	401c5e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401c56:	4b39      	ldr	r3, [pc, #228]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c58:	4a39      	ldr	r2, [pc, #228]	; (401d40 <SystemCoreClockUpdate+0x188>)
  401c5a:	601a      	str	r2, [r3, #0]
  401c5c:	e019      	b.n	401c92 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c5e:	4b37      	ldr	r3, [pc, #220]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c60:	4a38      	ldr	r2, [pc, #224]	; (401d44 <SystemCoreClockUpdate+0x18c>)
  401c62:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401c64:	4b33      	ldr	r3, [pc, #204]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401c66:	6a1b      	ldr	r3, [r3, #32]
  401c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c6c:	2b10      	cmp	r3, #16
  401c6e:	d008      	beq.n	401c82 <SystemCoreClockUpdate+0xca>
  401c70:	2b20      	cmp	r3, #32
  401c72:	d00a      	beq.n	401c8a <SystemCoreClockUpdate+0xd2>
  401c74:	2b00      	cmp	r3, #0
  401c76:	d000      	beq.n	401c7a <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  401c78:	e00b      	b.n	401c92 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c7a:	4b30      	ldr	r3, [pc, #192]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c7c:	4a31      	ldr	r2, [pc, #196]	; (401d44 <SystemCoreClockUpdate+0x18c>)
  401c7e:	601a      	str	r2, [r3, #0]
					break;
  401c80:	e007      	b.n	401c92 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401c82:	4b2e      	ldr	r3, [pc, #184]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c84:	4a30      	ldr	r2, [pc, #192]	; (401d48 <SystemCoreClockUpdate+0x190>)
  401c86:	601a      	str	r2, [r3, #0]
					break;
  401c88:	e003      	b.n	401c92 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401c8a:	4b2c      	ldr	r3, [pc, #176]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401c8c:	4a2c      	ldr	r2, [pc, #176]	; (401d40 <SystemCoreClockUpdate+0x188>)
  401c8e:	601a      	str	r2, [r3, #0]
					break;
  401c90:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401c92:	4b28      	ldr	r3, [pc, #160]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c96:	f003 0303 	and.w	r3, r3, #3
  401c9a:	2b02      	cmp	r3, #2
  401c9c:	d115      	bne.n	401cca <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401c9e:	4b25      	ldr	r3, [pc, #148]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401ca2:	0c1b      	lsrs	r3, r3, #16
  401ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401ca8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401caa:	4a24      	ldr	r2, [pc, #144]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401cac:	6812      	ldr	r2, [r2, #0]
  401cae:	fb02 f303 	mul.w	r3, r2, r3
  401cb2:	4a22      	ldr	r2, [pc, #136]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401cb4:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401cb6:	4b1f      	ldr	r3, [pc, #124]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  401cba:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401cbc:	4a1f      	ldr	r2, [pc, #124]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401cbe:	6812      	ldr	r2, [r2, #0]
  401cc0:	fbb2 f3f3 	udiv	r3, r2, r3
  401cc4:	4a1d      	ldr	r2, [pc, #116]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401cc6:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401cc8:	e016      	b.n	401cf8 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401cca:	4b1a      	ldr	r3, [pc, #104]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401cce:	0c1b      	lsrs	r3, r3, #16
  401cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401cd4:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401cd6:	4a19      	ldr	r2, [pc, #100]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401cd8:	6812      	ldr	r2, [r2, #0]
  401cda:	fb02 f303 	mul.w	r3, r2, r3
  401cde:	4a17      	ldr	r2, [pc, #92]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401ce0:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401ce2:	4b14      	ldr	r3, [pc, #80]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401ce6:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401ce8:	4a14      	ldr	r2, [pc, #80]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401cea:	6812      	ldr	r2, [r2, #0]
  401cec:	fbb2 f3f3 	udiv	r3, r2, r3
  401cf0:	4a12      	ldr	r2, [pc, #72]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401cf2:	6013      	str	r3, [r2, #0]
		break;
  401cf4:	e000      	b.n	401cf8 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  401cf6:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401cf8:	4b0e      	ldr	r3, [pc, #56]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d00:	2b70      	cmp	r3, #112	; 0x70
  401d02:	d108      	bne.n	401d16 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401d04:	4b0d      	ldr	r3, [pc, #52]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401d06:	681b      	ldr	r3, [r3, #0]
  401d08:	4a10      	ldr	r2, [pc, #64]	; (401d4c <SystemCoreClockUpdate+0x194>)
  401d0a:	fba2 2303 	umull	r2, r3, r2, r3
  401d0e:	085b      	lsrs	r3, r3, #1
  401d10:	4a0a      	ldr	r2, [pc, #40]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401d12:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401d14:	e00a      	b.n	401d2c <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401d16:	4b07      	ldr	r3, [pc, #28]	; (401d34 <SystemCoreClockUpdate+0x17c>)
  401d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d1a:	091b      	lsrs	r3, r3, #4
  401d1c:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  401d20:	4a06      	ldr	r2, [pc, #24]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401d22:	6812      	ldr	r2, [r2, #0]
  401d24:	fa22 f303 	lsr.w	r3, r2, r3
  401d28:	4a04      	ldr	r2, [pc, #16]	; (401d3c <SystemCoreClockUpdate+0x184>)
  401d2a:	6013      	str	r3, [r2, #0]
}
  401d2c:	bf00      	nop
  401d2e:	46bd      	mov	sp, r7
  401d30:	bc80      	pop	{r7}
  401d32:	4770      	bx	lr
  401d34:	400e0400 	.word	0x400e0400
  401d38:	400e1410 	.word	0x400e1410
  401d3c:	2000000c 	.word	0x2000000c
  401d40:	00b71b00 	.word	0x00b71b00
  401d44:	003d0900 	.word	0x003d0900
  401d48:	007a1200 	.word	0x007a1200
  401d4c:	aaaaaaab 	.word	0xaaaaaaab

00401d50 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401d50:	b480      	push	{r7}
  401d52:	b083      	sub	sp, #12
  401d54:	af00      	add	r7, sp, #0
  401d56:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401d58:	687b      	ldr	r3, [r7, #4]
  401d5a:	4a22      	ldr	r2, [pc, #136]	; (401de4 <system_init_flash+0x94>)
  401d5c:	4293      	cmp	r3, r2
  401d5e:	d808      	bhi.n	401d72 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d60:	4b21      	ldr	r3, [pc, #132]	; (401de8 <system_init_flash+0x98>)
  401d62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d66:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d68:	4b20      	ldr	r3, [pc, #128]	; (401dec <system_init_flash+0x9c>)
  401d6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d6e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401d70:	e033      	b.n	401dda <system_init_flash+0x8a>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401d72:	687b      	ldr	r3, [r7, #4]
  401d74:	4a1e      	ldr	r2, [pc, #120]	; (401df0 <system_init_flash+0xa0>)
  401d76:	4293      	cmp	r3, r2
  401d78:	d806      	bhi.n	401d88 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d7a:	4b1b      	ldr	r3, [pc, #108]	; (401de8 <system_init_flash+0x98>)
  401d7c:	4a1d      	ldr	r2, [pc, #116]	; (401df4 <system_init_flash+0xa4>)
  401d7e:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d80:	4b1a      	ldr	r3, [pc, #104]	; (401dec <system_init_flash+0x9c>)
  401d82:	4a1c      	ldr	r2, [pc, #112]	; (401df4 <system_init_flash+0xa4>)
  401d84:	601a      	str	r2, [r3, #0]
}
  401d86:	e028      	b.n	401dda <system_init_flash+0x8a>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401d88:	687b      	ldr	r3, [r7, #4]
  401d8a:	4a1b      	ldr	r2, [pc, #108]	; (401df8 <system_init_flash+0xa8>)
  401d8c:	4293      	cmp	r3, r2
  401d8e:	d806      	bhi.n	401d9e <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d90:	4b15      	ldr	r3, [pc, #84]	; (401de8 <system_init_flash+0x98>)
  401d92:	4a1a      	ldr	r2, [pc, #104]	; (401dfc <system_init_flash+0xac>)
  401d94:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d96:	4b15      	ldr	r3, [pc, #84]	; (401dec <system_init_flash+0x9c>)
  401d98:	4a18      	ldr	r2, [pc, #96]	; (401dfc <system_init_flash+0xac>)
  401d9a:	601a      	str	r2, [r3, #0]
}
  401d9c:	e01d      	b.n	401dda <system_init_flash+0x8a>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401d9e:	687b      	ldr	r3, [r7, #4]
  401da0:	4a17      	ldr	r2, [pc, #92]	; (401e00 <system_init_flash+0xb0>)
  401da2:	4293      	cmp	r3, r2
  401da4:	d806      	bhi.n	401db4 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401da6:	4b10      	ldr	r3, [pc, #64]	; (401de8 <system_init_flash+0x98>)
  401da8:	4a16      	ldr	r2, [pc, #88]	; (401e04 <system_init_flash+0xb4>)
  401daa:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401dac:	4b0f      	ldr	r3, [pc, #60]	; (401dec <system_init_flash+0x9c>)
  401dae:	4a15      	ldr	r2, [pc, #84]	; (401e04 <system_init_flash+0xb4>)
  401db0:	601a      	str	r2, [r3, #0]
}
  401db2:	e012      	b.n	401dda <system_init_flash+0x8a>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401db4:	687b      	ldr	r3, [r7, #4]
  401db6:	4a14      	ldr	r2, [pc, #80]	; (401e08 <system_init_flash+0xb8>)
  401db8:	4293      	cmp	r3, r2
  401dba:	d808      	bhi.n	401dce <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401dbc:	4b0a      	ldr	r3, [pc, #40]	; (401de8 <system_init_flash+0x98>)
  401dbe:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401dc2:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401dc4:	4b09      	ldr	r3, [pc, #36]	; (401dec <system_init_flash+0x9c>)
  401dc6:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401dca:	601a      	str	r2, [r3, #0]
}
  401dcc:	e005      	b.n	401dda <system_init_flash+0x8a>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401dce:	4b06      	ldr	r3, [pc, #24]	; (401de8 <system_init_flash+0x98>)
  401dd0:	4a0e      	ldr	r2, [pc, #56]	; (401e0c <system_init_flash+0xbc>)
  401dd2:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401dd4:	4b05      	ldr	r3, [pc, #20]	; (401dec <system_init_flash+0x9c>)
  401dd6:	4a0d      	ldr	r2, [pc, #52]	; (401e0c <system_init_flash+0xbc>)
  401dd8:	601a      	str	r2, [r3, #0]
}
  401dda:	bf00      	nop
  401ddc:	370c      	adds	r7, #12
  401dde:	46bd      	mov	sp, r7
  401de0:	bc80      	pop	{r7}
  401de2:	4770      	bx	lr
  401de4:	01312cff 	.word	0x01312cff
  401de8:	400e0a00 	.word	0x400e0a00
  401dec:	400e0c00 	.word	0x400e0c00
  401df0:	026259ff 	.word	0x026259ff
  401df4:	04000100 	.word	0x04000100
  401df8:	039386ff 	.word	0x039386ff
  401dfc:	04000200 	.word	0x04000200
  401e00:	04c4b3ff 	.word	0x04c4b3ff
  401e04:	04000300 	.word	0x04000300
  401e08:	05f5e0ff 	.word	0x05f5e0ff
  401e0c:	04000500 	.word	0x04000500

00401e10 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401e10:	b480      	push	{r7}
  401e12:	b085      	sub	sp, #20
  401e14:	af00      	add	r7, sp, #0
  401e16:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401e18:	4b10      	ldr	r3, [pc, #64]	; (401e5c <_sbrk+0x4c>)
  401e1a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401e1c:	4b10      	ldr	r3, [pc, #64]	; (401e60 <_sbrk+0x50>)
  401e1e:	681b      	ldr	r3, [r3, #0]
  401e20:	2b00      	cmp	r3, #0
  401e22:	d102      	bne.n	401e2a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401e24:	4b0e      	ldr	r3, [pc, #56]	; (401e60 <_sbrk+0x50>)
  401e26:	4a0f      	ldr	r2, [pc, #60]	; (401e64 <_sbrk+0x54>)
  401e28:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401e2a:	4b0d      	ldr	r3, [pc, #52]	; (401e60 <_sbrk+0x50>)
  401e2c:	681b      	ldr	r3, [r3, #0]
  401e2e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401e30:	68ba      	ldr	r2, [r7, #8]
  401e32:	687b      	ldr	r3, [r7, #4]
  401e34:	441a      	add	r2, r3
  401e36:	68fb      	ldr	r3, [r7, #12]
  401e38:	429a      	cmp	r2, r3
  401e3a:	dd02      	ble.n	401e42 <_sbrk+0x32>
		return (caddr_t) -1;	
  401e3c:	f04f 33ff 	mov.w	r3, #4294967295
  401e40:	e006      	b.n	401e50 <_sbrk+0x40>
	}

	heap += incr;
  401e42:	4b07      	ldr	r3, [pc, #28]	; (401e60 <_sbrk+0x50>)
  401e44:	681a      	ldr	r2, [r3, #0]
  401e46:	687b      	ldr	r3, [r7, #4]
  401e48:	4413      	add	r3, r2
  401e4a:	4a05      	ldr	r2, [pc, #20]	; (401e60 <_sbrk+0x50>)
  401e4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401e4e:	68bb      	ldr	r3, [r7, #8]
}
  401e50:	4618      	mov	r0, r3
  401e52:	3714      	adds	r7, #20
  401e54:	46bd      	mov	sp, r7
  401e56:	bc80      	pop	{r7}
  401e58:	4770      	bx	lr
  401e5a:	bf00      	nop
  401e5c:	20027ffc 	.word	0x20027ffc
  401e60:	20000a54 	.word	0x20000a54
  401e64:	200046d0 	.word	0x200046d0

00401e68 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401e68:	b480      	push	{r7}
  401e6a:	b083      	sub	sp, #12
  401e6c:	af00      	add	r7, sp, #0
  401e6e:	6078      	str	r0, [r7, #4]
	return -1;
  401e70:	f04f 33ff 	mov.w	r3, #4294967295
}
  401e74:	4618      	mov	r0, r3
  401e76:	370c      	adds	r7, #12
  401e78:	46bd      	mov	sp, r7
  401e7a:	bc80      	pop	{r7}
  401e7c:	4770      	bx	lr

00401e7e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401e7e:	b480      	push	{r7}
  401e80:	b083      	sub	sp, #12
  401e82:	af00      	add	r7, sp, #0
  401e84:	6078      	str	r0, [r7, #4]
  401e86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401e88:	683b      	ldr	r3, [r7, #0]
  401e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401e8e:	605a      	str	r2, [r3, #4]

	return 0;
  401e90:	2300      	movs	r3, #0
}
  401e92:	4618      	mov	r0, r3
  401e94:	370c      	adds	r7, #12
  401e96:	46bd      	mov	sp, r7
  401e98:	bc80      	pop	{r7}
  401e9a:	4770      	bx	lr

00401e9c <_isatty>:

extern int _isatty(int file)
{
  401e9c:	b480      	push	{r7}
  401e9e:	b083      	sub	sp, #12
  401ea0:	af00      	add	r7, sp, #0
  401ea2:	6078      	str	r0, [r7, #4]
	return 1;
  401ea4:	2301      	movs	r3, #1
}
  401ea6:	4618      	mov	r0, r3
  401ea8:	370c      	adds	r7, #12
  401eaa:	46bd      	mov	sp, r7
  401eac:	bc80      	pop	{r7}
  401eae:	4770      	bx	lr

00401eb0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401eb0:	b480      	push	{r7}
  401eb2:	b085      	sub	sp, #20
  401eb4:	af00      	add	r7, sp, #0
  401eb6:	60f8      	str	r0, [r7, #12]
  401eb8:	60b9      	str	r1, [r7, #8]
  401eba:	607a      	str	r2, [r7, #4]
	return 0;
  401ebc:	2300      	movs	r3, #0
}
  401ebe:	4618      	mov	r0, r3
  401ec0:	3714      	adds	r7, #20
  401ec2:	46bd      	mov	sp, r7
  401ec4:	bc80      	pop	{r7}
  401ec6:	4770      	bx	lr

00401ec8 <osc_get_rate>:
{
  401ec8:	b480      	push	{r7}
  401eca:	b083      	sub	sp, #12
  401ecc:	af00      	add	r7, sp, #0
  401ece:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401ed0:	687b      	ldr	r3, [r7, #4]
  401ed2:	2b07      	cmp	r3, #7
  401ed4:	d825      	bhi.n	401f22 <osc_get_rate+0x5a>
  401ed6:	a201      	add	r2, pc, #4	; (adr r2, 401edc <osc_get_rate+0x14>)
  401ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401edc:	00401efd 	.word	0x00401efd
  401ee0:	00401f03 	.word	0x00401f03
  401ee4:	00401f09 	.word	0x00401f09
  401ee8:	00401f0f 	.word	0x00401f0f
  401eec:	00401f13 	.word	0x00401f13
  401ef0:	00401f17 	.word	0x00401f17
  401ef4:	00401f1b 	.word	0x00401f1b
  401ef8:	00401f1f 	.word	0x00401f1f
		return OSC_SLCK_32K_RC_HZ;
  401efc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401f00:	e010      	b.n	401f24 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f06:	e00d      	b.n	401f24 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f0c:	e00a      	b.n	401f24 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401f0e:	4b08      	ldr	r3, [pc, #32]	; (401f30 <osc_get_rate+0x68>)
  401f10:	e008      	b.n	401f24 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401f12:	4b08      	ldr	r3, [pc, #32]	; (401f34 <osc_get_rate+0x6c>)
  401f14:	e006      	b.n	401f24 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401f16:	4b08      	ldr	r3, [pc, #32]	; (401f38 <osc_get_rate+0x70>)
  401f18:	e004      	b.n	401f24 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401f1a:	4b07      	ldr	r3, [pc, #28]	; (401f38 <osc_get_rate+0x70>)
  401f1c:	e002      	b.n	401f24 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401f1e:	4b06      	ldr	r3, [pc, #24]	; (401f38 <osc_get_rate+0x70>)
  401f20:	e000      	b.n	401f24 <osc_get_rate+0x5c>
	return 0;
  401f22:	2300      	movs	r3, #0
}
  401f24:	4618      	mov	r0, r3
  401f26:	370c      	adds	r7, #12
  401f28:	46bd      	mov	sp, r7
  401f2a:	bc80      	pop	{r7}
  401f2c:	4770      	bx	lr
  401f2e:	bf00      	nop
  401f30:	003d0900 	.word	0x003d0900
  401f34:	007a1200 	.word	0x007a1200
  401f38:	00b71b00 	.word	0x00b71b00

00401f3c <sysclk_get_main_hz>:
{
  401f3c:	b580      	push	{r7, lr}
  401f3e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401f40:	2006      	movs	r0, #6
  401f42:	4b04      	ldr	r3, [pc, #16]	; (401f54 <sysclk_get_main_hz+0x18>)
  401f44:	4798      	blx	r3
  401f46:	4602      	mov	r2, r0
  401f48:	4613      	mov	r3, r2
  401f4a:	009b      	lsls	r3, r3, #2
  401f4c:	4413      	add	r3, r2
  401f4e:	009b      	lsls	r3, r3, #2
}
  401f50:	4618      	mov	r0, r3
  401f52:	bd80      	pop	{r7, pc}
  401f54:	00401ec9 	.word	0x00401ec9

00401f58 <sysclk_get_cpu_hz>:
{
  401f58:	b580      	push	{r7, lr}
  401f5a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401f5c:	4b02      	ldr	r3, [pc, #8]	; (401f68 <sysclk_get_cpu_hz+0x10>)
  401f5e:	4798      	blx	r3
  401f60:	4603      	mov	r3, r0
  401f62:	085b      	lsrs	r3, r3, #1
}
  401f64:	4618      	mov	r0, r3
  401f66:	bd80      	pop	{r7, pc}
  401f68:	00401f3d 	.word	0x00401f3d

00401f6c <main>:
﻿#include "main.h"
#include "boot_uart.h"
#include "xmodem.h"

int main(void)
{
  401f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f70:	af00      	add	r7, sp, #0
	/* Initialize the board. */
	sysclk_init();
  401f72:	4b38      	ldr	r3, [pc, #224]	; (402054 <main+0xe8>)
  401f74:	4798      	blx	r3
	board_init();
  401f76:	4b38      	ldr	r3, [pc, #224]	; (402058 <main+0xec>)
  401f78:	4798      	blx	r3

	/* Initialize the UART console. */
	Boot_Uart_Init();
  401f7a:	4b38      	ldr	r3, [pc, #224]	; (40205c <main+0xf0>)
  401f7c:	4798      	blx	r3
	delay_ms(100);
  401f7e:	4b38      	ldr	r3, [pc, #224]	; (402060 <main+0xf4>)
  401f80:	4798      	blx	r3
  401f82:	4603      	mov	r3, r0
  401f84:	4619      	mov	r1, r3
  401f86:	f04f 0200 	mov.w	r2, #0
  401f8a:	460b      	mov	r3, r1
  401f8c:	4614      	mov	r4, r2
  401f8e:	18db      	adds	r3, r3, r3
  401f90:	eb44 0404 	adc.w	r4, r4, r4
  401f94:	185b      	adds	r3, r3, r1
  401f96:	eb44 0402 	adc.w	r4, r4, r2
  401f9a:	ea4f 1944 	mov.w	r9, r4, lsl #5
  401f9e:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  401fa2:	ea4f 1843 	mov.w	r8, r3, lsl #5
  401fa6:	eb13 0308 	adds.w	r3, r3, r8
  401faa:	eb44 0409 	adc.w	r4, r4, r9
  401fae:	185b      	adds	r3, r3, r1
  401fb0:	eb44 0402 	adc.w	r4, r4, r2
  401fb4:	f243 61af 	movw	r1, #13999	; 0x36af
  401fb8:	f04f 0200 	mov.w	r2, #0
  401fbc:	eb13 0801 	adds.w	r8, r3, r1
  401fc0:	eb44 0902 	adc.w	r9, r4, r2
  401fc4:	4640      	mov	r0, r8
  401fc6:	4649      	mov	r1, r9
  401fc8:	4c26      	ldr	r4, [pc, #152]	; (402064 <main+0xf8>)
  401fca:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401fce:	f04f 0300 	mov.w	r3, #0
  401fd2:	47a0      	blx	r4
  401fd4:	4603      	mov	r3, r0
  401fd6:	460c      	mov	r4, r1
  401fd8:	4618      	mov	r0, r3
  401fda:	4b23      	ldr	r3, [pc, #140]	; (402068 <main+0xfc>)
  401fdc:	4798      	blx	r3
	//uart_transmit_str("========================================\r\n");
	//uart_transmit_str("=  ATSAM4S Firmware Update Bootloader  =\r\n");
	//uart_transmit_str("========================================\r\n");
	uart_transmit_ch('h');
  401fde:	2068      	movs	r0, #104	; 0x68
  401fe0:	4b22      	ldr	r3, [pc, #136]	; (40206c <main+0x100>)
  401fe2:	4798      	blx	r3
	uart_transmit_ch('i');
  401fe4:	2069      	movs	r0, #105	; 0x69
  401fe6:	4b21      	ldr	r3, [pc, #132]	; (40206c <main+0x100>)
  401fe8:	4798      	blx	r3
	uart_transmit_str("hi\r\n");
  401fea:	4821      	ldr	r0, [pc, #132]	; (402070 <main+0x104>)
  401fec:	4b21      	ldr	r3, [pc, #132]	; (402074 <main+0x108>)
  401fee:	4798      	blx	r3
	printf("hello world\r\n");
  401ff0:	4821      	ldr	r0, [pc, #132]	; (402078 <main+0x10c>)
  401ff2:	4b22      	ldr	r3, [pc, #136]	; (40207c <main+0x110>)
  401ff4:	4798      	blx	r3
	while(1)
	{
		//uart_transmit_str("Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
		//xmodem_receive();
    	//uart_transmit_str("\n\rFailed... Please try again.\n\r");
		delay_ms(100);
  401ff6:	4b1a      	ldr	r3, [pc, #104]	; (402060 <main+0xf4>)
  401ff8:	4798      	blx	r3
  401ffa:	4603      	mov	r3, r0
  401ffc:	4619      	mov	r1, r3
  401ffe:	f04f 0200 	mov.w	r2, #0
  402002:	460b      	mov	r3, r1
  402004:	4614      	mov	r4, r2
  402006:	18db      	adds	r3, r3, r3
  402008:	eb44 0404 	adc.w	r4, r4, r4
  40200c:	185b      	adds	r3, r3, r1
  40200e:	eb44 0402 	adc.w	r4, r4, r2
  402012:	0166      	lsls	r6, r4, #5
  402014:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  402018:	015d      	lsls	r5, r3, #5
  40201a:	195b      	adds	r3, r3, r5
  40201c:	eb44 0406 	adc.w	r4, r4, r6
  402020:	185b      	adds	r3, r3, r1
  402022:	eb44 0402 	adc.w	r4, r4, r2
  402026:	f243 61af 	movw	r1, #13999	; 0x36af
  40202a:	f04f 0200 	mov.w	r2, #0
  40202e:	eb13 0801 	adds.w	r8, r3, r1
  402032:	eb44 0902 	adc.w	r9, r4, r2
  402036:	4640      	mov	r0, r8
  402038:	4649      	mov	r1, r9
  40203a:	4c0a      	ldr	r4, [pc, #40]	; (402064 <main+0xf8>)
  40203c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402040:	f04f 0300 	mov.w	r3, #0
  402044:	47a0      	blx	r4
  402046:	4603      	mov	r3, r0
  402048:	460c      	mov	r4, r1
  40204a:	4618      	mov	r0, r3
  40204c:	4b06      	ldr	r3, [pc, #24]	; (402068 <main+0xfc>)
  40204e:	4798      	blx	r3
  402050:	e7d1      	b.n	401ff6 <main+0x8a>
  402052:	bf00      	nop
  402054:	0040098d 	.word	0x0040098d
  402058:	00400d05 	.word	0x00400d05
  40205c:	004004e1 	.word	0x004004e1
  402060:	00401f59 	.word	0x00401f59
  402064:	00402081 	.word	0x00402081
  402068:	20000001 	.word	0x20000001
  40206c:	00400531 	.word	0x00400531
  402070:	0040500c 	.word	0x0040500c
  402074:	00400565 	.word	0x00400565
  402078:	00405014 	.word	0x00405014
  40207c:	004023e1 	.word	0x004023e1

00402080 <__aeabi_uldivmod>:
  402080:	b953      	cbnz	r3, 402098 <__aeabi_uldivmod+0x18>
  402082:	b94a      	cbnz	r2, 402098 <__aeabi_uldivmod+0x18>
  402084:	2900      	cmp	r1, #0
  402086:	bf08      	it	eq
  402088:	2800      	cmpeq	r0, #0
  40208a:	bf1c      	itt	ne
  40208c:	f04f 31ff 	movne.w	r1, #4294967295
  402090:	f04f 30ff 	movne.w	r0, #4294967295
  402094:	f000 b97a 	b.w	40238c <__aeabi_idiv0>
  402098:	f1ad 0c08 	sub.w	ip, sp, #8
  40209c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4020a0:	f000 f806 	bl	4020b0 <__udivmoddi4>
  4020a4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4020a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4020ac:	b004      	add	sp, #16
  4020ae:	4770      	bx	lr

004020b0 <__udivmoddi4>:
  4020b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020b4:	468c      	mov	ip, r1
  4020b6:	460d      	mov	r5, r1
  4020b8:	4604      	mov	r4, r0
  4020ba:	9e08      	ldr	r6, [sp, #32]
  4020bc:	2b00      	cmp	r3, #0
  4020be:	d151      	bne.n	402164 <__udivmoddi4+0xb4>
  4020c0:	428a      	cmp	r2, r1
  4020c2:	4617      	mov	r7, r2
  4020c4:	d96d      	bls.n	4021a2 <__udivmoddi4+0xf2>
  4020c6:	fab2 fe82 	clz	lr, r2
  4020ca:	f1be 0f00 	cmp.w	lr, #0
  4020ce:	d00b      	beq.n	4020e8 <__udivmoddi4+0x38>
  4020d0:	f1ce 0c20 	rsb	ip, lr, #32
  4020d4:	fa01 f50e 	lsl.w	r5, r1, lr
  4020d8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4020dc:	fa02 f70e 	lsl.w	r7, r2, lr
  4020e0:	ea4c 0c05 	orr.w	ip, ip, r5
  4020e4:	fa00 f40e 	lsl.w	r4, r0, lr
  4020e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4020ec:	0c25      	lsrs	r5, r4, #16
  4020ee:	fbbc f8fa 	udiv	r8, ip, sl
  4020f2:	fa1f f987 	uxth.w	r9, r7
  4020f6:	fb0a cc18 	mls	ip, sl, r8, ip
  4020fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4020fe:	fb08 f309 	mul.w	r3, r8, r9
  402102:	42ab      	cmp	r3, r5
  402104:	d90a      	bls.n	40211c <__udivmoddi4+0x6c>
  402106:	19ed      	adds	r5, r5, r7
  402108:	f108 32ff 	add.w	r2, r8, #4294967295
  40210c:	f080 8123 	bcs.w	402356 <__udivmoddi4+0x2a6>
  402110:	42ab      	cmp	r3, r5
  402112:	f240 8120 	bls.w	402356 <__udivmoddi4+0x2a6>
  402116:	f1a8 0802 	sub.w	r8, r8, #2
  40211a:	443d      	add	r5, r7
  40211c:	1aed      	subs	r5, r5, r3
  40211e:	b2a4      	uxth	r4, r4
  402120:	fbb5 f0fa 	udiv	r0, r5, sl
  402124:	fb0a 5510 	mls	r5, sl, r0, r5
  402128:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40212c:	fb00 f909 	mul.w	r9, r0, r9
  402130:	45a1      	cmp	r9, r4
  402132:	d909      	bls.n	402148 <__udivmoddi4+0x98>
  402134:	19e4      	adds	r4, r4, r7
  402136:	f100 33ff 	add.w	r3, r0, #4294967295
  40213a:	f080 810a 	bcs.w	402352 <__udivmoddi4+0x2a2>
  40213e:	45a1      	cmp	r9, r4
  402140:	f240 8107 	bls.w	402352 <__udivmoddi4+0x2a2>
  402144:	3802      	subs	r0, #2
  402146:	443c      	add	r4, r7
  402148:	eba4 0409 	sub.w	r4, r4, r9
  40214c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402150:	2100      	movs	r1, #0
  402152:	2e00      	cmp	r6, #0
  402154:	d061      	beq.n	40221a <__udivmoddi4+0x16a>
  402156:	fa24 f40e 	lsr.w	r4, r4, lr
  40215a:	2300      	movs	r3, #0
  40215c:	6034      	str	r4, [r6, #0]
  40215e:	6073      	str	r3, [r6, #4]
  402160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402164:	428b      	cmp	r3, r1
  402166:	d907      	bls.n	402178 <__udivmoddi4+0xc8>
  402168:	2e00      	cmp	r6, #0
  40216a:	d054      	beq.n	402216 <__udivmoddi4+0x166>
  40216c:	2100      	movs	r1, #0
  40216e:	e886 0021 	stmia.w	r6, {r0, r5}
  402172:	4608      	mov	r0, r1
  402174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402178:	fab3 f183 	clz	r1, r3
  40217c:	2900      	cmp	r1, #0
  40217e:	f040 808e 	bne.w	40229e <__udivmoddi4+0x1ee>
  402182:	42ab      	cmp	r3, r5
  402184:	d302      	bcc.n	40218c <__udivmoddi4+0xdc>
  402186:	4282      	cmp	r2, r0
  402188:	f200 80fa 	bhi.w	402380 <__udivmoddi4+0x2d0>
  40218c:	1a84      	subs	r4, r0, r2
  40218e:	eb65 0503 	sbc.w	r5, r5, r3
  402192:	2001      	movs	r0, #1
  402194:	46ac      	mov	ip, r5
  402196:	2e00      	cmp	r6, #0
  402198:	d03f      	beq.n	40221a <__udivmoddi4+0x16a>
  40219a:	e886 1010 	stmia.w	r6, {r4, ip}
  40219e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021a2:	b912      	cbnz	r2, 4021aa <__udivmoddi4+0xfa>
  4021a4:	2701      	movs	r7, #1
  4021a6:	fbb7 f7f2 	udiv	r7, r7, r2
  4021aa:	fab7 fe87 	clz	lr, r7
  4021ae:	f1be 0f00 	cmp.w	lr, #0
  4021b2:	d134      	bne.n	40221e <__udivmoddi4+0x16e>
  4021b4:	1beb      	subs	r3, r5, r7
  4021b6:	0c3a      	lsrs	r2, r7, #16
  4021b8:	fa1f fc87 	uxth.w	ip, r7
  4021bc:	2101      	movs	r1, #1
  4021be:	fbb3 f8f2 	udiv	r8, r3, r2
  4021c2:	0c25      	lsrs	r5, r4, #16
  4021c4:	fb02 3318 	mls	r3, r2, r8, r3
  4021c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4021cc:	fb0c f308 	mul.w	r3, ip, r8
  4021d0:	42ab      	cmp	r3, r5
  4021d2:	d907      	bls.n	4021e4 <__udivmoddi4+0x134>
  4021d4:	19ed      	adds	r5, r5, r7
  4021d6:	f108 30ff 	add.w	r0, r8, #4294967295
  4021da:	d202      	bcs.n	4021e2 <__udivmoddi4+0x132>
  4021dc:	42ab      	cmp	r3, r5
  4021de:	f200 80d1 	bhi.w	402384 <__udivmoddi4+0x2d4>
  4021e2:	4680      	mov	r8, r0
  4021e4:	1aed      	subs	r5, r5, r3
  4021e6:	b2a3      	uxth	r3, r4
  4021e8:	fbb5 f0f2 	udiv	r0, r5, r2
  4021ec:	fb02 5510 	mls	r5, r2, r0, r5
  4021f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4021f4:	fb0c fc00 	mul.w	ip, ip, r0
  4021f8:	45a4      	cmp	ip, r4
  4021fa:	d907      	bls.n	40220c <__udivmoddi4+0x15c>
  4021fc:	19e4      	adds	r4, r4, r7
  4021fe:	f100 33ff 	add.w	r3, r0, #4294967295
  402202:	d202      	bcs.n	40220a <__udivmoddi4+0x15a>
  402204:	45a4      	cmp	ip, r4
  402206:	f200 80b8 	bhi.w	40237a <__udivmoddi4+0x2ca>
  40220a:	4618      	mov	r0, r3
  40220c:	eba4 040c 	sub.w	r4, r4, ip
  402210:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402214:	e79d      	b.n	402152 <__udivmoddi4+0xa2>
  402216:	4631      	mov	r1, r6
  402218:	4630      	mov	r0, r6
  40221a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40221e:	f1ce 0420 	rsb	r4, lr, #32
  402222:	fa05 f30e 	lsl.w	r3, r5, lr
  402226:	fa07 f70e 	lsl.w	r7, r7, lr
  40222a:	fa20 f804 	lsr.w	r8, r0, r4
  40222e:	0c3a      	lsrs	r2, r7, #16
  402230:	fa25 f404 	lsr.w	r4, r5, r4
  402234:	ea48 0803 	orr.w	r8, r8, r3
  402238:	fbb4 f1f2 	udiv	r1, r4, r2
  40223c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402240:	fb02 4411 	mls	r4, r2, r1, r4
  402244:	fa1f fc87 	uxth.w	ip, r7
  402248:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40224c:	fb01 f30c 	mul.w	r3, r1, ip
  402250:	42ab      	cmp	r3, r5
  402252:	fa00 f40e 	lsl.w	r4, r0, lr
  402256:	d909      	bls.n	40226c <__udivmoddi4+0x1bc>
  402258:	19ed      	adds	r5, r5, r7
  40225a:	f101 30ff 	add.w	r0, r1, #4294967295
  40225e:	f080 808a 	bcs.w	402376 <__udivmoddi4+0x2c6>
  402262:	42ab      	cmp	r3, r5
  402264:	f240 8087 	bls.w	402376 <__udivmoddi4+0x2c6>
  402268:	3902      	subs	r1, #2
  40226a:	443d      	add	r5, r7
  40226c:	1aeb      	subs	r3, r5, r3
  40226e:	fa1f f588 	uxth.w	r5, r8
  402272:	fbb3 f0f2 	udiv	r0, r3, r2
  402276:	fb02 3310 	mls	r3, r2, r0, r3
  40227a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40227e:	fb00 f30c 	mul.w	r3, r0, ip
  402282:	42ab      	cmp	r3, r5
  402284:	d907      	bls.n	402296 <__udivmoddi4+0x1e6>
  402286:	19ed      	adds	r5, r5, r7
  402288:	f100 38ff 	add.w	r8, r0, #4294967295
  40228c:	d26f      	bcs.n	40236e <__udivmoddi4+0x2be>
  40228e:	42ab      	cmp	r3, r5
  402290:	d96d      	bls.n	40236e <__udivmoddi4+0x2be>
  402292:	3802      	subs	r0, #2
  402294:	443d      	add	r5, r7
  402296:	1aeb      	subs	r3, r5, r3
  402298:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40229c:	e78f      	b.n	4021be <__udivmoddi4+0x10e>
  40229e:	f1c1 0720 	rsb	r7, r1, #32
  4022a2:	fa22 f807 	lsr.w	r8, r2, r7
  4022a6:	408b      	lsls	r3, r1
  4022a8:	fa05 f401 	lsl.w	r4, r5, r1
  4022ac:	ea48 0303 	orr.w	r3, r8, r3
  4022b0:	fa20 fe07 	lsr.w	lr, r0, r7
  4022b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4022b8:	40fd      	lsrs	r5, r7
  4022ba:	ea4e 0e04 	orr.w	lr, lr, r4
  4022be:	fbb5 f9fc 	udiv	r9, r5, ip
  4022c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4022c6:	fb0c 5519 	mls	r5, ip, r9, r5
  4022ca:	fa1f f883 	uxth.w	r8, r3
  4022ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4022d2:	fb09 f408 	mul.w	r4, r9, r8
  4022d6:	42ac      	cmp	r4, r5
  4022d8:	fa02 f201 	lsl.w	r2, r2, r1
  4022dc:	fa00 fa01 	lsl.w	sl, r0, r1
  4022e0:	d908      	bls.n	4022f4 <__udivmoddi4+0x244>
  4022e2:	18ed      	adds	r5, r5, r3
  4022e4:	f109 30ff 	add.w	r0, r9, #4294967295
  4022e8:	d243      	bcs.n	402372 <__udivmoddi4+0x2c2>
  4022ea:	42ac      	cmp	r4, r5
  4022ec:	d941      	bls.n	402372 <__udivmoddi4+0x2c2>
  4022ee:	f1a9 0902 	sub.w	r9, r9, #2
  4022f2:	441d      	add	r5, r3
  4022f4:	1b2d      	subs	r5, r5, r4
  4022f6:	fa1f fe8e 	uxth.w	lr, lr
  4022fa:	fbb5 f0fc 	udiv	r0, r5, ip
  4022fe:	fb0c 5510 	mls	r5, ip, r0, r5
  402302:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402306:	fb00 f808 	mul.w	r8, r0, r8
  40230a:	45a0      	cmp	r8, r4
  40230c:	d907      	bls.n	40231e <__udivmoddi4+0x26e>
  40230e:	18e4      	adds	r4, r4, r3
  402310:	f100 35ff 	add.w	r5, r0, #4294967295
  402314:	d229      	bcs.n	40236a <__udivmoddi4+0x2ba>
  402316:	45a0      	cmp	r8, r4
  402318:	d927      	bls.n	40236a <__udivmoddi4+0x2ba>
  40231a:	3802      	subs	r0, #2
  40231c:	441c      	add	r4, r3
  40231e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402322:	eba4 0408 	sub.w	r4, r4, r8
  402326:	fba0 8902 	umull	r8, r9, r0, r2
  40232a:	454c      	cmp	r4, r9
  40232c:	46c6      	mov	lr, r8
  40232e:	464d      	mov	r5, r9
  402330:	d315      	bcc.n	40235e <__udivmoddi4+0x2ae>
  402332:	d012      	beq.n	40235a <__udivmoddi4+0x2aa>
  402334:	b156      	cbz	r6, 40234c <__udivmoddi4+0x29c>
  402336:	ebba 030e 	subs.w	r3, sl, lr
  40233a:	eb64 0405 	sbc.w	r4, r4, r5
  40233e:	fa04 f707 	lsl.w	r7, r4, r7
  402342:	40cb      	lsrs	r3, r1
  402344:	431f      	orrs	r7, r3
  402346:	40cc      	lsrs	r4, r1
  402348:	6037      	str	r7, [r6, #0]
  40234a:	6074      	str	r4, [r6, #4]
  40234c:	2100      	movs	r1, #0
  40234e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402352:	4618      	mov	r0, r3
  402354:	e6f8      	b.n	402148 <__udivmoddi4+0x98>
  402356:	4690      	mov	r8, r2
  402358:	e6e0      	b.n	40211c <__udivmoddi4+0x6c>
  40235a:	45c2      	cmp	sl, r8
  40235c:	d2ea      	bcs.n	402334 <__udivmoddi4+0x284>
  40235e:	ebb8 0e02 	subs.w	lr, r8, r2
  402362:	eb69 0503 	sbc.w	r5, r9, r3
  402366:	3801      	subs	r0, #1
  402368:	e7e4      	b.n	402334 <__udivmoddi4+0x284>
  40236a:	4628      	mov	r0, r5
  40236c:	e7d7      	b.n	40231e <__udivmoddi4+0x26e>
  40236e:	4640      	mov	r0, r8
  402370:	e791      	b.n	402296 <__udivmoddi4+0x1e6>
  402372:	4681      	mov	r9, r0
  402374:	e7be      	b.n	4022f4 <__udivmoddi4+0x244>
  402376:	4601      	mov	r1, r0
  402378:	e778      	b.n	40226c <__udivmoddi4+0x1bc>
  40237a:	3802      	subs	r0, #2
  40237c:	443c      	add	r4, r7
  40237e:	e745      	b.n	40220c <__udivmoddi4+0x15c>
  402380:	4608      	mov	r0, r1
  402382:	e708      	b.n	402196 <__udivmoddi4+0xe6>
  402384:	f1a8 0802 	sub.w	r8, r8, #2
  402388:	443d      	add	r5, r7
  40238a:	e72b      	b.n	4021e4 <__udivmoddi4+0x134>

0040238c <__aeabi_idiv0>:
  40238c:	4770      	bx	lr
  40238e:	bf00      	nop

00402390 <__libc_init_array>:
  402390:	b570      	push	{r4, r5, r6, lr}
  402392:	4e0f      	ldr	r6, [pc, #60]	; (4023d0 <__libc_init_array+0x40>)
  402394:	4d0f      	ldr	r5, [pc, #60]	; (4023d4 <__libc_init_array+0x44>)
  402396:	1b76      	subs	r6, r6, r5
  402398:	10b6      	asrs	r6, r6, #2
  40239a:	bf18      	it	ne
  40239c:	2400      	movne	r4, #0
  40239e:	d005      	beq.n	4023ac <__libc_init_array+0x1c>
  4023a0:	3401      	adds	r4, #1
  4023a2:	f855 3b04 	ldr.w	r3, [r5], #4
  4023a6:	4798      	blx	r3
  4023a8:	42a6      	cmp	r6, r4
  4023aa:	d1f9      	bne.n	4023a0 <__libc_init_array+0x10>
  4023ac:	4e0a      	ldr	r6, [pc, #40]	; (4023d8 <__libc_init_array+0x48>)
  4023ae:	4d0b      	ldr	r5, [pc, #44]	; (4023dc <__libc_init_array+0x4c>)
  4023b0:	1b76      	subs	r6, r6, r5
  4023b2:	f002 feeb 	bl	40518c <_init>
  4023b6:	10b6      	asrs	r6, r6, #2
  4023b8:	bf18      	it	ne
  4023ba:	2400      	movne	r4, #0
  4023bc:	d006      	beq.n	4023cc <__libc_init_array+0x3c>
  4023be:	3401      	adds	r4, #1
  4023c0:	f855 3b04 	ldr.w	r3, [r5], #4
  4023c4:	4798      	blx	r3
  4023c6:	42a6      	cmp	r6, r4
  4023c8:	d1f9      	bne.n	4023be <__libc_init_array+0x2e>
  4023ca:	bd70      	pop	{r4, r5, r6, pc}
  4023cc:	bd70      	pop	{r4, r5, r6, pc}
  4023ce:	bf00      	nop
  4023d0:	00405198 	.word	0x00405198
  4023d4:	00405198 	.word	0x00405198
  4023d8:	004051a0 	.word	0x004051a0
  4023dc:	00405198 	.word	0x00405198

004023e0 <iprintf>:
  4023e0:	b40f      	push	{r0, r1, r2, r3}
  4023e2:	b500      	push	{lr}
  4023e4:	4907      	ldr	r1, [pc, #28]	; (402404 <iprintf+0x24>)
  4023e6:	b083      	sub	sp, #12
  4023e8:	ab04      	add	r3, sp, #16
  4023ea:	6808      	ldr	r0, [r1, #0]
  4023ec:	f853 2b04 	ldr.w	r2, [r3], #4
  4023f0:	6881      	ldr	r1, [r0, #8]
  4023f2:	9301      	str	r3, [sp, #4]
  4023f4:	f000 fcb2 	bl	402d5c <_vfiprintf_r>
  4023f8:	b003      	add	sp, #12
  4023fa:	f85d eb04 	ldr.w	lr, [sp], #4
  4023fe:	b004      	add	sp, #16
  402400:	4770      	bx	lr
  402402:	bf00      	nop
  402404:	20000010 	.word	0x20000010

00402408 <malloc>:
  402408:	4b02      	ldr	r3, [pc, #8]	; (402414 <malloc+0xc>)
  40240a:	4601      	mov	r1, r0
  40240c:	6818      	ldr	r0, [r3, #0]
  40240e:	f000 b803 	b.w	402418 <_malloc_r>
  402412:	bf00      	nop
  402414:	20000010 	.word	0x20000010

00402418 <_malloc_r>:
  402418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40241c:	f101 060b 	add.w	r6, r1, #11
  402420:	2e16      	cmp	r6, #22
  402422:	b083      	sub	sp, #12
  402424:	4605      	mov	r5, r0
  402426:	f240 809e 	bls.w	402566 <_malloc_r+0x14e>
  40242a:	f036 0607 	bics.w	r6, r6, #7
  40242e:	f100 80bd 	bmi.w	4025ac <_malloc_r+0x194>
  402432:	42b1      	cmp	r1, r6
  402434:	f200 80ba 	bhi.w	4025ac <_malloc_r+0x194>
  402438:	f000 faec 	bl	402a14 <__malloc_lock>
  40243c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402440:	f0c0 8293 	bcc.w	40296a <_malloc_r+0x552>
  402444:	0a73      	lsrs	r3, r6, #9
  402446:	f000 80b8 	beq.w	4025ba <_malloc_r+0x1a2>
  40244a:	2b04      	cmp	r3, #4
  40244c:	f200 8179 	bhi.w	402742 <_malloc_r+0x32a>
  402450:	09b3      	lsrs	r3, r6, #6
  402452:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402456:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40245a:	00c3      	lsls	r3, r0, #3
  40245c:	4fbf      	ldr	r7, [pc, #764]	; (40275c <_malloc_r+0x344>)
  40245e:	443b      	add	r3, r7
  402460:	f1a3 0108 	sub.w	r1, r3, #8
  402464:	685c      	ldr	r4, [r3, #4]
  402466:	42a1      	cmp	r1, r4
  402468:	d106      	bne.n	402478 <_malloc_r+0x60>
  40246a:	e00c      	b.n	402486 <_malloc_r+0x6e>
  40246c:	2a00      	cmp	r2, #0
  40246e:	f280 80aa 	bge.w	4025c6 <_malloc_r+0x1ae>
  402472:	68e4      	ldr	r4, [r4, #12]
  402474:	42a1      	cmp	r1, r4
  402476:	d006      	beq.n	402486 <_malloc_r+0x6e>
  402478:	6863      	ldr	r3, [r4, #4]
  40247a:	f023 0303 	bic.w	r3, r3, #3
  40247e:	1b9a      	subs	r2, r3, r6
  402480:	2a0f      	cmp	r2, #15
  402482:	ddf3      	ble.n	40246c <_malloc_r+0x54>
  402484:	4670      	mov	r0, lr
  402486:	693c      	ldr	r4, [r7, #16]
  402488:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402770 <_malloc_r+0x358>
  40248c:	4574      	cmp	r4, lr
  40248e:	f000 81ab 	beq.w	4027e8 <_malloc_r+0x3d0>
  402492:	6863      	ldr	r3, [r4, #4]
  402494:	f023 0303 	bic.w	r3, r3, #3
  402498:	1b9a      	subs	r2, r3, r6
  40249a:	2a0f      	cmp	r2, #15
  40249c:	f300 8190 	bgt.w	4027c0 <_malloc_r+0x3a8>
  4024a0:	2a00      	cmp	r2, #0
  4024a2:	f8c7 e014 	str.w	lr, [r7, #20]
  4024a6:	f8c7 e010 	str.w	lr, [r7, #16]
  4024aa:	f280 809d 	bge.w	4025e8 <_malloc_r+0x1d0>
  4024ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4024b2:	f080 8161 	bcs.w	402778 <_malloc_r+0x360>
  4024b6:	08db      	lsrs	r3, r3, #3
  4024b8:	f103 0c01 	add.w	ip, r3, #1
  4024bc:	1099      	asrs	r1, r3, #2
  4024be:	687a      	ldr	r2, [r7, #4]
  4024c0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4024c4:	f8c4 8008 	str.w	r8, [r4, #8]
  4024c8:	2301      	movs	r3, #1
  4024ca:	408b      	lsls	r3, r1
  4024cc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4024d0:	4313      	orrs	r3, r2
  4024d2:	3908      	subs	r1, #8
  4024d4:	60e1      	str	r1, [r4, #12]
  4024d6:	607b      	str	r3, [r7, #4]
  4024d8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4024dc:	f8c8 400c 	str.w	r4, [r8, #12]
  4024e0:	1082      	asrs	r2, r0, #2
  4024e2:	2401      	movs	r4, #1
  4024e4:	4094      	lsls	r4, r2
  4024e6:	429c      	cmp	r4, r3
  4024e8:	f200 808b 	bhi.w	402602 <_malloc_r+0x1ea>
  4024ec:	421c      	tst	r4, r3
  4024ee:	d106      	bne.n	4024fe <_malloc_r+0xe6>
  4024f0:	f020 0003 	bic.w	r0, r0, #3
  4024f4:	0064      	lsls	r4, r4, #1
  4024f6:	421c      	tst	r4, r3
  4024f8:	f100 0004 	add.w	r0, r0, #4
  4024fc:	d0fa      	beq.n	4024f4 <_malloc_r+0xdc>
  4024fe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402502:	46cc      	mov	ip, r9
  402504:	4680      	mov	r8, r0
  402506:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40250a:	459c      	cmp	ip, r3
  40250c:	d107      	bne.n	40251e <_malloc_r+0x106>
  40250e:	e16d      	b.n	4027ec <_malloc_r+0x3d4>
  402510:	2a00      	cmp	r2, #0
  402512:	f280 817b 	bge.w	40280c <_malloc_r+0x3f4>
  402516:	68db      	ldr	r3, [r3, #12]
  402518:	459c      	cmp	ip, r3
  40251a:	f000 8167 	beq.w	4027ec <_malloc_r+0x3d4>
  40251e:	6859      	ldr	r1, [r3, #4]
  402520:	f021 0103 	bic.w	r1, r1, #3
  402524:	1b8a      	subs	r2, r1, r6
  402526:	2a0f      	cmp	r2, #15
  402528:	ddf2      	ble.n	402510 <_malloc_r+0xf8>
  40252a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40252e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402532:	9300      	str	r3, [sp, #0]
  402534:	199c      	adds	r4, r3, r6
  402536:	4628      	mov	r0, r5
  402538:	f046 0601 	orr.w	r6, r6, #1
  40253c:	f042 0501 	orr.w	r5, r2, #1
  402540:	605e      	str	r6, [r3, #4]
  402542:	f8c8 c00c 	str.w	ip, [r8, #12]
  402546:	f8cc 8008 	str.w	r8, [ip, #8]
  40254a:	617c      	str	r4, [r7, #20]
  40254c:	613c      	str	r4, [r7, #16]
  40254e:	f8c4 e00c 	str.w	lr, [r4, #12]
  402552:	f8c4 e008 	str.w	lr, [r4, #8]
  402556:	6065      	str	r5, [r4, #4]
  402558:	505a      	str	r2, [r3, r1]
  40255a:	f000 fa61 	bl	402a20 <__malloc_unlock>
  40255e:	9b00      	ldr	r3, [sp, #0]
  402560:	f103 0408 	add.w	r4, r3, #8
  402564:	e01e      	b.n	4025a4 <_malloc_r+0x18c>
  402566:	2910      	cmp	r1, #16
  402568:	d820      	bhi.n	4025ac <_malloc_r+0x194>
  40256a:	f000 fa53 	bl	402a14 <__malloc_lock>
  40256e:	2610      	movs	r6, #16
  402570:	2318      	movs	r3, #24
  402572:	2002      	movs	r0, #2
  402574:	4f79      	ldr	r7, [pc, #484]	; (40275c <_malloc_r+0x344>)
  402576:	443b      	add	r3, r7
  402578:	f1a3 0208 	sub.w	r2, r3, #8
  40257c:	685c      	ldr	r4, [r3, #4]
  40257e:	4294      	cmp	r4, r2
  402580:	f000 813d 	beq.w	4027fe <_malloc_r+0x3e6>
  402584:	6863      	ldr	r3, [r4, #4]
  402586:	68e1      	ldr	r1, [r4, #12]
  402588:	68a6      	ldr	r6, [r4, #8]
  40258a:	f023 0303 	bic.w	r3, r3, #3
  40258e:	4423      	add	r3, r4
  402590:	4628      	mov	r0, r5
  402592:	685a      	ldr	r2, [r3, #4]
  402594:	60f1      	str	r1, [r6, #12]
  402596:	f042 0201 	orr.w	r2, r2, #1
  40259a:	608e      	str	r6, [r1, #8]
  40259c:	605a      	str	r2, [r3, #4]
  40259e:	f000 fa3f 	bl	402a20 <__malloc_unlock>
  4025a2:	3408      	adds	r4, #8
  4025a4:	4620      	mov	r0, r4
  4025a6:	b003      	add	sp, #12
  4025a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025ac:	2400      	movs	r4, #0
  4025ae:	230c      	movs	r3, #12
  4025b0:	4620      	mov	r0, r4
  4025b2:	602b      	str	r3, [r5, #0]
  4025b4:	b003      	add	sp, #12
  4025b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025ba:	2040      	movs	r0, #64	; 0x40
  4025bc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4025c0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4025c4:	e74a      	b.n	40245c <_malloc_r+0x44>
  4025c6:	4423      	add	r3, r4
  4025c8:	68e1      	ldr	r1, [r4, #12]
  4025ca:	685a      	ldr	r2, [r3, #4]
  4025cc:	68a6      	ldr	r6, [r4, #8]
  4025ce:	f042 0201 	orr.w	r2, r2, #1
  4025d2:	60f1      	str	r1, [r6, #12]
  4025d4:	4628      	mov	r0, r5
  4025d6:	608e      	str	r6, [r1, #8]
  4025d8:	605a      	str	r2, [r3, #4]
  4025da:	f000 fa21 	bl	402a20 <__malloc_unlock>
  4025de:	3408      	adds	r4, #8
  4025e0:	4620      	mov	r0, r4
  4025e2:	b003      	add	sp, #12
  4025e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025e8:	4423      	add	r3, r4
  4025ea:	4628      	mov	r0, r5
  4025ec:	685a      	ldr	r2, [r3, #4]
  4025ee:	f042 0201 	orr.w	r2, r2, #1
  4025f2:	605a      	str	r2, [r3, #4]
  4025f4:	f000 fa14 	bl	402a20 <__malloc_unlock>
  4025f8:	3408      	adds	r4, #8
  4025fa:	4620      	mov	r0, r4
  4025fc:	b003      	add	sp, #12
  4025fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402602:	68bc      	ldr	r4, [r7, #8]
  402604:	6863      	ldr	r3, [r4, #4]
  402606:	f023 0803 	bic.w	r8, r3, #3
  40260a:	45b0      	cmp	r8, r6
  40260c:	d304      	bcc.n	402618 <_malloc_r+0x200>
  40260e:	eba8 0306 	sub.w	r3, r8, r6
  402612:	2b0f      	cmp	r3, #15
  402614:	f300 8085 	bgt.w	402722 <_malloc_r+0x30a>
  402618:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402774 <_malloc_r+0x35c>
  40261c:	4b50      	ldr	r3, [pc, #320]	; (402760 <_malloc_r+0x348>)
  40261e:	f8d9 2000 	ldr.w	r2, [r9]
  402622:	681b      	ldr	r3, [r3, #0]
  402624:	3201      	adds	r2, #1
  402626:	4433      	add	r3, r6
  402628:	eb04 0a08 	add.w	sl, r4, r8
  40262c:	f000 8155 	beq.w	4028da <_malloc_r+0x4c2>
  402630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402634:	330f      	adds	r3, #15
  402636:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40263a:	f02b 0b0f 	bic.w	fp, fp, #15
  40263e:	4659      	mov	r1, fp
  402640:	4628      	mov	r0, r5
  402642:	f000 f9f3 	bl	402a2c <_sbrk_r>
  402646:	1c41      	adds	r1, r0, #1
  402648:	4602      	mov	r2, r0
  40264a:	f000 80fc 	beq.w	402846 <_malloc_r+0x42e>
  40264e:	4582      	cmp	sl, r0
  402650:	f200 80f7 	bhi.w	402842 <_malloc_r+0x42a>
  402654:	4b43      	ldr	r3, [pc, #268]	; (402764 <_malloc_r+0x34c>)
  402656:	6819      	ldr	r1, [r3, #0]
  402658:	4459      	add	r1, fp
  40265a:	6019      	str	r1, [r3, #0]
  40265c:	f000 814d 	beq.w	4028fa <_malloc_r+0x4e2>
  402660:	f8d9 0000 	ldr.w	r0, [r9]
  402664:	3001      	adds	r0, #1
  402666:	bf1b      	ittet	ne
  402668:	eba2 0a0a 	subne.w	sl, r2, sl
  40266c:	4451      	addne	r1, sl
  40266e:	f8c9 2000 	streq.w	r2, [r9]
  402672:	6019      	strne	r1, [r3, #0]
  402674:	f012 0107 	ands.w	r1, r2, #7
  402678:	f000 8115 	beq.w	4028a6 <_malloc_r+0x48e>
  40267c:	f1c1 0008 	rsb	r0, r1, #8
  402680:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402684:	4402      	add	r2, r0
  402686:	3108      	adds	r1, #8
  402688:	eb02 090b 	add.w	r9, r2, fp
  40268c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402690:	eba1 0909 	sub.w	r9, r1, r9
  402694:	4649      	mov	r1, r9
  402696:	4628      	mov	r0, r5
  402698:	9301      	str	r3, [sp, #4]
  40269a:	9200      	str	r2, [sp, #0]
  40269c:	f000 f9c6 	bl	402a2c <_sbrk_r>
  4026a0:	1c43      	adds	r3, r0, #1
  4026a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4026a6:	f000 8143 	beq.w	402930 <_malloc_r+0x518>
  4026aa:	1a80      	subs	r0, r0, r2
  4026ac:	4448      	add	r0, r9
  4026ae:	f040 0001 	orr.w	r0, r0, #1
  4026b2:	6819      	ldr	r1, [r3, #0]
  4026b4:	60ba      	str	r2, [r7, #8]
  4026b6:	4449      	add	r1, r9
  4026b8:	42bc      	cmp	r4, r7
  4026ba:	6050      	str	r0, [r2, #4]
  4026bc:	6019      	str	r1, [r3, #0]
  4026be:	d017      	beq.n	4026f0 <_malloc_r+0x2d8>
  4026c0:	f1b8 0f0f 	cmp.w	r8, #15
  4026c4:	f240 80fb 	bls.w	4028be <_malloc_r+0x4a6>
  4026c8:	6860      	ldr	r0, [r4, #4]
  4026ca:	f1a8 020c 	sub.w	r2, r8, #12
  4026ce:	f022 0207 	bic.w	r2, r2, #7
  4026d2:	eb04 0e02 	add.w	lr, r4, r2
  4026d6:	f000 0001 	and.w	r0, r0, #1
  4026da:	f04f 0c05 	mov.w	ip, #5
  4026de:	4310      	orrs	r0, r2
  4026e0:	2a0f      	cmp	r2, #15
  4026e2:	6060      	str	r0, [r4, #4]
  4026e4:	f8ce c004 	str.w	ip, [lr, #4]
  4026e8:	f8ce c008 	str.w	ip, [lr, #8]
  4026ec:	f200 8117 	bhi.w	40291e <_malloc_r+0x506>
  4026f0:	4b1d      	ldr	r3, [pc, #116]	; (402768 <_malloc_r+0x350>)
  4026f2:	68bc      	ldr	r4, [r7, #8]
  4026f4:	681a      	ldr	r2, [r3, #0]
  4026f6:	4291      	cmp	r1, r2
  4026f8:	bf88      	it	hi
  4026fa:	6019      	strhi	r1, [r3, #0]
  4026fc:	4b1b      	ldr	r3, [pc, #108]	; (40276c <_malloc_r+0x354>)
  4026fe:	681a      	ldr	r2, [r3, #0]
  402700:	4291      	cmp	r1, r2
  402702:	6862      	ldr	r2, [r4, #4]
  402704:	bf88      	it	hi
  402706:	6019      	strhi	r1, [r3, #0]
  402708:	f022 0203 	bic.w	r2, r2, #3
  40270c:	4296      	cmp	r6, r2
  40270e:	eba2 0306 	sub.w	r3, r2, r6
  402712:	d801      	bhi.n	402718 <_malloc_r+0x300>
  402714:	2b0f      	cmp	r3, #15
  402716:	dc04      	bgt.n	402722 <_malloc_r+0x30a>
  402718:	4628      	mov	r0, r5
  40271a:	f000 f981 	bl	402a20 <__malloc_unlock>
  40271e:	2400      	movs	r4, #0
  402720:	e740      	b.n	4025a4 <_malloc_r+0x18c>
  402722:	19a2      	adds	r2, r4, r6
  402724:	f043 0301 	orr.w	r3, r3, #1
  402728:	f046 0601 	orr.w	r6, r6, #1
  40272c:	6066      	str	r6, [r4, #4]
  40272e:	4628      	mov	r0, r5
  402730:	60ba      	str	r2, [r7, #8]
  402732:	6053      	str	r3, [r2, #4]
  402734:	f000 f974 	bl	402a20 <__malloc_unlock>
  402738:	3408      	adds	r4, #8
  40273a:	4620      	mov	r0, r4
  40273c:	b003      	add	sp, #12
  40273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402742:	2b14      	cmp	r3, #20
  402744:	d971      	bls.n	40282a <_malloc_r+0x412>
  402746:	2b54      	cmp	r3, #84	; 0x54
  402748:	f200 80a3 	bhi.w	402892 <_malloc_r+0x47a>
  40274c:	0b33      	lsrs	r3, r6, #12
  40274e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402752:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402756:	00c3      	lsls	r3, r0, #3
  402758:	e680      	b.n	40245c <_malloc_r+0x44>
  40275a:	bf00      	nop
  40275c:	20000440 	.word	0x20000440
  402760:	20000a88 	.word	0x20000a88
  402764:	20000a58 	.word	0x20000a58
  402768:	20000a80 	.word	0x20000a80
  40276c:	20000a84 	.word	0x20000a84
  402770:	20000448 	.word	0x20000448
  402774:	20000848 	.word	0x20000848
  402778:	0a5a      	lsrs	r2, r3, #9
  40277a:	2a04      	cmp	r2, #4
  40277c:	d95b      	bls.n	402836 <_malloc_r+0x41e>
  40277e:	2a14      	cmp	r2, #20
  402780:	f200 80ae 	bhi.w	4028e0 <_malloc_r+0x4c8>
  402784:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402788:	00c9      	lsls	r1, r1, #3
  40278a:	325b      	adds	r2, #91	; 0x5b
  40278c:	eb07 0c01 	add.w	ip, r7, r1
  402790:	5879      	ldr	r1, [r7, r1]
  402792:	f1ac 0c08 	sub.w	ip, ip, #8
  402796:	458c      	cmp	ip, r1
  402798:	f000 8088 	beq.w	4028ac <_malloc_r+0x494>
  40279c:	684a      	ldr	r2, [r1, #4]
  40279e:	f022 0203 	bic.w	r2, r2, #3
  4027a2:	4293      	cmp	r3, r2
  4027a4:	d273      	bcs.n	40288e <_malloc_r+0x476>
  4027a6:	6889      	ldr	r1, [r1, #8]
  4027a8:	458c      	cmp	ip, r1
  4027aa:	d1f7      	bne.n	40279c <_malloc_r+0x384>
  4027ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4027b0:	687b      	ldr	r3, [r7, #4]
  4027b2:	60e2      	str	r2, [r4, #12]
  4027b4:	f8c4 c008 	str.w	ip, [r4, #8]
  4027b8:	6094      	str	r4, [r2, #8]
  4027ba:	f8cc 400c 	str.w	r4, [ip, #12]
  4027be:	e68f      	b.n	4024e0 <_malloc_r+0xc8>
  4027c0:	19a1      	adds	r1, r4, r6
  4027c2:	f046 0c01 	orr.w	ip, r6, #1
  4027c6:	f042 0601 	orr.w	r6, r2, #1
  4027ca:	f8c4 c004 	str.w	ip, [r4, #4]
  4027ce:	4628      	mov	r0, r5
  4027d0:	6179      	str	r1, [r7, #20]
  4027d2:	6139      	str	r1, [r7, #16]
  4027d4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4027d8:	f8c1 e008 	str.w	lr, [r1, #8]
  4027dc:	604e      	str	r6, [r1, #4]
  4027de:	50e2      	str	r2, [r4, r3]
  4027e0:	f000 f91e 	bl	402a20 <__malloc_unlock>
  4027e4:	3408      	adds	r4, #8
  4027e6:	e6dd      	b.n	4025a4 <_malloc_r+0x18c>
  4027e8:	687b      	ldr	r3, [r7, #4]
  4027ea:	e679      	b.n	4024e0 <_malloc_r+0xc8>
  4027ec:	f108 0801 	add.w	r8, r8, #1
  4027f0:	f018 0f03 	tst.w	r8, #3
  4027f4:	f10c 0c08 	add.w	ip, ip, #8
  4027f8:	f47f ae85 	bne.w	402506 <_malloc_r+0xee>
  4027fc:	e02d      	b.n	40285a <_malloc_r+0x442>
  4027fe:	68dc      	ldr	r4, [r3, #12]
  402800:	42a3      	cmp	r3, r4
  402802:	bf08      	it	eq
  402804:	3002      	addeq	r0, #2
  402806:	f43f ae3e 	beq.w	402486 <_malloc_r+0x6e>
  40280a:	e6bb      	b.n	402584 <_malloc_r+0x16c>
  40280c:	4419      	add	r1, r3
  40280e:	461c      	mov	r4, r3
  402810:	684a      	ldr	r2, [r1, #4]
  402812:	68db      	ldr	r3, [r3, #12]
  402814:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402818:	f042 0201 	orr.w	r2, r2, #1
  40281c:	604a      	str	r2, [r1, #4]
  40281e:	4628      	mov	r0, r5
  402820:	60f3      	str	r3, [r6, #12]
  402822:	609e      	str	r6, [r3, #8]
  402824:	f000 f8fc 	bl	402a20 <__malloc_unlock>
  402828:	e6bc      	b.n	4025a4 <_malloc_r+0x18c>
  40282a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40282e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402832:	00c3      	lsls	r3, r0, #3
  402834:	e612      	b.n	40245c <_malloc_r+0x44>
  402836:	099a      	lsrs	r2, r3, #6
  402838:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40283c:	00c9      	lsls	r1, r1, #3
  40283e:	3238      	adds	r2, #56	; 0x38
  402840:	e7a4      	b.n	40278c <_malloc_r+0x374>
  402842:	42bc      	cmp	r4, r7
  402844:	d054      	beq.n	4028f0 <_malloc_r+0x4d8>
  402846:	68bc      	ldr	r4, [r7, #8]
  402848:	6862      	ldr	r2, [r4, #4]
  40284a:	f022 0203 	bic.w	r2, r2, #3
  40284e:	e75d      	b.n	40270c <_malloc_r+0x2f4>
  402850:	f859 3908 	ldr.w	r3, [r9], #-8
  402854:	4599      	cmp	r9, r3
  402856:	f040 8086 	bne.w	402966 <_malloc_r+0x54e>
  40285a:	f010 0f03 	tst.w	r0, #3
  40285e:	f100 30ff 	add.w	r0, r0, #4294967295
  402862:	d1f5      	bne.n	402850 <_malloc_r+0x438>
  402864:	687b      	ldr	r3, [r7, #4]
  402866:	ea23 0304 	bic.w	r3, r3, r4
  40286a:	607b      	str	r3, [r7, #4]
  40286c:	0064      	lsls	r4, r4, #1
  40286e:	429c      	cmp	r4, r3
  402870:	f63f aec7 	bhi.w	402602 <_malloc_r+0x1ea>
  402874:	2c00      	cmp	r4, #0
  402876:	f43f aec4 	beq.w	402602 <_malloc_r+0x1ea>
  40287a:	421c      	tst	r4, r3
  40287c:	4640      	mov	r0, r8
  40287e:	f47f ae3e 	bne.w	4024fe <_malloc_r+0xe6>
  402882:	0064      	lsls	r4, r4, #1
  402884:	421c      	tst	r4, r3
  402886:	f100 0004 	add.w	r0, r0, #4
  40288a:	d0fa      	beq.n	402882 <_malloc_r+0x46a>
  40288c:	e637      	b.n	4024fe <_malloc_r+0xe6>
  40288e:	468c      	mov	ip, r1
  402890:	e78c      	b.n	4027ac <_malloc_r+0x394>
  402892:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402896:	d815      	bhi.n	4028c4 <_malloc_r+0x4ac>
  402898:	0bf3      	lsrs	r3, r6, #15
  40289a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40289e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4028a2:	00c3      	lsls	r3, r0, #3
  4028a4:	e5da      	b.n	40245c <_malloc_r+0x44>
  4028a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4028aa:	e6ed      	b.n	402688 <_malloc_r+0x270>
  4028ac:	687b      	ldr	r3, [r7, #4]
  4028ae:	1092      	asrs	r2, r2, #2
  4028b0:	2101      	movs	r1, #1
  4028b2:	fa01 f202 	lsl.w	r2, r1, r2
  4028b6:	4313      	orrs	r3, r2
  4028b8:	607b      	str	r3, [r7, #4]
  4028ba:	4662      	mov	r2, ip
  4028bc:	e779      	b.n	4027b2 <_malloc_r+0x39a>
  4028be:	2301      	movs	r3, #1
  4028c0:	6053      	str	r3, [r2, #4]
  4028c2:	e729      	b.n	402718 <_malloc_r+0x300>
  4028c4:	f240 5254 	movw	r2, #1364	; 0x554
  4028c8:	4293      	cmp	r3, r2
  4028ca:	d822      	bhi.n	402912 <_malloc_r+0x4fa>
  4028cc:	0cb3      	lsrs	r3, r6, #18
  4028ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4028d2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4028d6:	00c3      	lsls	r3, r0, #3
  4028d8:	e5c0      	b.n	40245c <_malloc_r+0x44>
  4028da:	f103 0b10 	add.w	fp, r3, #16
  4028de:	e6ae      	b.n	40263e <_malloc_r+0x226>
  4028e0:	2a54      	cmp	r2, #84	; 0x54
  4028e2:	d829      	bhi.n	402938 <_malloc_r+0x520>
  4028e4:	0b1a      	lsrs	r2, r3, #12
  4028e6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4028ea:	00c9      	lsls	r1, r1, #3
  4028ec:	326e      	adds	r2, #110	; 0x6e
  4028ee:	e74d      	b.n	40278c <_malloc_r+0x374>
  4028f0:	4b20      	ldr	r3, [pc, #128]	; (402974 <_malloc_r+0x55c>)
  4028f2:	6819      	ldr	r1, [r3, #0]
  4028f4:	4459      	add	r1, fp
  4028f6:	6019      	str	r1, [r3, #0]
  4028f8:	e6b2      	b.n	402660 <_malloc_r+0x248>
  4028fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4028fe:	2800      	cmp	r0, #0
  402900:	f47f aeae 	bne.w	402660 <_malloc_r+0x248>
  402904:	eb08 030b 	add.w	r3, r8, fp
  402908:	68ba      	ldr	r2, [r7, #8]
  40290a:	f043 0301 	orr.w	r3, r3, #1
  40290e:	6053      	str	r3, [r2, #4]
  402910:	e6ee      	b.n	4026f0 <_malloc_r+0x2d8>
  402912:	207f      	movs	r0, #127	; 0x7f
  402914:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402918:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40291c:	e59e      	b.n	40245c <_malloc_r+0x44>
  40291e:	f104 0108 	add.w	r1, r4, #8
  402922:	4628      	mov	r0, r5
  402924:	9300      	str	r3, [sp, #0]
  402926:	f001 fb35 	bl	403f94 <_free_r>
  40292a:	9b00      	ldr	r3, [sp, #0]
  40292c:	6819      	ldr	r1, [r3, #0]
  40292e:	e6df      	b.n	4026f0 <_malloc_r+0x2d8>
  402930:	2001      	movs	r0, #1
  402932:	f04f 0900 	mov.w	r9, #0
  402936:	e6bc      	b.n	4026b2 <_malloc_r+0x29a>
  402938:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40293c:	d805      	bhi.n	40294a <_malloc_r+0x532>
  40293e:	0bda      	lsrs	r2, r3, #15
  402940:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402944:	00c9      	lsls	r1, r1, #3
  402946:	3277      	adds	r2, #119	; 0x77
  402948:	e720      	b.n	40278c <_malloc_r+0x374>
  40294a:	f240 5154 	movw	r1, #1364	; 0x554
  40294e:	428a      	cmp	r2, r1
  402950:	d805      	bhi.n	40295e <_malloc_r+0x546>
  402952:	0c9a      	lsrs	r2, r3, #18
  402954:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402958:	00c9      	lsls	r1, r1, #3
  40295a:	327c      	adds	r2, #124	; 0x7c
  40295c:	e716      	b.n	40278c <_malloc_r+0x374>
  40295e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402962:	227e      	movs	r2, #126	; 0x7e
  402964:	e712      	b.n	40278c <_malloc_r+0x374>
  402966:	687b      	ldr	r3, [r7, #4]
  402968:	e780      	b.n	40286c <_malloc_r+0x454>
  40296a:	08f0      	lsrs	r0, r6, #3
  40296c:	f106 0308 	add.w	r3, r6, #8
  402970:	e600      	b.n	402574 <_malloc_r+0x15c>
  402972:	bf00      	nop
  402974:	20000a58 	.word	0x20000a58

00402978 <memset>:
  402978:	b470      	push	{r4, r5, r6}
  40297a:	0786      	lsls	r6, r0, #30
  40297c:	d046      	beq.n	402a0c <memset+0x94>
  40297e:	1e54      	subs	r4, r2, #1
  402980:	2a00      	cmp	r2, #0
  402982:	d041      	beq.n	402a08 <memset+0x90>
  402984:	b2ca      	uxtb	r2, r1
  402986:	4603      	mov	r3, r0
  402988:	e002      	b.n	402990 <memset+0x18>
  40298a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40298e:	d33b      	bcc.n	402a08 <memset+0x90>
  402990:	f803 2b01 	strb.w	r2, [r3], #1
  402994:	079d      	lsls	r5, r3, #30
  402996:	d1f8      	bne.n	40298a <memset+0x12>
  402998:	2c03      	cmp	r4, #3
  40299a:	d92e      	bls.n	4029fa <memset+0x82>
  40299c:	b2cd      	uxtb	r5, r1
  40299e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4029a2:	2c0f      	cmp	r4, #15
  4029a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4029a8:	d919      	bls.n	4029de <memset+0x66>
  4029aa:	f103 0210 	add.w	r2, r3, #16
  4029ae:	4626      	mov	r6, r4
  4029b0:	3e10      	subs	r6, #16
  4029b2:	2e0f      	cmp	r6, #15
  4029b4:	f842 5c10 	str.w	r5, [r2, #-16]
  4029b8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4029bc:	f842 5c08 	str.w	r5, [r2, #-8]
  4029c0:	f842 5c04 	str.w	r5, [r2, #-4]
  4029c4:	f102 0210 	add.w	r2, r2, #16
  4029c8:	d8f2      	bhi.n	4029b0 <memset+0x38>
  4029ca:	f1a4 0210 	sub.w	r2, r4, #16
  4029ce:	f022 020f 	bic.w	r2, r2, #15
  4029d2:	f004 040f 	and.w	r4, r4, #15
  4029d6:	3210      	adds	r2, #16
  4029d8:	2c03      	cmp	r4, #3
  4029da:	4413      	add	r3, r2
  4029dc:	d90d      	bls.n	4029fa <memset+0x82>
  4029de:	461e      	mov	r6, r3
  4029e0:	4622      	mov	r2, r4
  4029e2:	3a04      	subs	r2, #4
  4029e4:	2a03      	cmp	r2, #3
  4029e6:	f846 5b04 	str.w	r5, [r6], #4
  4029ea:	d8fa      	bhi.n	4029e2 <memset+0x6a>
  4029ec:	1f22      	subs	r2, r4, #4
  4029ee:	f022 0203 	bic.w	r2, r2, #3
  4029f2:	3204      	adds	r2, #4
  4029f4:	4413      	add	r3, r2
  4029f6:	f004 0403 	and.w	r4, r4, #3
  4029fa:	b12c      	cbz	r4, 402a08 <memset+0x90>
  4029fc:	b2c9      	uxtb	r1, r1
  4029fe:	441c      	add	r4, r3
  402a00:	f803 1b01 	strb.w	r1, [r3], #1
  402a04:	429c      	cmp	r4, r3
  402a06:	d1fb      	bne.n	402a00 <memset+0x88>
  402a08:	bc70      	pop	{r4, r5, r6}
  402a0a:	4770      	bx	lr
  402a0c:	4614      	mov	r4, r2
  402a0e:	4603      	mov	r3, r0
  402a10:	e7c2      	b.n	402998 <memset+0x20>
  402a12:	bf00      	nop

00402a14 <__malloc_lock>:
  402a14:	4801      	ldr	r0, [pc, #4]	; (402a1c <__malloc_lock+0x8>)
  402a16:	f001 bd57 	b.w	4044c8 <__retarget_lock_acquire_recursive>
  402a1a:	bf00      	nop
  402a1c:	200016b4 	.word	0x200016b4

00402a20 <__malloc_unlock>:
  402a20:	4801      	ldr	r0, [pc, #4]	; (402a28 <__malloc_unlock+0x8>)
  402a22:	f001 bd53 	b.w	4044cc <__retarget_lock_release_recursive>
  402a26:	bf00      	nop
  402a28:	200016b4 	.word	0x200016b4

00402a2c <_sbrk_r>:
  402a2c:	b538      	push	{r3, r4, r5, lr}
  402a2e:	4c07      	ldr	r4, [pc, #28]	; (402a4c <_sbrk_r+0x20>)
  402a30:	2300      	movs	r3, #0
  402a32:	4605      	mov	r5, r0
  402a34:	4608      	mov	r0, r1
  402a36:	6023      	str	r3, [r4, #0]
  402a38:	f7ff f9ea 	bl	401e10 <_sbrk>
  402a3c:	1c43      	adds	r3, r0, #1
  402a3e:	d000      	beq.n	402a42 <_sbrk_r+0x16>
  402a40:	bd38      	pop	{r3, r4, r5, pc}
  402a42:	6823      	ldr	r3, [r4, #0]
  402a44:	2b00      	cmp	r3, #0
  402a46:	d0fb      	beq.n	402a40 <_sbrk_r+0x14>
  402a48:	602b      	str	r3, [r5, #0]
  402a4a:	bd38      	pop	{r3, r4, r5, pc}
  402a4c:	200016c8 	.word	0x200016c8

00402a50 <setbuf>:
  402a50:	2900      	cmp	r1, #0
  402a52:	bf0c      	ite	eq
  402a54:	2202      	moveq	r2, #2
  402a56:	2200      	movne	r2, #0
  402a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a5c:	f000 b800 	b.w	402a60 <setvbuf>

00402a60 <setvbuf>:
  402a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402a64:	4c61      	ldr	r4, [pc, #388]	; (402bec <setvbuf+0x18c>)
  402a66:	6825      	ldr	r5, [r4, #0]
  402a68:	b083      	sub	sp, #12
  402a6a:	4604      	mov	r4, r0
  402a6c:	460f      	mov	r7, r1
  402a6e:	4690      	mov	r8, r2
  402a70:	461e      	mov	r6, r3
  402a72:	b115      	cbz	r5, 402a7a <setvbuf+0x1a>
  402a74:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402a76:	2b00      	cmp	r3, #0
  402a78:	d064      	beq.n	402b44 <setvbuf+0xe4>
  402a7a:	f1b8 0f02 	cmp.w	r8, #2
  402a7e:	d006      	beq.n	402a8e <setvbuf+0x2e>
  402a80:	f1b8 0f01 	cmp.w	r8, #1
  402a84:	f200 809f 	bhi.w	402bc6 <setvbuf+0x166>
  402a88:	2e00      	cmp	r6, #0
  402a8a:	f2c0 809c 	blt.w	402bc6 <setvbuf+0x166>
  402a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402a90:	07d8      	lsls	r0, r3, #31
  402a92:	d534      	bpl.n	402afe <setvbuf+0x9e>
  402a94:	4621      	mov	r1, r4
  402a96:	4628      	mov	r0, r5
  402a98:	f001 f8fe 	bl	403c98 <_fflush_r>
  402a9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402a9e:	b141      	cbz	r1, 402ab2 <setvbuf+0x52>
  402aa0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402aa4:	4299      	cmp	r1, r3
  402aa6:	d002      	beq.n	402aae <setvbuf+0x4e>
  402aa8:	4628      	mov	r0, r5
  402aaa:	f001 fa73 	bl	403f94 <_free_r>
  402aae:	2300      	movs	r3, #0
  402ab0:	6323      	str	r3, [r4, #48]	; 0x30
  402ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ab6:	2200      	movs	r2, #0
  402ab8:	61a2      	str	r2, [r4, #24]
  402aba:	6062      	str	r2, [r4, #4]
  402abc:	061a      	lsls	r2, r3, #24
  402abe:	d43a      	bmi.n	402b36 <setvbuf+0xd6>
  402ac0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402ac4:	f023 0303 	bic.w	r3, r3, #3
  402ac8:	f1b8 0f02 	cmp.w	r8, #2
  402acc:	81a3      	strh	r3, [r4, #12]
  402ace:	d01d      	beq.n	402b0c <setvbuf+0xac>
  402ad0:	ab01      	add	r3, sp, #4
  402ad2:	466a      	mov	r2, sp
  402ad4:	4621      	mov	r1, r4
  402ad6:	4628      	mov	r0, r5
  402ad8:	f001 fcfa 	bl	4044d0 <__swhatbuf_r>
  402adc:	89a3      	ldrh	r3, [r4, #12]
  402ade:	4318      	orrs	r0, r3
  402ae0:	81a0      	strh	r0, [r4, #12]
  402ae2:	2e00      	cmp	r6, #0
  402ae4:	d132      	bne.n	402b4c <setvbuf+0xec>
  402ae6:	9e00      	ldr	r6, [sp, #0]
  402ae8:	4630      	mov	r0, r6
  402aea:	f7ff fc8d 	bl	402408 <malloc>
  402aee:	4607      	mov	r7, r0
  402af0:	2800      	cmp	r0, #0
  402af2:	d06b      	beq.n	402bcc <setvbuf+0x16c>
  402af4:	89a3      	ldrh	r3, [r4, #12]
  402af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402afa:	81a3      	strh	r3, [r4, #12]
  402afc:	e028      	b.n	402b50 <setvbuf+0xf0>
  402afe:	89a3      	ldrh	r3, [r4, #12]
  402b00:	0599      	lsls	r1, r3, #22
  402b02:	d4c7      	bmi.n	402a94 <setvbuf+0x34>
  402b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402b06:	f001 fcdf 	bl	4044c8 <__retarget_lock_acquire_recursive>
  402b0a:	e7c3      	b.n	402a94 <setvbuf+0x34>
  402b0c:	2500      	movs	r5, #0
  402b0e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402b10:	2600      	movs	r6, #0
  402b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402b16:	f043 0302 	orr.w	r3, r3, #2
  402b1a:	2001      	movs	r0, #1
  402b1c:	60a6      	str	r6, [r4, #8]
  402b1e:	07ce      	lsls	r6, r1, #31
  402b20:	81a3      	strh	r3, [r4, #12]
  402b22:	6022      	str	r2, [r4, #0]
  402b24:	6122      	str	r2, [r4, #16]
  402b26:	6160      	str	r0, [r4, #20]
  402b28:	d401      	bmi.n	402b2e <setvbuf+0xce>
  402b2a:	0598      	lsls	r0, r3, #22
  402b2c:	d53e      	bpl.n	402bac <setvbuf+0x14c>
  402b2e:	4628      	mov	r0, r5
  402b30:	b003      	add	sp, #12
  402b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402b36:	6921      	ldr	r1, [r4, #16]
  402b38:	4628      	mov	r0, r5
  402b3a:	f001 fa2b 	bl	403f94 <_free_r>
  402b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b42:	e7bd      	b.n	402ac0 <setvbuf+0x60>
  402b44:	4628      	mov	r0, r5
  402b46:	f001 f8ff 	bl	403d48 <__sinit>
  402b4a:	e796      	b.n	402a7a <setvbuf+0x1a>
  402b4c:	2f00      	cmp	r7, #0
  402b4e:	d0cb      	beq.n	402ae8 <setvbuf+0x88>
  402b50:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402b52:	2b00      	cmp	r3, #0
  402b54:	d033      	beq.n	402bbe <setvbuf+0x15e>
  402b56:	9b00      	ldr	r3, [sp, #0]
  402b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402b5c:	6027      	str	r7, [r4, #0]
  402b5e:	429e      	cmp	r6, r3
  402b60:	bf1c      	itt	ne
  402b62:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402b66:	81a2      	strhne	r2, [r4, #12]
  402b68:	f1b8 0f01 	cmp.w	r8, #1
  402b6c:	bf04      	itt	eq
  402b6e:	f042 0201 	orreq.w	r2, r2, #1
  402b72:	81a2      	strheq	r2, [r4, #12]
  402b74:	b292      	uxth	r2, r2
  402b76:	f012 0308 	ands.w	r3, r2, #8
  402b7a:	6127      	str	r7, [r4, #16]
  402b7c:	6166      	str	r6, [r4, #20]
  402b7e:	d00e      	beq.n	402b9e <setvbuf+0x13e>
  402b80:	07d1      	lsls	r1, r2, #31
  402b82:	d51a      	bpl.n	402bba <setvbuf+0x15a>
  402b84:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402b86:	4276      	negs	r6, r6
  402b88:	2300      	movs	r3, #0
  402b8a:	f015 0501 	ands.w	r5, r5, #1
  402b8e:	61a6      	str	r6, [r4, #24]
  402b90:	60a3      	str	r3, [r4, #8]
  402b92:	d009      	beq.n	402ba8 <setvbuf+0x148>
  402b94:	2500      	movs	r5, #0
  402b96:	4628      	mov	r0, r5
  402b98:	b003      	add	sp, #12
  402b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402b9e:	60a3      	str	r3, [r4, #8]
  402ba0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402ba2:	f015 0501 	ands.w	r5, r5, #1
  402ba6:	d1f5      	bne.n	402b94 <setvbuf+0x134>
  402ba8:	0593      	lsls	r3, r2, #22
  402baa:	d4c0      	bmi.n	402b2e <setvbuf+0xce>
  402bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402bae:	f001 fc8d 	bl	4044cc <__retarget_lock_release_recursive>
  402bb2:	4628      	mov	r0, r5
  402bb4:	b003      	add	sp, #12
  402bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402bba:	60a6      	str	r6, [r4, #8]
  402bbc:	e7f0      	b.n	402ba0 <setvbuf+0x140>
  402bbe:	4628      	mov	r0, r5
  402bc0:	f001 f8c2 	bl	403d48 <__sinit>
  402bc4:	e7c7      	b.n	402b56 <setvbuf+0xf6>
  402bc6:	f04f 35ff 	mov.w	r5, #4294967295
  402bca:	e7b0      	b.n	402b2e <setvbuf+0xce>
  402bcc:	f8dd 9000 	ldr.w	r9, [sp]
  402bd0:	45b1      	cmp	r9, r6
  402bd2:	d004      	beq.n	402bde <setvbuf+0x17e>
  402bd4:	4648      	mov	r0, r9
  402bd6:	f7ff fc17 	bl	402408 <malloc>
  402bda:	4607      	mov	r7, r0
  402bdc:	b920      	cbnz	r0, 402be8 <setvbuf+0x188>
  402bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402be2:	f04f 35ff 	mov.w	r5, #4294967295
  402be6:	e792      	b.n	402b0e <setvbuf+0xae>
  402be8:	464e      	mov	r6, r9
  402bea:	e783      	b.n	402af4 <setvbuf+0x94>
  402bec:	20000010 	.word	0x20000010
	...

00402c00 <strlen>:
  402c00:	f890 f000 	pld	[r0]
  402c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402c08:	f020 0107 	bic.w	r1, r0, #7
  402c0c:	f06f 0c00 	mvn.w	ip, #0
  402c10:	f010 0407 	ands.w	r4, r0, #7
  402c14:	f891 f020 	pld	[r1, #32]
  402c18:	f040 8049 	bne.w	402cae <strlen+0xae>
  402c1c:	f04f 0400 	mov.w	r4, #0
  402c20:	f06f 0007 	mvn.w	r0, #7
  402c24:	e9d1 2300 	ldrd	r2, r3, [r1]
  402c28:	f891 f040 	pld	[r1, #64]	; 0x40
  402c2c:	f100 0008 	add.w	r0, r0, #8
  402c30:	fa82 f24c 	uadd8	r2, r2, ip
  402c34:	faa4 f28c 	sel	r2, r4, ip
  402c38:	fa83 f34c 	uadd8	r3, r3, ip
  402c3c:	faa2 f38c 	sel	r3, r2, ip
  402c40:	bb4b      	cbnz	r3, 402c96 <strlen+0x96>
  402c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402c46:	fa82 f24c 	uadd8	r2, r2, ip
  402c4a:	f100 0008 	add.w	r0, r0, #8
  402c4e:	faa4 f28c 	sel	r2, r4, ip
  402c52:	fa83 f34c 	uadd8	r3, r3, ip
  402c56:	faa2 f38c 	sel	r3, r2, ip
  402c5a:	b9e3      	cbnz	r3, 402c96 <strlen+0x96>
  402c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402c60:	fa82 f24c 	uadd8	r2, r2, ip
  402c64:	f100 0008 	add.w	r0, r0, #8
  402c68:	faa4 f28c 	sel	r2, r4, ip
  402c6c:	fa83 f34c 	uadd8	r3, r3, ip
  402c70:	faa2 f38c 	sel	r3, r2, ip
  402c74:	b97b      	cbnz	r3, 402c96 <strlen+0x96>
  402c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402c7a:	f101 0120 	add.w	r1, r1, #32
  402c7e:	fa82 f24c 	uadd8	r2, r2, ip
  402c82:	f100 0008 	add.w	r0, r0, #8
  402c86:	faa4 f28c 	sel	r2, r4, ip
  402c8a:	fa83 f34c 	uadd8	r3, r3, ip
  402c8e:	faa2 f38c 	sel	r3, r2, ip
  402c92:	2b00      	cmp	r3, #0
  402c94:	d0c6      	beq.n	402c24 <strlen+0x24>
  402c96:	2a00      	cmp	r2, #0
  402c98:	bf04      	itt	eq
  402c9a:	3004      	addeq	r0, #4
  402c9c:	461a      	moveq	r2, r3
  402c9e:	ba12      	rev	r2, r2
  402ca0:	fab2 f282 	clz	r2, r2
  402ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402cac:	4770      	bx	lr
  402cae:	e9d1 2300 	ldrd	r2, r3, [r1]
  402cb2:	f004 0503 	and.w	r5, r4, #3
  402cb6:	f1c4 0000 	rsb	r0, r4, #0
  402cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402cbe:	f014 0f04 	tst.w	r4, #4
  402cc2:	f891 f040 	pld	[r1, #64]	; 0x40
  402cc6:	fa0c f505 	lsl.w	r5, ip, r5
  402cca:	ea62 0205 	orn	r2, r2, r5
  402cce:	bf1c      	itt	ne
  402cd0:	ea63 0305 	ornne	r3, r3, r5
  402cd4:	4662      	movne	r2, ip
  402cd6:	f04f 0400 	mov.w	r4, #0
  402cda:	e7a9      	b.n	402c30 <strlen+0x30>

00402cdc <__sprint_r.part.0>:
  402cdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ce0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402ce2:	049c      	lsls	r4, r3, #18
  402ce4:	4693      	mov	fp, r2
  402ce6:	d52f      	bpl.n	402d48 <__sprint_r.part.0+0x6c>
  402ce8:	6893      	ldr	r3, [r2, #8]
  402cea:	6812      	ldr	r2, [r2, #0]
  402cec:	b353      	cbz	r3, 402d44 <__sprint_r.part.0+0x68>
  402cee:	460e      	mov	r6, r1
  402cf0:	4607      	mov	r7, r0
  402cf2:	f102 0908 	add.w	r9, r2, #8
  402cf6:	e919 0420 	ldmdb	r9, {r5, sl}
  402cfa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402cfe:	d017      	beq.n	402d30 <__sprint_r.part.0+0x54>
  402d00:	3d04      	subs	r5, #4
  402d02:	2400      	movs	r4, #0
  402d04:	e001      	b.n	402d0a <__sprint_r.part.0+0x2e>
  402d06:	45a0      	cmp	r8, r4
  402d08:	d010      	beq.n	402d2c <__sprint_r.part.0+0x50>
  402d0a:	4632      	mov	r2, r6
  402d0c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402d10:	4638      	mov	r0, r7
  402d12:	f001 f8bb 	bl	403e8c <_fputwc_r>
  402d16:	1c43      	adds	r3, r0, #1
  402d18:	f104 0401 	add.w	r4, r4, #1
  402d1c:	d1f3      	bne.n	402d06 <__sprint_r.part.0+0x2a>
  402d1e:	2300      	movs	r3, #0
  402d20:	f8cb 3008 	str.w	r3, [fp, #8]
  402d24:	f8cb 3004 	str.w	r3, [fp, #4]
  402d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d2c:	f8db 3008 	ldr.w	r3, [fp, #8]
  402d30:	f02a 0a03 	bic.w	sl, sl, #3
  402d34:	eba3 030a 	sub.w	r3, r3, sl
  402d38:	f8cb 3008 	str.w	r3, [fp, #8]
  402d3c:	f109 0908 	add.w	r9, r9, #8
  402d40:	2b00      	cmp	r3, #0
  402d42:	d1d8      	bne.n	402cf6 <__sprint_r.part.0+0x1a>
  402d44:	2000      	movs	r0, #0
  402d46:	e7ea      	b.n	402d1e <__sprint_r.part.0+0x42>
  402d48:	f001 fa0a 	bl	404160 <__sfvwrite_r>
  402d4c:	2300      	movs	r3, #0
  402d4e:	f8cb 3008 	str.w	r3, [fp, #8]
  402d52:	f8cb 3004 	str.w	r3, [fp, #4]
  402d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d5a:	bf00      	nop

00402d5c <_vfiprintf_r>:
  402d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d60:	b0ad      	sub	sp, #180	; 0xb4
  402d62:	461d      	mov	r5, r3
  402d64:	468b      	mov	fp, r1
  402d66:	4690      	mov	r8, r2
  402d68:	9307      	str	r3, [sp, #28]
  402d6a:	9006      	str	r0, [sp, #24]
  402d6c:	b118      	cbz	r0, 402d76 <_vfiprintf_r+0x1a>
  402d6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402d70:	2b00      	cmp	r3, #0
  402d72:	f000 80f3 	beq.w	402f5c <_vfiprintf_r+0x200>
  402d76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402d7a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402d7e:	07df      	lsls	r7, r3, #31
  402d80:	b281      	uxth	r1, r0
  402d82:	d402      	bmi.n	402d8a <_vfiprintf_r+0x2e>
  402d84:	058e      	lsls	r6, r1, #22
  402d86:	f140 80fc 	bpl.w	402f82 <_vfiprintf_r+0x226>
  402d8a:	048c      	lsls	r4, r1, #18
  402d8c:	d40a      	bmi.n	402da4 <_vfiprintf_r+0x48>
  402d8e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402d92:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402d9a:	f8ab 100c 	strh.w	r1, [fp, #12]
  402d9e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402da2:	b289      	uxth	r1, r1
  402da4:	0708      	lsls	r0, r1, #28
  402da6:	f140 80b3 	bpl.w	402f10 <_vfiprintf_r+0x1b4>
  402daa:	f8db 3010 	ldr.w	r3, [fp, #16]
  402dae:	2b00      	cmp	r3, #0
  402db0:	f000 80ae 	beq.w	402f10 <_vfiprintf_r+0x1b4>
  402db4:	f001 031a 	and.w	r3, r1, #26
  402db8:	2b0a      	cmp	r3, #10
  402dba:	f000 80b5 	beq.w	402f28 <_vfiprintf_r+0x1cc>
  402dbe:	2300      	movs	r3, #0
  402dc0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402dc4:	930b      	str	r3, [sp, #44]	; 0x2c
  402dc6:	9311      	str	r3, [sp, #68]	; 0x44
  402dc8:	9310      	str	r3, [sp, #64]	; 0x40
  402dca:	9303      	str	r3, [sp, #12]
  402dcc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402dd0:	46ca      	mov	sl, r9
  402dd2:	f8cd b010 	str.w	fp, [sp, #16]
  402dd6:	f898 3000 	ldrb.w	r3, [r8]
  402dda:	4644      	mov	r4, r8
  402ddc:	b1fb      	cbz	r3, 402e1e <_vfiprintf_r+0xc2>
  402dde:	2b25      	cmp	r3, #37	; 0x25
  402de0:	d102      	bne.n	402de8 <_vfiprintf_r+0x8c>
  402de2:	e01c      	b.n	402e1e <_vfiprintf_r+0xc2>
  402de4:	2b25      	cmp	r3, #37	; 0x25
  402de6:	d003      	beq.n	402df0 <_vfiprintf_r+0x94>
  402de8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402dec:	2b00      	cmp	r3, #0
  402dee:	d1f9      	bne.n	402de4 <_vfiprintf_r+0x88>
  402df0:	eba4 0508 	sub.w	r5, r4, r8
  402df4:	b19d      	cbz	r5, 402e1e <_vfiprintf_r+0xc2>
  402df6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402df8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402dfa:	f8ca 8000 	str.w	r8, [sl]
  402dfe:	3301      	adds	r3, #1
  402e00:	442a      	add	r2, r5
  402e02:	2b07      	cmp	r3, #7
  402e04:	f8ca 5004 	str.w	r5, [sl, #4]
  402e08:	9211      	str	r2, [sp, #68]	; 0x44
  402e0a:	9310      	str	r3, [sp, #64]	; 0x40
  402e0c:	dd7a      	ble.n	402f04 <_vfiprintf_r+0x1a8>
  402e0e:	2a00      	cmp	r2, #0
  402e10:	f040 84b0 	bne.w	403774 <_vfiprintf_r+0xa18>
  402e14:	9b03      	ldr	r3, [sp, #12]
  402e16:	9210      	str	r2, [sp, #64]	; 0x40
  402e18:	442b      	add	r3, r5
  402e1a:	46ca      	mov	sl, r9
  402e1c:	9303      	str	r3, [sp, #12]
  402e1e:	7823      	ldrb	r3, [r4, #0]
  402e20:	2b00      	cmp	r3, #0
  402e22:	f000 83e0 	beq.w	4035e6 <_vfiprintf_r+0x88a>
  402e26:	2000      	movs	r0, #0
  402e28:	f04f 0300 	mov.w	r3, #0
  402e2c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402e30:	f104 0801 	add.w	r8, r4, #1
  402e34:	7862      	ldrb	r2, [r4, #1]
  402e36:	4605      	mov	r5, r0
  402e38:	4606      	mov	r6, r0
  402e3a:	4603      	mov	r3, r0
  402e3c:	f04f 34ff 	mov.w	r4, #4294967295
  402e40:	f108 0801 	add.w	r8, r8, #1
  402e44:	f1a2 0120 	sub.w	r1, r2, #32
  402e48:	2958      	cmp	r1, #88	; 0x58
  402e4a:	f200 82de 	bhi.w	40340a <_vfiprintf_r+0x6ae>
  402e4e:	e8df f011 	tbh	[pc, r1, lsl #1]
  402e52:	0221      	.short	0x0221
  402e54:	02dc02dc 	.word	0x02dc02dc
  402e58:	02dc0229 	.word	0x02dc0229
  402e5c:	02dc02dc 	.word	0x02dc02dc
  402e60:	02dc02dc 	.word	0x02dc02dc
  402e64:	028902dc 	.word	0x028902dc
  402e68:	02dc0295 	.word	0x02dc0295
  402e6c:	02bd00a2 	.word	0x02bd00a2
  402e70:	019f02dc 	.word	0x019f02dc
  402e74:	01a401a4 	.word	0x01a401a4
  402e78:	01a401a4 	.word	0x01a401a4
  402e7c:	01a401a4 	.word	0x01a401a4
  402e80:	01a401a4 	.word	0x01a401a4
  402e84:	02dc01a4 	.word	0x02dc01a4
  402e88:	02dc02dc 	.word	0x02dc02dc
  402e8c:	02dc02dc 	.word	0x02dc02dc
  402e90:	02dc02dc 	.word	0x02dc02dc
  402e94:	02dc02dc 	.word	0x02dc02dc
  402e98:	01b202dc 	.word	0x01b202dc
  402e9c:	02dc02dc 	.word	0x02dc02dc
  402ea0:	02dc02dc 	.word	0x02dc02dc
  402ea4:	02dc02dc 	.word	0x02dc02dc
  402ea8:	02dc02dc 	.word	0x02dc02dc
  402eac:	02dc02dc 	.word	0x02dc02dc
  402eb0:	02dc0197 	.word	0x02dc0197
  402eb4:	02dc02dc 	.word	0x02dc02dc
  402eb8:	02dc02dc 	.word	0x02dc02dc
  402ebc:	02dc019b 	.word	0x02dc019b
  402ec0:	025302dc 	.word	0x025302dc
  402ec4:	02dc02dc 	.word	0x02dc02dc
  402ec8:	02dc02dc 	.word	0x02dc02dc
  402ecc:	02dc02dc 	.word	0x02dc02dc
  402ed0:	02dc02dc 	.word	0x02dc02dc
  402ed4:	02dc02dc 	.word	0x02dc02dc
  402ed8:	021b025a 	.word	0x021b025a
  402edc:	02dc02dc 	.word	0x02dc02dc
  402ee0:	026e02dc 	.word	0x026e02dc
  402ee4:	02dc021b 	.word	0x02dc021b
  402ee8:	027302dc 	.word	0x027302dc
  402eec:	01f502dc 	.word	0x01f502dc
  402ef0:	02090182 	.word	0x02090182
  402ef4:	02dc02d7 	.word	0x02dc02d7
  402ef8:	02dc029a 	.word	0x02dc029a
  402efc:	02dc00a7 	.word	0x02dc00a7
  402f00:	022e02dc 	.word	0x022e02dc
  402f04:	f10a 0a08 	add.w	sl, sl, #8
  402f08:	9b03      	ldr	r3, [sp, #12]
  402f0a:	442b      	add	r3, r5
  402f0c:	9303      	str	r3, [sp, #12]
  402f0e:	e786      	b.n	402e1e <_vfiprintf_r+0xc2>
  402f10:	4659      	mov	r1, fp
  402f12:	9806      	ldr	r0, [sp, #24]
  402f14:	f000 fdac 	bl	403a70 <__swsetup_r>
  402f18:	bb18      	cbnz	r0, 402f62 <_vfiprintf_r+0x206>
  402f1a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402f1e:	f001 031a 	and.w	r3, r1, #26
  402f22:	2b0a      	cmp	r3, #10
  402f24:	f47f af4b 	bne.w	402dbe <_vfiprintf_r+0x62>
  402f28:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402f2c:	2b00      	cmp	r3, #0
  402f2e:	f6ff af46 	blt.w	402dbe <_vfiprintf_r+0x62>
  402f32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402f36:	07db      	lsls	r3, r3, #31
  402f38:	d405      	bmi.n	402f46 <_vfiprintf_r+0x1ea>
  402f3a:	058f      	lsls	r7, r1, #22
  402f3c:	d403      	bmi.n	402f46 <_vfiprintf_r+0x1ea>
  402f3e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402f42:	f001 fac3 	bl	4044cc <__retarget_lock_release_recursive>
  402f46:	462b      	mov	r3, r5
  402f48:	4642      	mov	r2, r8
  402f4a:	4659      	mov	r1, fp
  402f4c:	9806      	ldr	r0, [sp, #24]
  402f4e:	f000 fd4d 	bl	4039ec <__sbprintf>
  402f52:	9003      	str	r0, [sp, #12]
  402f54:	9803      	ldr	r0, [sp, #12]
  402f56:	b02d      	add	sp, #180	; 0xb4
  402f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f5c:	f000 fef4 	bl	403d48 <__sinit>
  402f60:	e709      	b.n	402d76 <_vfiprintf_r+0x1a>
  402f62:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402f66:	07d9      	lsls	r1, r3, #31
  402f68:	d404      	bmi.n	402f74 <_vfiprintf_r+0x218>
  402f6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402f6e:	059a      	lsls	r2, r3, #22
  402f70:	f140 84aa 	bpl.w	4038c8 <_vfiprintf_r+0xb6c>
  402f74:	f04f 33ff 	mov.w	r3, #4294967295
  402f78:	9303      	str	r3, [sp, #12]
  402f7a:	9803      	ldr	r0, [sp, #12]
  402f7c:	b02d      	add	sp, #180	; 0xb4
  402f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f82:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402f86:	f001 fa9f 	bl	4044c8 <__retarget_lock_acquire_recursive>
  402f8a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402f8e:	b281      	uxth	r1, r0
  402f90:	e6fb      	b.n	402d8a <_vfiprintf_r+0x2e>
  402f92:	4276      	negs	r6, r6
  402f94:	9207      	str	r2, [sp, #28]
  402f96:	f043 0304 	orr.w	r3, r3, #4
  402f9a:	f898 2000 	ldrb.w	r2, [r8]
  402f9e:	e74f      	b.n	402e40 <_vfiprintf_r+0xe4>
  402fa0:	9608      	str	r6, [sp, #32]
  402fa2:	069e      	lsls	r6, r3, #26
  402fa4:	f100 8450 	bmi.w	403848 <_vfiprintf_r+0xaec>
  402fa8:	9907      	ldr	r1, [sp, #28]
  402faa:	06dd      	lsls	r5, r3, #27
  402fac:	460a      	mov	r2, r1
  402fae:	f100 83ef 	bmi.w	403790 <_vfiprintf_r+0xa34>
  402fb2:	0658      	lsls	r0, r3, #25
  402fb4:	f140 83ec 	bpl.w	403790 <_vfiprintf_r+0xa34>
  402fb8:	880e      	ldrh	r6, [r1, #0]
  402fba:	3104      	adds	r1, #4
  402fbc:	2700      	movs	r7, #0
  402fbe:	2201      	movs	r2, #1
  402fc0:	9107      	str	r1, [sp, #28]
  402fc2:	f04f 0100 	mov.w	r1, #0
  402fc6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  402fca:	2500      	movs	r5, #0
  402fcc:	1c61      	adds	r1, r4, #1
  402fce:	f000 8116 	beq.w	4031fe <_vfiprintf_r+0x4a2>
  402fd2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402fd6:	9102      	str	r1, [sp, #8]
  402fd8:	ea56 0107 	orrs.w	r1, r6, r7
  402fdc:	f040 8114 	bne.w	403208 <_vfiprintf_r+0x4ac>
  402fe0:	2c00      	cmp	r4, #0
  402fe2:	f040 835c 	bne.w	40369e <_vfiprintf_r+0x942>
  402fe6:	2a00      	cmp	r2, #0
  402fe8:	f040 83b7 	bne.w	40375a <_vfiprintf_r+0x9fe>
  402fec:	f013 0301 	ands.w	r3, r3, #1
  402ff0:	9305      	str	r3, [sp, #20]
  402ff2:	f000 8457 	beq.w	4038a4 <_vfiprintf_r+0xb48>
  402ff6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402ffa:	2330      	movs	r3, #48	; 0x30
  402ffc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403000:	9b05      	ldr	r3, [sp, #20]
  403002:	42a3      	cmp	r3, r4
  403004:	bfb8      	it	lt
  403006:	4623      	movlt	r3, r4
  403008:	9301      	str	r3, [sp, #4]
  40300a:	b10d      	cbz	r5, 403010 <_vfiprintf_r+0x2b4>
  40300c:	3301      	adds	r3, #1
  40300e:	9301      	str	r3, [sp, #4]
  403010:	9b02      	ldr	r3, [sp, #8]
  403012:	f013 0302 	ands.w	r3, r3, #2
  403016:	9309      	str	r3, [sp, #36]	; 0x24
  403018:	d002      	beq.n	403020 <_vfiprintf_r+0x2c4>
  40301a:	9b01      	ldr	r3, [sp, #4]
  40301c:	3302      	adds	r3, #2
  40301e:	9301      	str	r3, [sp, #4]
  403020:	9b02      	ldr	r3, [sp, #8]
  403022:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403026:	930a      	str	r3, [sp, #40]	; 0x28
  403028:	f040 8217 	bne.w	40345a <_vfiprintf_r+0x6fe>
  40302c:	9b08      	ldr	r3, [sp, #32]
  40302e:	9a01      	ldr	r2, [sp, #4]
  403030:	1a9d      	subs	r5, r3, r2
  403032:	2d00      	cmp	r5, #0
  403034:	f340 8211 	ble.w	40345a <_vfiprintf_r+0x6fe>
  403038:	2d10      	cmp	r5, #16
  40303a:	f340 8490 	ble.w	40395e <_vfiprintf_r+0xc02>
  40303e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403040:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403042:	4ec4      	ldr	r6, [pc, #784]	; (403354 <_vfiprintf_r+0x5f8>)
  403044:	46d6      	mov	lr, sl
  403046:	2710      	movs	r7, #16
  403048:	46a2      	mov	sl, r4
  40304a:	4619      	mov	r1, r3
  40304c:	9c06      	ldr	r4, [sp, #24]
  40304e:	e007      	b.n	403060 <_vfiprintf_r+0x304>
  403050:	f101 0c02 	add.w	ip, r1, #2
  403054:	f10e 0e08 	add.w	lr, lr, #8
  403058:	4601      	mov	r1, r0
  40305a:	3d10      	subs	r5, #16
  40305c:	2d10      	cmp	r5, #16
  40305e:	dd11      	ble.n	403084 <_vfiprintf_r+0x328>
  403060:	1c48      	adds	r0, r1, #1
  403062:	3210      	adds	r2, #16
  403064:	2807      	cmp	r0, #7
  403066:	9211      	str	r2, [sp, #68]	; 0x44
  403068:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40306c:	9010      	str	r0, [sp, #64]	; 0x40
  40306e:	ddef      	ble.n	403050 <_vfiprintf_r+0x2f4>
  403070:	2a00      	cmp	r2, #0
  403072:	f040 81e4 	bne.w	40343e <_vfiprintf_r+0x6e2>
  403076:	3d10      	subs	r5, #16
  403078:	2d10      	cmp	r5, #16
  40307a:	4611      	mov	r1, r2
  40307c:	f04f 0c01 	mov.w	ip, #1
  403080:	46ce      	mov	lr, r9
  403082:	dced      	bgt.n	403060 <_vfiprintf_r+0x304>
  403084:	4654      	mov	r4, sl
  403086:	4661      	mov	r1, ip
  403088:	46f2      	mov	sl, lr
  40308a:	442a      	add	r2, r5
  40308c:	2907      	cmp	r1, #7
  40308e:	9211      	str	r2, [sp, #68]	; 0x44
  403090:	f8ca 6000 	str.w	r6, [sl]
  403094:	f8ca 5004 	str.w	r5, [sl, #4]
  403098:	9110      	str	r1, [sp, #64]	; 0x40
  40309a:	f300 82ec 	bgt.w	403676 <_vfiprintf_r+0x91a>
  40309e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4030a2:	f10a 0a08 	add.w	sl, sl, #8
  4030a6:	1c48      	adds	r0, r1, #1
  4030a8:	2d00      	cmp	r5, #0
  4030aa:	f040 81de 	bne.w	40346a <_vfiprintf_r+0x70e>
  4030ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4030b0:	2b00      	cmp	r3, #0
  4030b2:	f000 81f8 	beq.w	4034a6 <_vfiprintf_r+0x74a>
  4030b6:	3202      	adds	r2, #2
  4030b8:	a90e      	add	r1, sp, #56	; 0x38
  4030ba:	2302      	movs	r3, #2
  4030bc:	2807      	cmp	r0, #7
  4030be:	9211      	str	r2, [sp, #68]	; 0x44
  4030c0:	9010      	str	r0, [sp, #64]	; 0x40
  4030c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4030c6:	f340 81ea 	ble.w	40349e <_vfiprintf_r+0x742>
  4030ca:	2a00      	cmp	r2, #0
  4030cc:	f040 838c 	bne.w	4037e8 <_vfiprintf_r+0xa8c>
  4030d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030d2:	2b80      	cmp	r3, #128	; 0x80
  4030d4:	f04f 0001 	mov.w	r0, #1
  4030d8:	4611      	mov	r1, r2
  4030da:	46ca      	mov	sl, r9
  4030dc:	f040 81e7 	bne.w	4034ae <_vfiprintf_r+0x752>
  4030e0:	9b08      	ldr	r3, [sp, #32]
  4030e2:	9d01      	ldr	r5, [sp, #4]
  4030e4:	1b5e      	subs	r6, r3, r5
  4030e6:	2e00      	cmp	r6, #0
  4030e8:	f340 81e1 	ble.w	4034ae <_vfiprintf_r+0x752>
  4030ec:	2e10      	cmp	r6, #16
  4030ee:	4d9a      	ldr	r5, [pc, #616]	; (403358 <_vfiprintf_r+0x5fc>)
  4030f0:	f340 8450 	ble.w	403994 <_vfiprintf_r+0xc38>
  4030f4:	46d4      	mov	ip, sl
  4030f6:	2710      	movs	r7, #16
  4030f8:	46a2      	mov	sl, r4
  4030fa:	9c06      	ldr	r4, [sp, #24]
  4030fc:	e007      	b.n	40310e <_vfiprintf_r+0x3b2>
  4030fe:	f101 0e02 	add.w	lr, r1, #2
  403102:	f10c 0c08 	add.w	ip, ip, #8
  403106:	4601      	mov	r1, r0
  403108:	3e10      	subs	r6, #16
  40310a:	2e10      	cmp	r6, #16
  40310c:	dd11      	ble.n	403132 <_vfiprintf_r+0x3d6>
  40310e:	1c48      	adds	r0, r1, #1
  403110:	3210      	adds	r2, #16
  403112:	2807      	cmp	r0, #7
  403114:	9211      	str	r2, [sp, #68]	; 0x44
  403116:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40311a:	9010      	str	r0, [sp, #64]	; 0x40
  40311c:	ddef      	ble.n	4030fe <_vfiprintf_r+0x3a2>
  40311e:	2a00      	cmp	r2, #0
  403120:	f040 829d 	bne.w	40365e <_vfiprintf_r+0x902>
  403124:	3e10      	subs	r6, #16
  403126:	2e10      	cmp	r6, #16
  403128:	f04f 0e01 	mov.w	lr, #1
  40312c:	4611      	mov	r1, r2
  40312e:	46cc      	mov	ip, r9
  403130:	dced      	bgt.n	40310e <_vfiprintf_r+0x3b2>
  403132:	4654      	mov	r4, sl
  403134:	46e2      	mov	sl, ip
  403136:	4432      	add	r2, r6
  403138:	f1be 0f07 	cmp.w	lr, #7
  40313c:	9211      	str	r2, [sp, #68]	; 0x44
  40313e:	e88a 0060 	stmia.w	sl, {r5, r6}
  403142:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403146:	f300 8369 	bgt.w	40381c <_vfiprintf_r+0xac0>
  40314a:	f10a 0a08 	add.w	sl, sl, #8
  40314e:	f10e 0001 	add.w	r0, lr, #1
  403152:	4671      	mov	r1, lr
  403154:	e1ab      	b.n	4034ae <_vfiprintf_r+0x752>
  403156:	9608      	str	r6, [sp, #32]
  403158:	f013 0220 	ands.w	r2, r3, #32
  40315c:	f040 838c 	bne.w	403878 <_vfiprintf_r+0xb1c>
  403160:	f013 0110 	ands.w	r1, r3, #16
  403164:	f040 831a 	bne.w	40379c <_vfiprintf_r+0xa40>
  403168:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40316c:	f000 8316 	beq.w	40379c <_vfiprintf_r+0xa40>
  403170:	9807      	ldr	r0, [sp, #28]
  403172:	460a      	mov	r2, r1
  403174:	4601      	mov	r1, r0
  403176:	3104      	adds	r1, #4
  403178:	8806      	ldrh	r6, [r0, #0]
  40317a:	9107      	str	r1, [sp, #28]
  40317c:	2700      	movs	r7, #0
  40317e:	e720      	b.n	402fc2 <_vfiprintf_r+0x266>
  403180:	9608      	str	r6, [sp, #32]
  403182:	f043 0310 	orr.w	r3, r3, #16
  403186:	e7e7      	b.n	403158 <_vfiprintf_r+0x3fc>
  403188:	9608      	str	r6, [sp, #32]
  40318a:	f043 0310 	orr.w	r3, r3, #16
  40318e:	e708      	b.n	402fa2 <_vfiprintf_r+0x246>
  403190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403194:	f898 2000 	ldrb.w	r2, [r8]
  403198:	e652      	b.n	402e40 <_vfiprintf_r+0xe4>
  40319a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40319e:	2600      	movs	r6, #0
  4031a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4031a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4031a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4031ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4031b0:	2909      	cmp	r1, #9
  4031b2:	d9f5      	bls.n	4031a0 <_vfiprintf_r+0x444>
  4031b4:	e646      	b.n	402e44 <_vfiprintf_r+0xe8>
  4031b6:	9608      	str	r6, [sp, #32]
  4031b8:	2800      	cmp	r0, #0
  4031ba:	f040 8408 	bne.w	4039ce <_vfiprintf_r+0xc72>
  4031be:	f043 0310 	orr.w	r3, r3, #16
  4031c2:	069e      	lsls	r6, r3, #26
  4031c4:	f100 834c 	bmi.w	403860 <_vfiprintf_r+0xb04>
  4031c8:	06dd      	lsls	r5, r3, #27
  4031ca:	f100 82f3 	bmi.w	4037b4 <_vfiprintf_r+0xa58>
  4031ce:	0658      	lsls	r0, r3, #25
  4031d0:	f140 82f0 	bpl.w	4037b4 <_vfiprintf_r+0xa58>
  4031d4:	9d07      	ldr	r5, [sp, #28]
  4031d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4031da:	462a      	mov	r2, r5
  4031dc:	17f7      	asrs	r7, r6, #31
  4031de:	3204      	adds	r2, #4
  4031e0:	4630      	mov	r0, r6
  4031e2:	4639      	mov	r1, r7
  4031e4:	9207      	str	r2, [sp, #28]
  4031e6:	2800      	cmp	r0, #0
  4031e8:	f171 0200 	sbcs.w	r2, r1, #0
  4031ec:	f2c0 835d 	blt.w	4038aa <_vfiprintf_r+0xb4e>
  4031f0:	1c61      	adds	r1, r4, #1
  4031f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4031f6:	f04f 0201 	mov.w	r2, #1
  4031fa:	f47f aeea 	bne.w	402fd2 <_vfiprintf_r+0x276>
  4031fe:	ea56 0107 	orrs.w	r1, r6, r7
  403202:	f000 824d 	beq.w	4036a0 <_vfiprintf_r+0x944>
  403206:	9302      	str	r3, [sp, #8]
  403208:	2a01      	cmp	r2, #1
  40320a:	f000 828c 	beq.w	403726 <_vfiprintf_r+0x9ca>
  40320e:	2a02      	cmp	r2, #2
  403210:	f040 825c 	bne.w	4036cc <_vfiprintf_r+0x970>
  403214:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403216:	46cb      	mov	fp, r9
  403218:	0933      	lsrs	r3, r6, #4
  40321a:	f006 010f 	and.w	r1, r6, #15
  40321e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403222:	093a      	lsrs	r2, r7, #4
  403224:	461e      	mov	r6, r3
  403226:	4617      	mov	r7, r2
  403228:	5c43      	ldrb	r3, [r0, r1]
  40322a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40322e:	ea56 0307 	orrs.w	r3, r6, r7
  403232:	d1f1      	bne.n	403218 <_vfiprintf_r+0x4bc>
  403234:	eba9 030b 	sub.w	r3, r9, fp
  403238:	9305      	str	r3, [sp, #20]
  40323a:	e6e1      	b.n	403000 <_vfiprintf_r+0x2a4>
  40323c:	2800      	cmp	r0, #0
  40323e:	f040 83c0 	bne.w	4039c2 <_vfiprintf_r+0xc66>
  403242:	0699      	lsls	r1, r3, #26
  403244:	f100 8367 	bmi.w	403916 <_vfiprintf_r+0xbba>
  403248:	06da      	lsls	r2, r3, #27
  40324a:	f100 80f1 	bmi.w	403430 <_vfiprintf_r+0x6d4>
  40324e:	065b      	lsls	r3, r3, #25
  403250:	f140 80ee 	bpl.w	403430 <_vfiprintf_r+0x6d4>
  403254:	9a07      	ldr	r2, [sp, #28]
  403256:	6813      	ldr	r3, [r2, #0]
  403258:	3204      	adds	r2, #4
  40325a:	9207      	str	r2, [sp, #28]
  40325c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403260:	801a      	strh	r2, [r3, #0]
  403262:	e5b8      	b.n	402dd6 <_vfiprintf_r+0x7a>
  403264:	9807      	ldr	r0, [sp, #28]
  403266:	4a3d      	ldr	r2, [pc, #244]	; (40335c <_vfiprintf_r+0x600>)
  403268:	9608      	str	r6, [sp, #32]
  40326a:	920b      	str	r2, [sp, #44]	; 0x2c
  40326c:	6806      	ldr	r6, [r0, #0]
  40326e:	2278      	movs	r2, #120	; 0x78
  403270:	2130      	movs	r1, #48	; 0x30
  403272:	3004      	adds	r0, #4
  403274:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403278:	f043 0302 	orr.w	r3, r3, #2
  40327c:	9007      	str	r0, [sp, #28]
  40327e:	2700      	movs	r7, #0
  403280:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403284:	2202      	movs	r2, #2
  403286:	e69c      	b.n	402fc2 <_vfiprintf_r+0x266>
  403288:	9608      	str	r6, [sp, #32]
  40328a:	2800      	cmp	r0, #0
  40328c:	d099      	beq.n	4031c2 <_vfiprintf_r+0x466>
  40328e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403292:	e796      	b.n	4031c2 <_vfiprintf_r+0x466>
  403294:	f898 2000 	ldrb.w	r2, [r8]
  403298:	2d00      	cmp	r5, #0
  40329a:	f47f add1 	bne.w	402e40 <_vfiprintf_r+0xe4>
  40329e:	2001      	movs	r0, #1
  4032a0:	2520      	movs	r5, #32
  4032a2:	e5cd      	b.n	402e40 <_vfiprintf_r+0xe4>
  4032a4:	f043 0301 	orr.w	r3, r3, #1
  4032a8:	f898 2000 	ldrb.w	r2, [r8]
  4032ac:	e5c8      	b.n	402e40 <_vfiprintf_r+0xe4>
  4032ae:	9608      	str	r6, [sp, #32]
  4032b0:	2800      	cmp	r0, #0
  4032b2:	f040 8393 	bne.w	4039dc <_vfiprintf_r+0xc80>
  4032b6:	4929      	ldr	r1, [pc, #164]	; (40335c <_vfiprintf_r+0x600>)
  4032b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4032ba:	069f      	lsls	r7, r3, #26
  4032bc:	f100 82e8 	bmi.w	403890 <_vfiprintf_r+0xb34>
  4032c0:	9807      	ldr	r0, [sp, #28]
  4032c2:	06de      	lsls	r6, r3, #27
  4032c4:	4601      	mov	r1, r0
  4032c6:	f100 8270 	bmi.w	4037aa <_vfiprintf_r+0xa4e>
  4032ca:	065d      	lsls	r5, r3, #25
  4032cc:	f140 826d 	bpl.w	4037aa <_vfiprintf_r+0xa4e>
  4032d0:	3104      	adds	r1, #4
  4032d2:	8806      	ldrh	r6, [r0, #0]
  4032d4:	9107      	str	r1, [sp, #28]
  4032d6:	2700      	movs	r7, #0
  4032d8:	07d8      	lsls	r0, r3, #31
  4032da:	f140 8222 	bpl.w	403722 <_vfiprintf_r+0x9c6>
  4032de:	ea56 0107 	orrs.w	r1, r6, r7
  4032e2:	f000 821e 	beq.w	403722 <_vfiprintf_r+0x9c6>
  4032e6:	2130      	movs	r1, #48	; 0x30
  4032e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4032ec:	f043 0302 	orr.w	r3, r3, #2
  4032f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4032f4:	2202      	movs	r2, #2
  4032f6:	e664      	b.n	402fc2 <_vfiprintf_r+0x266>
  4032f8:	9608      	str	r6, [sp, #32]
  4032fa:	2800      	cmp	r0, #0
  4032fc:	f040 836b 	bne.w	4039d6 <_vfiprintf_r+0xc7a>
  403300:	4917      	ldr	r1, [pc, #92]	; (403360 <_vfiprintf_r+0x604>)
  403302:	910b      	str	r1, [sp, #44]	; 0x2c
  403304:	e7d9      	b.n	4032ba <_vfiprintf_r+0x55e>
  403306:	9907      	ldr	r1, [sp, #28]
  403308:	9608      	str	r6, [sp, #32]
  40330a:	680a      	ldr	r2, [r1, #0]
  40330c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403310:	f04f 0000 	mov.w	r0, #0
  403314:	460a      	mov	r2, r1
  403316:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40331a:	3204      	adds	r2, #4
  40331c:	2001      	movs	r0, #1
  40331e:	9001      	str	r0, [sp, #4]
  403320:	9207      	str	r2, [sp, #28]
  403322:	9005      	str	r0, [sp, #20]
  403324:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403328:	9302      	str	r3, [sp, #8]
  40332a:	2400      	movs	r4, #0
  40332c:	e670      	b.n	403010 <_vfiprintf_r+0x2b4>
  40332e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403332:	f898 2000 	ldrb.w	r2, [r8]
  403336:	e583      	b.n	402e40 <_vfiprintf_r+0xe4>
  403338:	f898 2000 	ldrb.w	r2, [r8]
  40333c:	2a6c      	cmp	r2, #108	; 0x6c
  40333e:	bf03      	ittte	eq
  403340:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403344:	f043 0320 	orreq.w	r3, r3, #32
  403348:	f108 0801 	addeq.w	r8, r8, #1
  40334c:	f043 0310 	orrne.w	r3, r3, #16
  403350:	e576      	b.n	402e40 <_vfiprintf_r+0xe4>
  403352:	bf00      	nop
  403354:	00405058 	.word	0x00405058
  403358:	00405068 	.word	0x00405068
  40335c:	0040503c 	.word	0x0040503c
  403360:	00405028 	.word	0x00405028
  403364:	9907      	ldr	r1, [sp, #28]
  403366:	680e      	ldr	r6, [r1, #0]
  403368:	460a      	mov	r2, r1
  40336a:	2e00      	cmp	r6, #0
  40336c:	f102 0204 	add.w	r2, r2, #4
  403370:	f6ff ae0f 	blt.w	402f92 <_vfiprintf_r+0x236>
  403374:	9207      	str	r2, [sp, #28]
  403376:	f898 2000 	ldrb.w	r2, [r8]
  40337a:	e561      	b.n	402e40 <_vfiprintf_r+0xe4>
  40337c:	f898 2000 	ldrb.w	r2, [r8]
  403380:	2001      	movs	r0, #1
  403382:	252b      	movs	r5, #43	; 0x2b
  403384:	e55c      	b.n	402e40 <_vfiprintf_r+0xe4>
  403386:	9907      	ldr	r1, [sp, #28]
  403388:	9608      	str	r6, [sp, #32]
  40338a:	f8d1 b000 	ldr.w	fp, [r1]
  40338e:	f04f 0200 	mov.w	r2, #0
  403392:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403396:	1d0e      	adds	r6, r1, #4
  403398:	f1bb 0f00 	cmp.w	fp, #0
  40339c:	f000 82e5 	beq.w	40396a <_vfiprintf_r+0xc0e>
  4033a0:	1c67      	adds	r7, r4, #1
  4033a2:	f000 82c4 	beq.w	40392e <_vfiprintf_r+0xbd2>
  4033a6:	4622      	mov	r2, r4
  4033a8:	2100      	movs	r1, #0
  4033aa:	4658      	mov	r0, fp
  4033ac:	9301      	str	r3, [sp, #4]
  4033ae:	f001 f91f 	bl	4045f0 <memchr>
  4033b2:	9b01      	ldr	r3, [sp, #4]
  4033b4:	2800      	cmp	r0, #0
  4033b6:	f000 82e5 	beq.w	403984 <_vfiprintf_r+0xc28>
  4033ba:	eba0 020b 	sub.w	r2, r0, fp
  4033be:	9205      	str	r2, [sp, #20]
  4033c0:	9607      	str	r6, [sp, #28]
  4033c2:	9302      	str	r3, [sp, #8]
  4033c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4033c8:	2400      	movs	r4, #0
  4033ca:	e619      	b.n	403000 <_vfiprintf_r+0x2a4>
  4033cc:	f898 2000 	ldrb.w	r2, [r8]
  4033d0:	2a2a      	cmp	r2, #42	; 0x2a
  4033d2:	f108 0701 	add.w	r7, r8, #1
  4033d6:	f000 82e9 	beq.w	4039ac <_vfiprintf_r+0xc50>
  4033da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4033de:	2909      	cmp	r1, #9
  4033e0:	46b8      	mov	r8, r7
  4033e2:	f04f 0400 	mov.w	r4, #0
  4033e6:	f63f ad2d 	bhi.w	402e44 <_vfiprintf_r+0xe8>
  4033ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4033ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4033f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4033f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4033fa:	2909      	cmp	r1, #9
  4033fc:	d9f5      	bls.n	4033ea <_vfiprintf_r+0x68e>
  4033fe:	e521      	b.n	402e44 <_vfiprintf_r+0xe8>
  403400:	f043 0320 	orr.w	r3, r3, #32
  403404:	f898 2000 	ldrb.w	r2, [r8]
  403408:	e51a      	b.n	402e40 <_vfiprintf_r+0xe4>
  40340a:	9608      	str	r6, [sp, #32]
  40340c:	2800      	cmp	r0, #0
  40340e:	f040 82db 	bne.w	4039c8 <_vfiprintf_r+0xc6c>
  403412:	2a00      	cmp	r2, #0
  403414:	f000 80e7 	beq.w	4035e6 <_vfiprintf_r+0x88a>
  403418:	2101      	movs	r1, #1
  40341a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40341e:	f04f 0200 	mov.w	r2, #0
  403422:	9101      	str	r1, [sp, #4]
  403424:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403428:	9105      	str	r1, [sp, #20]
  40342a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40342e:	e77b      	b.n	403328 <_vfiprintf_r+0x5cc>
  403430:	9a07      	ldr	r2, [sp, #28]
  403432:	6813      	ldr	r3, [r2, #0]
  403434:	3204      	adds	r2, #4
  403436:	9207      	str	r2, [sp, #28]
  403438:	9a03      	ldr	r2, [sp, #12]
  40343a:	601a      	str	r2, [r3, #0]
  40343c:	e4cb      	b.n	402dd6 <_vfiprintf_r+0x7a>
  40343e:	aa0f      	add	r2, sp, #60	; 0x3c
  403440:	9904      	ldr	r1, [sp, #16]
  403442:	4620      	mov	r0, r4
  403444:	f7ff fc4a 	bl	402cdc <__sprint_r.part.0>
  403448:	2800      	cmp	r0, #0
  40344a:	f040 8139 	bne.w	4036c0 <_vfiprintf_r+0x964>
  40344e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403450:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403452:	f101 0c01 	add.w	ip, r1, #1
  403456:	46ce      	mov	lr, r9
  403458:	e5ff      	b.n	40305a <_vfiprintf_r+0x2fe>
  40345a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40345c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40345e:	1c48      	adds	r0, r1, #1
  403460:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403464:	2d00      	cmp	r5, #0
  403466:	f43f ae22 	beq.w	4030ae <_vfiprintf_r+0x352>
  40346a:	3201      	adds	r2, #1
  40346c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403470:	2101      	movs	r1, #1
  403472:	2807      	cmp	r0, #7
  403474:	9211      	str	r2, [sp, #68]	; 0x44
  403476:	9010      	str	r0, [sp, #64]	; 0x40
  403478:	f8ca 5000 	str.w	r5, [sl]
  40347c:	f8ca 1004 	str.w	r1, [sl, #4]
  403480:	f340 8108 	ble.w	403694 <_vfiprintf_r+0x938>
  403484:	2a00      	cmp	r2, #0
  403486:	f040 81bc 	bne.w	403802 <_vfiprintf_r+0xaa6>
  40348a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40348c:	2b00      	cmp	r3, #0
  40348e:	f43f ae1f 	beq.w	4030d0 <_vfiprintf_r+0x374>
  403492:	ab0e      	add	r3, sp, #56	; 0x38
  403494:	2202      	movs	r2, #2
  403496:	4608      	mov	r0, r1
  403498:	931c      	str	r3, [sp, #112]	; 0x70
  40349a:	921d      	str	r2, [sp, #116]	; 0x74
  40349c:	46ca      	mov	sl, r9
  40349e:	4601      	mov	r1, r0
  4034a0:	f10a 0a08 	add.w	sl, sl, #8
  4034a4:	3001      	adds	r0, #1
  4034a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4034a8:	2b80      	cmp	r3, #128	; 0x80
  4034aa:	f43f ae19 	beq.w	4030e0 <_vfiprintf_r+0x384>
  4034ae:	9b05      	ldr	r3, [sp, #20]
  4034b0:	1ae4      	subs	r4, r4, r3
  4034b2:	2c00      	cmp	r4, #0
  4034b4:	dd2e      	ble.n	403514 <_vfiprintf_r+0x7b8>
  4034b6:	2c10      	cmp	r4, #16
  4034b8:	4db3      	ldr	r5, [pc, #716]	; (403788 <_vfiprintf_r+0xa2c>)
  4034ba:	dd1e      	ble.n	4034fa <_vfiprintf_r+0x79e>
  4034bc:	46d6      	mov	lr, sl
  4034be:	2610      	movs	r6, #16
  4034c0:	9f06      	ldr	r7, [sp, #24]
  4034c2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4034c6:	e006      	b.n	4034d6 <_vfiprintf_r+0x77a>
  4034c8:	1c88      	adds	r0, r1, #2
  4034ca:	f10e 0e08 	add.w	lr, lr, #8
  4034ce:	4619      	mov	r1, r3
  4034d0:	3c10      	subs	r4, #16
  4034d2:	2c10      	cmp	r4, #16
  4034d4:	dd10      	ble.n	4034f8 <_vfiprintf_r+0x79c>
  4034d6:	1c4b      	adds	r3, r1, #1
  4034d8:	3210      	adds	r2, #16
  4034da:	2b07      	cmp	r3, #7
  4034dc:	9211      	str	r2, [sp, #68]	; 0x44
  4034de:	e88e 0060 	stmia.w	lr, {r5, r6}
  4034e2:	9310      	str	r3, [sp, #64]	; 0x40
  4034e4:	ddf0      	ble.n	4034c8 <_vfiprintf_r+0x76c>
  4034e6:	2a00      	cmp	r2, #0
  4034e8:	d165      	bne.n	4035b6 <_vfiprintf_r+0x85a>
  4034ea:	3c10      	subs	r4, #16
  4034ec:	2c10      	cmp	r4, #16
  4034ee:	f04f 0001 	mov.w	r0, #1
  4034f2:	4611      	mov	r1, r2
  4034f4:	46ce      	mov	lr, r9
  4034f6:	dcee      	bgt.n	4034d6 <_vfiprintf_r+0x77a>
  4034f8:	46f2      	mov	sl, lr
  4034fa:	4422      	add	r2, r4
  4034fc:	2807      	cmp	r0, #7
  4034fe:	9211      	str	r2, [sp, #68]	; 0x44
  403500:	f8ca 5000 	str.w	r5, [sl]
  403504:	f8ca 4004 	str.w	r4, [sl, #4]
  403508:	9010      	str	r0, [sp, #64]	; 0x40
  40350a:	f300 8085 	bgt.w	403618 <_vfiprintf_r+0x8bc>
  40350e:	f10a 0a08 	add.w	sl, sl, #8
  403512:	3001      	adds	r0, #1
  403514:	9905      	ldr	r1, [sp, #20]
  403516:	f8ca b000 	str.w	fp, [sl]
  40351a:	440a      	add	r2, r1
  40351c:	2807      	cmp	r0, #7
  40351e:	9211      	str	r2, [sp, #68]	; 0x44
  403520:	f8ca 1004 	str.w	r1, [sl, #4]
  403524:	9010      	str	r0, [sp, #64]	; 0x40
  403526:	f340 8082 	ble.w	40362e <_vfiprintf_r+0x8d2>
  40352a:	2a00      	cmp	r2, #0
  40352c:	f040 8118 	bne.w	403760 <_vfiprintf_r+0xa04>
  403530:	9b02      	ldr	r3, [sp, #8]
  403532:	9210      	str	r2, [sp, #64]	; 0x40
  403534:	0758      	lsls	r0, r3, #29
  403536:	d535      	bpl.n	4035a4 <_vfiprintf_r+0x848>
  403538:	9b08      	ldr	r3, [sp, #32]
  40353a:	9901      	ldr	r1, [sp, #4]
  40353c:	1a5c      	subs	r4, r3, r1
  40353e:	2c00      	cmp	r4, #0
  403540:	f340 80e7 	ble.w	403712 <_vfiprintf_r+0x9b6>
  403544:	46ca      	mov	sl, r9
  403546:	2c10      	cmp	r4, #16
  403548:	f340 8218 	ble.w	40397c <_vfiprintf_r+0xc20>
  40354c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40354e:	4e8f      	ldr	r6, [pc, #572]	; (40378c <_vfiprintf_r+0xa30>)
  403550:	9f06      	ldr	r7, [sp, #24]
  403552:	f8dd b010 	ldr.w	fp, [sp, #16]
  403556:	2510      	movs	r5, #16
  403558:	e006      	b.n	403568 <_vfiprintf_r+0x80c>
  40355a:	1c88      	adds	r0, r1, #2
  40355c:	f10a 0a08 	add.w	sl, sl, #8
  403560:	4619      	mov	r1, r3
  403562:	3c10      	subs	r4, #16
  403564:	2c10      	cmp	r4, #16
  403566:	dd11      	ble.n	40358c <_vfiprintf_r+0x830>
  403568:	1c4b      	adds	r3, r1, #1
  40356a:	3210      	adds	r2, #16
  40356c:	2b07      	cmp	r3, #7
  40356e:	9211      	str	r2, [sp, #68]	; 0x44
  403570:	f8ca 6000 	str.w	r6, [sl]
  403574:	f8ca 5004 	str.w	r5, [sl, #4]
  403578:	9310      	str	r3, [sp, #64]	; 0x40
  40357a:	ddee      	ble.n	40355a <_vfiprintf_r+0x7fe>
  40357c:	bb42      	cbnz	r2, 4035d0 <_vfiprintf_r+0x874>
  40357e:	3c10      	subs	r4, #16
  403580:	2c10      	cmp	r4, #16
  403582:	f04f 0001 	mov.w	r0, #1
  403586:	4611      	mov	r1, r2
  403588:	46ca      	mov	sl, r9
  40358a:	dced      	bgt.n	403568 <_vfiprintf_r+0x80c>
  40358c:	4422      	add	r2, r4
  40358e:	2807      	cmp	r0, #7
  403590:	9211      	str	r2, [sp, #68]	; 0x44
  403592:	f8ca 6000 	str.w	r6, [sl]
  403596:	f8ca 4004 	str.w	r4, [sl, #4]
  40359a:	9010      	str	r0, [sp, #64]	; 0x40
  40359c:	dd51      	ble.n	403642 <_vfiprintf_r+0x8e6>
  40359e:	2a00      	cmp	r2, #0
  4035a0:	f040 819b 	bne.w	4038da <_vfiprintf_r+0xb7e>
  4035a4:	9b03      	ldr	r3, [sp, #12]
  4035a6:	9a08      	ldr	r2, [sp, #32]
  4035a8:	9901      	ldr	r1, [sp, #4]
  4035aa:	428a      	cmp	r2, r1
  4035ac:	bfac      	ite	ge
  4035ae:	189b      	addge	r3, r3, r2
  4035b0:	185b      	addlt	r3, r3, r1
  4035b2:	9303      	str	r3, [sp, #12]
  4035b4:	e04e      	b.n	403654 <_vfiprintf_r+0x8f8>
  4035b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4035b8:	4651      	mov	r1, sl
  4035ba:	4638      	mov	r0, r7
  4035bc:	f7ff fb8e 	bl	402cdc <__sprint_r.part.0>
  4035c0:	2800      	cmp	r0, #0
  4035c2:	f040 813f 	bne.w	403844 <_vfiprintf_r+0xae8>
  4035c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4035c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4035ca:	1c48      	adds	r0, r1, #1
  4035cc:	46ce      	mov	lr, r9
  4035ce:	e77f      	b.n	4034d0 <_vfiprintf_r+0x774>
  4035d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4035d2:	4659      	mov	r1, fp
  4035d4:	4638      	mov	r0, r7
  4035d6:	f7ff fb81 	bl	402cdc <__sprint_r.part.0>
  4035da:	b960      	cbnz	r0, 4035f6 <_vfiprintf_r+0x89a>
  4035dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4035de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4035e0:	1c48      	adds	r0, r1, #1
  4035e2:	46ca      	mov	sl, r9
  4035e4:	e7bd      	b.n	403562 <_vfiprintf_r+0x806>
  4035e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4035e8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4035ec:	2b00      	cmp	r3, #0
  4035ee:	f040 81d4 	bne.w	40399a <_vfiprintf_r+0xc3e>
  4035f2:	2300      	movs	r3, #0
  4035f4:	9310      	str	r3, [sp, #64]	; 0x40
  4035f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4035fa:	f013 0f01 	tst.w	r3, #1
  4035fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403602:	d102      	bne.n	40360a <_vfiprintf_r+0x8ae>
  403604:	059a      	lsls	r2, r3, #22
  403606:	f140 80de 	bpl.w	4037c6 <_vfiprintf_r+0xa6a>
  40360a:	065b      	lsls	r3, r3, #25
  40360c:	f53f acb2 	bmi.w	402f74 <_vfiprintf_r+0x218>
  403610:	9803      	ldr	r0, [sp, #12]
  403612:	b02d      	add	sp, #180	; 0xb4
  403614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403618:	2a00      	cmp	r2, #0
  40361a:	f040 8106 	bne.w	40382a <_vfiprintf_r+0xace>
  40361e:	9a05      	ldr	r2, [sp, #20]
  403620:	921d      	str	r2, [sp, #116]	; 0x74
  403622:	2301      	movs	r3, #1
  403624:	9211      	str	r2, [sp, #68]	; 0x44
  403626:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40362a:	9310      	str	r3, [sp, #64]	; 0x40
  40362c:	46ca      	mov	sl, r9
  40362e:	f10a 0a08 	add.w	sl, sl, #8
  403632:	9b02      	ldr	r3, [sp, #8]
  403634:	0759      	lsls	r1, r3, #29
  403636:	d504      	bpl.n	403642 <_vfiprintf_r+0x8e6>
  403638:	9b08      	ldr	r3, [sp, #32]
  40363a:	9901      	ldr	r1, [sp, #4]
  40363c:	1a5c      	subs	r4, r3, r1
  40363e:	2c00      	cmp	r4, #0
  403640:	dc81      	bgt.n	403546 <_vfiprintf_r+0x7ea>
  403642:	9b03      	ldr	r3, [sp, #12]
  403644:	9908      	ldr	r1, [sp, #32]
  403646:	9801      	ldr	r0, [sp, #4]
  403648:	4281      	cmp	r1, r0
  40364a:	bfac      	ite	ge
  40364c:	185b      	addge	r3, r3, r1
  40364e:	181b      	addlt	r3, r3, r0
  403650:	9303      	str	r3, [sp, #12]
  403652:	bb72      	cbnz	r2, 4036b2 <_vfiprintf_r+0x956>
  403654:	2300      	movs	r3, #0
  403656:	9310      	str	r3, [sp, #64]	; 0x40
  403658:	46ca      	mov	sl, r9
  40365a:	f7ff bbbc 	b.w	402dd6 <_vfiprintf_r+0x7a>
  40365e:	aa0f      	add	r2, sp, #60	; 0x3c
  403660:	9904      	ldr	r1, [sp, #16]
  403662:	4620      	mov	r0, r4
  403664:	f7ff fb3a 	bl	402cdc <__sprint_r.part.0>
  403668:	bb50      	cbnz	r0, 4036c0 <_vfiprintf_r+0x964>
  40366a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40366c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40366e:	f101 0e01 	add.w	lr, r1, #1
  403672:	46cc      	mov	ip, r9
  403674:	e548      	b.n	403108 <_vfiprintf_r+0x3ac>
  403676:	2a00      	cmp	r2, #0
  403678:	f040 8140 	bne.w	4038fc <_vfiprintf_r+0xba0>
  40367c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403680:	2900      	cmp	r1, #0
  403682:	f000 811b 	beq.w	4038bc <_vfiprintf_r+0xb60>
  403686:	2201      	movs	r2, #1
  403688:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40368c:	4610      	mov	r0, r2
  40368e:	921d      	str	r2, [sp, #116]	; 0x74
  403690:	911c      	str	r1, [sp, #112]	; 0x70
  403692:	46ca      	mov	sl, r9
  403694:	4601      	mov	r1, r0
  403696:	f10a 0a08 	add.w	sl, sl, #8
  40369a:	3001      	adds	r0, #1
  40369c:	e507      	b.n	4030ae <_vfiprintf_r+0x352>
  40369e:	9b02      	ldr	r3, [sp, #8]
  4036a0:	2a01      	cmp	r2, #1
  4036a2:	f000 8098 	beq.w	4037d6 <_vfiprintf_r+0xa7a>
  4036a6:	2a02      	cmp	r2, #2
  4036a8:	d10d      	bne.n	4036c6 <_vfiprintf_r+0x96a>
  4036aa:	9302      	str	r3, [sp, #8]
  4036ac:	2600      	movs	r6, #0
  4036ae:	2700      	movs	r7, #0
  4036b0:	e5b0      	b.n	403214 <_vfiprintf_r+0x4b8>
  4036b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4036b4:	9904      	ldr	r1, [sp, #16]
  4036b6:	9806      	ldr	r0, [sp, #24]
  4036b8:	f7ff fb10 	bl	402cdc <__sprint_r.part.0>
  4036bc:	2800      	cmp	r0, #0
  4036be:	d0c9      	beq.n	403654 <_vfiprintf_r+0x8f8>
  4036c0:	f8dd b010 	ldr.w	fp, [sp, #16]
  4036c4:	e797      	b.n	4035f6 <_vfiprintf_r+0x89a>
  4036c6:	9302      	str	r3, [sp, #8]
  4036c8:	2600      	movs	r6, #0
  4036ca:	2700      	movs	r7, #0
  4036cc:	4649      	mov	r1, r9
  4036ce:	e000      	b.n	4036d2 <_vfiprintf_r+0x976>
  4036d0:	4659      	mov	r1, fp
  4036d2:	08f2      	lsrs	r2, r6, #3
  4036d4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4036d8:	08f8      	lsrs	r0, r7, #3
  4036da:	f006 0307 	and.w	r3, r6, #7
  4036de:	4607      	mov	r7, r0
  4036e0:	4616      	mov	r6, r2
  4036e2:	3330      	adds	r3, #48	; 0x30
  4036e4:	ea56 0207 	orrs.w	r2, r6, r7
  4036e8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4036ec:	f101 3bff 	add.w	fp, r1, #4294967295
  4036f0:	d1ee      	bne.n	4036d0 <_vfiprintf_r+0x974>
  4036f2:	9a02      	ldr	r2, [sp, #8]
  4036f4:	07d6      	lsls	r6, r2, #31
  4036f6:	f57f ad9d 	bpl.w	403234 <_vfiprintf_r+0x4d8>
  4036fa:	2b30      	cmp	r3, #48	; 0x30
  4036fc:	f43f ad9a 	beq.w	403234 <_vfiprintf_r+0x4d8>
  403700:	3902      	subs	r1, #2
  403702:	2330      	movs	r3, #48	; 0x30
  403704:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403708:	eba9 0301 	sub.w	r3, r9, r1
  40370c:	9305      	str	r3, [sp, #20]
  40370e:	468b      	mov	fp, r1
  403710:	e476      	b.n	403000 <_vfiprintf_r+0x2a4>
  403712:	9b03      	ldr	r3, [sp, #12]
  403714:	9a08      	ldr	r2, [sp, #32]
  403716:	428a      	cmp	r2, r1
  403718:	bfac      	ite	ge
  40371a:	189b      	addge	r3, r3, r2
  40371c:	185b      	addlt	r3, r3, r1
  40371e:	9303      	str	r3, [sp, #12]
  403720:	e798      	b.n	403654 <_vfiprintf_r+0x8f8>
  403722:	2202      	movs	r2, #2
  403724:	e44d      	b.n	402fc2 <_vfiprintf_r+0x266>
  403726:	2f00      	cmp	r7, #0
  403728:	bf08      	it	eq
  40372a:	2e0a      	cmpeq	r6, #10
  40372c:	d352      	bcc.n	4037d4 <_vfiprintf_r+0xa78>
  40372e:	46cb      	mov	fp, r9
  403730:	4630      	mov	r0, r6
  403732:	4639      	mov	r1, r7
  403734:	220a      	movs	r2, #10
  403736:	2300      	movs	r3, #0
  403738:	f7fe fca2 	bl	402080 <__aeabi_uldivmod>
  40373c:	3230      	adds	r2, #48	; 0x30
  40373e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403742:	4630      	mov	r0, r6
  403744:	4639      	mov	r1, r7
  403746:	2300      	movs	r3, #0
  403748:	220a      	movs	r2, #10
  40374a:	f7fe fc99 	bl	402080 <__aeabi_uldivmod>
  40374e:	4606      	mov	r6, r0
  403750:	460f      	mov	r7, r1
  403752:	ea56 0307 	orrs.w	r3, r6, r7
  403756:	d1eb      	bne.n	403730 <_vfiprintf_r+0x9d4>
  403758:	e56c      	b.n	403234 <_vfiprintf_r+0x4d8>
  40375a:	9405      	str	r4, [sp, #20]
  40375c:	46cb      	mov	fp, r9
  40375e:	e44f      	b.n	403000 <_vfiprintf_r+0x2a4>
  403760:	aa0f      	add	r2, sp, #60	; 0x3c
  403762:	9904      	ldr	r1, [sp, #16]
  403764:	9806      	ldr	r0, [sp, #24]
  403766:	f7ff fab9 	bl	402cdc <__sprint_r.part.0>
  40376a:	2800      	cmp	r0, #0
  40376c:	d1a8      	bne.n	4036c0 <_vfiprintf_r+0x964>
  40376e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403770:	46ca      	mov	sl, r9
  403772:	e75e      	b.n	403632 <_vfiprintf_r+0x8d6>
  403774:	aa0f      	add	r2, sp, #60	; 0x3c
  403776:	9904      	ldr	r1, [sp, #16]
  403778:	9806      	ldr	r0, [sp, #24]
  40377a:	f7ff faaf 	bl	402cdc <__sprint_r.part.0>
  40377e:	2800      	cmp	r0, #0
  403780:	d19e      	bne.n	4036c0 <_vfiprintf_r+0x964>
  403782:	46ca      	mov	sl, r9
  403784:	f7ff bbc0 	b.w	402f08 <_vfiprintf_r+0x1ac>
  403788:	00405068 	.word	0x00405068
  40378c:	00405058 	.word	0x00405058
  403790:	3104      	adds	r1, #4
  403792:	6816      	ldr	r6, [r2, #0]
  403794:	9107      	str	r1, [sp, #28]
  403796:	2201      	movs	r2, #1
  403798:	2700      	movs	r7, #0
  40379a:	e412      	b.n	402fc2 <_vfiprintf_r+0x266>
  40379c:	9807      	ldr	r0, [sp, #28]
  40379e:	4601      	mov	r1, r0
  4037a0:	3104      	adds	r1, #4
  4037a2:	6806      	ldr	r6, [r0, #0]
  4037a4:	9107      	str	r1, [sp, #28]
  4037a6:	2700      	movs	r7, #0
  4037a8:	e40b      	b.n	402fc2 <_vfiprintf_r+0x266>
  4037aa:	680e      	ldr	r6, [r1, #0]
  4037ac:	3104      	adds	r1, #4
  4037ae:	9107      	str	r1, [sp, #28]
  4037b0:	2700      	movs	r7, #0
  4037b2:	e591      	b.n	4032d8 <_vfiprintf_r+0x57c>
  4037b4:	9907      	ldr	r1, [sp, #28]
  4037b6:	680e      	ldr	r6, [r1, #0]
  4037b8:	460a      	mov	r2, r1
  4037ba:	17f7      	asrs	r7, r6, #31
  4037bc:	3204      	adds	r2, #4
  4037be:	9207      	str	r2, [sp, #28]
  4037c0:	4630      	mov	r0, r6
  4037c2:	4639      	mov	r1, r7
  4037c4:	e50f      	b.n	4031e6 <_vfiprintf_r+0x48a>
  4037c6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4037ca:	f000 fe7f 	bl	4044cc <__retarget_lock_release_recursive>
  4037ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4037d2:	e71a      	b.n	40360a <_vfiprintf_r+0x8ae>
  4037d4:	9b02      	ldr	r3, [sp, #8]
  4037d6:	9302      	str	r3, [sp, #8]
  4037d8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4037dc:	3630      	adds	r6, #48	; 0x30
  4037de:	2301      	movs	r3, #1
  4037e0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4037e4:	9305      	str	r3, [sp, #20]
  4037e6:	e40b      	b.n	403000 <_vfiprintf_r+0x2a4>
  4037e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4037ea:	9904      	ldr	r1, [sp, #16]
  4037ec:	9806      	ldr	r0, [sp, #24]
  4037ee:	f7ff fa75 	bl	402cdc <__sprint_r.part.0>
  4037f2:	2800      	cmp	r0, #0
  4037f4:	f47f af64 	bne.w	4036c0 <_vfiprintf_r+0x964>
  4037f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4037fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037fc:	1c48      	adds	r0, r1, #1
  4037fe:	46ca      	mov	sl, r9
  403800:	e651      	b.n	4034a6 <_vfiprintf_r+0x74a>
  403802:	aa0f      	add	r2, sp, #60	; 0x3c
  403804:	9904      	ldr	r1, [sp, #16]
  403806:	9806      	ldr	r0, [sp, #24]
  403808:	f7ff fa68 	bl	402cdc <__sprint_r.part.0>
  40380c:	2800      	cmp	r0, #0
  40380e:	f47f af57 	bne.w	4036c0 <_vfiprintf_r+0x964>
  403812:	9910      	ldr	r1, [sp, #64]	; 0x40
  403814:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403816:	1c48      	adds	r0, r1, #1
  403818:	46ca      	mov	sl, r9
  40381a:	e448      	b.n	4030ae <_vfiprintf_r+0x352>
  40381c:	2a00      	cmp	r2, #0
  40381e:	f040 8091 	bne.w	403944 <_vfiprintf_r+0xbe8>
  403822:	2001      	movs	r0, #1
  403824:	4611      	mov	r1, r2
  403826:	46ca      	mov	sl, r9
  403828:	e641      	b.n	4034ae <_vfiprintf_r+0x752>
  40382a:	aa0f      	add	r2, sp, #60	; 0x3c
  40382c:	9904      	ldr	r1, [sp, #16]
  40382e:	9806      	ldr	r0, [sp, #24]
  403830:	f7ff fa54 	bl	402cdc <__sprint_r.part.0>
  403834:	2800      	cmp	r0, #0
  403836:	f47f af43 	bne.w	4036c0 <_vfiprintf_r+0x964>
  40383a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40383c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40383e:	3001      	adds	r0, #1
  403840:	46ca      	mov	sl, r9
  403842:	e667      	b.n	403514 <_vfiprintf_r+0x7b8>
  403844:	46d3      	mov	fp, sl
  403846:	e6d6      	b.n	4035f6 <_vfiprintf_r+0x89a>
  403848:	9e07      	ldr	r6, [sp, #28]
  40384a:	3607      	adds	r6, #7
  40384c:	f026 0207 	bic.w	r2, r6, #7
  403850:	f102 0108 	add.w	r1, r2, #8
  403854:	e9d2 6700 	ldrd	r6, r7, [r2]
  403858:	9107      	str	r1, [sp, #28]
  40385a:	2201      	movs	r2, #1
  40385c:	f7ff bbb1 	b.w	402fc2 <_vfiprintf_r+0x266>
  403860:	9e07      	ldr	r6, [sp, #28]
  403862:	3607      	adds	r6, #7
  403864:	f026 0607 	bic.w	r6, r6, #7
  403868:	e9d6 0100 	ldrd	r0, r1, [r6]
  40386c:	f106 0208 	add.w	r2, r6, #8
  403870:	9207      	str	r2, [sp, #28]
  403872:	4606      	mov	r6, r0
  403874:	460f      	mov	r7, r1
  403876:	e4b6      	b.n	4031e6 <_vfiprintf_r+0x48a>
  403878:	9e07      	ldr	r6, [sp, #28]
  40387a:	3607      	adds	r6, #7
  40387c:	f026 0207 	bic.w	r2, r6, #7
  403880:	f102 0108 	add.w	r1, r2, #8
  403884:	e9d2 6700 	ldrd	r6, r7, [r2]
  403888:	9107      	str	r1, [sp, #28]
  40388a:	2200      	movs	r2, #0
  40388c:	f7ff bb99 	b.w	402fc2 <_vfiprintf_r+0x266>
  403890:	9e07      	ldr	r6, [sp, #28]
  403892:	3607      	adds	r6, #7
  403894:	f026 0107 	bic.w	r1, r6, #7
  403898:	f101 0008 	add.w	r0, r1, #8
  40389c:	9007      	str	r0, [sp, #28]
  40389e:	e9d1 6700 	ldrd	r6, r7, [r1]
  4038a2:	e519      	b.n	4032d8 <_vfiprintf_r+0x57c>
  4038a4:	46cb      	mov	fp, r9
  4038a6:	f7ff bbab 	b.w	403000 <_vfiprintf_r+0x2a4>
  4038aa:	252d      	movs	r5, #45	; 0x2d
  4038ac:	4276      	negs	r6, r6
  4038ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4038b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4038b6:	2201      	movs	r2, #1
  4038b8:	f7ff bb88 	b.w	402fcc <_vfiprintf_r+0x270>
  4038bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4038be:	b9b3      	cbnz	r3, 4038ee <_vfiprintf_r+0xb92>
  4038c0:	4611      	mov	r1, r2
  4038c2:	2001      	movs	r0, #1
  4038c4:	46ca      	mov	sl, r9
  4038c6:	e5f2      	b.n	4034ae <_vfiprintf_r+0x752>
  4038c8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4038cc:	f000 fdfe 	bl	4044cc <__retarget_lock_release_recursive>
  4038d0:	f04f 33ff 	mov.w	r3, #4294967295
  4038d4:	9303      	str	r3, [sp, #12]
  4038d6:	f7ff bb50 	b.w	402f7a <_vfiprintf_r+0x21e>
  4038da:	aa0f      	add	r2, sp, #60	; 0x3c
  4038dc:	9904      	ldr	r1, [sp, #16]
  4038de:	9806      	ldr	r0, [sp, #24]
  4038e0:	f7ff f9fc 	bl	402cdc <__sprint_r.part.0>
  4038e4:	2800      	cmp	r0, #0
  4038e6:	f47f aeeb 	bne.w	4036c0 <_vfiprintf_r+0x964>
  4038ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4038ec:	e6a9      	b.n	403642 <_vfiprintf_r+0x8e6>
  4038ee:	ab0e      	add	r3, sp, #56	; 0x38
  4038f0:	2202      	movs	r2, #2
  4038f2:	931c      	str	r3, [sp, #112]	; 0x70
  4038f4:	921d      	str	r2, [sp, #116]	; 0x74
  4038f6:	2001      	movs	r0, #1
  4038f8:	46ca      	mov	sl, r9
  4038fa:	e5d0      	b.n	40349e <_vfiprintf_r+0x742>
  4038fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4038fe:	9904      	ldr	r1, [sp, #16]
  403900:	9806      	ldr	r0, [sp, #24]
  403902:	f7ff f9eb 	bl	402cdc <__sprint_r.part.0>
  403906:	2800      	cmp	r0, #0
  403908:	f47f aeda 	bne.w	4036c0 <_vfiprintf_r+0x964>
  40390c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40390e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403910:	1c48      	adds	r0, r1, #1
  403912:	46ca      	mov	sl, r9
  403914:	e5a4      	b.n	403460 <_vfiprintf_r+0x704>
  403916:	9a07      	ldr	r2, [sp, #28]
  403918:	9903      	ldr	r1, [sp, #12]
  40391a:	6813      	ldr	r3, [r2, #0]
  40391c:	17cd      	asrs	r5, r1, #31
  40391e:	4608      	mov	r0, r1
  403920:	3204      	adds	r2, #4
  403922:	4629      	mov	r1, r5
  403924:	9207      	str	r2, [sp, #28]
  403926:	e9c3 0100 	strd	r0, r1, [r3]
  40392a:	f7ff ba54 	b.w	402dd6 <_vfiprintf_r+0x7a>
  40392e:	4658      	mov	r0, fp
  403930:	9607      	str	r6, [sp, #28]
  403932:	9302      	str	r3, [sp, #8]
  403934:	f7ff f964 	bl	402c00 <strlen>
  403938:	2400      	movs	r4, #0
  40393a:	9005      	str	r0, [sp, #20]
  40393c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403940:	f7ff bb5e 	b.w	403000 <_vfiprintf_r+0x2a4>
  403944:	aa0f      	add	r2, sp, #60	; 0x3c
  403946:	9904      	ldr	r1, [sp, #16]
  403948:	9806      	ldr	r0, [sp, #24]
  40394a:	f7ff f9c7 	bl	402cdc <__sprint_r.part.0>
  40394e:	2800      	cmp	r0, #0
  403950:	f47f aeb6 	bne.w	4036c0 <_vfiprintf_r+0x964>
  403954:	9910      	ldr	r1, [sp, #64]	; 0x40
  403956:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403958:	1c48      	adds	r0, r1, #1
  40395a:	46ca      	mov	sl, r9
  40395c:	e5a7      	b.n	4034ae <_vfiprintf_r+0x752>
  40395e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403960:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403962:	4e20      	ldr	r6, [pc, #128]	; (4039e4 <_vfiprintf_r+0xc88>)
  403964:	3101      	adds	r1, #1
  403966:	f7ff bb90 	b.w	40308a <_vfiprintf_r+0x32e>
  40396a:	2c06      	cmp	r4, #6
  40396c:	bf28      	it	cs
  40396e:	2406      	movcs	r4, #6
  403970:	9405      	str	r4, [sp, #20]
  403972:	9607      	str	r6, [sp, #28]
  403974:	9401      	str	r4, [sp, #4]
  403976:	f8df b070 	ldr.w	fp, [pc, #112]	; 4039e8 <_vfiprintf_r+0xc8c>
  40397a:	e4d5      	b.n	403328 <_vfiprintf_r+0x5cc>
  40397c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40397e:	4e19      	ldr	r6, [pc, #100]	; (4039e4 <_vfiprintf_r+0xc88>)
  403980:	3001      	adds	r0, #1
  403982:	e603      	b.n	40358c <_vfiprintf_r+0x830>
  403984:	9405      	str	r4, [sp, #20]
  403986:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40398a:	9607      	str	r6, [sp, #28]
  40398c:	9302      	str	r3, [sp, #8]
  40398e:	4604      	mov	r4, r0
  403990:	f7ff bb36 	b.w	403000 <_vfiprintf_r+0x2a4>
  403994:	4686      	mov	lr, r0
  403996:	f7ff bbce 	b.w	403136 <_vfiprintf_r+0x3da>
  40399a:	9806      	ldr	r0, [sp, #24]
  40399c:	aa0f      	add	r2, sp, #60	; 0x3c
  40399e:	4659      	mov	r1, fp
  4039a0:	f7ff f99c 	bl	402cdc <__sprint_r.part.0>
  4039a4:	2800      	cmp	r0, #0
  4039a6:	f43f ae24 	beq.w	4035f2 <_vfiprintf_r+0x896>
  4039aa:	e624      	b.n	4035f6 <_vfiprintf_r+0x89a>
  4039ac:	9907      	ldr	r1, [sp, #28]
  4039ae:	f898 2001 	ldrb.w	r2, [r8, #1]
  4039b2:	680c      	ldr	r4, [r1, #0]
  4039b4:	3104      	adds	r1, #4
  4039b6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4039ba:	46b8      	mov	r8, r7
  4039bc:	9107      	str	r1, [sp, #28]
  4039be:	f7ff ba3f 	b.w	402e40 <_vfiprintf_r+0xe4>
  4039c2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4039c6:	e43c      	b.n	403242 <_vfiprintf_r+0x4e6>
  4039c8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4039cc:	e521      	b.n	403412 <_vfiprintf_r+0x6b6>
  4039ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4039d2:	f7ff bbf4 	b.w	4031be <_vfiprintf_r+0x462>
  4039d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4039da:	e491      	b.n	403300 <_vfiprintf_r+0x5a4>
  4039dc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4039e0:	e469      	b.n	4032b6 <_vfiprintf_r+0x55a>
  4039e2:	bf00      	nop
  4039e4:	00405058 	.word	0x00405058
  4039e8:	00405050 	.word	0x00405050

004039ec <__sbprintf>:
  4039ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039f0:	460c      	mov	r4, r1
  4039f2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4039f6:	8989      	ldrh	r1, [r1, #12]
  4039f8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4039fa:	89e5      	ldrh	r5, [r4, #14]
  4039fc:	9619      	str	r6, [sp, #100]	; 0x64
  4039fe:	f021 0102 	bic.w	r1, r1, #2
  403a02:	4606      	mov	r6, r0
  403a04:	69e0      	ldr	r0, [r4, #28]
  403a06:	f8ad 100c 	strh.w	r1, [sp, #12]
  403a0a:	4617      	mov	r7, r2
  403a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403a10:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403a12:	f8ad 500e 	strh.w	r5, [sp, #14]
  403a16:	4698      	mov	r8, r3
  403a18:	ad1a      	add	r5, sp, #104	; 0x68
  403a1a:	2300      	movs	r3, #0
  403a1c:	9007      	str	r0, [sp, #28]
  403a1e:	a816      	add	r0, sp, #88	; 0x58
  403a20:	9209      	str	r2, [sp, #36]	; 0x24
  403a22:	9306      	str	r3, [sp, #24]
  403a24:	9500      	str	r5, [sp, #0]
  403a26:	9504      	str	r5, [sp, #16]
  403a28:	9102      	str	r1, [sp, #8]
  403a2a:	9105      	str	r1, [sp, #20]
  403a2c:	f000 fd48 	bl	4044c0 <__retarget_lock_init_recursive>
  403a30:	4643      	mov	r3, r8
  403a32:	463a      	mov	r2, r7
  403a34:	4669      	mov	r1, sp
  403a36:	4630      	mov	r0, r6
  403a38:	f7ff f990 	bl	402d5c <_vfiprintf_r>
  403a3c:	1e05      	subs	r5, r0, #0
  403a3e:	db07      	blt.n	403a50 <__sbprintf+0x64>
  403a40:	4630      	mov	r0, r6
  403a42:	4669      	mov	r1, sp
  403a44:	f000 f928 	bl	403c98 <_fflush_r>
  403a48:	2800      	cmp	r0, #0
  403a4a:	bf18      	it	ne
  403a4c:	f04f 35ff 	movne.w	r5, #4294967295
  403a50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403a54:	065b      	lsls	r3, r3, #25
  403a56:	d503      	bpl.n	403a60 <__sbprintf+0x74>
  403a58:	89a3      	ldrh	r3, [r4, #12]
  403a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a5e:	81a3      	strh	r3, [r4, #12]
  403a60:	9816      	ldr	r0, [sp, #88]	; 0x58
  403a62:	f000 fd2f 	bl	4044c4 <__retarget_lock_close_recursive>
  403a66:	4628      	mov	r0, r5
  403a68:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403a70 <__swsetup_r>:
  403a70:	b538      	push	{r3, r4, r5, lr}
  403a72:	4b30      	ldr	r3, [pc, #192]	; (403b34 <__swsetup_r+0xc4>)
  403a74:	681b      	ldr	r3, [r3, #0]
  403a76:	4605      	mov	r5, r0
  403a78:	460c      	mov	r4, r1
  403a7a:	b113      	cbz	r3, 403a82 <__swsetup_r+0x12>
  403a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403a7e:	2a00      	cmp	r2, #0
  403a80:	d038      	beq.n	403af4 <__swsetup_r+0x84>
  403a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a86:	b293      	uxth	r3, r2
  403a88:	0718      	lsls	r0, r3, #28
  403a8a:	d50c      	bpl.n	403aa6 <__swsetup_r+0x36>
  403a8c:	6920      	ldr	r0, [r4, #16]
  403a8e:	b1a8      	cbz	r0, 403abc <__swsetup_r+0x4c>
  403a90:	f013 0201 	ands.w	r2, r3, #1
  403a94:	d01e      	beq.n	403ad4 <__swsetup_r+0x64>
  403a96:	6963      	ldr	r3, [r4, #20]
  403a98:	2200      	movs	r2, #0
  403a9a:	425b      	negs	r3, r3
  403a9c:	61a3      	str	r3, [r4, #24]
  403a9e:	60a2      	str	r2, [r4, #8]
  403aa0:	b1f0      	cbz	r0, 403ae0 <__swsetup_r+0x70>
  403aa2:	2000      	movs	r0, #0
  403aa4:	bd38      	pop	{r3, r4, r5, pc}
  403aa6:	06d9      	lsls	r1, r3, #27
  403aa8:	d53c      	bpl.n	403b24 <__swsetup_r+0xb4>
  403aaa:	0758      	lsls	r0, r3, #29
  403aac:	d426      	bmi.n	403afc <__swsetup_r+0x8c>
  403aae:	6920      	ldr	r0, [r4, #16]
  403ab0:	f042 0308 	orr.w	r3, r2, #8
  403ab4:	81a3      	strh	r3, [r4, #12]
  403ab6:	b29b      	uxth	r3, r3
  403ab8:	2800      	cmp	r0, #0
  403aba:	d1e9      	bne.n	403a90 <__swsetup_r+0x20>
  403abc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403ac0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403ac4:	d0e4      	beq.n	403a90 <__swsetup_r+0x20>
  403ac6:	4628      	mov	r0, r5
  403ac8:	4621      	mov	r1, r4
  403aca:	f000 fd2f 	bl	40452c <__smakebuf_r>
  403ace:	89a3      	ldrh	r3, [r4, #12]
  403ad0:	6920      	ldr	r0, [r4, #16]
  403ad2:	e7dd      	b.n	403a90 <__swsetup_r+0x20>
  403ad4:	0799      	lsls	r1, r3, #30
  403ad6:	bf58      	it	pl
  403ad8:	6962      	ldrpl	r2, [r4, #20]
  403ada:	60a2      	str	r2, [r4, #8]
  403adc:	2800      	cmp	r0, #0
  403ade:	d1e0      	bne.n	403aa2 <__swsetup_r+0x32>
  403ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403ae4:	061a      	lsls	r2, r3, #24
  403ae6:	d5dd      	bpl.n	403aa4 <__swsetup_r+0x34>
  403ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403aec:	81a3      	strh	r3, [r4, #12]
  403aee:	f04f 30ff 	mov.w	r0, #4294967295
  403af2:	bd38      	pop	{r3, r4, r5, pc}
  403af4:	4618      	mov	r0, r3
  403af6:	f000 f927 	bl	403d48 <__sinit>
  403afa:	e7c2      	b.n	403a82 <__swsetup_r+0x12>
  403afc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403afe:	b151      	cbz	r1, 403b16 <__swsetup_r+0xa6>
  403b00:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403b04:	4299      	cmp	r1, r3
  403b06:	d004      	beq.n	403b12 <__swsetup_r+0xa2>
  403b08:	4628      	mov	r0, r5
  403b0a:	f000 fa43 	bl	403f94 <_free_r>
  403b0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b12:	2300      	movs	r3, #0
  403b14:	6323      	str	r3, [r4, #48]	; 0x30
  403b16:	2300      	movs	r3, #0
  403b18:	6920      	ldr	r0, [r4, #16]
  403b1a:	6063      	str	r3, [r4, #4]
  403b1c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403b20:	6020      	str	r0, [r4, #0]
  403b22:	e7c5      	b.n	403ab0 <__swsetup_r+0x40>
  403b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403b28:	2309      	movs	r3, #9
  403b2a:	602b      	str	r3, [r5, #0]
  403b2c:	f04f 30ff 	mov.w	r0, #4294967295
  403b30:	81a2      	strh	r2, [r4, #12]
  403b32:	bd38      	pop	{r3, r4, r5, pc}
  403b34:	20000010 	.word	0x20000010

00403b38 <register_fini>:
  403b38:	4b02      	ldr	r3, [pc, #8]	; (403b44 <register_fini+0xc>)
  403b3a:	b113      	cbz	r3, 403b42 <register_fini+0xa>
  403b3c:	4802      	ldr	r0, [pc, #8]	; (403b48 <register_fini+0x10>)
  403b3e:	f000 b805 	b.w	403b4c <atexit>
  403b42:	4770      	bx	lr
  403b44:	00000000 	.word	0x00000000
  403b48:	00403db9 	.word	0x00403db9

00403b4c <atexit>:
  403b4c:	2300      	movs	r3, #0
  403b4e:	4601      	mov	r1, r0
  403b50:	461a      	mov	r2, r3
  403b52:	4618      	mov	r0, r3
  403b54:	f001 b92a 	b.w	404dac <__register_exitproc>

00403b58 <__sflush_r>:
  403b58:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403b5c:	b29a      	uxth	r2, r3
  403b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b62:	460d      	mov	r5, r1
  403b64:	0711      	lsls	r1, r2, #28
  403b66:	4680      	mov	r8, r0
  403b68:	d43a      	bmi.n	403be0 <__sflush_r+0x88>
  403b6a:	686a      	ldr	r2, [r5, #4]
  403b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403b70:	2a00      	cmp	r2, #0
  403b72:	81ab      	strh	r3, [r5, #12]
  403b74:	dd6f      	ble.n	403c56 <__sflush_r+0xfe>
  403b76:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403b78:	2c00      	cmp	r4, #0
  403b7a:	d049      	beq.n	403c10 <__sflush_r+0xb8>
  403b7c:	2200      	movs	r2, #0
  403b7e:	b29b      	uxth	r3, r3
  403b80:	f8d8 6000 	ldr.w	r6, [r8]
  403b84:	f8c8 2000 	str.w	r2, [r8]
  403b88:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403b8c:	d067      	beq.n	403c5e <__sflush_r+0x106>
  403b8e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403b90:	075f      	lsls	r7, r3, #29
  403b92:	d505      	bpl.n	403ba0 <__sflush_r+0x48>
  403b94:	6869      	ldr	r1, [r5, #4]
  403b96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403b98:	1a52      	subs	r2, r2, r1
  403b9a:	b10b      	cbz	r3, 403ba0 <__sflush_r+0x48>
  403b9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403b9e:	1ad2      	subs	r2, r2, r3
  403ba0:	2300      	movs	r3, #0
  403ba2:	69e9      	ldr	r1, [r5, #28]
  403ba4:	4640      	mov	r0, r8
  403ba6:	47a0      	blx	r4
  403ba8:	1c44      	adds	r4, r0, #1
  403baa:	d03c      	beq.n	403c26 <__sflush_r+0xce>
  403bac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403bb0:	692a      	ldr	r2, [r5, #16]
  403bb2:	602a      	str	r2, [r5, #0]
  403bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403bb8:	2200      	movs	r2, #0
  403bba:	81ab      	strh	r3, [r5, #12]
  403bbc:	04db      	lsls	r3, r3, #19
  403bbe:	606a      	str	r2, [r5, #4]
  403bc0:	d447      	bmi.n	403c52 <__sflush_r+0xfa>
  403bc2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403bc4:	f8c8 6000 	str.w	r6, [r8]
  403bc8:	b311      	cbz	r1, 403c10 <__sflush_r+0xb8>
  403bca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403bce:	4299      	cmp	r1, r3
  403bd0:	d002      	beq.n	403bd8 <__sflush_r+0x80>
  403bd2:	4640      	mov	r0, r8
  403bd4:	f000 f9de 	bl	403f94 <_free_r>
  403bd8:	2000      	movs	r0, #0
  403bda:	6328      	str	r0, [r5, #48]	; 0x30
  403bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403be0:	692e      	ldr	r6, [r5, #16]
  403be2:	b1ae      	cbz	r6, 403c10 <__sflush_r+0xb8>
  403be4:	682c      	ldr	r4, [r5, #0]
  403be6:	602e      	str	r6, [r5, #0]
  403be8:	0791      	lsls	r1, r2, #30
  403bea:	bf0c      	ite	eq
  403bec:	696b      	ldreq	r3, [r5, #20]
  403bee:	2300      	movne	r3, #0
  403bf0:	1ba4      	subs	r4, r4, r6
  403bf2:	60ab      	str	r3, [r5, #8]
  403bf4:	e00a      	b.n	403c0c <__sflush_r+0xb4>
  403bf6:	4623      	mov	r3, r4
  403bf8:	4632      	mov	r2, r6
  403bfa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403bfc:	69e9      	ldr	r1, [r5, #28]
  403bfe:	4640      	mov	r0, r8
  403c00:	47b8      	blx	r7
  403c02:	2800      	cmp	r0, #0
  403c04:	eba4 0400 	sub.w	r4, r4, r0
  403c08:	4406      	add	r6, r0
  403c0a:	dd04      	ble.n	403c16 <__sflush_r+0xbe>
  403c0c:	2c00      	cmp	r4, #0
  403c0e:	dcf2      	bgt.n	403bf6 <__sflush_r+0x9e>
  403c10:	2000      	movs	r0, #0
  403c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c16:	89ab      	ldrh	r3, [r5, #12]
  403c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c1c:	81ab      	strh	r3, [r5, #12]
  403c1e:	f04f 30ff 	mov.w	r0, #4294967295
  403c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c26:	f8d8 4000 	ldr.w	r4, [r8]
  403c2a:	2c1d      	cmp	r4, #29
  403c2c:	d8f3      	bhi.n	403c16 <__sflush_r+0xbe>
  403c2e:	4b19      	ldr	r3, [pc, #100]	; (403c94 <__sflush_r+0x13c>)
  403c30:	40e3      	lsrs	r3, r4
  403c32:	43db      	mvns	r3, r3
  403c34:	f013 0301 	ands.w	r3, r3, #1
  403c38:	d1ed      	bne.n	403c16 <__sflush_r+0xbe>
  403c3a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403c3e:	606b      	str	r3, [r5, #4]
  403c40:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403c44:	6929      	ldr	r1, [r5, #16]
  403c46:	81ab      	strh	r3, [r5, #12]
  403c48:	04da      	lsls	r2, r3, #19
  403c4a:	6029      	str	r1, [r5, #0]
  403c4c:	d5b9      	bpl.n	403bc2 <__sflush_r+0x6a>
  403c4e:	2c00      	cmp	r4, #0
  403c50:	d1b7      	bne.n	403bc2 <__sflush_r+0x6a>
  403c52:	6528      	str	r0, [r5, #80]	; 0x50
  403c54:	e7b5      	b.n	403bc2 <__sflush_r+0x6a>
  403c56:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403c58:	2a00      	cmp	r2, #0
  403c5a:	dc8c      	bgt.n	403b76 <__sflush_r+0x1e>
  403c5c:	e7d8      	b.n	403c10 <__sflush_r+0xb8>
  403c5e:	2301      	movs	r3, #1
  403c60:	69e9      	ldr	r1, [r5, #28]
  403c62:	4640      	mov	r0, r8
  403c64:	47a0      	blx	r4
  403c66:	1c43      	adds	r3, r0, #1
  403c68:	4602      	mov	r2, r0
  403c6a:	d002      	beq.n	403c72 <__sflush_r+0x11a>
  403c6c:	89ab      	ldrh	r3, [r5, #12]
  403c6e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403c70:	e78e      	b.n	403b90 <__sflush_r+0x38>
  403c72:	f8d8 3000 	ldr.w	r3, [r8]
  403c76:	2b00      	cmp	r3, #0
  403c78:	d0f8      	beq.n	403c6c <__sflush_r+0x114>
  403c7a:	2b1d      	cmp	r3, #29
  403c7c:	d001      	beq.n	403c82 <__sflush_r+0x12a>
  403c7e:	2b16      	cmp	r3, #22
  403c80:	d102      	bne.n	403c88 <__sflush_r+0x130>
  403c82:	f8c8 6000 	str.w	r6, [r8]
  403c86:	e7c3      	b.n	403c10 <__sflush_r+0xb8>
  403c88:	89ab      	ldrh	r3, [r5, #12]
  403c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c8e:	81ab      	strh	r3, [r5, #12]
  403c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c94:	20400001 	.word	0x20400001

00403c98 <_fflush_r>:
  403c98:	b538      	push	{r3, r4, r5, lr}
  403c9a:	460d      	mov	r5, r1
  403c9c:	4604      	mov	r4, r0
  403c9e:	b108      	cbz	r0, 403ca4 <_fflush_r+0xc>
  403ca0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ca2:	b1bb      	cbz	r3, 403cd4 <_fflush_r+0x3c>
  403ca4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403ca8:	b188      	cbz	r0, 403cce <_fflush_r+0x36>
  403caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403cac:	07db      	lsls	r3, r3, #31
  403cae:	d401      	bmi.n	403cb4 <_fflush_r+0x1c>
  403cb0:	0581      	lsls	r1, r0, #22
  403cb2:	d517      	bpl.n	403ce4 <_fflush_r+0x4c>
  403cb4:	4620      	mov	r0, r4
  403cb6:	4629      	mov	r1, r5
  403cb8:	f7ff ff4e 	bl	403b58 <__sflush_r>
  403cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403cbe:	07da      	lsls	r2, r3, #31
  403cc0:	4604      	mov	r4, r0
  403cc2:	d402      	bmi.n	403cca <_fflush_r+0x32>
  403cc4:	89ab      	ldrh	r3, [r5, #12]
  403cc6:	059b      	lsls	r3, r3, #22
  403cc8:	d507      	bpl.n	403cda <_fflush_r+0x42>
  403cca:	4620      	mov	r0, r4
  403ccc:	bd38      	pop	{r3, r4, r5, pc}
  403cce:	4604      	mov	r4, r0
  403cd0:	4620      	mov	r0, r4
  403cd2:	bd38      	pop	{r3, r4, r5, pc}
  403cd4:	f000 f838 	bl	403d48 <__sinit>
  403cd8:	e7e4      	b.n	403ca4 <_fflush_r+0xc>
  403cda:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403cdc:	f000 fbf6 	bl	4044cc <__retarget_lock_release_recursive>
  403ce0:	4620      	mov	r0, r4
  403ce2:	bd38      	pop	{r3, r4, r5, pc}
  403ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403ce6:	f000 fbef 	bl	4044c8 <__retarget_lock_acquire_recursive>
  403cea:	e7e3      	b.n	403cb4 <_fflush_r+0x1c>

00403cec <_cleanup_r>:
  403cec:	4901      	ldr	r1, [pc, #4]	; (403cf4 <_cleanup_r+0x8>)
  403cee:	f000 bbaf 	b.w	404450 <_fwalk_reent>
  403cf2:	bf00      	nop
  403cf4:	00404e95 	.word	0x00404e95

00403cf8 <std.isra.0>:
  403cf8:	b510      	push	{r4, lr}
  403cfa:	2300      	movs	r3, #0
  403cfc:	4604      	mov	r4, r0
  403cfe:	8181      	strh	r1, [r0, #12]
  403d00:	81c2      	strh	r2, [r0, #14]
  403d02:	6003      	str	r3, [r0, #0]
  403d04:	6043      	str	r3, [r0, #4]
  403d06:	6083      	str	r3, [r0, #8]
  403d08:	6643      	str	r3, [r0, #100]	; 0x64
  403d0a:	6103      	str	r3, [r0, #16]
  403d0c:	6143      	str	r3, [r0, #20]
  403d0e:	6183      	str	r3, [r0, #24]
  403d10:	4619      	mov	r1, r3
  403d12:	2208      	movs	r2, #8
  403d14:	305c      	adds	r0, #92	; 0x5c
  403d16:	f7fe fe2f 	bl	402978 <memset>
  403d1a:	4807      	ldr	r0, [pc, #28]	; (403d38 <std.isra.0+0x40>)
  403d1c:	4907      	ldr	r1, [pc, #28]	; (403d3c <std.isra.0+0x44>)
  403d1e:	4a08      	ldr	r2, [pc, #32]	; (403d40 <std.isra.0+0x48>)
  403d20:	4b08      	ldr	r3, [pc, #32]	; (403d44 <std.isra.0+0x4c>)
  403d22:	6220      	str	r0, [r4, #32]
  403d24:	61e4      	str	r4, [r4, #28]
  403d26:	6261      	str	r1, [r4, #36]	; 0x24
  403d28:	62a2      	str	r2, [r4, #40]	; 0x28
  403d2a:	62e3      	str	r3, [r4, #44]	; 0x2c
  403d2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d34:	f000 bbc4 	b.w	4044c0 <__retarget_lock_init_recursive>
  403d38:	00404bd9 	.word	0x00404bd9
  403d3c:	00404bfd 	.word	0x00404bfd
  403d40:	00404c39 	.word	0x00404c39
  403d44:	00404c59 	.word	0x00404c59

00403d48 <__sinit>:
  403d48:	b510      	push	{r4, lr}
  403d4a:	4604      	mov	r4, r0
  403d4c:	4812      	ldr	r0, [pc, #72]	; (403d98 <__sinit+0x50>)
  403d4e:	f000 fbbb 	bl	4044c8 <__retarget_lock_acquire_recursive>
  403d52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403d54:	b9d2      	cbnz	r2, 403d8c <__sinit+0x44>
  403d56:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403d5a:	4810      	ldr	r0, [pc, #64]	; (403d9c <__sinit+0x54>)
  403d5c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403d60:	2103      	movs	r1, #3
  403d62:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403d66:	63e0      	str	r0, [r4, #60]	; 0x3c
  403d68:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403d6c:	6860      	ldr	r0, [r4, #4]
  403d6e:	2104      	movs	r1, #4
  403d70:	f7ff ffc2 	bl	403cf8 <std.isra.0>
  403d74:	2201      	movs	r2, #1
  403d76:	2109      	movs	r1, #9
  403d78:	68a0      	ldr	r0, [r4, #8]
  403d7a:	f7ff ffbd 	bl	403cf8 <std.isra.0>
  403d7e:	2202      	movs	r2, #2
  403d80:	2112      	movs	r1, #18
  403d82:	68e0      	ldr	r0, [r4, #12]
  403d84:	f7ff ffb8 	bl	403cf8 <std.isra.0>
  403d88:	2301      	movs	r3, #1
  403d8a:	63a3      	str	r3, [r4, #56]	; 0x38
  403d8c:	4802      	ldr	r0, [pc, #8]	; (403d98 <__sinit+0x50>)
  403d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d92:	f000 bb9b 	b.w	4044cc <__retarget_lock_release_recursive>
  403d96:	bf00      	nop
  403d98:	200016b0 	.word	0x200016b0
  403d9c:	00403ced 	.word	0x00403ced

00403da0 <__sfp_lock_acquire>:
  403da0:	4801      	ldr	r0, [pc, #4]	; (403da8 <__sfp_lock_acquire+0x8>)
  403da2:	f000 bb91 	b.w	4044c8 <__retarget_lock_acquire_recursive>
  403da6:	bf00      	nop
  403da8:	200016c4 	.word	0x200016c4

00403dac <__sfp_lock_release>:
  403dac:	4801      	ldr	r0, [pc, #4]	; (403db4 <__sfp_lock_release+0x8>)
  403dae:	f000 bb8d 	b.w	4044cc <__retarget_lock_release_recursive>
  403db2:	bf00      	nop
  403db4:	200016c4 	.word	0x200016c4

00403db8 <__libc_fini_array>:
  403db8:	b538      	push	{r3, r4, r5, lr}
  403dba:	4c0a      	ldr	r4, [pc, #40]	; (403de4 <__libc_fini_array+0x2c>)
  403dbc:	4d0a      	ldr	r5, [pc, #40]	; (403de8 <__libc_fini_array+0x30>)
  403dbe:	1b64      	subs	r4, r4, r5
  403dc0:	10a4      	asrs	r4, r4, #2
  403dc2:	d00a      	beq.n	403dda <__libc_fini_array+0x22>
  403dc4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403dc8:	3b01      	subs	r3, #1
  403dca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403dce:	3c01      	subs	r4, #1
  403dd0:	f855 3904 	ldr.w	r3, [r5], #-4
  403dd4:	4798      	blx	r3
  403dd6:	2c00      	cmp	r4, #0
  403dd8:	d1f9      	bne.n	403dce <__libc_fini_array+0x16>
  403dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403dde:	f001 b9df 	b.w	4051a0 <_fini>
  403de2:	bf00      	nop
  403de4:	004051b0 	.word	0x004051b0
  403de8:	004051ac 	.word	0x004051ac

00403dec <__fputwc>:
  403dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403df0:	b082      	sub	sp, #8
  403df2:	4680      	mov	r8, r0
  403df4:	4689      	mov	r9, r1
  403df6:	4614      	mov	r4, r2
  403df8:	f000 fb54 	bl	4044a4 <__locale_mb_cur_max>
  403dfc:	2801      	cmp	r0, #1
  403dfe:	d036      	beq.n	403e6e <__fputwc+0x82>
  403e00:	464a      	mov	r2, r9
  403e02:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403e06:	a901      	add	r1, sp, #4
  403e08:	4640      	mov	r0, r8
  403e0a:	f000 ff81 	bl	404d10 <_wcrtomb_r>
  403e0e:	1c42      	adds	r2, r0, #1
  403e10:	4606      	mov	r6, r0
  403e12:	d025      	beq.n	403e60 <__fputwc+0x74>
  403e14:	b3a8      	cbz	r0, 403e82 <__fputwc+0x96>
  403e16:	f89d e004 	ldrb.w	lr, [sp, #4]
  403e1a:	2500      	movs	r5, #0
  403e1c:	f10d 0a04 	add.w	sl, sp, #4
  403e20:	e009      	b.n	403e36 <__fputwc+0x4a>
  403e22:	6823      	ldr	r3, [r4, #0]
  403e24:	1c5a      	adds	r2, r3, #1
  403e26:	6022      	str	r2, [r4, #0]
  403e28:	f883 e000 	strb.w	lr, [r3]
  403e2c:	3501      	adds	r5, #1
  403e2e:	42b5      	cmp	r5, r6
  403e30:	d227      	bcs.n	403e82 <__fputwc+0x96>
  403e32:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403e36:	68a3      	ldr	r3, [r4, #8]
  403e38:	3b01      	subs	r3, #1
  403e3a:	2b00      	cmp	r3, #0
  403e3c:	60a3      	str	r3, [r4, #8]
  403e3e:	daf0      	bge.n	403e22 <__fputwc+0x36>
  403e40:	69a7      	ldr	r7, [r4, #24]
  403e42:	42bb      	cmp	r3, r7
  403e44:	4671      	mov	r1, lr
  403e46:	4622      	mov	r2, r4
  403e48:	4640      	mov	r0, r8
  403e4a:	db02      	blt.n	403e52 <__fputwc+0x66>
  403e4c:	f1be 0f0a 	cmp.w	lr, #10
  403e50:	d1e7      	bne.n	403e22 <__fputwc+0x36>
  403e52:	f000 ff05 	bl	404c60 <__swbuf_r>
  403e56:	1c43      	adds	r3, r0, #1
  403e58:	d1e8      	bne.n	403e2c <__fputwc+0x40>
  403e5a:	b002      	add	sp, #8
  403e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e60:	89a3      	ldrh	r3, [r4, #12]
  403e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e66:	81a3      	strh	r3, [r4, #12]
  403e68:	b002      	add	sp, #8
  403e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e6e:	f109 33ff 	add.w	r3, r9, #4294967295
  403e72:	2bfe      	cmp	r3, #254	; 0xfe
  403e74:	d8c4      	bhi.n	403e00 <__fputwc+0x14>
  403e76:	fa5f fe89 	uxtb.w	lr, r9
  403e7a:	4606      	mov	r6, r0
  403e7c:	f88d e004 	strb.w	lr, [sp, #4]
  403e80:	e7cb      	b.n	403e1a <__fputwc+0x2e>
  403e82:	4648      	mov	r0, r9
  403e84:	b002      	add	sp, #8
  403e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e8a:	bf00      	nop

00403e8c <_fputwc_r>:
  403e8c:	b530      	push	{r4, r5, lr}
  403e8e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403e90:	f013 0f01 	tst.w	r3, #1
  403e94:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403e98:	4614      	mov	r4, r2
  403e9a:	b083      	sub	sp, #12
  403e9c:	4605      	mov	r5, r0
  403e9e:	b29a      	uxth	r2, r3
  403ea0:	d101      	bne.n	403ea6 <_fputwc_r+0x1a>
  403ea2:	0590      	lsls	r0, r2, #22
  403ea4:	d51c      	bpl.n	403ee0 <_fputwc_r+0x54>
  403ea6:	0490      	lsls	r0, r2, #18
  403ea8:	d406      	bmi.n	403eb8 <_fputwc_r+0x2c>
  403eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403eac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403eb4:	81a3      	strh	r3, [r4, #12]
  403eb6:	6662      	str	r2, [r4, #100]	; 0x64
  403eb8:	4628      	mov	r0, r5
  403eba:	4622      	mov	r2, r4
  403ebc:	f7ff ff96 	bl	403dec <__fputwc>
  403ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ec2:	07da      	lsls	r2, r3, #31
  403ec4:	4605      	mov	r5, r0
  403ec6:	d402      	bmi.n	403ece <_fputwc_r+0x42>
  403ec8:	89a3      	ldrh	r3, [r4, #12]
  403eca:	059b      	lsls	r3, r3, #22
  403ecc:	d502      	bpl.n	403ed4 <_fputwc_r+0x48>
  403ece:	4628      	mov	r0, r5
  403ed0:	b003      	add	sp, #12
  403ed2:	bd30      	pop	{r4, r5, pc}
  403ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ed6:	f000 faf9 	bl	4044cc <__retarget_lock_release_recursive>
  403eda:	4628      	mov	r0, r5
  403edc:	b003      	add	sp, #12
  403ede:	bd30      	pop	{r4, r5, pc}
  403ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ee2:	9101      	str	r1, [sp, #4]
  403ee4:	f000 faf0 	bl	4044c8 <__retarget_lock_acquire_recursive>
  403ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403eec:	9901      	ldr	r1, [sp, #4]
  403eee:	b29a      	uxth	r2, r3
  403ef0:	e7d9      	b.n	403ea6 <_fputwc_r+0x1a>
  403ef2:	bf00      	nop

00403ef4 <_malloc_trim_r>:
  403ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403ef6:	4f24      	ldr	r7, [pc, #144]	; (403f88 <_malloc_trim_r+0x94>)
  403ef8:	460c      	mov	r4, r1
  403efa:	4606      	mov	r6, r0
  403efc:	f7fe fd8a 	bl	402a14 <__malloc_lock>
  403f00:	68bb      	ldr	r3, [r7, #8]
  403f02:	685d      	ldr	r5, [r3, #4]
  403f04:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403f08:	310f      	adds	r1, #15
  403f0a:	f025 0503 	bic.w	r5, r5, #3
  403f0e:	4429      	add	r1, r5
  403f10:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403f14:	f021 010f 	bic.w	r1, r1, #15
  403f18:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403f1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403f20:	db07      	blt.n	403f32 <_malloc_trim_r+0x3e>
  403f22:	2100      	movs	r1, #0
  403f24:	4630      	mov	r0, r6
  403f26:	f7fe fd81 	bl	402a2c <_sbrk_r>
  403f2a:	68bb      	ldr	r3, [r7, #8]
  403f2c:	442b      	add	r3, r5
  403f2e:	4298      	cmp	r0, r3
  403f30:	d004      	beq.n	403f3c <_malloc_trim_r+0x48>
  403f32:	4630      	mov	r0, r6
  403f34:	f7fe fd74 	bl	402a20 <__malloc_unlock>
  403f38:	2000      	movs	r0, #0
  403f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f3c:	4261      	negs	r1, r4
  403f3e:	4630      	mov	r0, r6
  403f40:	f7fe fd74 	bl	402a2c <_sbrk_r>
  403f44:	3001      	adds	r0, #1
  403f46:	d00d      	beq.n	403f64 <_malloc_trim_r+0x70>
  403f48:	4b10      	ldr	r3, [pc, #64]	; (403f8c <_malloc_trim_r+0x98>)
  403f4a:	68ba      	ldr	r2, [r7, #8]
  403f4c:	6819      	ldr	r1, [r3, #0]
  403f4e:	1b2d      	subs	r5, r5, r4
  403f50:	f045 0501 	orr.w	r5, r5, #1
  403f54:	4630      	mov	r0, r6
  403f56:	1b09      	subs	r1, r1, r4
  403f58:	6055      	str	r5, [r2, #4]
  403f5a:	6019      	str	r1, [r3, #0]
  403f5c:	f7fe fd60 	bl	402a20 <__malloc_unlock>
  403f60:	2001      	movs	r0, #1
  403f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f64:	2100      	movs	r1, #0
  403f66:	4630      	mov	r0, r6
  403f68:	f7fe fd60 	bl	402a2c <_sbrk_r>
  403f6c:	68ba      	ldr	r2, [r7, #8]
  403f6e:	1a83      	subs	r3, r0, r2
  403f70:	2b0f      	cmp	r3, #15
  403f72:	ddde      	ble.n	403f32 <_malloc_trim_r+0x3e>
  403f74:	4c06      	ldr	r4, [pc, #24]	; (403f90 <_malloc_trim_r+0x9c>)
  403f76:	4905      	ldr	r1, [pc, #20]	; (403f8c <_malloc_trim_r+0x98>)
  403f78:	6824      	ldr	r4, [r4, #0]
  403f7a:	f043 0301 	orr.w	r3, r3, #1
  403f7e:	1b00      	subs	r0, r0, r4
  403f80:	6053      	str	r3, [r2, #4]
  403f82:	6008      	str	r0, [r1, #0]
  403f84:	e7d5      	b.n	403f32 <_malloc_trim_r+0x3e>
  403f86:	bf00      	nop
  403f88:	20000440 	.word	0x20000440
  403f8c:	20000a58 	.word	0x20000a58
  403f90:	20000848 	.word	0x20000848

00403f94 <_free_r>:
  403f94:	2900      	cmp	r1, #0
  403f96:	d044      	beq.n	404022 <_free_r+0x8e>
  403f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f9c:	460d      	mov	r5, r1
  403f9e:	4680      	mov	r8, r0
  403fa0:	f7fe fd38 	bl	402a14 <__malloc_lock>
  403fa4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403fa8:	4969      	ldr	r1, [pc, #420]	; (404150 <_free_r+0x1bc>)
  403faa:	f027 0301 	bic.w	r3, r7, #1
  403fae:	f1a5 0408 	sub.w	r4, r5, #8
  403fb2:	18e2      	adds	r2, r4, r3
  403fb4:	688e      	ldr	r6, [r1, #8]
  403fb6:	6850      	ldr	r0, [r2, #4]
  403fb8:	42b2      	cmp	r2, r6
  403fba:	f020 0003 	bic.w	r0, r0, #3
  403fbe:	d05e      	beq.n	40407e <_free_r+0xea>
  403fc0:	07fe      	lsls	r6, r7, #31
  403fc2:	6050      	str	r0, [r2, #4]
  403fc4:	d40b      	bmi.n	403fde <_free_r+0x4a>
  403fc6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403fca:	1be4      	subs	r4, r4, r7
  403fcc:	f101 0e08 	add.w	lr, r1, #8
  403fd0:	68a5      	ldr	r5, [r4, #8]
  403fd2:	4575      	cmp	r5, lr
  403fd4:	443b      	add	r3, r7
  403fd6:	d06d      	beq.n	4040b4 <_free_r+0x120>
  403fd8:	68e7      	ldr	r7, [r4, #12]
  403fda:	60ef      	str	r7, [r5, #12]
  403fdc:	60bd      	str	r5, [r7, #8]
  403fde:	1815      	adds	r5, r2, r0
  403fe0:	686d      	ldr	r5, [r5, #4]
  403fe2:	07ed      	lsls	r5, r5, #31
  403fe4:	d53e      	bpl.n	404064 <_free_r+0xd0>
  403fe6:	f043 0201 	orr.w	r2, r3, #1
  403fea:	6062      	str	r2, [r4, #4]
  403fec:	50e3      	str	r3, [r4, r3]
  403fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403ff2:	d217      	bcs.n	404024 <_free_r+0x90>
  403ff4:	08db      	lsrs	r3, r3, #3
  403ff6:	1c58      	adds	r0, r3, #1
  403ff8:	109a      	asrs	r2, r3, #2
  403ffa:	684d      	ldr	r5, [r1, #4]
  403ffc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404000:	60a7      	str	r7, [r4, #8]
  404002:	2301      	movs	r3, #1
  404004:	4093      	lsls	r3, r2
  404006:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40400a:	432b      	orrs	r3, r5
  40400c:	3a08      	subs	r2, #8
  40400e:	60e2      	str	r2, [r4, #12]
  404010:	604b      	str	r3, [r1, #4]
  404012:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404016:	60fc      	str	r4, [r7, #12]
  404018:	4640      	mov	r0, r8
  40401a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40401e:	f7fe bcff 	b.w	402a20 <__malloc_unlock>
  404022:	4770      	bx	lr
  404024:	0a5a      	lsrs	r2, r3, #9
  404026:	2a04      	cmp	r2, #4
  404028:	d852      	bhi.n	4040d0 <_free_r+0x13c>
  40402a:	099a      	lsrs	r2, r3, #6
  40402c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404030:	00ff      	lsls	r7, r7, #3
  404032:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404036:	19c8      	adds	r0, r1, r7
  404038:	59ca      	ldr	r2, [r1, r7]
  40403a:	3808      	subs	r0, #8
  40403c:	4290      	cmp	r0, r2
  40403e:	d04f      	beq.n	4040e0 <_free_r+0x14c>
  404040:	6851      	ldr	r1, [r2, #4]
  404042:	f021 0103 	bic.w	r1, r1, #3
  404046:	428b      	cmp	r3, r1
  404048:	d232      	bcs.n	4040b0 <_free_r+0x11c>
  40404a:	6892      	ldr	r2, [r2, #8]
  40404c:	4290      	cmp	r0, r2
  40404e:	d1f7      	bne.n	404040 <_free_r+0xac>
  404050:	68c3      	ldr	r3, [r0, #12]
  404052:	60a0      	str	r0, [r4, #8]
  404054:	60e3      	str	r3, [r4, #12]
  404056:	609c      	str	r4, [r3, #8]
  404058:	60c4      	str	r4, [r0, #12]
  40405a:	4640      	mov	r0, r8
  40405c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404060:	f7fe bcde 	b.w	402a20 <__malloc_unlock>
  404064:	6895      	ldr	r5, [r2, #8]
  404066:	4f3b      	ldr	r7, [pc, #236]	; (404154 <_free_r+0x1c0>)
  404068:	42bd      	cmp	r5, r7
  40406a:	4403      	add	r3, r0
  40406c:	d040      	beq.n	4040f0 <_free_r+0x15c>
  40406e:	68d0      	ldr	r0, [r2, #12]
  404070:	60e8      	str	r0, [r5, #12]
  404072:	f043 0201 	orr.w	r2, r3, #1
  404076:	6085      	str	r5, [r0, #8]
  404078:	6062      	str	r2, [r4, #4]
  40407a:	50e3      	str	r3, [r4, r3]
  40407c:	e7b7      	b.n	403fee <_free_r+0x5a>
  40407e:	07ff      	lsls	r7, r7, #31
  404080:	4403      	add	r3, r0
  404082:	d407      	bmi.n	404094 <_free_r+0x100>
  404084:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404088:	1aa4      	subs	r4, r4, r2
  40408a:	4413      	add	r3, r2
  40408c:	68a0      	ldr	r0, [r4, #8]
  40408e:	68e2      	ldr	r2, [r4, #12]
  404090:	60c2      	str	r2, [r0, #12]
  404092:	6090      	str	r0, [r2, #8]
  404094:	4a30      	ldr	r2, [pc, #192]	; (404158 <_free_r+0x1c4>)
  404096:	6812      	ldr	r2, [r2, #0]
  404098:	f043 0001 	orr.w	r0, r3, #1
  40409c:	4293      	cmp	r3, r2
  40409e:	6060      	str	r0, [r4, #4]
  4040a0:	608c      	str	r4, [r1, #8]
  4040a2:	d3b9      	bcc.n	404018 <_free_r+0x84>
  4040a4:	4b2d      	ldr	r3, [pc, #180]	; (40415c <_free_r+0x1c8>)
  4040a6:	4640      	mov	r0, r8
  4040a8:	6819      	ldr	r1, [r3, #0]
  4040aa:	f7ff ff23 	bl	403ef4 <_malloc_trim_r>
  4040ae:	e7b3      	b.n	404018 <_free_r+0x84>
  4040b0:	4610      	mov	r0, r2
  4040b2:	e7cd      	b.n	404050 <_free_r+0xbc>
  4040b4:	1811      	adds	r1, r2, r0
  4040b6:	6849      	ldr	r1, [r1, #4]
  4040b8:	07c9      	lsls	r1, r1, #31
  4040ba:	d444      	bmi.n	404146 <_free_r+0x1b2>
  4040bc:	6891      	ldr	r1, [r2, #8]
  4040be:	68d2      	ldr	r2, [r2, #12]
  4040c0:	60ca      	str	r2, [r1, #12]
  4040c2:	4403      	add	r3, r0
  4040c4:	f043 0001 	orr.w	r0, r3, #1
  4040c8:	6091      	str	r1, [r2, #8]
  4040ca:	6060      	str	r0, [r4, #4]
  4040cc:	50e3      	str	r3, [r4, r3]
  4040ce:	e7a3      	b.n	404018 <_free_r+0x84>
  4040d0:	2a14      	cmp	r2, #20
  4040d2:	d816      	bhi.n	404102 <_free_r+0x16e>
  4040d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4040d8:	00ff      	lsls	r7, r7, #3
  4040da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4040de:	e7aa      	b.n	404036 <_free_r+0xa2>
  4040e0:	10aa      	asrs	r2, r5, #2
  4040e2:	2301      	movs	r3, #1
  4040e4:	684d      	ldr	r5, [r1, #4]
  4040e6:	4093      	lsls	r3, r2
  4040e8:	432b      	orrs	r3, r5
  4040ea:	604b      	str	r3, [r1, #4]
  4040ec:	4603      	mov	r3, r0
  4040ee:	e7b0      	b.n	404052 <_free_r+0xbe>
  4040f0:	f043 0201 	orr.w	r2, r3, #1
  4040f4:	614c      	str	r4, [r1, #20]
  4040f6:	610c      	str	r4, [r1, #16]
  4040f8:	60e5      	str	r5, [r4, #12]
  4040fa:	60a5      	str	r5, [r4, #8]
  4040fc:	6062      	str	r2, [r4, #4]
  4040fe:	50e3      	str	r3, [r4, r3]
  404100:	e78a      	b.n	404018 <_free_r+0x84>
  404102:	2a54      	cmp	r2, #84	; 0x54
  404104:	d806      	bhi.n	404114 <_free_r+0x180>
  404106:	0b1a      	lsrs	r2, r3, #12
  404108:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40410c:	00ff      	lsls	r7, r7, #3
  40410e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404112:	e790      	b.n	404036 <_free_r+0xa2>
  404114:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404118:	d806      	bhi.n	404128 <_free_r+0x194>
  40411a:	0bda      	lsrs	r2, r3, #15
  40411c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404120:	00ff      	lsls	r7, r7, #3
  404122:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404126:	e786      	b.n	404036 <_free_r+0xa2>
  404128:	f240 5054 	movw	r0, #1364	; 0x554
  40412c:	4282      	cmp	r2, r0
  40412e:	d806      	bhi.n	40413e <_free_r+0x1aa>
  404130:	0c9a      	lsrs	r2, r3, #18
  404132:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404136:	00ff      	lsls	r7, r7, #3
  404138:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40413c:	e77b      	b.n	404036 <_free_r+0xa2>
  40413e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404142:	257e      	movs	r5, #126	; 0x7e
  404144:	e777      	b.n	404036 <_free_r+0xa2>
  404146:	f043 0101 	orr.w	r1, r3, #1
  40414a:	6061      	str	r1, [r4, #4]
  40414c:	6013      	str	r3, [r2, #0]
  40414e:	e763      	b.n	404018 <_free_r+0x84>
  404150:	20000440 	.word	0x20000440
  404154:	20000448 	.word	0x20000448
  404158:	2000084c 	.word	0x2000084c
  40415c:	20000a88 	.word	0x20000a88

00404160 <__sfvwrite_r>:
  404160:	6893      	ldr	r3, [r2, #8]
  404162:	2b00      	cmp	r3, #0
  404164:	d073      	beq.n	40424e <__sfvwrite_r+0xee>
  404166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40416a:	898b      	ldrh	r3, [r1, #12]
  40416c:	b083      	sub	sp, #12
  40416e:	460c      	mov	r4, r1
  404170:	0719      	lsls	r1, r3, #28
  404172:	9000      	str	r0, [sp, #0]
  404174:	4616      	mov	r6, r2
  404176:	d526      	bpl.n	4041c6 <__sfvwrite_r+0x66>
  404178:	6922      	ldr	r2, [r4, #16]
  40417a:	b322      	cbz	r2, 4041c6 <__sfvwrite_r+0x66>
  40417c:	f013 0002 	ands.w	r0, r3, #2
  404180:	6835      	ldr	r5, [r6, #0]
  404182:	d02c      	beq.n	4041de <__sfvwrite_r+0x7e>
  404184:	f04f 0900 	mov.w	r9, #0
  404188:	4fb0      	ldr	r7, [pc, #704]	; (40444c <__sfvwrite_r+0x2ec>)
  40418a:	46c8      	mov	r8, r9
  40418c:	46b2      	mov	sl, r6
  40418e:	45b8      	cmp	r8, r7
  404190:	4643      	mov	r3, r8
  404192:	464a      	mov	r2, r9
  404194:	bf28      	it	cs
  404196:	463b      	movcs	r3, r7
  404198:	9800      	ldr	r0, [sp, #0]
  40419a:	f1b8 0f00 	cmp.w	r8, #0
  40419e:	d050      	beq.n	404242 <__sfvwrite_r+0xe2>
  4041a0:	69e1      	ldr	r1, [r4, #28]
  4041a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4041a4:	47b0      	blx	r6
  4041a6:	2800      	cmp	r0, #0
  4041a8:	dd58      	ble.n	40425c <__sfvwrite_r+0xfc>
  4041aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4041ae:	1a1b      	subs	r3, r3, r0
  4041b0:	4481      	add	r9, r0
  4041b2:	eba8 0800 	sub.w	r8, r8, r0
  4041b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4041ba:	2b00      	cmp	r3, #0
  4041bc:	d1e7      	bne.n	40418e <__sfvwrite_r+0x2e>
  4041be:	2000      	movs	r0, #0
  4041c0:	b003      	add	sp, #12
  4041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041c6:	4621      	mov	r1, r4
  4041c8:	9800      	ldr	r0, [sp, #0]
  4041ca:	f7ff fc51 	bl	403a70 <__swsetup_r>
  4041ce:	2800      	cmp	r0, #0
  4041d0:	f040 8133 	bne.w	40443a <__sfvwrite_r+0x2da>
  4041d4:	89a3      	ldrh	r3, [r4, #12]
  4041d6:	6835      	ldr	r5, [r6, #0]
  4041d8:	f013 0002 	ands.w	r0, r3, #2
  4041dc:	d1d2      	bne.n	404184 <__sfvwrite_r+0x24>
  4041de:	f013 0901 	ands.w	r9, r3, #1
  4041e2:	d145      	bne.n	404270 <__sfvwrite_r+0x110>
  4041e4:	464f      	mov	r7, r9
  4041e6:	9601      	str	r6, [sp, #4]
  4041e8:	b337      	cbz	r7, 404238 <__sfvwrite_r+0xd8>
  4041ea:	059a      	lsls	r2, r3, #22
  4041ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4041f0:	f140 8083 	bpl.w	4042fa <__sfvwrite_r+0x19a>
  4041f4:	4547      	cmp	r7, r8
  4041f6:	46c3      	mov	fp, r8
  4041f8:	f0c0 80ab 	bcc.w	404352 <__sfvwrite_r+0x1f2>
  4041fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404200:	f040 80ac 	bne.w	40435c <__sfvwrite_r+0x1fc>
  404204:	6820      	ldr	r0, [r4, #0]
  404206:	46ba      	mov	sl, r7
  404208:	465a      	mov	r2, fp
  40420a:	4649      	mov	r1, r9
  40420c:	f000 fada 	bl	4047c4 <memmove>
  404210:	68a2      	ldr	r2, [r4, #8]
  404212:	6823      	ldr	r3, [r4, #0]
  404214:	eba2 0208 	sub.w	r2, r2, r8
  404218:	445b      	add	r3, fp
  40421a:	60a2      	str	r2, [r4, #8]
  40421c:	6023      	str	r3, [r4, #0]
  40421e:	9a01      	ldr	r2, [sp, #4]
  404220:	6893      	ldr	r3, [r2, #8]
  404222:	eba3 030a 	sub.w	r3, r3, sl
  404226:	44d1      	add	r9, sl
  404228:	eba7 070a 	sub.w	r7, r7, sl
  40422c:	6093      	str	r3, [r2, #8]
  40422e:	2b00      	cmp	r3, #0
  404230:	d0c5      	beq.n	4041be <__sfvwrite_r+0x5e>
  404232:	89a3      	ldrh	r3, [r4, #12]
  404234:	2f00      	cmp	r7, #0
  404236:	d1d8      	bne.n	4041ea <__sfvwrite_r+0x8a>
  404238:	f8d5 9000 	ldr.w	r9, [r5]
  40423c:	686f      	ldr	r7, [r5, #4]
  40423e:	3508      	adds	r5, #8
  404240:	e7d2      	b.n	4041e8 <__sfvwrite_r+0x88>
  404242:	f8d5 9000 	ldr.w	r9, [r5]
  404246:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40424a:	3508      	adds	r5, #8
  40424c:	e79f      	b.n	40418e <__sfvwrite_r+0x2e>
  40424e:	2000      	movs	r0, #0
  404250:	4770      	bx	lr
  404252:	4621      	mov	r1, r4
  404254:	9800      	ldr	r0, [sp, #0]
  404256:	f7ff fd1f 	bl	403c98 <_fflush_r>
  40425a:	b370      	cbz	r0, 4042ba <__sfvwrite_r+0x15a>
  40425c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404264:	f04f 30ff 	mov.w	r0, #4294967295
  404268:	81a3      	strh	r3, [r4, #12]
  40426a:	b003      	add	sp, #12
  40426c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404270:	4681      	mov	r9, r0
  404272:	4633      	mov	r3, r6
  404274:	464e      	mov	r6, r9
  404276:	46a8      	mov	r8, r5
  404278:	469a      	mov	sl, r3
  40427a:	464d      	mov	r5, r9
  40427c:	b34e      	cbz	r6, 4042d2 <__sfvwrite_r+0x172>
  40427e:	b380      	cbz	r0, 4042e2 <__sfvwrite_r+0x182>
  404280:	6820      	ldr	r0, [r4, #0]
  404282:	6923      	ldr	r3, [r4, #16]
  404284:	6962      	ldr	r2, [r4, #20]
  404286:	45b1      	cmp	r9, r6
  404288:	46cb      	mov	fp, r9
  40428a:	bf28      	it	cs
  40428c:	46b3      	movcs	fp, r6
  40428e:	4298      	cmp	r0, r3
  404290:	465f      	mov	r7, fp
  404292:	d904      	bls.n	40429e <__sfvwrite_r+0x13e>
  404294:	68a3      	ldr	r3, [r4, #8]
  404296:	4413      	add	r3, r2
  404298:	459b      	cmp	fp, r3
  40429a:	f300 80a6 	bgt.w	4043ea <__sfvwrite_r+0x28a>
  40429e:	4593      	cmp	fp, r2
  4042a0:	db4b      	blt.n	40433a <__sfvwrite_r+0x1da>
  4042a2:	4613      	mov	r3, r2
  4042a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4042a6:	69e1      	ldr	r1, [r4, #28]
  4042a8:	9800      	ldr	r0, [sp, #0]
  4042aa:	462a      	mov	r2, r5
  4042ac:	47b8      	blx	r7
  4042ae:	1e07      	subs	r7, r0, #0
  4042b0:	ddd4      	ble.n	40425c <__sfvwrite_r+0xfc>
  4042b2:	ebb9 0907 	subs.w	r9, r9, r7
  4042b6:	d0cc      	beq.n	404252 <__sfvwrite_r+0xf2>
  4042b8:	2001      	movs	r0, #1
  4042ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4042be:	1bdb      	subs	r3, r3, r7
  4042c0:	443d      	add	r5, r7
  4042c2:	1bf6      	subs	r6, r6, r7
  4042c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4042c8:	2b00      	cmp	r3, #0
  4042ca:	f43f af78 	beq.w	4041be <__sfvwrite_r+0x5e>
  4042ce:	2e00      	cmp	r6, #0
  4042d0:	d1d5      	bne.n	40427e <__sfvwrite_r+0x11e>
  4042d2:	f108 0308 	add.w	r3, r8, #8
  4042d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4042da:	4698      	mov	r8, r3
  4042dc:	3308      	adds	r3, #8
  4042de:	2e00      	cmp	r6, #0
  4042e0:	d0f9      	beq.n	4042d6 <__sfvwrite_r+0x176>
  4042e2:	4632      	mov	r2, r6
  4042e4:	210a      	movs	r1, #10
  4042e6:	4628      	mov	r0, r5
  4042e8:	f000 f982 	bl	4045f0 <memchr>
  4042ec:	2800      	cmp	r0, #0
  4042ee:	f000 80a1 	beq.w	404434 <__sfvwrite_r+0x2d4>
  4042f2:	3001      	adds	r0, #1
  4042f4:	eba0 0905 	sub.w	r9, r0, r5
  4042f8:	e7c2      	b.n	404280 <__sfvwrite_r+0x120>
  4042fa:	6820      	ldr	r0, [r4, #0]
  4042fc:	6923      	ldr	r3, [r4, #16]
  4042fe:	4298      	cmp	r0, r3
  404300:	d802      	bhi.n	404308 <__sfvwrite_r+0x1a8>
  404302:	6963      	ldr	r3, [r4, #20]
  404304:	429f      	cmp	r7, r3
  404306:	d25d      	bcs.n	4043c4 <__sfvwrite_r+0x264>
  404308:	45b8      	cmp	r8, r7
  40430a:	bf28      	it	cs
  40430c:	46b8      	movcs	r8, r7
  40430e:	4642      	mov	r2, r8
  404310:	4649      	mov	r1, r9
  404312:	f000 fa57 	bl	4047c4 <memmove>
  404316:	68a3      	ldr	r3, [r4, #8]
  404318:	6822      	ldr	r2, [r4, #0]
  40431a:	eba3 0308 	sub.w	r3, r3, r8
  40431e:	4442      	add	r2, r8
  404320:	60a3      	str	r3, [r4, #8]
  404322:	6022      	str	r2, [r4, #0]
  404324:	b10b      	cbz	r3, 40432a <__sfvwrite_r+0x1ca>
  404326:	46c2      	mov	sl, r8
  404328:	e779      	b.n	40421e <__sfvwrite_r+0xbe>
  40432a:	4621      	mov	r1, r4
  40432c:	9800      	ldr	r0, [sp, #0]
  40432e:	f7ff fcb3 	bl	403c98 <_fflush_r>
  404332:	2800      	cmp	r0, #0
  404334:	d192      	bne.n	40425c <__sfvwrite_r+0xfc>
  404336:	46c2      	mov	sl, r8
  404338:	e771      	b.n	40421e <__sfvwrite_r+0xbe>
  40433a:	465a      	mov	r2, fp
  40433c:	4629      	mov	r1, r5
  40433e:	f000 fa41 	bl	4047c4 <memmove>
  404342:	68a2      	ldr	r2, [r4, #8]
  404344:	6823      	ldr	r3, [r4, #0]
  404346:	eba2 020b 	sub.w	r2, r2, fp
  40434a:	445b      	add	r3, fp
  40434c:	60a2      	str	r2, [r4, #8]
  40434e:	6023      	str	r3, [r4, #0]
  404350:	e7af      	b.n	4042b2 <__sfvwrite_r+0x152>
  404352:	6820      	ldr	r0, [r4, #0]
  404354:	46b8      	mov	r8, r7
  404356:	46ba      	mov	sl, r7
  404358:	46bb      	mov	fp, r7
  40435a:	e755      	b.n	404208 <__sfvwrite_r+0xa8>
  40435c:	6962      	ldr	r2, [r4, #20]
  40435e:	6820      	ldr	r0, [r4, #0]
  404360:	6921      	ldr	r1, [r4, #16]
  404362:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404366:	eba0 0a01 	sub.w	sl, r0, r1
  40436a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40436e:	f10a 0001 	add.w	r0, sl, #1
  404372:	ea4f 0868 	mov.w	r8, r8, asr #1
  404376:	4438      	add	r0, r7
  404378:	4540      	cmp	r0, r8
  40437a:	4642      	mov	r2, r8
  40437c:	bf84      	itt	hi
  40437e:	4680      	movhi	r8, r0
  404380:	4642      	movhi	r2, r8
  404382:	055b      	lsls	r3, r3, #21
  404384:	d544      	bpl.n	404410 <__sfvwrite_r+0x2b0>
  404386:	4611      	mov	r1, r2
  404388:	9800      	ldr	r0, [sp, #0]
  40438a:	f7fe f845 	bl	402418 <_malloc_r>
  40438e:	4683      	mov	fp, r0
  404390:	2800      	cmp	r0, #0
  404392:	d055      	beq.n	404440 <__sfvwrite_r+0x2e0>
  404394:	4652      	mov	r2, sl
  404396:	6921      	ldr	r1, [r4, #16]
  404398:	f000 f97a 	bl	404690 <memcpy>
  40439c:	89a3      	ldrh	r3, [r4, #12]
  40439e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4043a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4043a6:	81a3      	strh	r3, [r4, #12]
  4043a8:	eb0b 000a 	add.w	r0, fp, sl
  4043ac:	eba8 030a 	sub.w	r3, r8, sl
  4043b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4043b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4043b8:	6020      	str	r0, [r4, #0]
  4043ba:	60a3      	str	r3, [r4, #8]
  4043bc:	46b8      	mov	r8, r7
  4043be:	46ba      	mov	sl, r7
  4043c0:	46bb      	mov	fp, r7
  4043c2:	e721      	b.n	404208 <__sfvwrite_r+0xa8>
  4043c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4043c8:	42b9      	cmp	r1, r7
  4043ca:	bf28      	it	cs
  4043cc:	4639      	movcs	r1, r7
  4043ce:	464a      	mov	r2, r9
  4043d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4043d4:	9800      	ldr	r0, [sp, #0]
  4043d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4043d8:	fb03 f301 	mul.w	r3, r3, r1
  4043dc:	69e1      	ldr	r1, [r4, #28]
  4043de:	47b0      	blx	r6
  4043e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4043e4:	f73f af1b 	bgt.w	40421e <__sfvwrite_r+0xbe>
  4043e8:	e738      	b.n	40425c <__sfvwrite_r+0xfc>
  4043ea:	461a      	mov	r2, r3
  4043ec:	4629      	mov	r1, r5
  4043ee:	9301      	str	r3, [sp, #4]
  4043f0:	f000 f9e8 	bl	4047c4 <memmove>
  4043f4:	6822      	ldr	r2, [r4, #0]
  4043f6:	9b01      	ldr	r3, [sp, #4]
  4043f8:	9800      	ldr	r0, [sp, #0]
  4043fa:	441a      	add	r2, r3
  4043fc:	6022      	str	r2, [r4, #0]
  4043fe:	4621      	mov	r1, r4
  404400:	f7ff fc4a 	bl	403c98 <_fflush_r>
  404404:	9b01      	ldr	r3, [sp, #4]
  404406:	2800      	cmp	r0, #0
  404408:	f47f af28 	bne.w	40425c <__sfvwrite_r+0xfc>
  40440c:	461f      	mov	r7, r3
  40440e:	e750      	b.n	4042b2 <__sfvwrite_r+0x152>
  404410:	9800      	ldr	r0, [sp, #0]
  404412:	f000 fa3b 	bl	40488c <_realloc_r>
  404416:	4683      	mov	fp, r0
  404418:	2800      	cmp	r0, #0
  40441a:	d1c5      	bne.n	4043a8 <__sfvwrite_r+0x248>
  40441c:	9d00      	ldr	r5, [sp, #0]
  40441e:	6921      	ldr	r1, [r4, #16]
  404420:	4628      	mov	r0, r5
  404422:	f7ff fdb7 	bl	403f94 <_free_r>
  404426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40442a:	220c      	movs	r2, #12
  40442c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404430:	602a      	str	r2, [r5, #0]
  404432:	e715      	b.n	404260 <__sfvwrite_r+0x100>
  404434:	f106 0901 	add.w	r9, r6, #1
  404438:	e722      	b.n	404280 <__sfvwrite_r+0x120>
  40443a:	f04f 30ff 	mov.w	r0, #4294967295
  40443e:	e6bf      	b.n	4041c0 <__sfvwrite_r+0x60>
  404440:	9a00      	ldr	r2, [sp, #0]
  404442:	230c      	movs	r3, #12
  404444:	6013      	str	r3, [r2, #0]
  404446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40444a:	e709      	b.n	404260 <__sfvwrite_r+0x100>
  40444c:	7ffffc00 	.word	0x7ffffc00

00404450 <_fwalk_reent>:
  404450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404454:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404458:	d01f      	beq.n	40449a <_fwalk_reent+0x4a>
  40445a:	4688      	mov	r8, r1
  40445c:	4606      	mov	r6, r0
  40445e:	f04f 0900 	mov.w	r9, #0
  404462:	687d      	ldr	r5, [r7, #4]
  404464:	68bc      	ldr	r4, [r7, #8]
  404466:	3d01      	subs	r5, #1
  404468:	d411      	bmi.n	40448e <_fwalk_reent+0x3e>
  40446a:	89a3      	ldrh	r3, [r4, #12]
  40446c:	2b01      	cmp	r3, #1
  40446e:	f105 35ff 	add.w	r5, r5, #4294967295
  404472:	d908      	bls.n	404486 <_fwalk_reent+0x36>
  404474:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404478:	3301      	adds	r3, #1
  40447a:	4621      	mov	r1, r4
  40447c:	4630      	mov	r0, r6
  40447e:	d002      	beq.n	404486 <_fwalk_reent+0x36>
  404480:	47c0      	blx	r8
  404482:	ea49 0900 	orr.w	r9, r9, r0
  404486:	1c6b      	adds	r3, r5, #1
  404488:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40448c:	d1ed      	bne.n	40446a <_fwalk_reent+0x1a>
  40448e:	683f      	ldr	r7, [r7, #0]
  404490:	2f00      	cmp	r7, #0
  404492:	d1e6      	bne.n	404462 <_fwalk_reent+0x12>
  404494:	4648      	mov	r0, r9
  404496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40449a:	46b9      	mov	r9, r7
  40449c:	4648      	mov	r0, r9
  40449e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4044a2:	bf00      	nop

004044a4 <__locale_mb_cur_max>:
  4044a4:	4b04      	ldr	r3, [pc, #16]	; (4044b8 <__locale_mb_cur_max+0x14>)
  4044a6:	4a05      	ldr	r2, [pc, #20]	; (4044bc <__locale_mb_cur_max+0x18>)
  4044a8:	681b      	ldr	r3, [r3, #0]
  4044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4044ac:	2b00      	cmp	r3, #0
  4044ae:	bf08      	it	eq
  4044b0:	4613      	moveq	r3, r2
  4044b2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4044b6:	4770      	bx	lr
  4044b8:	20000010 	.word	0x20000010
  4044bc:	20000854 	.word	0x20000854

004044c0 <__retarget_lock_init_recursive>:
  4044c0:	4770      	bx	lr
  4044c2:	bf00      	nop

004044c4 <__retarget_lock_close_recursive>:
  4044c4:	4770      	bx	lr
  4044c6:	bf00      	nop

004044c8 <__retarget_lock_acquire_recursive>:
  4044c8:	4770      	bx	lr
  4044ca:	bf00      	nop

004044cc <__retarget_lock_release_recursive>:
  4044cc:	4770      	bx	lr
  4044ce:	bf00      	nop

004044d0 <__swhatbuf_r>:
  4044d0:	b570      	push	{r4, r5, r6, lr}
  4044d2:	460c      	mov	r4, r1
  4044d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4044d8:	2900      	cmp	r1, #0
  4044da:	b090      	sub	sp, #64	; 0x40
  4044dc:	4615      	mov	r5, r2
  4044de:	461e      	mov	r6, r3
  4044e0:	db14      	blt.n	40450c <__swhatbuf_r+0x3c>
  4044e2:	aa01      	add	r2, sp, #4
  4044e4:	f000 fd38 	bl	404f58 <_fstat_r>
  4044e8:	2800      	cmp	r0, #0
  4044ea:	db0f      	blt.n	40450c <__swhatbuf_r+0x3c>
  4044ec:	9a02      	ldr	r2, [sp, #8]
  4044ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4044f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4044f6:	fab2 f282 	clz	r2, r2
  4044fa:	0952      	lsrs	r2, r2, #5
  4044fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404500:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404504:	6032      	str	r2, [r6, #0]
  404506:	602b      	str	r3, [r5, #0]
  404508:	b010      	add	sp, #64	; 0x40
  40450a:	bd70      	pop	{r4, r5, r6, pc}
  40450c:	89a2      	ldrh	r2, [r4, #12]
  40450e:	2300      	movs	r3, #0
  404510:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404514:	6033      	str	r3, [r6, #0]
  404516:	d004      	beq.n	404522 <__swhatbuf_r+0x52>
  404518:	2240      	movs	r2, #64	; 0x40
  40451a:	4618      	mov	r0, r3
  40451c:	602a      	str	r2, [r5, #0]
  40451e:	b010      	add	sp, #64	; 0x40
  404520:	bd70      	pop	{r4, r5, r6, pc}
  404522:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404526:	602b      	str	r3, [r5, #0]
  404528:	b010      	add	sp, #64	; 0x40
  40452a:	bd70      	pop	{r4, r5, r6, pc}

0040452c <__smakebuf_r>:
  40452c:	898a      	ldrh	r2, [r1, #12]
  40452e:	0792      	lsls	r2, r2, #30
  404530:	460b      	mov	r3, r1
  404532:	d506      	bpl.n	404542 <__smakebuf_r+0x16>
  404534:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404538:	2101      	movs	r1, #1
  40453a:	601a      	str	r2, [r3, #0]
  40453c:	611a      	str	r2, [r3, #16]
  40453e:	6159      	str	r1, [r3, #20]
  404540:	4770      	bx	lr
  404542:	b5f0      	push	{r4, r5, r6, r7, lr}
  404544:	b083      	sub	sp, #12
  404546:	ab01      	add	r3, sp, #4
  404548:	466a      	mov	r2, sp
  40454a:	460c      	mov	r4, r1
  40454c:	4606      	mov	r6, r0
  40454e:	f7ff ffbf 	bl	4044d0 <__swhatbuf_r>
  404552:	9900      	ldr	r1, [sp, #0]
  404554:	4605      	mov	r5, r0
  404556:	4630      	mov	r0, r6
  404558:	f7fd ff5e 	bl	402418 <_malloc_r>
  40455c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404560:	b1d8      	cbz	r0, 40459a <__smakebuf_r+0x6e>
  404562:	9a01      	ldr	r2, [sp, #4]
  404564:	4f15      	ldr	r7, [pc, #84]	; (4045bc <__smakebuf_r+0x90>)
  404566:	9900      	ldr	r1, [sp, #0]
  404568:	63f7      	str	r7, [r6, #60]	; 0x3c
  40456a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40456e:	81a3      	strh	r3, [r4, #12]
  404570:	6020      	str	r0, [r4, #0]
  404572:	6120      	str	r0, [r4, #16]
  404574:	6161      	str	r1, [r4, #20]
  404576:	b91a      	cbnz	r2, 404580 <__smakebuf_r+0x54>
  404578:	432b      	orrs	r3, r5
  40457a:	81a3      	strh	r3, [r4, #12]
  40457c:	b003      	add	sp, #12
  40457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404580:	4630      	mov	r0, r6
  404582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404586:	f000 fcfb 	bl	404f80 <_isatty_r>
  40458a:	b1a0      	cbz	r0, 4045b6 <__smakebuf_r+0x8a>
  40458c:	89a3      	ldrh	r3, [r4, #12]
  40458e:	f023 0303 	bic.w	r3, r3, #3
  404592:	f043 0301 	orr.w	r3, r3, #1
  404596:	b21b      	sxth	r3, r3
  404598:	e7ee      	b.n	404578 <__smakebuf_r+0x4c>
  40459a:	059a      	lsls	r2, r3, #22
  40459c:	d4ee      	bmi.n	40457c <__smakebuf_r+0x50>
  40459e:	f023 0303 	bic.w	r3, r3, #3
  4045a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4045a6:	f043 0302 	orr.w	r3, r3, #2
  4045aa:	2101      	movs	r1, #1
  4045ac:	81a3      	strh	r3, [r4, #12]
  4045ae:	6022      	str	r2, [r4, #0]
  4045b0:	6122      	str	r2, [r4, #16]
  4045b2:	6161      	str	r1, [r4, #20]
  4045b4:	e7e2      	b.n	40457c <__smakebuf_r+0x50>
  4045b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045ba:	e7dd      	b.n	404578 <__smakebuf_r+0x4c>
  4045bc:	00403ced 	.word	0x00403ced

004045c0 <__ascii_mbtowc>:
  4045c0:	b082      	sub	sp, #8
  4045c2:	b149      	cbz	r1, 4045d8 <__ascii_mbtowc+0x18>
  4045c4:	b15a      	cbz	r2, 4045de <__ascii_mbtowc+0x1e>
  4045c6:	b16b      	cbz	r3, 4045e4 <__ascii_mbtowc+0x24>
  4045c8:	7813      	ldrb	r3, [r2, #0]
  4045ca:	600b      	str	r3, [r1, #0]
  4045cc:	7812      	ldrb	r2, [r2, #0]
  4045ce:	1c10      	adds	r0, r2, #0
  4045d0:	bf18      	it	ne
  4045d2:	2001      	movne	r0, #1
  4045d4:	b002      	add	sp, #8
  4045d6:	4770      	bx	lr
  4045d8:	a901      	add	r1, sp, #4
  4045da:	2a00      	cmp	r2, #0
  4045dc:	d1f3      	bne.n	4045c6 <__ascii_mbtowc+0x6>
  4045de:	4610      	mov	r0, r2
  4045e0:	b002      	add	sp, #8
  4045e2:	4770      	bx	lr
  4045e4:	f06f 0001 	mvn.w	r0, #1
  4045e8:	e7f4      	b.n	4045d4 <__ascii_mbtowc+0x14>
  4045ea:	bf00      	nop
  4045ec:	0000      	movs	r0, r0
	...

004045f0 <memchr>:
  4045f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4045f4:	2a10      	cmp	r2, #16
  4045f6:	db2b      	blt.n	404650 <memchr+0x60>
  4045f8:	f010 0f07 	tst.w	r0, #7
  4045fc:	d008      	beq.n	404610 <memchr+0x20>
  4045fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  404602:	3a01      	subs	r2, #1
  404604:	428b      	cmp	r3, r1
  404606:	d02d      	beq.n	404664 <memchr+0x74>
  404608:	f010 0f07 	tst.w	r0, #7
  40460c:	b342      	cbz	r2, 404660 <memchr+0x70>
  40460e:	d1f6      	bne.n	4045fe <memchr+0xe>
  404610:	b4f0      	push	{r4, r5, r6, r7}
  404612:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404616:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40461a:	f022 0407 	bic.w	r4, r2, #7
  40461e:	f07f 0700 	mvns.w	r7, #0
  404622:	2300      	movs	r3, #0
  404624:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404628:	3c08      	subs	r4, #8
  40462a:	ea85 0501 	eor.w	r5, r5, r1
  40462e:	ea86 0601 	eor.w	r6, r6, r1
  404632:	fa85 f547 	uadd8	r5, r5, r7
  404636:	faa3 f587 	sel	r5, r3, r7
  40463a:	fa86 f647 	uadd8	r6, r6, r7
  40463e:	faa5 f687 	sel	r6, r5, r7
  404642:	b98e      	cbnz	r6, 404668 <memchr+0x78>
  404644:	d1ee      	bne.n	404624 <memchr+0x34>
  404646:	bcf0      	pop	{r4, r5, r6, r7}
  404648:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40464c:	f002 0207 	and.w	r2, r2, #7
  404650:	b132      	cbz	r2, 404660 <memchr+0x70>
  404652:	f810 3b01 	ldrb.w	r3, [r0], #1
  404656:	3a01      	subs	r2, #1
  404658:	ea83 0301 	eor.w	r3, r3, r1
  40465c:	b113      	cbz	r3, 404664 <memchr+0x74>
  40465e:	d1f8      	bne.n	404652 <memchr+0x62>
  404660:	2000      	movs	r0, #0
  404662:	4770      	bx	lr
  404664:	3801      	subs	r0, #1
  404666:	4770      	bx	lr
  404668:	2d00      	cmp	r5, #0
  40466a:	bf06      	itte	eq
  40466c:	4635      	moveq	r5, r6
  40466e:	3803      	subeq	r0, #3
  404670:	3807      	subne	r0, #7
  404672:	f015 0f01 	tst.w	r5, #1
  404676:	d107      	bne.n	404688 <memchr+0x98>
  404678:	3001      	adds	r0, #1
  40467a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40467e:	bf02      	ittt	eq
  404680:	3001      	addeq	r0, #1
  404682:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404686:	3001      	addeq	r0, #1
  404688:	bcf0      	pop	{r4, r5, r6, r7}
  40468a:	3801      	subs	r0, #1
  40468c:	4770      	bx	lr
  40468e:	bf00      	nop

00404690 <memcpy>:
  404690:	4684      	mov	ip, r0
  404692:	ea41 0300 	orr.w	r3, r1, r0
  404696:	f013 0303 	ands.w	r3, r3, #3
  40469a:	d16d      	bne.n	404778 <memcpy+0xe8>
  40469c:	3a40      	subs	r2, #64	; 0x40
  40469e:	d341      	bcc.n	404724 <memcpy+0x94>
  4046a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046a4:	f840 3b04 	str.w	r3, [r0], #4
  4046a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046ac:	f840 3b04 	str.w	r3, [r0], #4
  4046b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046b4:	f840 3b04 	str.w	r3, [r0], #4
  4046b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046bc:	f840 3b04 	str.w	r3, [r0], #4
  4046c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046c4:	f840 3b04 	str.w	r3, [r0], #4
  4046c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046cc:	f840 3b04 	str.w	r3, [r0], #4
  4046d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046d4:	f840 3b04 	str.w	r3, [r0], #4
  4046d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046dc:	f840 3b04 	str.w	r3, [r0], #4
  4046e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046e4:	f840 3b04 	str.w	r3, [r0], #4
  4046e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046ec:	f840 3b04 	str.w	r3, [r0], #4
  4046f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046f4:	f840 3b04 	str.w	r3, [r0], #4
  4046f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046fc:	f840 3b04 	str.w	r3, [r0], #4
  404700:	f851 3b04 	ldr.w	r3, [r1], #4
  404704:	f840 3b04 	str.w	r3, [r0], #4
  404708:	f851 3b04 	ldr.w	r3, [r1], #4
  40470c:	f840 3b04 	str.w	r3, [r0], #4
  404710:	f851 3b04 	ldr.w	r3, [r1], #4
  404714:	f840 3b04 	str.w	r3, [r0], #4
  404718:	f851 3b04 	ldr.w	r3, [r1], #4
  40471c:	f840 3b04 	str.w	r3, [r0], #4
  404720:	3a40      	subs	r2, #64	; 0x40
  404722:	d2bd      	bcs.n	4046a0 <memcpy+0x10>
  404724:	3230      	adds	r2, #48	; 0x30
  404726:	d311      	bcc.n	40474c <memcpy+0xbc>
  404728:	f851 3b04 	ldr.w	r3, [r1], #4
  40472c:	f840 3b04 	str.w	r3, [r0], #4
  404730:	f851 3b04 	ldr.w	r3, [r1], #4
  404734:	f840 3b04 	str.w	r3, [r0], #4
  404738:	f851 3b04 	ldr.w	r3, [r1], #4
  40473c:	f840 3b04 	str.w	r3, [r0], #4
  404740:	f851 3b04 	ldr.w	r3, [r1], #4
  404744:	f840 3b04 	str.w	r3, [r0], #4
  404748:	3a10      	subs	r2, #16
  40474a:	d2ed      	bcs.n	404728 <memcpy+0x98>
  40474c:	320c      	adds	r2, #12
  40474e:	d305      	bcc.n	40475c <memcpy+0xcc>
  404750:	f851 3b04 	ldr.w	r3, [r1], #4
  404754:	f840 3b04 	str.w	r3, [r0], #4
  404758:	3a04      	subs	r2, #4
  40475a:	d2f9      	bcs.n	404750 <memcpy+0xc0>
  40475c:	3204      	adds	r2, #4
  40475e:	d008      	beq.n	404772 <memcpy+0xe2>
  404760:	07d2      	lsls	r2, r2, #31
  404762:	bf1c      	itt	ne
  404764:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404768:	f800 3b01 	strbne.w	r3, [r0], #1
  40476c:	d301      	bcc.n	404772 <memcpy+0xe2>
  40476e:	880b      	ldrh	r3, [r1, #0]
  404770:	8003      	strh	r3, [r0, #0]
  404772:	4660      	mov	r0, ip
  404774:	4770      	bx	lr
  404776:	bf00      	nop
  404778:	2a08      	cmp	r2, #8
  40477a:	d313      	bcc.n	4047a4 <memcpy+0x114>
  40477c:	078b      	lsls	r3, r1, #30
  40477e:	d08d      	beq.n	40469c <memcpy+0xc>
  404780:	f010 0303 	ands.w	r3, r0, #3
  404784:	d08a      	beq.n	40469c <memcpy+0xc>
  404786:	f1c3 0304 	rsb	r3, r3, #4
  40478a:	1ad2      	subs	r2, r2, r3
  40478c:	07db      	lsls	r3, r3, #31
  40478e:	bf1c      	itt	ne
  404790:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404794:	f800 3b01 	strbne.w	r3, [r0], #1
  404798:	d380      	bcc.n	40469c <memcpy+0xc>
  40479a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40479e:	f820 3b02 	strh.w	r3, [r0], #2
  4047a2:	e77b      	b.n	40469c <memcpy+0xc>
  4047a4:	3a04      	subs	r2, #4
  4047a6:	d3d9      	bcc.n	40475c <memcpy+0xcc>
  4047a8:	3a01      	subs	r2, #1
  4047aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4047ae:	f800 3b01 	strb.w	r3, [r0], #1
  4047b2:	d2f9      	bcs.n	4047a8 <memcpy+0x118>
  4047b4:	780b      	ldrb	r3, [r1, #0]
  4047b6:	7003      	strb	r3, [r0, #0]
  4047b8:	784b      	ldrb	r3, [r1, #1]
  4047ba:	7043      	strb	r3, [r0, #1]
  4047bc:	788b      	ldrb	r3, [r1, #2]
  4047be:	7083      	strb	r3, [r0, #2]
  4047c0:	4660      	mov	r0, ip
  4047c2:	4770      	bx	lr

004047c4 <memmove>:
  4047c4:	4288      	cmp	r0, r1
  4047c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4047c8:	d90d      	bls.n	4047e6 <memmove+0x22>
  4047ca:	188b      	adds	r3, r1, r2
  4047cc:	4298      	cmp	r0, r3
  4047ce:	d20a      	bcs.n	4047e6 <memmove+0x22>
  4047d0:	1884      	adds	r4, r0, r2
  4047d2:	2a00      	cmp	r2, #0
  4047d4:	d051      	beq.n	40487a <memmove+0xb6>
  4047d6:	4622      	mov	r2, r4
  4047d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4047dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4047e0:	4299      	cmp	r1, r3
  4047e2:	d1f9      	bne.n	4047d8 <memmove+0x14>
  4047e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047e6:	2a0f      	cmp	r2, #15
  4047e8:	d948      	bls.n	40487c <memmove+0xb8>
  4047ea:	ea41 0300 	orr.w	r3, r1, r0
  4047ee:	079b      	lsls	r3, r3, #30
  4047f0:	d146      	bne.n	404880 <memmove+0xbc>
  4047f2:	f100 0410 	add.w	r4, r0, #16
  4047f6:	f101 0310 	add.w	r3, r1, #16
  4047fa:	4615      	mov	r5, r2
  4047fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404800:	f844 6c10 	str.w	r6, [r4, #-16]
  404804:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404808:	f844 6c0c 	str.w	r6, [r4, #-12]
  40480c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404810:	f844 6c08 	str.w	r6, [r4, #-8]
  404814:	3d10      	subs	r5, #16
  404816:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40481a:	f844 6c04 	str.w	r6, [r4, #-4]
  40481e:	2d0f      	cmp	r5, #15
  404820:	f103 0310 	add.w	r3, r3, #16
  404824:	f104 0410 	add.w	r4, r4, #16
  404828:	d8e8      	bhi.n	4047fc <memmove+0x38>
  40482a:	f1a2 0310 	sub.w	r3, r2, #16
  40482e:	f023 030f 	bic.w	r3, r3, #15
  404832:	f002 0e0f 	and.w	lr, r2, #15
  404836:	3310      	adds	r3, #16
  404838:	f1be 0f03 	cmp.w	lr, #3
  40483c:	4419      	add	r1, r3
  40483e:	4403      	add	r3, r0
  404840:	d921      	bls.n	404886 <memmove+0xc2>
  404842:	1f1e      	subs	r6, r3, #4
  404844:	460d      	mov	r5, r1
  404846:	4674      	mov	r4, lr
  404848:	3c04      	subs	r4, #4
  40484a:	f855 7b04 	ldr.w	r7, [r5], #4
  40484e:	f846 7f04 	str.w	r7, [r6, #4]!
  404852:	2c03      	cmp	r4, #3
  404854:	d8f8      	bhi.n	404848 <memmove+0x84>
  404856:	f1ae 0404 	sub.w	r4, lr, #4
  40485a:	f024 0403 	bic.w	r4, r4, #3
  40485e:	3404      	adds	r4, #4
  404860:	4421      	add	r1, r4
  404862:	4423      	add	r3, r4
  404864:	f002 0203 	and.w	r2, r2, #3
  404868:	b162      	cbz	r2, 404884 <memmove+0xc0>
  40486a:	3b01      	subs	r3, #1
  40486c:	440a      	add	r2, r1
  40486e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404872:	f803 4f01 	strb.w	r4, [r3, #1]!
  404876:	428a      	cmp	r2, r1
  404878:	d1f9      	bne.n	40486e <memmove+0xaa>
  40487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40487c:	4603      	mov	r3, r0
  40487e:	e7f3      	b.n	404868 <memmove+0xa4>
  404880:	4603      	mov	r3, r0
  404882:	e7f2      	b.n	40486a <memmove+0xa6>
  404884:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404886:	4672      	mov	r2, lr
  404888:	e7ee      	b.n	404868 <memmove+0xa4>
  40488a:	bf00      	nop

0040488c <_realloc_r>:
  40488c:	2900      	cmp	r1, #0
  40488e:	f000 8095 	beq.w	4049bc <_realloc_r+0x130>
  404892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404896:	460d      	mov	r5, r1
  404898:	4616      	mov	r6, r2
  40489a:	b083      	sub	sp, #12
  40489c:	4680      	mov	r8, r0
  40489e:	f106 070b 	add.w	r7, r6, #11
  4048a2:	f7fe f8b7 	bl	402a14 <__malloc_lock>
  4048a6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4048aa:	2f16      	cmp	r7, #22
  4048ac:	f02e 0403 	bic.w	r4, lr, #3
  4048b0:	f1a5 0908 	sub.w	r9, r5, #8
  4048b4:	d83c      	bhi.n	404930 <_realloc_r+0xa4>
  4048b6:	2210      	movs	r2, #16
  4048b8:	4617      	mov	r7, r2
  4048ba:	42be      	cmp	r6, r7
  4048bc:	d83d      	bhi.n	40493a <_realloc_r+0xae>
  4048be:	4294      	cmp	r4, r2
  4048c0:	da43      	bge.n	40494a <_realloc_r+0xbe>
  4048c2:	4bc4      	ldr	r3, [pc, #784]	; (404bd4 <_realloc_r+0x348>)
  4048c4:	6899      	ldr	r1, [r3, #8]
  4048c6:	eb09 0004 	add.w	r0, r9, r4
  4048ca:	4288      	cmp	r0, r1
  4048cc:	f000 80b4 	beq.w	404a38 <_realloc_r+0x1ac>
  4048d0:	6843      	ldr	r3, [r0, #4]
  4048d2:	f023 0101 	bic.w	r1, r3, #1
  4048d6:	4401      	add	r1, r0
  4048d8:	6849      	ldr	r1, [r1, #4]
  4048da:	07c9      	lsls	r1, r1, #31
  4048dc:	d54c      	bpl.n	404978 <_realloc_r+0xec>
  4048de:	f01e 0f01 	tst.w	lr, #1
  4048e2:	f000 809b 	beq.w	404a1c <_realloc_r+0x190>
  4048e6:	4631      	mov	r1, r6
  4048e8:	4640      	mov	r0, r8
  4048ea:	f7fd fd95 	bl	402418 <_malloc_r>
  4048ee:	4606      	mov	r6, r0
  4048f0:	2800      	cmp	r0, #0
  4048f2:	d03a      	beq.n	40496a <_realloc_r+0xde>
  4048f4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4048f8:	f023 0301 	bic.w	r3, r3, #1
  4048fc:	444b      	add	r3, r9
  4048fe:	f1a0 0208 	sub.w	r2, r0, #8
  404902:	429a      	cmp	r2, r3
  404904:	f000 8121 	beq.w	404b4a <_realloc_r+0x2be>
  404908:	1f22      	subs	r2, r4, #4
  40490a:	2a24      	cmp	r2, #36	; 0x24
  40490c:	f200 8107 	bhi.w	404b1e <_realloc_r+0x292>
  404910:	2a13      	cmp	r2, #19
  404912:	f200 80db 	bhi.w	404acc <_realloc_r+0x240>
  404916:	4603      	mov	r3, r0
  404918:	462a      	mov	r2, r5
  40491a:	6811      	ldr	r1, [r2, #0]
  40491c:	6019      	str	r1, [r3, #0]
  40491e:	6851      	ldr	r1, [r2, #4]
  404920:	6059      	str	r1, [r3, #4]
  404922:	6892      	ldr	r2, [r2, #8]
  404924:	609a      	str	r2, [r3, #8]
  404926:	4629      	mov	r1, r5
  404928:	4640      	mov	r0, r8
  40492a:	f7ff fb33 	bl	403f94 <_free_r>
  40492e:	e01c      	b.n	40496a <_realloc_r+0xde>
  404930:	f027 0707 	bic.w	r7, r7, #7
  404934:	2f00      	cmp	r7, #0
  404936:	463a      	mov	r2, r7
  404938:	dabf      	bge.n	4048ba <_realloc_r+0x2e>
  40493a:	2600      	movs	r6, #0
  40493c:	230c      	movs	r3, #12
  40493e:	4630      	mov	r0, r6
  404940:	f8c8 3000 	str.w	r3, [r8]
  404944:	b003      	add	sp, #12
  404946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40494a:	462e      	mov	r6, r5
  40494c:	1be3      	subs	r3, r4, r7
  40494e:	2b0f      	cmp	r3, #15
  404950:	d81e      	bhi.n	404990 <_realloc_r+0x104>
  404952:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404956:	f003 0301 	and.w	r3, r3, #1
  40495a:	4323      	orrs	r3, r4
  40495c:	444c      	add	r4, r9
  40495e:	f8c9 3004 	str.w	r3, [r9, #4]
  404962:	6863      	ldr	r3, [r4, #4]
  404964:	f043 0301 	orr.w	r3, r3, #1
  404968:	6063      	str	r3, [r4, #4]
  40496a:	4640      	mov	r0, r8
  40496c:	f7fe f858 	bl	402a20 <__malloc_unlock>
  404970:	4630      	mov	r0, r6
  404972:	b003      	add	sp, #12
  404974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404978:	f023 0303 	bic.w	r3, r3, #3
  40497c:	18e1      	adds	r1, r4, r3
  40497e:	4291      	cmp	r1, r2
  404980:	db1f      	blt.n	4049c2 <_realloc_r+0x136>
  404982:	68c3      	ldr	r3, [r0, #12]
  404984:	6882      	ldr	r2, [r0, #8]
  404986:	462e      	mov	r6, r5
  404988:	60d3      	str	r3, [r2, #12]
  40498a:	460c      	mov	r4, r1
  40498c:	609a      	str	r2, [r3, #8]
  40498e:	e7dd      	b.n	40494c <_realloc_r+0xc0>
  404990:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404994:	eb09 0107 	add.w	r1, r9, r7
  404998:	f002 0201 	and.w	r2, r2, #1
  40499c:	444c      	add	r4, r9
  40499e:	f043 0301 	orr.w	r3, r3, #1
  4049a2:	4317      	orrs	r7, r2
  4049a4:	f8c9 7004 	str.w	r7, [r9, #4]
  4049a8:	604b      	str	r3, [r1, #4]
  4049aa:	6863      	ldr	r3, [r4, #4]
  4049ac:	f043 0301 	orr.w	r3, r3, #1
  4049b0:	3108      	adds	r1, #8
  4049b2:	6063      	str	r3, [r4, #4]
  4049b4:	4640      	mov	r0, r8
  4049b6:	f7ff faed 	bl	403f94 <_free_r>
  4049ba:	e7d6      	b.n	40496a <_realloc_r+0xde>
  4049bc:	4611      	mov	r1, r2
  4049be:	f7fd bd2b 	b.w	402418 <_malloc_r>
  4049c2:	f01e 0f01 	tst.w	lr, #1
  4049c6:	d18e      	bne.n	4048e6 <_realloc_r+0x5a>
  4049c8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4049cc:	eba9 0a01 	sub.w	sl, r9, r1
  4049d0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4049d4:	f021 0103 	bic.w	r1, r1, #3
  4049d8:	440b      	add	r3, r1
  4049da:	4423      	add	r3, r4
  4049dc:	4293      	cmp	r3, r2
  4049de:	db25      	blt.n	404a2c <_realloc_r+0x1a0>
  4049e0:	68c2      	ldr	r2, [r0, #12]
  4049e2:	6881      	ldr	r1, [r0, #8]
  4049e4:	4656      	mov	r6, sl
  4049e6:	60ca      	str	r2, [r1, #12]
  4049e8:	6091      	str	r1, [r2, #8]
  4049ea:	f8da 100c 	ldr.w	r1, [sl, #12]
  4049ee:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4049f2:	1f22      	subs	r2, r4, #4
  4049f4:	2a24      	cmp	r2, #36	; 0x24
  4049f6:	60c1      	str	r1, [r0, #12]
  4049f8:	6088      	str	r0, [r1, #8]
  4049fa:	f200 8094 	bhi.w	404b26 <_realloc_r+0x29a>
  4049fe:	2a13      	cmp	r2, #19
  404a00:	d96f      	bls.n	404ae2 <_realloc_r+0x256>
  404a02:	6829      	ldr	r1, [r5, #0]
  404a04:	f8ca 1008 	str.w	r1, [sl, #8]
  404a08:	6869      	ldr	r1, [r5, #4]
  404a0a:	f8ca 100c 	str.w	r1, [sl, #12]
  404a0e:	2a1b      	cmp	r2, #27
  404a10:	f200 80a2 	bhi.w	404b58 <_realloc_r+0x2cc>
  404a14:	3508      	adds	r5, #8
  404a16:	f10a 0210 	add.w	r2, sl, #16
  404a1a:	e063      	b.n	404ae4 <_realloc_r+0x258>
  404a1c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404a20:	eba9 0a03 	sub.w	sl, r9, r3
  404a24:	f8da 1004 	ldr.w	r1, [sl, #4]
  404a28:	f021 0103 	bic.w	r1, r1, #3
  404a2c:	1863      	adds	r3, r4, r1
  404a2e:	4293      	cmp	r3, r2
  404a30:	f6ff af59 	blt.w	4048e6 <_realloc_r+0x5a>
  404a34:	4656      	mov	r6, sl
  404a36:	e7d8      	b.n	4049ea <_realloc_r+0x15e>
  404a38:	6841      	ldr	r1, [r0, #4]
  404a3a:	f021 0b03 	bic.w	fp, r1, #3
  404a3e:	44a3      	add	fp, r4
  404a40:	f107 0010 	add.w	r0, r7, #16
  404a44:	4583      	cmp	fp, r0
  404a46:	da56      	bge.n	404af6 <_realloc_r+0x26a>
  404a48:	f01e 0f01 	tst.w	lr, #1
  404a4c:	f47f af4b 	bne.w	4048e6 <_realloc_r+0x5a>
  404a50:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404a54:	eba9 0a01 	sub.w	sl, r9, r1
  404a58:	f8da 1004 	ldr.w	r1, [sl, #4]
  404a5c:	f021 0103 	bic.w	r1, r1, #3
  404a60:	448b      	add	fp, r1
  404a62:	4558      	cmp	r0, fp
  404a64:	dce2      	bgt.n	404a2c <_realloc_r+0x1a0>
  404a66:	4656      	mov	r6, sl
  404a68:	f8da 100c 	ldr.w	r1, [sl, #12]
  404a6c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404a70:	1f22      	subs	r2, r4, #4
  404a72:	2a24      	cmp	r2, #36	; 0x24
  404a74:	60c1      	str	r1, [r0, #12]
  404a76:	6088      	str	r0, [r1, #8]
  404a78:	f200 808f 	bhi.w	404b9a <_realloc_r+0x30e>
  404a7c:	2a13      	cmp	r2, #19
  404a7e:	f240 808a 	bls.w	404b96 <_realloc_r+0x30a>
  404a82:	6829      	ldr	r1, [r5, #0]
  404a84:	f8ca 1008 	str.w	r1, [sl, #8]
  404a88:	6869      	ldr	r1, [r5, #4]
  404a8a:	f8ca 100c 	str.w	r1, [sl, #12]
  404a8e:	2a1b      	cmp	r2, #27
  404a90:	f200 808a 	bhi.w	404ba8 <_realloc_r+0x31c>
  404a94:	3508      	adds	r5, #8
  404a96:	f10a 0210 	add.w	r2, sl, #16
  404a9a:	6829      	ldr	r1, [r5, #0]
  404a9c:	6011      	str	r1, [r2, #0]
  404a9e:	6869      	ldr	r1, [r5, #4]
  404aa0:	6051      	str	r1, [r2, #4]
  404aa2:	68a9      	ldr	r1, [r5, #8]
  404aa4:	6091      	str	r1, [r2, #8]
  404aa6:	eb0a 0107 	add.w	r1, sl, r7
  404aaa:	ebab 0207 	sub.w	r2, fp, r7
  404aae:	f042 0201 	orr.w	r2, r2, #1
  404ab2:	6099      	str	r1, [r3, #8]
  404ab4:	604a      	str	r2, [r1, #4]
  404ab6:	f8da 3004 	ldr.w	r3, [sl, #4]
  404aba:	f003 0301 	and.w	r3, r3, #1
  404abe:	431f      	orrs	r7, r3
  404ac0:	4640      	mov	r0, r8
  404ac2:	f8ca 7004 	str.w	r7, [sl, #4]
  404ac6:	f7fd ffab 	bl	402a20 <__malloc_unlock>
  404aca:	e751      	b.n	404970 <_realloc_r+0xe4>
  404acc:	682b      	ldr	r3, [r5, #0]
  404ace:	6003      	str	r3, [r0, #0]
  404ad0:	686b      	ldr	r3, [r5, #4]
  404ad2:	6043      	str	r3, [r0, #4]
  404ad4:	2a1b      	cmp	r2, #27
  404ad6:	d82d      	bhi.n	404b34 <_realloc_r+0x2a8>
  404ad8:	f100 0308 	add.w	r3, r0, #8
  404adc:	f105 0208 	add.w	r2, r5, #8
  404ae0:	e71b      	b.n	40491a <_realloc_r+0x8e>
  404ae2:	4632      	mov	r2, r6
  404ae4:	6829      	ldr	r1, [r5, #0]
  404ae6:	6011      	str	r1, [r2, #0]
  404ae8:	6869      	ldr	r1, [r5, #4]
  404aea:	6051      	str	r1, [r2, #4]
  404aec:	68a9      	ldr	r1, [r5, #8]
  404aee:	6091      	str	r1, [r2, #8]
  404af0:	461c      	mov	r4, r3
  404af2:	46d1      	mov	r9, sl
  404af4:	e72a      	b.n	40494c <_realloc_r+0xc0>
  404af6:	eb09 0107 	add.w	r1, r9, r7
  404afa:	ebab 0b07 	sub.w	fp, fp, r7
  404afe:	f04b 0201 	orr.w	r2, fp, #1
  404b02:	6099      	str	r1, [r3, #8]
  404b04:	604a      	str	r2, [r1, #4]
  404b06:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404b0a:	f003 0301 	and.w	r3, r3, #1
  404b0e:	431f      	orrs	r7, r3
  404b10:	4640      	mov	r0, r8
  404b12:	f845 7c04 	str.w	r7, [r5, #-4]
  404b16:	f7fd ff83 	bl	402a20 <__malloc_unlock>
  404b1a:	462e      	mov	r6, r5
  404b1c:	e728      	b.n	404970 <_realloc_r+0xe4>
  404b1e:	4629      	mov	r1, r5
  404b20:	f7ff fe50 	bl	4047c4 <memmove>
  404b24:	e6ff      	b.n	404926 <_realloc_r+0x9a>
  404b26:	4629      	mov	r1, r5
  404b28:	4630      	mov	r0, r6
  404b2a:	461c      	mov	r4, r3
  404b2c:	46d1      	mov	r9, sl
  404b2e:	f7ff fe49 	bl	4047c4 <memmove>
  404b32:	e70b      	b.n	40494c <_realloc_r+0xc0>
  404b34:	68ab      	ldr	r3, [r5, #8]
  404b36:	6083      	str	r3, [r0, #8]
  404b38:	68eb      	ldr	r3, [r5, #12]
  404b3a:	60c3      	str	r3, [r0, #12]
  404b3c:	2a24      	cmp	r2, #36	; 0x24
  404b3e:	d017      	beq.n	404b70 <_realloc_r+0x2e4>
  404b40:	f100 0310 	add.w	r3, r0, #16
  404b44:	f105 0210 	add.w	r2, r5, #16
  404b48:	e6e7      	b.n	40491a <_realloc_r+0x8e>
  404b4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404b4e:	f023 0303 	bic.w	r3, r3, #3
  404b52:	441c      	add	r4, r3
  404b54:	462e      	mov	r6, r5
  404b56:	e6f9      	b.n	40494c <_realloc_r+0xc0>
  404b58:	68a9      	ldr	r1, [r5, #8]
  404b5a:	f8ca 1010 	str.w	r1, [sl, #16]
  404b5e:	68e9      	ldr	r1, [r5, #12]
  404b60:	f8ca 1014 	str.w	r1, [sl, #20]
  404b64:	2a24      	cmp	r2, #36	; 0x24
  404b66:	d00c      	beq.n	404b82 <_realloc_r+0x2f6>
  404b68:	3510      	adds	r5, #16
  404b6a:	f10a 0218 	add.w	r2, sl, #24
  404b6e:	e7b9      	b.n	404ae4 <_realloc_r+0x258>
  404b70:	692b      	ldr	r3, [r5, #16]
  404b72:	6103      	str	r3, [r0, #16]
  404b74:	696b      	ldr	r3, [r5, #20]
  404b76:	6143      	str	r3, [r0, #20]
  404b78:	f105 0218 	add.w	r2, r5, #24
  404b7c:	f100 0318 	add.w	r3, r0, #24
  404b80:	e6cb      	b.n	40491a <_realloc_r+0x8e>
  404b82:	692a      	ldr	r2, [r5, #16]
  404b84:	f8ca 2018 	str.w	r2, [sl, #24]
  404b88:	696a      	ldr	r2, [r5, #20]
  404b8a:	f8ca 201c 	str.w	r2, [sl, #28]
  404b8e:	3518      	adds	r5, #24
  404b90:	f10a 0220 	add.w	r2, sl, #32
  404b94:	e7a6      	b.n	404ae4 <_realloc_r+0x258>
  404b96:	4632      	mov	r2, r6
  404b98:	e77f      	b.n	404a9a <_realloc_r+0x20e>
  404b9a:	4629      	mov	r1, r5
  404b9c:	4630      	mov	r0, r6
  404b9e:	9301      	str	r3, [sp, #4]
  404ba0:	f7ff fe10 	bl	4047c4 <memmove>
  404ba4:	9b01      	ldr	r3, [sp, #4]
  404ba6:	e77e      	b.n	404aa6 <_realloc_r+0x21a>
  404ba8:	68a9      	ldr	r1, [r5, #8]
  404baa:	f8ca 1010 	str.w	r1, [sl, #16]
  404bae:	68e9      	ldr	r1, [r5, #12]
  404bb0:	f8ca 1014 	str.w	r1, [sl, #20]
  404bb4:	2a24      	cmp	r2, #36	; 0x24
  404bb6:	d003      	beq.n	404bc0 <_realloc_r+0x334>
  404bb8:	3510      	adds	r5, #16
  404bba:	f10a 0218 	add.w	r2, sl, #24
  404bbe:	e76c      	b.n	404a9a <_realloc_r+0x20e>
  404bc0:	692a      	ldr	r2, [r5, #16]
  404bc2:	f8ca 2018 	str.w	r2, [sl, #24]
  404bc6:	696a      	ldr	r2, [r5, #20]
  404bc8:	f8ca 201c 	str.w	r2, [sl, #28]
  404bcc:	3518      	adds	r5, #24
  404bce:	f10a 0220 	add.w	r2, sl, #32
  404bd2:	e762      	b.n	404a9a <_realloc_r+0x20e>
  404bd4:	20000440 	.word	0x20000440

00404bd8 <__sread>:
  404bd8:	b510      	push	{r4, lr}
  404bda:	460c      	mov	r4, r1
  404bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404be0:	f000 f9f6 	bl	404fd0 <_read_r>
  404be4:	2800      	cmp	r0, #0
  404be6:	db03      	blt.n	404bf0 <__sread+0x18>
  404be8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404bea:	4403      	add	r3, r0
  404bec:	6523      	str	r3, [r4, #80]	; 0x50
  404bee:	bd10      	pop	{r4, pc}
  404bf0:	89a3      	ldrh	r3, [r4, #12]
  404bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404bf6:	81a3      	strh	r3, [r4, #12]
  404bf8:	bd10      	pop	{r4, pc}
  404bfa:	bf00      	nop

00404bfc <__swrite>:
  404bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404c00:	4616      	mov	r6, r2
  404c02:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404c06:	461f      	mov	r7, r3
  404c08:	05d3      	lsls	r3, r2, #23
  404c0a:	460c      	mov	r4, r1
  404c0c:	4605      	mov	r5, r0
  404c0e:	d507      	bpl.n	404c20 <__swrite+0x24>
  404c10:	2200      	movs	r2, #0
  404c12:	2302      	movs	r3, #2
  404c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404c18:	f000 f9c4 	bl	404fa4 <_lseek_r>
  404c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404c24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404c28:	81a2      	strh	r2, [r4, #12]
  404c2a:	463b      	mov	r3, r7
  404c2c:	4632      	mov	r2, r6
  404c2e:	4628      	mov	r0, r5
  404c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404c34:	f000 b8a4 	b.w	404d80 <_write_r>

00404c38 <__sseek>:
  404c38:	b510      	push	{r4, lr}
  404c3a:	460c      	mov	r4, r1
  404c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404c40:	f000 f9b0 	bl	404fa4 <_lseek_r>
  404c44:	89a3      	ldrh	r3, [r4, #12]
  404c46:	1c42      	adds	r2, r0, #1
  404c48:	bf0e      	itee	eq
  404c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404c52:	6520      	strne	r0, [r4, #80]	; 0x50
  404c54:	81a3      	strh	r3, [r4, #12]
  404c56:	bd10      	pop	{r4, pc}

00404c58 <__sclose>:
  404c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404c5c:	f000 b908 	b.w	404e70 <_close_r>

00404c60 <__swbuf_r>:
  404c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c62:	460d      	mov	r5, r1
  404c64:	4614      	mov	r4, r2
  404c66:	4606      	mov	r6, r0
  404c68:	b110      	cbz	r0, 404c70 <__swbuf_r+0x10>
  404c6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c6c:	2b00      	cmp	r3, #0
  404c6e:	d04b      	beq.n	404d08 <__swbuf_r+0xa8>
  404c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404c74:	69a3      	ldr	r3, [r4, #24]
  404c76:	60a3      	str	r3, [r4, #8]
  404c78:	b291      	uxth	r1, r2
  404c7a:	0708      	lsls	r0, r1, #28
  404c7c:	d539      	bpl.n	404cf2 <__swbuf_r+0x92>
  404c7e:	6923      	ldr	r3, [r4, #16]
  404c80:	2b00      	cmp	r3, #0
  404c82:	d036      	beq.n	404cf2 <__swbuf_r+0x92>
  404c84:	b2ed      	uxtb	r5, r5
  404c86:	0489      	lsls	r1, r1, #18
  404c88:	462f      	mov	r7, r5
  404c8a:	d515      	bpl.n	404cb8 <__swbuf_r+0x58>
  404c8c:	6822      	ldr	r2, [r4, #0]
  404c8e:	6961      	ldr	r1, [r4, #20]
  404c90:	1ad3      	subs	r3, r2, r3
  404c92:	428b      	cmp	r3, r1
  404c94:	da1c      	bge.n	404cd0 <__swbuf_r+0x70>
  404c96:	3301      	adds	r3, #1
  404c98:	68a1      	ldr	r1, [r4, #8]
  404c9a:	1c50      	adds	r0, r2, #1
  404c9c:	3901      	subs	r1, #1
  404c9e:	60a1      	str	r1, [r4, #8]
  404ca0:	6020      	str	r0, [r4, #0]
  404ca2:	7015      	strb	r5, [r2, #0]
  404ca4:	6962      	ldr	r2, [r4, #20]
  404ca6:	429a      	cmp	r2, r3
  404ca8:	d01a      	beq.n	404ce0 <__swbuf_r+0x80>
  404caa:	89a3      	ldrh	r3, [r4, #12]
  404cac:	07db      	lsls	r3, r3, #31
  404cae:	d501      	bpl.n	404cb4 <__swbuf_r+0x54>
  404cb0:	2d0a      	cmp	r5, #10
  404cb2:	d015      	beq.n	404ce0 <__swbuf_r+0x80>
  404cb4:	4638      	mov	r0, r7
  404cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cb8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404cba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404cbe:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404cc2:	81a2      	strh	r2, [r4, #12]
  404cc4:	6822      	ldr	r2, [r4, #0]
  404cc6:	6661      	str	r1, [r4, #100]	; 0x64
  404cc8:	6961      	ldr	r1, [r4, #20]
  404cca:	1ad3      	subs	r3, r2, r3
  404ccc:	428b      	cmp	r3, r1
  404cce:	dbe2      	blt.n	404c96 <__swbuf_r+0x36>
  404cd0:	4621      	mov	r1, r4
  404cd2:	4630      	mov	r0, r6
  404cd4:	f7fe ffe0 	bl	403c98 <_fflush_r>
  404cd8:	b940      	cbnz	r0, 404cec <__swbuf_r+0x8c>
  404cda:	6822      	ldr	r2, [r4, #0]
  404cdc:	2301      	movs	r3, #1
  404cde:	e7db      	b.n	404c98 <__swbuf_r+0x38>
  404ce0:	4621      	mov	r1, r4
  404ce2:	4630      	mov	r0, r6
  404ce4:	f7fe ffd8 	bl	403c98 <_fflush_r>
  404ce8:	2800      	cmp	r0, #0
  404cea:	d0e3      	beq.n	404cb4 <__swbuf_r+0x54>
  404cec:	f04f 37ff 	mov.w	r7, #4294967295
  404cf0:	e7e0      	b.n	404cb4 <__swbuf_r+0x54>
  404cf2:	4621      	mov	r1, r4
  404cf4:	4630      	mov	r0, r6
  404cf6:	f7fe febb 	bl	403a70 <__swsetup_r>
  404cfa:	2800      	cmp	r0, #0
  404cfc:	d1f6      	bne.n	404cec <__swbuf_r+0x8c>
  404cfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404d02:	6923      	ldr	r3, [r4, #16]
  404d04:	b291      	uxth	r1, r2
  404d06:	e7bd      	b.n	404c84 <__swbuf_r+0x24>
  404d08:	f7ff f81e 	bl	403d48 <__sinit>
  404d0c:	e7b0      	b.n	404c70 <__swbuf_r+0x10>
  404d0e:	bf00      	nop

00404d10 <_wcrtomb_r>:
  404d10:	b5f0      	push	{r4, r5, r6, r7, lr}
  404d12:	4606      	mov	r6, r0
  404d14:	b085      	sub	sp, #20
  404d16:	461f      	mov	r7, r3
  404d18:	b189      	cbz	r1, 404d3e <_wcrtomb_r+0x2e>
  404d1a:	4c10      	ldr	r4, [pc, #64]	; (404d5c <_wcrtomb_r+0x4c>)
  404d1c:	4d10      	ldr	r5, [pc, #64]	; (404d60 <_wcrtomb_r+0x50>)
  404d1e:	6824      	ldr	r4, [r4, #0]
  404d20:	6b64      	ldr	r4, [r4, #52]	; 0x34
  404d22:	2c00      	cmp	r4, #0
  404d24:	bf08      	it	eq
  404d26:	462c      	moveq	r4, r5
  404d28:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404d2c:	47a0      	blx	r4
  404d2e:	1c43      	adds	r3, r0, #1
  404d30:	d103      	bne.n	404d3a <_wcrtomb_r+0x2a>
  404d32:	2200      	movs	r2, #0
  404d34:	238a      	movs	r3, #138	; 0x8a
  404d36:	603a      	str	r2, [r7, #0]
  404d38:	6033      	str	r3, [r6, #0]
  404d3a:	b005      	add	sp, #20
  404d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404d3e:	460c      	mov	r4, r1
  404d40:	4906      	ldr	r1, [pc, #24]	; (404d5c <_wcrtomb_r+0x4c>)
  404d42:	4a07      	ldr	r2, [pc, #28]	; (404d60 <_wcrtomb_r+0x50>)
  404d44:	6809      	ldr	r1, [r1, #0]
  404d46:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404d48:	2900      	cmp	r1, #0
  404d4a:	bf08      	it	eq
  404d4c:	4611      	moveq	r1, r2
  404d4e:	4622      	mov	r2, r4
  404d50:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404d54:	a901      	add	r1, sp, #4
  404d56:	47a0      	blx	r4
  404d58:	e7e9      	b.n	404d2e <_wcrtomb_r+0x1e>
  404d5a:	bf00      	nop
  404d5c:	20000010 	.word	0x20000010
  404d60:	20000854 	.word	0x20000854

00404d64 <__ascii_wctomb>:
  404d64:	b121      	cbz	r1, 404d70 <__ascii_wctomb+0xc>
  404d66:	2aff      	cmp	r2, #255	; 0xff
  404d68:	d804      	bhi.n	404d74 <__ascii_wctomb+0x10>
  404d6a:	700a      	strb	r2, [r1, #0]
  404d6c:	2001      	movs	r0, #1
  404d6e:	4770      	bx	lr
  404d70:	4608      	mov	r0, r1
  404d72:	4770      	bx	lr
  404d74:	238a      	movs	r3, #138	; 0x8a
  404d76:	6003      	str	r3, [r0, #0]
  404d78:	f04f 30ff 	mov.w	r0, #4294967295
  404d7c:	4770      	bx	lr
  404d7e:	bf00      	nop

00404d80 <_write_r>:
  404d80:	b570      	push	{r4, r5, r6, lr}
  404d82:	460d      	mov	r5, r1
  404d84:	4c08      	ldr	r4, [pc, #32]	; (404da8 <_write_r+0x28>)
  404d86:	4611      	mov	r1, r2
  404d88:	4606      	mov	r6, r0
  404d8a:	461a      	mov	r2, r3
  404d8c:	4628      	mov	r0, r5
  404d8e:	2300      	movs	r3, #0
  404d90:	6023      	str	r3, [r4, #0]
  404d92:	f7fb fe5d 	bl	400a50 <_write>
  404d96:	1c43      	adds	r3, r0, #1
  404d98:	d000      	beq.n	404d9c <_write_r+0x1c>
  404d9a:	bd70      	pop	{r4, r5, r6, pc}
  404d9c:	6823      	ldr	r3, [r4, #0]
  404d9e:	2b00      	cmp	r3, #0
  404da0:	d0fb      	beq.n	404d9a <_write_r+0x1a>
  404da2:	6033      	str	r3, [r6, #0]
  404da4:	bd70      	pop	{r4, r5, r6, pc}
  404da6:	bf00      	nop
  404da8:	200016c8 	.word	0x200016c8

00404dac <__register_exitproc>:
  404dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404db0:	4d2c      	ldr	r5, [pc, #176]	; (404e64 <__register_exitproc+0xb8>)
  404db2:	4606      	mov	r6, r0
  404db4:	6828      	ldr	r0, [r5, #0]
  404db6:	4698      	mov	r8, r3
  404db8:	460f      	mov	r7, r1
  404dba:	4691      	mov	r9, r2
  404dbc:	f7ff fb84 	bl	4044c8 <__retarget_lock_acquire_recursive>
  404dc0:	4b29      	ldr	r3, [pc, #164]	; (404e68 <__register_exitproc+0xbc>)
  404dc2:	681c      	ldr	r4, [r3, #0]
  404dc4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404dc8:	2b00      	cmp	r3, #0
  404dca:	d03e      	beq.n	404e4a <__register_exitproc+0x9e>
  404dcc:	685a      	ldr	r2, [r3, #4]
  404dce:	2a1f      	cmp	r2, #31
  404dd0:	dc1c      	bgt.n	404e0c <__register_exitproc+0x60>
  404dd2:	f102 0e01 	add.w	lr, r2, #1
  404dd6:	b176      	cbz	r6, 404df6 <__register_exitproc+0x4a>
  404dd8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404ddc:	2401      	movs	r4, #1
  404dde:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  404de2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404de6:	4094      	lsls	r4, r2
  404de8:	4320      	orrs	r0, r4
  404dea:	2e02      	cmp	r6, #2
  404dec:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  404df0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404df4:	d023      	beq.n	404e3e <__register_exitproc+0x92>
  404df6:	3202      	adds	r2, #2
  404df8:	f8c3 e004 	str.w	lr, [r3, #4]
  404dfc:	6828      	ldr	r0, [r5, #0]
  404dfe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  404e02:	f7ff fb63 	bl	4044cc <__retarget_lock_release_recursive>
  404e06:	2000      	movs	r0, #0
  404e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404e0c:	4b17      	ldr	r3, [pc, #92]	; (404e6c <__register_exitproc+0xc0>)
  404e0e:	b30b      	cbz	r3, 404e54 <__register_exitproc+0xa8>
  404e10:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404e14:	f7fd faf8 	bl	402408 <malloc>
  404e18:	4603      	mov	r3, r0
  404e1a:	b1d8      	cbz	r0, 404e54 <__register_exitproc+0xa8>
  404e1c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404e20:	6002      	str	r2, [r0, #0]
  404e22:	2100      	movs	r1, #0
  404e24:	6041      	str	r1, [r0, #4]
  404e26:	460a      	mov	r2, r1
  404e28:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404e2c:	f04f 0e01 	mov.w	lr, #1
  404e30:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404e34:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404e38:	2e00      	cmp	r6, #0
  404e3a:	d0dc      	beq.n	404df6 <__register_exitproc+0x4a>
  404e3c:	e7cc      	b.n	404dd8 <__register_exitproc+0x2c>
  404e3e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  404e42:	430c      	orrs	r4, r1
  404e44:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404e48:	e7d5      	b.n	404df6 <__register_exitproc+0x4a>
  404e4a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404e4e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  404e52:	e7bb      	b.n	404dcc <__register_exitproc+0x20>
  404e54:	6828      	ldr	r0, [r5, #0]
  404e56:	f7ff fb39 	bl	4044cc <__retarget_lock_release_recursive>
  404e5a:	f04f 30ff 	mov.w	r0, #4294967295
  404e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404e62:	bf00      	nop
  404e64:	20000850 	.word	0x20000850
  404e68:	00405024 	.word	0x00405024
  404e6c:	00402409 	.word	0x00402409

00404e70 <_close_r>:
  404e70:	b538      	push	{r3, r4, r5, lr}
  404e72:	4c07      	ldr	r4, [pc, #28]	; (404e90 <_close_r+0x20>)
  404e74:	2300      	movs	r3, #0
  404e76:	4605      	mov	r5, r0
  404e78:	4608      	mov	r0, r1
  404e7a:	6023      	str	r3, [r4, #0]
  404e7c:	f7fc fff4 	bl	401e68 <_close>
  404e80:	1c43      	adds	r3, r0, #1
  404e82:	d000      	beq.n	404e86 <_close_r+0x16>
  404e84:	bd38      	pop	{r3, r4, r5, pc}
  404e86:	6823      	ldr	r3, [r4, #0]
  404e88:	2b00      	cmp	r3, #0
  404e8a:	d0fb      	beq.n	404e84 <_close_r+0x14>
  404e8c:	602b      	str	r3, [r5, #0]
  404e8e:	bd38      	pop	{r3, r4, r5, pc}
  404e90:	200016c8 	.word	0x200016c8

00404e94 <_fclose_r>:
  404e94:	b570      	push	{r4, r5, r6, lr}
  404e96:	b159      	cbz	r1, 404eb0 <_fclose_r+0x1c>
  404e98:	4605      	mov	r5, r0
  404e9a:	460c      	mov	r4, r1
  404e9c:	b110      	cbz	r0, 404ea4 <_fclose_r+0x10>
  404e9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404ea0:	2b00      	cmp	r3, #0
  404ea2:	d03c      	beq.n	404f1e <_fclose_r+0x8a>
  404ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404ea6:	07d8      	lsls	r0, r3, #31
  404ea8:	d505      	bpl.n	404eb6 <_fclose_r+0x22>
  404eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404eae:	b92b      	cbnz	r3, 404ebc <_fclose_r+0x28>
  404eb0:	2600      	movs	r6, #0
  404eb2:	4630      	mov	r0, r6
  404eb4:	bd70      	pop	{r4, r5, r6, pc}
  404eb6:	89a3      	ldrh	r3, [r4, #12]
  404eb8:	0599      	lsls	r1, r3, #22
  404eba:	d53c      	bpl.n	404f36 <_fclose_r+0xa2>
  404ebc:	4621      	mov	r1, r4
  404ebe:	4628      	mov	r0, r5
  404ec0:	f7fe fe4a 	bl	403b58 <__sflush_r>
  404ec4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404ec6:	4606      	mov	r6, r0
  404ec8:	b133      	cbz	r3, 404ed8 <_fclose_r+0x44>
  404eca:	69e1      	ldr	r1, [r4, #28]
  404ecc:	4628      	mov	r0, r5
  404ece:	4798      	blx	r3
  404ed0:	2800      	cmp	r0, #0
  404ed2:	bfb8      	it	lt
  404ed4:	f04f 36ff 	movlt.w	r6, #4294967295
  404ed8:	89a3      	ldrh	r3, [r4, #12]
  404eda:	061a      	lsls	r2, r3, #24
  404edc:	d422      	bmi.n	404f24 <_fclose_r+0x90>
  404ede:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404ee0:	b141      	cbz	r1, 404ef4 <_fclose_r+0x60>
  404ee2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404ee6:	4299      	cmp	r1, r3
  404ee8:	d002      	beq.n	404ef0 <_fclose_r+0x5c>
  404eea:	4628      	mov	r0, r5
  404eec:	f7ff f852 	bl	403f94 <_free_r>
  404ef0:	2300      	movs	r3, #0
  404ef2:	6323      	str	r3, [r4, #48]	; 0x30
  404ef4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404ef6:	b121      	cbz	r1, 404f02 <_fclose_r+0x6e>
  404ef8:	4628      	mov	r0, r5
  404efa:	f7ff f84b 	bl	403f94 <_free_r>
  404efe:	2300      	movs	r3, #0
  404f00:	6463      	str	r3, [r4, #68]	; 0x44
  404f02:	f7fe ff4d 	bl	403da0 <__sfp_lock_acquire>
  404f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404f08:	2200      	movs	r2, #0
  404f0a:	07db      	lsls	r3, r3, #31
  404f0c:	81a2      	strh	r2, [r4, #12]
  404f0e:	d50e      	bpl.n	404f2e <_fclose_r+0x9a>
  404f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404f12:	f7ff fad7 	bl	4044c4 <__retarget_lock_close_recursive>
  404f16:	f7fe ff49 	bl	403dac <__sfp_lock_release>
  404f1a:	4630      	mov	r0, r6
  404f1c:	bd70      	pop	{r4, r5, r6, pc}
  404f1e:	f7fe ff13 	bl	403d48 <__sinit>
  404f22:	e7bf      	b.n	404ea4 <_fclose_r+0x10>
  404f24:	6921      	ldr	r1, [r4, #16]
  404f26:	4628      	mov	r0, r5
  404f28:	f7ff f834 	bl	403f94 <_free_r>
  404f2c:	e7d7      	b.n	404ede <_fclose_r+0x4a>
  404f2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404f30:	f7ff facc 	bl	4044cc <__retarget_lock_release_recursive>
  404f34:	e7ec      	b.n	404f10 <_fclose_r+0x7c>
  404f36:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404f38:	f7ff fac6 	bl	4044c8 <__retarget_lock_acquire_recursive>
  404f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f40:	2b00      	cmp	r3, #0
  404f42:	d1bb      	bne.n	404ebc <_fclose_r+0x28>
  404f44:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404f46:	f016 0601 	ands.w	r6, r6, #1
  404f4a:	d1b1      	bne.n	404eb0 <_fclose_r+0x1c>
  404f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404f4e:	f7ff fabd 	bl	4044cc <__retarget_lock_release_recursive>
  404f52:	4630      	mov	r0, r6
  404f54:	bd70      	pop	{r4, r5, r6, pc}
  404f56:	bf00      	nop

00404f58 <_fstat_r>:
  404f58:	b538      	push	{r3, r4, r5, lr}
  404f5a:	460b      	mov	r3, r1
  404f5c:	4c07      	ldr	r4, [pc, #28]	; (404f7c <_fstat_r+0x24>)
  404f5e:	4605      	mov	r5, r0
  404f60:	4611      	mov	r1, r2
  404f62:	4618      	mov	r0, r3
  404f64:	2300      	movs	r3, #0
  404f66:	6023      	str	r3, [r4, #0]
  404f68:	f7fc ff89 	bl	401e7e <_fstat>
  404f6c:	1c43      	adds	r3, r0, #1
  404f6e:	d000      	beq.n	404f72 <_fstat_r+0x1a>
  404f70:	bd38      	pop	{r3, r4, r5, pc}
  404f72:	6823      	ldr	r3, [r4, #0]
  404f74:	2b00      	cmp	r3, #0
  404f76:	d0fb      	beq.n	404f70 <_fstat_r+0x18>
  404f78:	602b      	str	r3, [r5, #0]
  404f7a:	bd38      	pop	{r3, r4, r5, pc}
  404f7c:	200016c8 	.word	0x200016c8

00404f80 <_isatty_r>:
  404f80:	b538      	push	{r3, r4, r5, lr}
  404f82:	4c07      	ldr	r4, [pc, #28]	; (404fa0 <_isatty_r+0x20>)
  404f84:	2300      	movs	r3, #0
  404f86:	4605      	mov	r5, r0
  404f88:	4608      	mov	r0, r1
  404f8a:	6023      	str	r3, [r4, #0]
  404f8c:	f7fc ff86 	bl	401e9c <_isatty>
  404f90:	1c43      	adds	r3, r0, #1
  404f92:	d000      	beq.n	404f96 <_isatty_r+0x16>
  404f94:	bd38      	pop	{r3, r4, r5, pc}
  404f96:	6823      	ldr	r3, [r4, #0]
  404f98:	2b00      	cmp	r3, #0
  404f9a:	d0fb      	beq.n	404f94 <_isatty_r+0x14>
  404f9c:	602b      	str	r3, [r5, #0]
  404f9e:	bd38      	pop	{r3, r4, r5, pc}
  404fa0:	200016c8 	.word	0x200016c8

00404fa4 <_lseek_r>:
  404fa4:	b570      	push	{r4, r5, r6, lr}
  404fa6:	460d      	mov	r5, r1
  404fa8:	4c08      	ldr	r4, [pc, #32]	; (404fcc <_lseek_r+0x28>)
  404faa:	4611      	mov	r1, r2
  404fac:	4606      	mov	r6, r0
  404fae:	461a      	mov	r2, r3
  404fb0:	4628      	mov	r0, r5
  404fb2:	2300      	movs	r3, #0
  404fb4:	6023      	str	r3, [r4, #0]
  404fb6:	f7fc ff7b 	bl	401eb0 <_lseek>
  404fba:	1c43      	adds	r3, r0, #1
  404fbc:	d000      	beq.n	404fc0 <_lseek_r+0x1c>
  404fbe:	bd70      	pop	{r4, r5, r6, pc}
  404fc0:	6823      	ldr	r3, [r4, #0]
  404fc2:	2b00      	cmp	r3, #0
  404fc4:	d0fb      	beq.n	404fbe <_lseek_r+0x1a>
  404fc6:	6033      	str	r3, [r6, #0]
  404fc8:	bd70      	pop	{r4, r5, r6, pc}
  404fca:	bf00      	nop
  404fcc:	200016c8 	.word	0x200016c8

00404fd0 <_read_r>:
  404fd0:	b570      	push	{r4, r5, r6, lr}
  404fd2:	460d      	mov	r5, r1
  404fd4:	4c08      	ldr	r4, [pc, #32]	; (404ff8 <_read_r+0x28>)
  404fd6:	4611      	mov	r1, r2
  404fd8:	4606      	mov	r6, r0
  404fda:	461a      	mov	r2, r3
  404fdc:	4628      	mov	r0, r5
  404fde:	2300      	movs	r3, #0
  404fe0:	6023      	str	r3, [r4, #0]
  404fe2:	f7fb fd0b 	bl	4009fc <_read>
  404fe6:	1c43      	adds	r3, r0, #1
  404fe8:	d000      	beq.n	404fec <_read_r+0x1c>
  404fea:	bd70      	pop	{r4, r5, r6, pc}
  404fec:	6823      	ldr	r3, [r4, #0]
  404fee:	2b00      	cmp	r3, #0
  404ff0:	d0fb      	beq.n	404fea <_read_r+0x1a>
  404ff2:	6033      	str	r3, [r6, #0]
  404ff4:	bd70      	pop	{r4, r5, r6, pc}
  404ff6:	bf00      	nop
  404ff8:	200016c8 	.word	0x200016c8
  404ffc:	0001c200 	.word	0x0001c200
  405000:	000000c0 	.word	0x000000c0
  405004:	00000800 	.word	0x00000800
  405008:	00000000 	.word	0x00000000
  40500c:	0a0d6968 	.word	0x0a0d6968
  405010:	00000000 	.word	0x00000000
  405014:	6c6c6568 	.word	0x6c6c6568
  405018:	6f77206f 	.word	0x6f77206f
  40501c:	0d646c72 	.word	0x0d646c72
  405020:	0000000a 	.word	0x0000000a

00405024 <_global_impure_ptr>:
  405024:	20000018 33323130 37363534 42413938     ... 0123456789AB
  405034:	46454443 00000000 33323130 37363534     CDEF....01234567
  405044:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405054:	0000296c                                l)..

00405058 <blanks.7217>:
  405058:	20202020 20202020 20202020 20202020                     

00405068 <zeroes.7218>:
  405068:	30303030 30303030 30303030 30303030     0000000000000000
  405078:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405088 <_ctype_>:
  405088:	20202000 20202020 28282020 20282828     .         ((((( 
  405098:	20202020 20202020 20202020 20202020                     
  4050a8:	10108820 10101010 10101010 10101010      ...............
  4050b8:	04040410 04040404 10040404 10101010     ................
  4050c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4050d8:	01010101 01010101 01010101 10101010     ................
  4050e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4050f8:	02020202 02020202 02020202 10101010     ................
  405108:	00000020 00000000 00000000 00000000      ...............
	...

0040518c <_init>:
  40518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40518e:	bf00      	nop
  405190:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405192:	bc08      	pop	{r3}
  405194:	469e      	mov	lr, r3
  405196:	4770      	bx	lr

00405198 <__init_array_start>:
  405198:	00403b39 	.word	0x00403b39

0040519c <__frame_dummy_init_array_entry>:
  40519c:	004000f1                                ..@.

004051a0 <_fini>:
  4051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4051a2:	bf00      	nop
  4051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4051a6:	bc08      	pop	{r3}
  4051a8:	469e      	mov	lr, r3
  4051aa:	4770      	bx	lr

004051ac <__fini_array_start>:
  4051ac:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__malloc_av_>:
	...
20000448:	0440 2000 0440 2000 0448 2000 0448 2000     @.. @.. H.. H.. 
20000458:	0450 2000 0450 2000 0458 2000 0458 2000     P.. P.. X.. X.. 
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 

20000848 <__malloc_sbrk_base>:
20000848:	ffff ffff                                   ....

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__atexit_recursive_mutex>:
20000850:	16a4 2000                                   ... 

20000854 <__global_locale>:
20000854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	4d65 0040 45c1 0040 0000 0000 5088 0040     eM@..E@......P@.
20000944:	5084 0040 5038 0040 5038 0040 5038 0040     .P@.8P@.8P@.8P@.
20000954:	5038 0040 5038 0040 5038 0040 5038 0040     8P@.8P@.8P@.8P@.
20000964:	5038 0040 5038 0040 ffff ffff ffff ffff     8P@.8P@.........
20000974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

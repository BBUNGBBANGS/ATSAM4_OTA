
ATSAM4_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f84  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404f84  00404f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b0  20000000  00404f8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000508  200009b0  0040593c  000209b0  2**2
                  ALLOC
  4 .stack        00003000  20000eb8  00405e44  000209b0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209b0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209da  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f811  00000000  00000000  00020a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020ba  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005b2c  00000000  00000000  000322fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009d8  00000000  00000000  00037e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000940  00000000  00000000  00038802  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000048e7  00000000  00000000  00039142  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000aa8b  00000000  00000000  0003da29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000559a6  00000000  00000000  000484b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000036b4  00000000  00000000  0009de5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 3e 00 20 7d 15 40 00 45 16 40 00 45 16 40 00     .>. }.@.E.@.E.@.
  400010:	45 16 40 00 45 16 40 00 45 16 40 00 00 00 00 00     E.@.E.@.E.@.....
	...
  40002c:	45 16 40 00 45 16 40 00 00 00 00 00 45 16 40 00     E.@.E.@.....E.@.
  40003c:	45 16 40 00 45 16 40 00 45 16 40 00 45 16 40 00     E.@.E.@.E.@.E.@.
  40004c:	45 16 40 00 45 16 40 00 45 16 40 00 45 16 40 00     E.@.E.@.E.@.E.@.
  40005c:	45 16 40 00 45 16 40 00 71 1d 40 00 00 00 00 00     E.@.E.@.q.@.....
  40006c:	91 0e 40 00 a9 0e 40 00 c1 0e 40 00 45 16 40 00     ..@...@...@.E.@.
  40007c:	45 16 40 00 00 00 00 00 00 00 00 00 45 16 40 00     E.@.........E.@.
  40008c:	45 16 40 00 45 16 40 00 45 16 40 00 45 16 40 00     E.@.E.@.E.@.E.@.
  40009c:	45 16 40 00 45 16 40 00 45 16 40 00 45 16 40 00     E.@.E.@.E.@.E.@.
  4000ac:	45 16 40 00 45 16 40 00 45 16 40 00 45 16 40 00     E.@.E.@.E.@.E.@.
  4000bc:	45 16 40 00 45 16 40 00 45 16 40 00 45 16 40 00     E.@.E.@.E.@.E.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009b0 	.word	0x200009b0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404f8c 	.word	0x00404f8c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00404f8c 	.word	0x00404f8c
  40012c:	200009b4 	.word	0x200009b4
  400130:	00404f8c 	.word	0x00404f8c
  400134:	00000000 	.word	0x00000000

00400138 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b082      	sub	sp, #8
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400140:	687b      	ldr	r3, [r7, #4]
  400142:	2b07      	cmp	r3, #7
  400144:	d831      	bhi.n	4001aa <osc_enable+0x72>
  400146:	a201      	add	r2, pc, #4	; (adr r2, 40014c <osc_enable+0x14>)
  400148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40014c:	004001a9 	.word	0x004001a9
  400150:	0040016d 	.word	0x0040016d
  400154:	00400175 	.word	0x00400175
  400158:	0040017d 	.word	0x0040017d
  40015c:	00400185 	.word	0x00400185
  400160:	0040018d 	.word	0x0040018d
  400164:	00400195 	.word	0x00400195
  400168:	0040019f 	.word	0x0040019f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40016c:	2000      	movs	r0, #0
  40016e:	4b11      	ldr	r3, [pc, #68]	; (4001b4 <osc_enable+0x7c>)
  400170:	4798      	blx	r3
		break;
  400172:	e01a      	b.n	4001aa <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400174:	2001      	movs	r0, #1
  400176:	4b0f      	ldr	r3, [pc, #60]	; (4001b4 <osc_enable+0x7c>)
  400178:	4798      	blx	r3
		break;
  40017a:	e016      	b.n	4001aa <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40017c:	2000      	movs	r0, #0
  40017e:	4b0e      	ldr	r3, [pc, #56]	; (4001b8 <osc_enable+0x80>)
  400180:	4798      	blx	r3
		break;
  400182:	e012      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400184:	2010      	movs	r0, #16
  400186:	4b0c      	ldr	r3, [pc, #48]	; (4001b8 <osc_enable+0x80>)
  400188:	4798      	blx	r3
		break;
  40018a:	e00e      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40018c:	2020      	movs	r0, #32
  40018e:	4b0a      	ldr	r3, [pc, #40]	; (4001b8 <osc_enable+0x80>)
  400190:	4798      	blx	r3
		break;
  400192:	e00a      	b.n	4001aa <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400194:	213e      	movs	r1, #62	; 0x3e
  400196:	2000      	movs	r0, #0
  400198:	4b08      	ldr	r3, [pc, #32]	; (4001bc <osc_enable+0x84>)
  40019a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40019c:	e005      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40019e:	213e      	movs	r1, #62	; 0x3e
  4001a0:	2001      	movs	r0, #1
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <osc_enable+0x84>)
  4001a4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4001a6:	e000      	b.n	4001aa <osc_enable+0x72>
		break;
  4001a8:	bf00      	nop
	}
}
  4001aa:	bf00      	nop
  4001ac:	3708      	adds	r7, #8
  4001ae:	46bd      	mov	sp, r7
  4001b0:	bd80      	pop	{r7, pc}
  4001b2:	bf00      	nop
  4001b4:	00400f59 	.word	0x00400f59
  4001b8:	00400fc5 	.word	0x00400fc5
  4001bc:	00401035 	.word	0x00401035

004001c0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4001c0:	b580      	push	{r7, lr}
  4001c2:	b082      	sub	sp, #8
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001c8:	687b      	ldr	r3, [r7, #4]
  4001ca:	2b07      	cmp	r3, #7
  4001cc:	d826      	bhi.n	40021c <osc_is_ready+0x5c>
  4001ce:	a201      	add	r2, pc, #4	; (adr r2, 4001d4 <osc_is_ready+0x14>)
  4001d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001d4:	004001f5 	.word	0x004001f5
  4001d8:	004001f9 	.word	0x004001f9
  4001dc:	004001f9 	.word	0x004001f9
  4001e0:	0040020b 	.word	0x0040020b
  4001e4:	0040020b 	.word	0x0040020b
  4001e8:	0040020b 	.word	0x0040020b
  4001ec:	0040020b 	.word	0x0040020b
  4001f0:	0040020b 	.word	0x0040020b
	case OSC_SLCK_32K_RC:
		return 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	e012      	b.n	40021e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001f8:	4b0b      	ldr	r3, [pc, #44]	; (400228 <osc_is_ready+0x68>)
  4001fa:	4798      	blx	r3
  4001fc:	4603      	mov	r3, r0
  4001fe:	2b00      	cmp	r3, #0
  400200:	bf14      	ite	ne
  400202:	2301      	movne	r3, #1
  400204:	2300      	moveq	r3, #0
  400206:	b2db      	uxtb	r3, r3
  400208:	e009      	b.n	40021e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40020a:	4b08      	ldr	r3, [pc, #32]	; (40022c <osc_is_ready+0x6c>)
  40020c:	4798      	blx	r3
  40020e:	4603      	mov	r3, r0
  400210:	2b00      	cmp	r3, #0
  400212:	bf14      	ite	ne
  400214:	2301      	movne	r3, #1
  400216:	2300      	moveq	r3, #0
  400218:	b2db      	uxtb	r3, r3
  40021a:	e000      	b.n	40021e <osc_is_ready+0x5e>
	}

	return 0;
  40021c:	2300      	movs	r3, #0
}
  40021e:	4618      	mov	r0, r3
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400f91 	.word	0x00400f91
  40022c:	004010ad 	.word	0x004010ad

00400230 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	2b07      	cmp	r3, #7
  40023c:	d825      	bhi.n	40028a <osc_get_rate+0x5a>
  40023e:	a201      	add	r2, pc, #4	; (adr r2, 400244 <osc_get_rate+0x14>)
  400240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400244:	00400265 	.word	0x00400265
  400248:	0040026b 	.word	0x0040026b
  40024c:	00400271 	.word	0x00400271
  400250:	00400277 	.word	0x00400277
  400254:	0040027b 	.word	0x0040027b
  400258:	0040027f 	.word	0x0040027f
  40025c:	00400283 	.word	0x00400283
  400260:	00400287 	.word	0x00400287
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400264:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400268:	e010      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40026a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40026e:	e00d      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400274:	e00a      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <osc_get_rate+0x68>)
  400278:	e008      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40027a:	4b08      	ldr	r3, [pc, #32]	; (40029c <osc_get_rate+0x6c>)
  40027c:	e006      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_get_rate+0x70>)
  400280:	e004      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <osc_get_rate+0x70>)
  400284:	e002      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400286:	4b06      	ldr	r3, [pc, #24]	; (4002a0 <osc_get_rate+0x70>)
  400288:	e000      	b.n	40028c <osc_get_rate+0x5c>
	}

	return 0;
  40028a:	2300      	movs	r3, #0
}
  40028c:	4618      	mov	r0, r3
  40028e:	370c      	adds	r7, #12
  400290:	46bd      	mov	sp, r7
  400292:	bc80      	pop	{r7}
  400294:	4770      	bx	lr
  400296:	bf00      	nop
  400298:	003d0900 	.word	0x003d0900
  40029c:	007a1200 	.word	0x007a1200
  4002a0:	00b71b00 	.word	0x00b71b00

004002a4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4002a4:	b580      	push	{r7, lr}
  4002a6:	b082      	sub	sp, #8
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	4603      	mov	r3, r0
  4002ac:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4002ae:	bf00      	nop
  4002b0:	79fb      	ldrb	r3, [r7, #7]
  4002b2:	4618      	mov	r0, r3
  4002b4:	4b05      	ldr	r3, [pc, #20]	; (4002cc <osc_wait_ready+0x28>)
  4002b6:	4798      	blx	r3
  4002b8:	4603      	mov	r3, r0
  4002ba:	f083 0301 	eor.w	r3, r3, #1
  4002be:	b2db      	uxtb	r3, r3
  4002c0:	2b00      	cmp	r3, #0
  4002c2:	d1f5      	bne.n	4002b0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4002c4:	bf00      	nop
  4002c6:	3708      	adds	r7, #8
  4002c8:	46bd      	mov	sp, r7
  4002ca:	bd80      	pop	{r7, pc}
  4002cc:	004001c1 	.word	0x004001c1

004002d0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4002d0:	b580      	push	{r7, lr}
  4002d2:	b086      	sub	sp, #24
  4002d4:	af00      	add	r7, sp, #0
  4002d6:	60f8      	str	r0, [r7, #12]
  4002d8:	607a      	str	r2, [r7, #4]
  4002da:	603b      	str	r3, [r7, #0]
  4002dc:	460b      	mov	r3, r1
  4002de:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4002e0:	7afb      	ldrb	r3, [r7, #11]
  4002e2:	4618      	mov	r0, r3
  4002e4:	4b0d      	ldr	r3, [pc, #52]	; (40031c <pll_config_init+0x4c>)
  4002e6:	4798      	blx	r3
  4002e8:	4602      	mov	r2, r0
  4002ea:	687b      	ldr	r3, [r7, #4]
  4002ec:	fbb2 f3f3 	udiv	r3, r2, r3
  4002f0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4002f2:	697b      	ldr	r3, [r7, #20]
  4002f4:	683a      	ldr	r2, [r7, #0]
  4002f6:	fb02 f303 	mul.w	r3, r2, r3
  4002fa:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4002fc:	683b      	ldr	r3, [r7, #0]
  4002fe:	3b01      	subs	r3, #1
  400300:	041a      	lsls	r2, r3, #16
  400302:	4b07      	ldr	r3, [pc, #28]	; (400320 <pll_config_init+0x50>)
  400304:	4013      	ands	r3, r2
  400306:	687a      	ldr	r2, [r7, #4]
  400308:	b2d2      	uxtb	r2, r2
  40030a:	4313      	orrs	r3, r2
  40030c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400310:	68fb      	ldr	r3, [r7, #12]
  400312:	601a      	str	r2, [r3, #0]
}
  400314:	bf00      	nop
  400316:	3718      	adds	r7, #24
  400318:	46bd      	mov	sp, r7
  40031a:	bd80      	pop	{r7, pc}
  40031c:	00400231 	.word	0x00400231
  400320:	07ff0000 	.word	0x07ff0000

00400324 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400324:	b580      	push	{r7, lr}
  400326:	b082      	sub	sp, #8
  400328:	af00      	add	r7, sp, #0
  40032a:	6078      	str	r0, [r7, #4]
  40032c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40032e:	683b      	ldr	r3, [r7, #0]
  400330:	2b00      	cmp	r3, #0
  400332:	d108      	bne.n	400346 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400334:	4b09      	ldr	r3, [pc, #36]	; (40035c <pll_enable+0x38>)
  400336:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400338:	4a09      	ldr	r2, [pc, #36]	; (400360 <pll_enable+0x3c>)
  40033a:	687b      	ldr	r3, [r7, #4]
  40033c:	681b      	ldr	r3, [r3, #0]
  40033e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400342:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400344:	e005      	b.n	400352 <pll_enable+0x2e>
		pmc_disable_pllbck();
  400346:	4b07      	ldr	r3, [pc, #28]	; (400364 <pll_enable+0x40>)
  400348:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40034a:	4a05      	ldr	r2, [pc, #20]	; (400360 <pll_enable+0x3c>)
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	681b      	ldr	r3, [r3, #0]
  400350:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400352:	bf00      	nop
  400354:	3708      	adds	r7, #8
  400356:	46bd      	mov	sp, r7
  400358:	bd80      	pop	{r7, pc}
  40035a:	bf00      	nop
  40035c:	004010c5 	.word	0x004010c5
  400360:	400e0400 	.word	0x400e0400
  400364:	004010f5 	.word	0x004010f5

00400368 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400368:	b580      	push	{r7, lr}
  40036a:	b082      	sub	sp, #8
  40036c:	af00      	add	r7, sp, #0
  40036e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	2b00      	cmp	r3, #0
  400374:	d103      	bne.n	40037e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400376:	4b05      	ldr	r3, [pc, #20]	; (40038c <pll_is_locked+0x24>)
  400378:	4798      	blx	r3
  40037a:	4603      	mov	r3, r0
  40037c:	e002      	b.n	400384 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40037e:	4b04      	ldr	r3, [pc, #16]	; (400390 <pll_is_locked+0x28>)
  400380:	4798      	blx	r3
  400382:	4603      	mov	r3, r0
	}
}
  400384:	4618      	mov	r0, r3
  400386:	3708      	adds	r7, #8
  400388:	46bd      	mov	sp, r7
  40038a:	bd80      	pop	{r7, pc}
  40038c:	004010dd 	.word	0x004010dd
  400390:	0040110d 	.word	0x0040110d

00400394 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	4603      	mov	r3, r0
  40039c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40039e:	79fb      	ldrb	r3, [r7, #7]
  4003a0:	3b03      	subs	r3, #3
  4003a2:	2b04      	cmp	r3, #4
  4003a4:	d808      	bhi.n	4003b8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4003a6:	79fb      	ldrb	r3, [r7, #7]
  4003a8:	4618      	mov	r0, r3
  4003aa:	4b06      	ldr	r3, [pc, #24]	; (4003c4 <pll_enable_source+0x30>)
  4003ac:	4798      	blx	r3
		osc_wait_ready(e_src);
  4003ae:	79fb      	ldrb	r3, [r7, #7]
  4003b0:	4618      	mov	r0, r3
  4003b2:	4b05      	ldr	r3, [pc, #20]	; (4003c8 <pll_enable_source+0x34>)
  4003b4:	4798      	blx	r3
		break;
  4003b6:	e000      	b.n	4003ba <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4003b8:	bf00      	nop
	}
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	00400139 	.word	0x00400139
  4003c8:	004002a5 	.word	0x004002a5

004003cc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4003cc:	b580      	push	{r7, lr}
  4003ce:	b082      	sub	sp, #8
  4003d0:	af00      	add	r7, sp, #0
  4003d2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4003d4:	bf00      	nop
  4003d6:	6878      	ldr	r0, [r7, #4]
  4003d8:	4b04      	ldr	r3, [pc, #16]	; (4003ec <pll_wait_for_lock+0x20>)
  4003da:	4798      	blx	r3
  4003dc:	4603      	mov	r3, r0
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d0f9      	beq.n	4003d6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4003e2:	2300      	movs	r3, #0
}
  4003e4:	4618      	mov	r0, r3
  4003e6:	3708      	adds	r7, #8
  4003e8:	46bd      	mov	sp, r7
  4003ea:	bd80      	pop	{r7, pc}
  4003ec:	00400369 	.word	0x00400369

004003f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4003f4:	2006      	movs	r0, #6
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <sysclk_get_main_hz+0x18>)
  4003f8:	4798      	blx	r3
  4003fa:	4602      	mov	r2, r0
  4003fc:	4613      	mov	r3, r2
  4003fe:	009b      	lsls	r3, r3, #2
  400400:	4413      	add	r3, r2
  400402:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400404:	4618      	mov	r0, r3
  400406:	bd80      	pop	{r7, pc}
  400408:	00400231 	.word	0x00400231

0040040c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400410:	4b02      	ldr	r3, [pc, #8]	; (40041c <sysclk_get_cpu_hz+0x10>)
  400412:	4798      	blx	r3
  400414:	4603      	mov	r3, r0
  400416:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400418:	4618      	mov	r0, r3
  40041a:	bd80      	pop	{r7, pc}
  40041c:	004003f1 	.word	0x004003f1

00400420 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400420:	b590      	push	{r4, r7, lr}
  400422:	b083      	sub	sp, #12
  400424:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400426:	4811      	ldr	r0, [pc, #68]	; (40046c <sysclk_init+0x4c>)
  400428:	4b11      	ldr	r3, [pc, #68]	; (400470 <sysclk_init+0x50>)
  40042a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40042c:	2006      	movs	r0, #6
  40042e:	4b11      	ldr	r3, [pc, #68]	; (400474 <sysclk_init+0x54>)
  400430:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400432:	1d38      	adds	r0, r7, #4
  400434:	2314      	movs	r3, #20
  400436:	2201      	movs	r2, #1
  400438:	2106      	movs	r1, #6
  40043a:	4c0f      	ldr	r4, [pc, #60]	; (400478 <sysclk_init+0x58>)
  40043c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40043e:	1d3b      	adds	r3, r7, #4
  400440:	2100      	movs	r1, #0
  400442:	4618      	mov	r0, r3
  400444:	4b0d      	ldr	r3, [pc, #52]	; (40047c <sysclk_init+0x5c>)
  400446:	4798      	blx	r3
		pll_wait_for_lock(0);
  400448:	2000      	movs	r0, #0
  40044a:	4b0d      	ldr	r3, [pc, #52]	; (400480 <sysclk_init+0x60>)
  40044c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40044e:	2010      	movs	r0, #16
  400450:	4b0c      	ldr	r3, [pc, #48]	; (400484 <sysclk_init+0x64>)
  400452:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400454:	4b0c      	ldr	r3, [pc, #48]	; (400488 <sysclk_init+0x68>)
  400456:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400458:	4b0c      	ldr	r3, [pc, #48]	; (40048c <sysclk_init+0x6c>)
  40045a:	4798      	blx	r3
  40045c:	4603      	mov	r3, r0
  40045e:	4618      	mov	r0, r3
  400460:	4b03      	ldr	r3, [pc, #12]	; (400470 <sysclk_init+0x50>)
  400462:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400464:	bf00      	nop
  400466:	370c      	adds	r7, #12
  400468:	46bd      	mov	sp, r7
  40046a:	bd90      	pop	{r4, r7, pc}
  40046c:	07270e00 	.word	0x07270e00
  400470:	004017e5 	.word	0x004017e5
  400474:	00400395 	.word	0x00400395
  400478:	004002d1 	.word	0x004002d1
  40047c:	00400325 	.word	0x00400325
  400480:	004003cd 	.word	0x004003cd
  400484:	00400ed9 	.word	0x00400ed9
  400488:	0040164d 	.word	0x0040164d
  40048c:	0040040d 	.word	0x0040040d

00400490 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400490:	b580      	push	{r7, lr}
  400492:	b086      	sub	sp, #24
  400494:	af00      	add	r7, sp, #0
  400496:	60f8      	str	r0, [r7, #12]
  400498:	60b9      	str	r1, [r7, #8]
  40049a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40049c:	2300      	movs	r3, #0
  40049e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4004a0:	68fb      	ldr	r3, [r7, #12]
  4004a2:	2b00      	cmp	r3, #0
  4004a4:	d012      	beq.n	4004cc <_read+0x3c>
		return -1;
  4004a6:	f04f 33ff 	mov.w	r3, #4294967295
  4004aa:	e013      	b.n	4004d4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4004ac:	4b0b      	ldr	r3, [pc, #44]	; (4004dc <_read+0x4c>)
  4004ae:	681b      	ldr	r3, [r3, #0]
  4004b0:	4a0b      	ldr	r2, [pc, #44]	; (4004e0 <_read+0x50>)
  4004b2:	6812      	ldr	r2, [r2, #0]
  4004b4:	68b9      	ldr	r1, [r7, #8]
  4004b6:	4610      	mov	r0, r2
  4004b8:	4798      	blx	r3
		ptr++;
  4004ba:	68bb      	ldr	r3, [r7, #8]
  4004bc:	3301      	adds	r3, #1
  4004be:	60bb      	str	r3, [r7, #8]
		nChars++;
  4004c0:	697b      	ldr	r3, [r7, #20]
  4004c2:	3301      	adds	r3, #1
  4004c4:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  4004c6:	687b      	ldr	r3, [r7, #4]
  4004c8:	3b01      	subs	r3, #1
  4004ca:	607b      	str	r3, [r7, #4]
  4004cc:	687b      	ldr	r3, [r7, #4]
  4004ce:	2b00      	cmp	r3, #0
  4004d0:	dcec      	bgt.n	4004ac <_read+0x1c>
	}
	return nChars;
  4004d2:	697b      	ldr	r3, [r7, #20]
}
  4004d4:	4618      	mov	r0, r3
  4004d6:	3718      	adds	r7, #24
  4004d8:	46bd      	mov	sp, r7
  4004da:	bd80      	pop	{r7, pc}
  4004dc:	20000a7c 	.word	0x20000a7c
  4004e0:	20000a84 	.word	0x20000a84

004004e4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4004e4:	b580      	push	{r7, lr}
  4004e6:	b086      	sub	sp, #24
  4004e8:	af00      	add	r7, sp, #0
  4004ea:	60f8      	str	r0, [r7, #12]
  4004ec:	60b9      	str	r1, [r7, #8]
  4004ee:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4004f0:	2300      	movs	r3, #0
  4004f2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4004f4:	68fb      	ldr	r3, [r7, #12]
  4004f6:	2b01      	cmp	r3, #1
  4004f8:	d01e      	beq.n	400538 <_write+0x54>
  4004fa:	68fb      	ldr	r3, [r7, #12]
  4004fc:	2b02      	cmp	r3, #2
  4004fe:	d01b      	beq.n	400538 <_write+0x54>
  400500:	68fb      	ldr	r3, [r7, #12]
  400502:	2b03      	cmp	r3, #3
  400504:	d018      	beq.n	400538 <_write+0x54>
		return -1;
  400506:	f04f 33ff 	mov.w	r3, #4294967295
  40050a:	e019      	b.n	400540 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40050c:	4b0e      	ldr	r3, [pc, #56]	; (400548 <_write+0x64>)
  40050e:	681a      	ldr	r2, [r3, #0]
  400510:	4b0e      	ldr	r3, [pc, #56]	; (40054c <_write+0x68>)
  400512:	6818      	ldr	r0, [r3, #0]
  400514:	68bb      	ldr	r3, [r7, #8]
  400516:	1c59      	adds	r1, r3, #1
  400518:	60b9      	str	r1, [r7, #8]
  40051a:	781b      	ldrb	r3, [r3, #0]
  40051c:	4619      	mov	r1, r3
  40051e:	4790      	blx	r2
  400520:	4603      	mov	r3, r0
  400522:	2b00      	cmp	r3, #0
  400524:	da02      	bge.n	40052c <_write+0x48>
			return -1;
  400526:	f04f 33ff 	mov.w	r3, #4294967295
  40052a:	e009      	b.n	400540 <_write+0x5c>
		}
		++nChars;
  40052c:	697b      	ldr	r3, [r7, #20]
  40052e:	3301      	adds	r3, #1
  400530:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  400532:	687b      	ldr	r3, [r7, #4]
  400534:	3b01      	subs	r3, #1
  400536:	607b      	str	r3, [r7, #4]
  400538:	687b      	ldr	r3, [r7, #4]
  40053a:	2b00      	cmp	r3, #0
  40053c:	d1e6      	bne.n	40050c <_write+0x28>
	}
	return nChars;
  40053e:	697b      	ldr	r3, [r7, #20]
}
  400540:	4618      	mov	r0, r3
  400542:	3718      	adds	r7, #24
  400544:	46bd      	mov	sp, r7
  400546:	bd80      	pop	{r7, pc}
  400548:	20000a80 	.word	0x20000a80
  40054c:	20000a84 	.word	0x20000a84

00400550 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400550:	b580      	push	{r7, lr}
  400552:	b082      	sub	sp, #8
  400554:	af00      	add	r7, sp, #0
  400556:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400558:	6878      	ldr	r0, [r7, #4]
  40055a:	4b03      	ldr	r3, [pc, #12]	; (400568 <sysclk_enable_peripheral_clock+0x18>)
  40055c:	4798      	blx	r3
}
  40055e:	bf00      	nop
  400560:	3708      	adds	r7, #8
  400562:	46bd      	mov	sp, r7
  400564:	bd80      	pop	{r7, pc}
  400566:	bf00      	nop
  400568:	00401125 	.word	0x00401125

0040056c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40056c:	b580      	push	{r7, lr}
  40056e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400570:	200b      	movs	r0, #11
  400572:	4b05      	ldr	r3, [pc, #20]	; (400588 <ioport_init+0x1c>)
  400574:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400576:	200c      	movs	r0, #12
  400578:	4b03      	ldr	r3, [pc, #12]	; (400588 <ioport_init+0x1c>)
  40057a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40057c:	200d      	movs	r0, #13
  40057e:	4b02      	ldr	r3, [pc, #8]	; (400588 <ioport_init+0x1c>)
  400580:	4798      	blx	r3
	arch_ioport_init();
}
  400582:	bf00      	nop
  400584:	bd80      	pop	{r7, pc}
  400586:	bf00      	nop
  400588:	00400551 	.word	0x00400551

0040058c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  40058c:	b480      	push	{r7}
  40058e:	b08d      	sub	sp, #52	; 0x34
  400590:	af00      	add	r7, sp, #0
  400592:	6078      	str	r0, [r7, #4]
  400594:	6039      	str	r1, [r7, #0]
  400596:	687b      	ldr	r3, [r7, #4]
  400598:	62fb      	str	r3, [r7, #44]	; 0x2c
  40059a:	683b      	ldr	r3, [r7, #0]
  40059c:	62bb      	str	r3, [r7, #40]	; 0x28
  40059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4005a0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4005a4:	095a      	lsrs	r2, r3, #5
  4005a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4005a8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4005aa:	6a3b      	ldr	r3, [r7, #32]
  4005ac:	f003 031f 	and.w	r3, r3, #31
  4005b0:	2101      	movs	r1, #1
  4005b2:	fa01 f303 	lsl.w	r3, r1, r3
  4005b6:	61fa      	str	r2, [r7, #28]
  4005b8:	61bb      	str	r3, [r7, #24]
  4005ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4005bc:	617b      	str	r3, [r7, #20]
  4005be:	69fb      	ldr	r3, [r7, #28]
  4005c0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4005c2:	693b      	ldr	r3, [r7, #16]
  4005c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4005c8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4005cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4005ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4005d0:	697b      	ldr	r3, [r7, #20]
  4005d2:	f003 0308 	and.w	r3, r3, #8
  4005d6:	2b00      	cmp	r3, #0
  4005d8:	d003      	beq.n	4005e2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4005da:	68fb      	ldr	r3, [r7, #12]
  4005dc:	69ba      	ldr	r2, [r7, #24]
  4005de:	665a      	str	r2, [r3, #100]	; 0x64
  4005e0:	e002      	b.n	4005e8 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4005e2:	68fb      	ldr	r3, [r7, #12]
  4005e4:	69ba      	ldr	r2, [r7, #24]
  4005e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4005e8:	697b      	ldr	r3, [r7, #20]
  4005ea:	f003 0310 	and.w	r3, r3, #16
  4005ee:	2b00      	cmp	r3, #0
  4005f0:	d004      	beq.n	4005fc <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4005f2:	68fb      	ldr	r3, [r7, #12]
  4005f4:	69ba      	ldr	r2, [r7, #24]
  4005f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4005fa:	e003      	b.n	400604 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  4005fc:	68fb      	ldr	r3, [r7, #12]
  4005fe:	69ba      	ldr	r2, [r7, #24]
  400600:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400604:	697b      	ldr	r3, [r7, #20]
  400606:	f003 0320 	and.w	r3, r3, #32
  40060a:	2b00      	cmp	r3, #0
  40060c:	d003      	beq.n	400616 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40060e:	68fb      	ldr	r3, [r7, #12]
  400610:	69ba      	ldr	r2, [r7, #24]
  400612:	651a      	str	r2, [r3, #80]	; 0x50
  400614:	e002      	b.n	40061c <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  400616:	68fb      	ldr	r3, [r7, #12]
  400618:	69ba      	ldr	r2, [r7, #24]
  40061a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40061c:	697b      	ldr	r3, [r7, #20]
  40061e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400622:	2b00      	cmp	r3, #0
  400624:	d003      	beq.n	40062e <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  400626:	68fb      	ldr	r3, [r7, #12]
  400628:	69ba      	ldr	r2, [r7, #24]
  40062a:	621a      	str	r2, [r3, #32]
  40062c:	e002      	b.n	400634 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	69ba      	ldr	r2, [r7, #24]
  400632:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400634:	697b      	ldr	r3, [r7, #20]
  400636:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40063a:	2b00      	cmp	r3, #0
  40063c:	d004      	beq.n	400648 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40063e:	68fb      	ldr	r3, [r7, #12]
  400640:	69ba      	ldr	r2, [r7, #24]
  400642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400646:	e003      	b.n	400650 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400648:	68fb      	ldr	r3, [r7, #12]
  40064a:	69ba      	ldr	r2, [r7, #24]
  40064c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400650:	697b      	ldr	r3, [r7, #20]
  400652:	f003 0301 	and.w	r3, r3, #1
  400656:	2b00      	cmp	r3, #0
  400658:	d006      	beq.n	400668 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40065a:	68fb      	ldr	r3, [r7, #12]
  40065c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40065e:	69bb      	ldr	r3, [r7, #24]
  400660:	431a      	orrs	r2, r3
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	671a      	str	r2, [r3, #112]	; 0x70
  400666:	e006      	b.n	400676 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400668:	68fb      	ldr	r3, [r7, #12]
  40066a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40066c:	69bb      	ldr	r3, [r7, #24]
  40066e:	43db      	mvns	r3, r3
  400670:	401a      	ands	r2, r3
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400676:	697b      	ldr	r3, [r7, #20]
  400678:	f003 0302 	and.w	r3, r3, #2
  40067c:	2b00      	cmp	r3, #0
  40067e:	d006      	beq.n	40068e <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  400680:	68fb      	ldr	r3, [r7, #12]
  400682:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400684:	69bb      	ldr	r3, [r7, #24]
  400686:	431a      	orrs	r2, r3
  400688:	68fb      	ldr	r3, [r7, #12]
  40068a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40068c:	e006      	b.n	40069c <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40068e:	68fb      	ldr	r3, [r7, #12]
  400690:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400692:	69bb      	ldr	r3, [r7, #24]
  400694:	43db      	mvns	r3, r3
  400696:	401a      	ands	r2, r3
  400698:	68fb      	ldr	r3, [r7, #12]
  40069a:	675a      	str	r2, [r3, #116]	; 0x74
  40069c:	bf00      	nop
  40069e:	3734      	adds	r7, #52	; 0x34
  4006a0:	46bd      	mov	sp, r7
  4006a2:	bc80      	pop	{r7}
  4006a4:	4770      	bx	lr

004006a6 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4006a6:	b480      	push	{r7}
  4006a8:	b08d      	sub	sp, #52	; 0x34
  4006aa:	af00      	add	r7, sp, #0
  4006ac:	6078      	str	r0, [r7, #4]
  4006ae:	460b      	mov	r3, r1
  4006b0:	70fb      	strb	r3, [r7, #3]
  4006b2:	687b      	ldr	r3, [r7, #4]
  4006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006b6:	78fb      	ldrb	r3, [r7, #3]
  4006b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4006bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006be:	627b      	str	r3, [r7, #36]	; 0x24
  4006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006c2:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4006c4:	6a3b      	ldr	r3, [r7, #32]
  4006c6:	095b      	lsrs	r3, r3, #5
  4006c8:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ca:	69fb      	ldr	r3, [r7, #28]
  4006cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4006d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4006d4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4006d6:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4006d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4006dc:	2b01      	cmp	r3, #1
  4006de:	d109      	bne.n	4006f4 <ioport_set_pin_dir+0x4e>
  4006e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006e2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4006e4:	697b      	ldr	r3, [r7, #20]
  4006e6:	f003 031f 	and.w	r3, r3, #31
  4006ea:	2201      	movs	r2, #1
  4006ec:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4006ee:	69bb      	ldr	r3, [r7, #24]
  4006f0:	611a      	str	r2, [r3, #16]
  4006f2:	e00c      	b.n	40070e <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4006f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4006f8:	2b00      	cmp	r3, #0
  4006fa:	d108      	bne.n	40070e <ioport_set_pin_dir+0x68>
  4006fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006fe:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400700:	693b      	ldr	r3, [r7, #16]
  400702:	f003 031f 	and.w	r3, r3, #31
  400706:	2201      	movs	r2, #1
  400708:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40070a:	69bb      	ldr	r3, [r7, #24]
  40070c:	615a      	str	r2, [r3, #20]
  40070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400710:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400712:	68fb      	ldr	r3, [r7, #12]
  400714:	f003 031f 	and.w	r3, r3, #31
  400718:	2201      	movs	r2, #1
  40071a:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40071c:	69bb      	ldr	r3, [r7, #24]
  40071e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400722:	bf00      	nop
  400724:	3734      	adds	r7, #52	; 0x34
  400726:	46bd      	mov	sp, r7
  400728:	bc80      	pop	{r7}
  40072a:	4770      	bx	lr

0040072c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40072c:	b480      	push	{r7}
  40072e:	b08b      	sub	sp, #44	; 0x2c
  400730:	af00      	add	r7, sp, #0
  400732:	6078      	str	r0, [r7, #4]
  400734:	460b      	mov	r3, r1
  400736:	70fb      	strb	r3, [r7, #3]
  400738:	687b      	ldr	r3, [r7, #4]
  40073a:	627b      	str	r3, [r7, #36]	; 0x24
  40073c:	78fb      	ldrb	r3, [r7, #3]
  40073e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400744:	61fb      	str	r3, [r7, #28]
  400746:	69fb      	ldr	r3, [r7, #28]
  400748:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40074a:	69bb      	ldr	r3, [r7, #24]
  40074c:	095b      	lsrs	r3, r3, #5
  40074e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400750:	697b      	ldr	r3, [r7, #20]
  400752:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400756:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40075a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40075c:	613b      	str	r3, [r7, #16]

	if (level) {
  40075e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400762:	2b00      	cmp	r3, #0
  400764:	d009      	beq.n	40077a <ioport_set_pin_level+0x4e>
  400766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400768:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	f003 031f 	and.w	r3, r3, #31
  400770:	2201      	movs	r2, #1
  400772:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400774:	693b      	ldr	r3, [r7, #16]
  400776:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400778:	e008      	b.n	40078c <ioport_set_pin_level+0x60>
  40077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40077c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40077e:	68bb      	ldr	r3, [r7, #8]
  400780:	f003 031f 	and.w	r3, r3, #31
  400784:	2201      	movs	r2, #1
  400786:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400788:	693b      	ldr	r3, [r7, #16]
  40078a:	635a      	str	r2, [r3, #52]	; 0x34
  40078c:	bf00      	nop
  40078e:	372c      	adds	r7, #44	; 0x2c
  400790:	46bd      	mov	sp, r7
  400792:	bc80      	pop	{r7}
  400794:	4770      	bx	lr
	...

00400798 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400798:	b580      	push	{r7, lr}
  40079a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40079c:	4824      	ldr	r0, [pc, #144]	; (400830 <board_init+0x98>)
  40079e:	4b25      	ldr	r3, [pc, #148]	; (400834 <board_init+0x9c>)
  4007a0:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  4007a2:	4b25      	ldr	r3, [pc, #148]	; (400838 <board_init+0xa0>)
  4007a4:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  4007a6:	2101      	movs	r1, #1
  4007a8:	2057      	movs	r0, #87	; 0x57
  4007aa:	4b24      	ldr	r3, [pc, #144]	; (40083c <board_init+0xa4>)
  4007ac:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  4007ae:	2101      	movs	r1, #1
  4007b0:	2057      	movs	r0, #87	; 0x57
  4007b2:	4b23      	ldr	r3, [pc, #140]	; (400840 <board_init+0xa8>)
  4007b4:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  4007b6:	2100      	movs	r1, #0
  4007b8:	2002      	movs	r0, #2
  4007ba:	4b21      	ldr	r3, [pc, #132]	; (400840 <board_init+0xa8>)
  4007bc:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  4007be:	2108      	movs	r1, #8
  4007c0:	2002      	movs	r0, #2
  4007c2:	4b20      	ldr	r3, [pc, #128]	; (400844 <board_init+0xac>)
  4007c4:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  4007c6:	2101      	movs	r1, #1
  4007c8:	2054      	movs	r0, #84	; 0x54
  4007ca:	4b1c      	ldr	r3, [pc, #112]	; (40083c <board_init+0xa4>)
  4007cc:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  4007ce:	2101      	movs	r1, #1
  4007d0:	2054      	movs	r0, #84	; 0x54
  4007d2:	4b1b      	ldr	r3, [pc, #108]	; (400840 <board_init+0xa8>)
  4007d4:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  4007d6:	2101      	movs	r1, #1
  4007d8:	2010      	movs	r0, #16
  4007da:	4b18      	ldr	r3, [pc, #96]	; (40083c <board_init+0xa4>)
  4007dc:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  4007de:	2101      	movs	r1, #1
  4007e0:	2010      	movs	r0, #16
  4007e2:	4b17      	ldr	r3, [pc, #92]	; (400840 <board_init+0xa8>)
  4007e4:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  4007e6:	2101      	movs	r1, #1
  4007e8:	2056      	movs	r0, #86	; 0x56
  4007ea:	4b14      	ldr	r3, [pc, #80]	; (40083c <board_init+0xa4>)
  4007ec:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  4007ee:	2101      	movs	r1, #1
  4007f0:	2056      	movs	r0, #86	; 0x56
  4007f2:	4b13      	ldr	r3, [pc, #76]	; (400840 <board_init+0xa8>)
  4007f4:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4007f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4007fa:	210c      	movs	r1, #12
  4007fc:	4812      	ldr	r0, [pc, #72]	; (400848 <board_init+0xb0>)
  4007fe:	4b13      	ldr	r3, [pc, #76]	; (40084c <board_init+0xb4>)
  400800:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400802:	4913      	ldr	r1, [pc, #76]	; (400850 <board_init+0xb8>)
  400804:	200c      	movs	r0, #12
  400806:	4b13      	ldr	r3, [pc, #76]	; (400854 <board_init+0xbc>)
  400808:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40080a:	4911      	ldr	r1, [pc, #68]	; (400850 <board_init+0xb8>)
  40080c:	200d      	movs	r0, #13
  40080e:	4b11      	ldr	r3, [pc, #68]	; (400854 <board_init+0xbc>)
  400810:	4798      	blx	r3
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400812:	490f      	ldr	r1, [pc, #60]	; (400850 <board_init+0xb8>)
  400814:	200e      	movs	r0, #14
  400816:	4b0f      	ldr	r3, [pc, #60]	; (400854 <board_init+0xbc>)
  400818:	4798      	blx	r3
	 * Depending on the application requirements, the default PIN may not be available.
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */
#ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  40081a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40081e:	200b      	movs	r0, #11
  400820:	4b0c      	ldr	r3, [pc, #48]	; (400854 <board_init+0xbc>)
  400822:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  400824:	2108      	movs	r1, #8
  400826:	2002      	movs	r0, #2
  400828:	4b06      	ldr	r3, [pc, #24]	; (400844 <board_init+0xac>)
  40082a:	4798      	blx	r3

#endif



}
  40082c:	bf00      	nop
  40082e:	bd80      	pop	{r7, pc}
  400830:	400e1450 	.word	0x400e1450
  400834:	00401561 	.word	0x00401561
  400838:	0040056d 	.word	0x0040056d
  40083c:	0040072d 	.word	0x0040072d
  400840:	004006a7 	.word	0x004006a7
  400844:	0040058d 	.word	0x0040058d
  400848:	400e1000 	.word	0x400e1000
  40084c:	00400c6d 	.word	0x00400c6d
  400850:	08000001 	.word	0x08000001
  400854:	00400abd 	.word	0x00400abd

00400858 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400858:	b480      	push	{r7}
  40085a:	b085      	sub	sp, #20
  40085c:	af00      	add	r7, sp, #0
  40085e:	60f8      	str	r0, [r7, #12]
  400860:	60b9      	str	r1, [r7, #8]
  400862:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400864:	687b      	ldr	r3, [r7, #4]
  400866:	2b00      	cmp	r3, #0
  400868:	d003      	beq.n	400872 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40086a:	68fb      	ldr	r3, [r7, #12]
  40086c:	68ba      	ldr	r2, [r7, #8]
  40086e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400870:	e002      	b.n	400878 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	68ba      	ldr	r2, [r7, #8]
  400876:	661a      	str	r2, [r3, #96]	; 0x60
}
  400878:	bf00      	nop
  40087a:	3714      	adds	r7, #20
  40087c:	46bd      	mov	sp, r7
  40087e:	bc80      	pop	{r7}
  400880:	4770      	bx	lr

00400882 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400882:	b480      	push	{r7}
  400884:	b087      	sub	sp, #28
  400886:	af00      	add	r7, sp, #0
  400888:	60f8      	str	r0, [r7, #12]
  40088a:	60b9      	str	r1, [r7, #8]
  40088c:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	687a      	ldr	r2, [r7, #4]
  400892:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400894:	68bb      	ldr	r3, [r7, #8]
  400896:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40089a:	d04a      	beq.n	400932 <pio_set_peripheral+0xb0>
  40089c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4008a0:	d808      	bhi.n	4008b4 <pio_set_peripheral+0x32>
  4008a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4008a6:	d016      	beq.n	4008d6 <pio_set_peripheral+0x54>
  4008a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4008ac:	d02c      	beq.n	400908 <pio_set_peripheral+0x86>
  4008ae:	2b00      	cmp	r3, #0
  4008b0:	d069      	beq.n	400986 <pio_set_peripheral+0x104>
  4008b2:	e064      	b.n	40097e <pio_set_peripheral+0xfc>
  4008b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4008b8:	d065      	beq.n	400986 <pio_set_peripheral+0x104>
  4008ba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4008be:	d803      	bhi.n	4008c8 <pio_set_peripheral+0x46>
  4008c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4008c4:	d04a      	beq.n	40095c <pio_set_peripheral+0xda>
  4008c6:	e05a      	b.n	40097e <pio_set_peripheral+0xfc>
  4008c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4008cc:	d05b      	beq.n	400986 <pio_set_peripheral+0x104>
  4008ce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4008d2:	d058      	beq.n	400986 <pio_set_peripheral+0x104>
  4008d4:	e053      	b.n	40097e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008d6:	68fb      	ldr	r3, [r7, #12]
  4008d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4008da:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008dc:	68fb      	ldr	r3, [r7, #12]
  4008de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008e0:	687b      	ldr	r3, [r7, #4]
  4008e2:	43d9      	mvns	r1, r3
  4008e4:	697b      	ldr	r3, [r7, #20]
  4008e6:	400b      	ands	r3, r1
  4008e8:	401a      	ands	r2, r3
  4008ea:	68fb      	ldr	r3, [r7, #12]
  4008ec:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4008ee:	68fb      	ldr	r3, [r7, #12]
  4008f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4008f2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008f4:	68fb      	ldr	r3, [r7, #12]
  4008f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008f8:	687b      	ldr	r3, [r7, #4]
  4008fa:	43d9      	mvns	r1, r3
  4008fc:	697b      	ldr	r3, [r7, #20]
  4008fe:	400b      	ands	r3, r1
  400900:	401a      	ands	r2, r3
  400902:	68fb      	ldr	r3, [r7, #12]
  400904:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400906:	e03a      	b.n	40097e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400908:	68fb      	ldr	r3, [r7, #12]
  40090a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40090c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40090e:	687a      	ldr	r2, [r7, #4]
  400910:	697b      	ldr	r3, [r7, #20]
  400912:	431a      	orrs	r2, r3
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400918:	68fb      	ldr	r3, [r7, #12]
  40091a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40091c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40091e:	68fb      	ldr	r3, [r7, #12]
  400920:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400922:	687b      	ldr	r3, [r7, #4]
  400924:	43d9      	mvns	r1, r3
  400926:	697b      	ldr	r3, [r7, #20]
  400928:	400b      	ands	r3, r1
  40092a:	401a      	ands	r2, r3
  40092c:	68fb      	ldr	r3, [r7, #12]
  40092e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400930:	e025      	b.n	40097e <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400932:	68fb      	ldr	r3, [r7, #12]
  400934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400936:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400938:	68fb      	ldr	r3, [r7, #12]
  40093a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40093c:	687b      	ldr	r3, [r7, #4]
  40093e:	43d9      	mvns	r1, r3
  400940:	697b      	ldr	r3, [r7, #20]
  400942:	400b      	ands	r3, r1
  400944:	401a      	ands	r2, r3
  400946:	68fb      	ldr	r3, [r7, #12]
  400948:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40094a:	68fb      	ldr	r3, [r7, #12]
  40094c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40094e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400950:	687a      	ldr	r2, [r7, #4]
  400952:	697b      	ldr	r3, [r7, #20]
  400954:	431a      	orrs	r2, r3
  400956:	68fb      	ldr	r3, [r7, #12]
  400958:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40095a:	e010      	b.n	40097e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40095c:	68fb      	ldr	r3, [r7, #12]
  40095e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400960:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400962:	687a      	ldr	r2, [r7, #4]
  400964:	697b      	ldr	r3, [r7, #20]
  400966:	431a      	orrs	r2, r3
  400968:	68fb      	ldr	r3, [r7, #12]
  40096a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40096c:	68fb      	ldr	r3, [r7, #12]
  40096e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400970:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400972:	687a      	ldr	r2, [r7, #4]
  400974:	697b      	ldr	r3, [r7, #20]
  400976:	431a      	orrs	r2, r3
  400978:	68fb      	ldr	r3, [r7, #12]
  40097a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40097c:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40097e:	68fb      	ldr	r3, [r7, #12]
  400980:	687a      	ldr	r2, [r7, #4]
  400982:	605a      	str	r2, [r3, #4]
  400984:	e000      	b.n	400988 <pio_set_peripheral+0x106>
		return;
  400986:	bf00      	nop
}
  400988:	371c      	adds	r7, #28
  40098a:	46bd      	mov	sp, r7
  40098c:	bc80      	pop	{r7}
  40098e:	4770      	bx	lr

00400990 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400990:	b580      	push	{r7, lr}
  400992:	b084      	sub	sp, #16
  400994:	af00      	add	r7, sp, #0
  400996:	60f8      	str	r0, [r7, #12]
  400998:	60b9      	str	r1, [r7, #8]
  40099a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40099c:	68b9      	ldr	r1, [r7, #8]
  40099e:	68f8      	ldr	r0, [r7, #12]
  4009a0:	4b19      	ldr	r3, [pc, #100]	; (400a08 <pio_set_input+0x78>)
  4009a2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4009a4:	687b      	ldr	r3, [r7, #4]
  4009a6:	f003 0301 	and.w	r3, r3, #1
  4009aa:	461a      	mov	r2, r3
  4009ac:	68b9      	ldr	r1, [r7, #8]
  4009ae:	68f8      	ldr	r0, [r7, #12]
  4009b0:	4b16      	ldr	r3, [pc, #88]	; (400a0c <pio_set_input+0x7c>)
  4009b2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4009b4:	687b      	ldr	r3, [r7, #4]
  4009b6:	f003 030a 	and.w	r3, r3, #10
  4009ba:	2b00      	cmp	r3, #0
  4009bc:	d003      	beq.n	4009c6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4009be:	68fb      	ldr	r3, [r7, #12]
  4009c0:	68ba      	ldr	r2, [r7, #8]
  4009c2:	621a      	str	r2, [r3, #32]
  4009c4:	e002      	b.n	4009cc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4009c6:	68fb      	ldr	r3, [r7, #12]
  4009c8:	68ba      	ldr	r2, [r7, #8]
  4009ca:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4009cc:	687b      	ldr	r3, [r7, #4]
  4009ce:	f003 0302 	and.w	r3, r3, #2
  4009d2:	2b00      	cmp	r3, #0
  4009d4:	d004      	beq.n	4009e0 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4009d6:	68fb      	ldr	r3, [r7, #12]
  4009d8:	68ba      	ldr	r2, [r7, #8]
  4009da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4009de:	e008      	b.n	4009f2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4009e0:	687b      	ldr	r3, [r7, #4]
  4009e2:	f003 0308 	and.w	r3, r3, #8
  4009e6:	2b00      	cmp	r3, #0
  4009e8:	d003      	beq.n	4009f2 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4009ea:	68fb      	ldr	r3, [r7, #12]
  4009ec:	68ba      	ldr	r2, [r7, #8]
  4009ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4009f2:	68fb      	ldr	r3, [r7, #12]
  4009f4:	68ba      	ldr	r2, [r7, #8]
  4009f6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4009f8:	68fb      	ldr	r3, [r7, #12]
  4009fa:	68ba      	ldr	r2, [r7, #8]
  4009fc:	601a      	str	r2, [r3, #0]
}
  4009fe:	bf00      	nop
  400a00:	3710      	adds	r7, #16
  400a02:	46bd      	mov	sp, r7
  400a04:	bd80      	pop	{r7, pc}
  400a06:	bf00      	nop
  400a08:	00400a75 	.word	0x00400a75
  400a0c:	00400859 	.word	0x00400859

00400a10 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400a10:	b580      	push	{r7, lr}
  400a12:	b084      	sub	sp, #16
  400a14:	af00      	add	r7, sp, #0
  400a16:	60f8      	str	r0, [r7, #12]
  400a18:	60b9      	str	r1, [r7, #8]
  400a1a:	607a      	str	r2, [r7, #4]
  400a1c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400a1e:	68b9      	ldr	r1, [r7, #8]
  400a20:	68f8      	ldr	r0, [r7, #12]
  400a22:	4b12      	ldr	r3, [pc, #72]	; (400a6c <pio_set_output+0x5c>)
  400a24:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400a26:	69ba      	ldr	r2, [r7, #24]
  400a28:	68b9      	ldr	r1, [r7, #8]
  400a2a:	68f8      	ldr	r0, [r7, #12]
  400a2c:	4b10      	ldr	r3, [pc, #64]	; (400a70 <pio_set_output+0x60>)
  400a2e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400a30:	683b      	ldr	r3, [r7, #0]
  400a32:	2b00      	cmp	r3, #0
  400a34:	d003      	beq.n	400a3e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400a36:	68fb      	ldr	r3, [r7, #12]
  400a38:	68ba      	ldr	r2, [r7, #8]
  400a3a:	651a      	str	r2, [r3, #80]	; 0x50
  400a3c:	e002      	b.n	400a44 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400a3e:	68fb      	ldr	r3, [r7, #12]
  400a40:	68ba      	ldr	r2, [r7, #8]
  400a42:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400a44:	687b      	ldr	r3, [r7, #4]
  400a46:	2b00      	cmp	r3, #0
  400a48:	d003      	beq.n	400a52 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400a4a:	68fb      	ldr	r3, [r7, #12]
  400a4c:	68ba      	ldr	r2, [r7, #8]
  400a4e:	631a      	str	r2, [r3, #48]	; 0x30
  400a50:	e002      	b.n	400a58 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400a52:	68fb      	ldr	r3, [r7, #12]
  400a54:	68ba      	ldr	r2, [r7, #8]
  400a56:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400a58:	68fb      	ldr	r3, [r7, #12]
  400a5a:	68ba      	ldr	r2, [r7, #8]
  400a5c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400a5e:	68fb      	ldr	r3, [r7, #12]
  400a60:	68ba      	ldr	r2, [r7, #8]
  400a62:	601a      	str	r2, [r3, #0]
}
  400a64:	bf00      	nop
  400a66:	3710      	adds	r7, #16
  400a68:	46bd      	mov	sp, r7
  400a6a:	bd80      	pop	{r7, pc}
  400a6c:	00400a75 	.word	0x00400a75
  400a70:	00400859 	.word	0x00400859

00400a74 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400a74:	b480      	push	{r7}
  400a76:	b083      	sub	sp, #12
  400a78:	af00      	add	r7, sp, #0
  400a7a:	6078      	str	r0, [r7, #4]
  400a7c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400a7e:	687b      	ldr	r3, [r7, #4]
  400a80:	683a      	ldr	r2, [r7, #0]
  400a82:	645a      	str	r2, [r3, #68]	; 0x44
}
  400a84:	bf00      	nop
  400a86:	370c      	adds	r7, #12
  400a88:	46bd      	mov	sp, r7
  400a8a:	bc80      	pop	{r7}
  400a8c:	4770      	bx	lr

00400a8e <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400a8e:	b480      	push	{r7}
  400a90:	b083      	sub	sp, #12
  400a92:	af00      	add	r7, sp, #0
  400a94:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400a96:	687b      	ldr	r3, [r7, #4]
  400a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400a9a:	4618      	mov	r0, r3
  400a9c:	370c      	adds	r7, #12
  400a9e:	46bd      	mov	sp, r7
  400aa0:	bc80      	pop	{r7}
  400aa2:	4770      	bx	lr

00400aa4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400aa4:	b480      	push	{r7}
  400aa6:	b083      	sub	sp, #12
  400aa8:	af00      	add	r7, sp, #0
  400aaa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400aac:	687b      	ldr	r3, [r7, #4]
  400aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400ab0:	4618      	mov	r0, r3
  400ab2:	370c      	adds	r7, #12
  400ab4:	46bd      	mov	sp, r7
  400ab6:	bc80      	pop	{r7}
  400ab8:	4770      	bx	lr
	...

00400abc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400abc:	b590      	push	{r4, r7, lr}
  400abe:	b087      	sub	sp, #28
  400ac0:	af02      	add	r7, sp, #8
  400ac2:	6078      	str	r0, [r7, #4]
  400ac4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400ac6:	6878      	ldr	r0, [r7, #4]
  400ac8:	4b63      	ldr	r3, [pc, #396]	; (400c58 <pio_configure_pin+0x19c>)
  400aca:	4798      	blx	r3
  400acc:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400ace:	683b      	ldr	r3, [r7, #0]
  400ad0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400ad8:	d067      	beq.n	400baa <pio_configure_pin+0xee>
  400ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400ade:	d809      	bhi.n	400af4 <pio_configure_pin+0x38>
  400ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400ae4:	d02b      	beq.n	400b3e <pio_configure_pin+0x82>
  400ae6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400aea:	d043      	beq.n	400b74 <pio_configure_pin+0xb8>
  400aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400af0:	d00a      	beq.n	400b08 <pio_configure_pin+0x4c>
  400af2:	e0a9      	b.n	400c48 <pio_configure_pin+0x18c>
  400af4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400af8:	d07e      	beq.n	400bf8 <pio_configure_pin+0x13c>
  400afa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400afe:	d07b      	beq.n	400bf8 <pio_configure_pin+0x13c>
  400b00:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b04:	d06c      	beq.n	400be0 <pio_configure_pin+0x124>
  400b06:	e09f      	b.n	400c48 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400b08:	687b      	ldr	r3, [r7, #4]
  400b0a:	f003 031f 	and.w	r3, r3, #31
  400b0e:	2201      	movs	r2, #1
  400b10:	fa02 f303 	lsl.w	r3, r2, r3
  400b14:	461a      	mov	r2, r3
  400b16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b1a:	68f8      	ldr	r0, [r7, #12]
  400b1c:	4b4f      	ldr	r3, [pc, #316]	; (400c5c <pio_configure_pin+0x1a0>)
  400b1e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400b20:	687b      	ldr	r3, [r7, #4]
  400b22:	f003 031f 	and.w	r3, r3, #31
  400b26:	2201      	movs	r2, #1
  400b28:	fa02 f303 	lsl.w	r3, r2, r3
  400b2c:	4619      	mov	r1, r3
  400b2e:	683b      	ldr	r3, [r7, #0]
  400b30:	f003 0301 	and.w	r3, r3, #1
  400b34:	461a      	mov	r2, r3
  400b36:	68f8      	ldr	r0, [r7, #12]
  400b38:	4b49      	ldr	r3, [pc, #292]	; (400c60 <pio_configure_pin+0x1a4>)
  400b3a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400b3c:	e086      	b.n	400c4c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400b3e:	687b      	ldr	r3, [r7, #4]
  400b40:	f003 031f 	and.w	r3, r3, #31
  400b44:	2201      	movs	r2, #1
  400b46:	fa02 f303 	lsl.w	r3, r2, r3
  400b4a:	461a      	mov	r2, r3
  400b4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b50:	68f8      	ldr	r0, [r7, #12]
  400b52:	4b42      	ldr	r3, [pc, #264]	; (400c5c <pio_configure_pin+0x1a0>)
  400b54:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400b56:	687b      	ldr	r3, [r7, #4]
  400b58:	f003 031f 	and.w	r3, r3, #31
  400b5c:	2201      	movs	r2, #1
  400b5e:	fa02 f303 	lsl.w	r3, r2, r3
  400b62:	4619      	mov	r1, r3
  400b64:	683b      	ldr	r3, [r7, #0]
  400b66:	f003 0301 	and.w	r3, r3, #1
  400b6a:	461a      	mov	r2, r3
  400b6c:	68f8      	ldr	r0, [r7, #12]
  400b6e:	4b3c      	ldr	r3, [pc, #240]	; (400c60 <pio_configure_pin+0x1a4>)
  400b70:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400b72:	e06b      	b.n	400c4c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400b74:	687b      	ldr	r3, [r7, #4]
  400b76:	f003 031f 	and.w	r3, r3, #31
  400b7a:	2201      	movs	r2, #1
  400b7c:	fa02 f303 	lsl.w	r3, r2, r3
  400b80:	461a      	mov	r2, r3
  400b82:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400b86:	68f8      	ldr	r0, [r7, #12]
  400b88:	4b34      	ldr	r3, [pc, #208]	; (400c5c <pio_configure_pin+0x1a0>)
  400b8a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400b8c:	687b      	ldr	r3, [r7, #4]
  400b8e:	f003 031f 	and.w	r3, r3, #31
  400b92:	2201      	movs	r2, #1
  400b94:	fa02 f303 	lsl.w	r3, r2, r3
  400b98:	4619      	mov	r1, r3
  400b9a:	683b      	ldr	r3, [r7, #0]
  400b9c:	f003 0301 	and.w	r3, r3, #1
  400ba0:	461a      	mov	r2, r3
  400ba2:	68f8      	ldr	r0, [r7, #12]
  400ba4:	4b2e      	ldr	r3, [pc, #184]	; (400c60 <pio_configure_pin+0x1a4>)
  400ba6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400ba8:	e050      	b.n	400c4c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400baa:	687b      	ldr	r3, [r7, #4]
  400bac:	f003 031f 	and.w	r3, r3, #31
  400bb0:	2201      	movs	r2, #1
  400bb2:	fa02 f303 	lsl.w	r3, r2, r3
  400bb6:	461a      	mov	r2, r3
  400bb8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400bbc:	68f8      	ldr	r0, [r7, #12]
  400bbe:	4b27      	ldr	r3, [pc, #156]	; (400c5c <pio_configure_pin+0x1a0>)
  400bc0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400bc2:	687b      	ldr	r3, [r7, #4]
  400bc4:	f003 031f 	and.w	r3, r3, #31
  400bc8:	2201      	movs	r2, #1
  400bca:	fa02 f303 	lsl.w	r3, r2, r3
  400bce:	4619      	mov	r1, r3
  400bd0:	683b      	ldr	r3, [r7, #0]
  400bd2:	f003 0301 	and.w	r3, r3, #1
  400bd6:	461a      	mov	r2, r3
  400bd8:	68f8      	ldr	r0, [r7, #12]
  400bda:	4b21      	ldr	r3, [pc, #132]	; (400c60 <pio_configure_pin+0x1a4>)
  400bdc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400bde:	e035      	b.n	400c4c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400be0:	687b      	ldr	r3, [r7, #4]
  400be2:	f003 031f 	and.w	r3, r3, #31
  400be6:	2201      	movs	r2, #1
  400be8:	fa02 f303 	lsl.w	r3, r2, r3
  400bec:	683a      	ldr	r2, [r7, #0]
  400bee:	4619      	mov	r1, r3
  400bf0:	68f8      	ldr	r0, [r7, #12]
  400bf2:	4b1c      	ldr	r3, [pc, #112]	; (400c64 <pio_configure_pin+0x1a8>)
  400bf4:	4798      	blx	r3
		break;
  400bf6:	e029      	b.n	400c4c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400bf8:	687b      	ldr	r3, [r7, #4]
  400bfa:	f003 031f 	and.w	r3, r3, #31
  400bfe:	2201      	movs	r2, #1
  400c00:	fa02 f303 	lsl.w	r3, r2, r3
  400c04:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400c06:	683b      	ldr	r3, [r7, #0]
  400c08:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c0c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400c10:	bf0c      	ite	eq
  400c12:	2301      	moveq	r3, #1
  400c14:	2300      	movne	r3, #0
  400c16:	b2db      	uxtb	r3, r3
  400c18:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  400c1a:	683b      	ldr	r3, [r7, #0]
  400c1c:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c20:	2b00      	cmp	r3, #0
  400c22:	bf14      	ite	ne
  400c24:	2301      	movne	r3, #1
  400c26:	2300      	moveq	r3, #0
  400c28:	b2db      	uxtb	r3, r3
  400c2a:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400c2c:	683b      	ldr	r3, [r7, #0]
  400c2e:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c32:	2b00      	cmp	r3, #0
  400c34:	bf14      	ite	ne
  400c36:	2301      	movne	r3, #1
  400c38:	2300      	moveq	r3, #0
  400c3a:	b2db      	uxtb	r3, r3
  400c3c:	9300      	str	r3, [sp, #0]
  400c3e:	4603      	mov	r3, r0
  400c40:	68f8      	ldr	r0, [r7, #12]
  400c42:	4c09      	ldr	r4, [pc, #36]	; (400c68 <pio_configure_pin+0x1ac>)
  400c44:	47a0      	blx	r4
		break;
  400c46:	e001      	b.n	400c4c <pio_configure_pin+0x190>

	default:
		return 0;
  400c48:	2300      	movs	r3, #0
  400c4a:	e000      	b.n	400c4e <pio_configure_pin+0x192>
	}

	return 1;
  400c4c:	2301      	movs	r3, #1
}
  400c4e:	4618      	mov	r0, r3
  400c50:	3714      	adds	r7, #20
  400c52:	46bd      	mov	sp, r7
  400c54:	bd90      	pop	{r4, r7, pc}
  400c56:	bf00      	nop
  400c58:	00400d99 	.word	0x00400d99
  400c5c:	00400883 	.word	0x00400883
  400c60:	00400859 	.word	0x00400859
  400c64:	00400991 	.word	0x00400991
  400c68:	00400a11 	.word	0x00400a11

00400c6c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400c6c:	b590      	push	{r4, r7, lr}
  400c6e:	b087      	sub	sp, #28
  400c70:	af02      	add	r7, sp, #8
  400c72:	60f8      	str	r0, [r7, #12]
  400c74:	60b9      	str	r1, [r7, #8]
  400c76:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400c78:	687b      	ldr	r3, [r7, #4]
  400c7a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c82:	d043      	beq.n	400d0c <pio_configure_pin_group+0xa0>
  400c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c88:	d809      	bhi.n	400c9e <pio_configure_pin_group+0x32>
  400c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400c8e:	d01f      	beq.n	400cd0 <pio_configure_pin_group+0x64>
  400c90:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400c94:	d02b      	beq.n	400cee <pio_configure_pin_group+0x82>
  400c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400c9a:	d00a      	beq.n	400cb2 <pio_configure_pin_group+0x46>
  400c9c:	e06d      	b.n	400d7a <pio_configure_pin_group+0x10e>
  400c9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400ca2:	d048      	beq.n	400d36 <pio_configure_pin_group+0xca>
  400ca4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ca8:	d045      	beq.n	400d36 <pio_configure_pin_group+0xca>
  400caa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400cae:	d03c      	beq.n	400d2a <pio_configure_pin_group+0xbe>
  400cb0:	e063      	b.n	400d7a <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400cb2:	68ba      	ldr	r2, [r7, #8]
  400cb4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cb8:	68f8      	ldr	r0, [r7, #12]
  400cba:	4b33      	ldr	r3, [pc, #204]	; (400d88 <pio_configure_pin_group+0x11c>)
  400cbc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400cbe:	687b      	ldr	r3, [r7, #4]
  400cc0:	f003 0301 	and.w	r3, r3, #1
  400cc4:	461a      	mov	r2, r3
  400cc6:	68b9      	ldr	r1, [r7, #8]
  400cc8:	68f8      	ldr	r0, [r7, #12]
  400cca:	4b30      	ldr	r3, [pc, #192]	; (400d8c <pio_configure_pin_group+0x120>)
  400ccc:	4798      	blx	r3
		break;
  400cce:	e056      	b.n	400d7e <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400cd0:	68ba      	ldr	r2, [r7, #8]
  400cd2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cd6:	68f8      	ldr	r0, [r7, #12]
  400cd8:	4b2b      	ldr	r3, [pc, #172]	; (400d88 <pio_configure_pin_group+0x11c>)
  400cda:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400cdc:	687b      	ldr	r3, [r7, #4]
  400cde:	f003 0301 	and.w	r3, r3, #1
  400ce2:	461a      	mov	r2, r3
  400ce4:	68b9      	ldr	r1, [r7, #8]
  400ce6:	68f8      	ldr	r0, [r7, #12]
  400ce8:	4b28      	ldr	r3, [pc, #160]	; (400d8c <pio_configure_pin_group+0x120>)
  400cea:	4798      	blx	r3
		break;
  400cec:	e047      	b.n	400d7e <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400cee:	68ba      	ldr	r2, [r7, #8]
  400cf0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400cf4:	68f8      	ldr	r0, [r7, #12]
  400cf6:	4b24      	ldr	r3, [pc, #144]	; (400d88 <pio_configure_pin_group+0x11c>)
  400cf8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400cfa:	687b      	ldr	r3, [r7, #4]
  400cfc:	f003 0301 	and.w	r3, r3, #1
  400d00:	461a      	mov	r2, r3
  400d02:	68b9      	ldr	r1, [r7, #8]
  400d04:	68f8      	ldr	r0, [r7, #12]
  400d06:	4b21      	ldr	r3, [pc, #132]	; (400d8c <pio_configure_pin_group+0x120>)
  400d08:	4798      	blx	r3
		break;
  400d0a:	e038      	b.n	400d7e <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400d0c:	68ba      	ldr	r2, [r7, #8]
  400d0e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400d12:	68f8      	ldr	r0, [r7, #12]
  400d14:	4b1c      	ldr	r3, [pc, #112]	; (400d88 <pio_configure_pin_group+0x11c>)
  400d16:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400d18:	687b      	ldr	r3, [r7, #4]
  400d1a:	f003 0301 	and.w	r3, r3, #1
  400d1e:	461a      	mov	r2, r3
  400d20:	68b9      	ldr	r1, [r7, #8]
  400d22:	68f8      	ldr	r0, [r7, #12]
  400d24:	4b19      	ldr	r3, [pc, #100]	; (400d8c <pio_configure_pin_group+0x120>)
  400d26:	4798      	blx	r3
		break;
  400d28:	e029      	b.n	400d7e <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400d2a:	687a      	ldr	r2, [r7, #4]
  400d2c:	68b9      	ldr	r1, [r7, #8]
  400d2e:	68f8      	ldr	r0, [r7, #12]
  400d30:	4b17      	ldr	r3, [pc, #92]	; (400d90 <pio_configure_pin_group+0x124>)
  400d32:	4798      	blx	r3
		break;
  400d34:	e023      	b.n	400d7e <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400d36:	687b      	ldr	r3, [r7, #4]
  400d38:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  400d3c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400d40:	bf0c      	ite	eq
  400d42:	2301      	moveq	r3, #1
  400d44:	2300      	movne	r3, #0
  400d46:	b2db      	uxtb	r3, r3
  400d48:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  400d4a:	687b      	ldr	r3, [r7, #4]
  400d4c:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
  400d50:	2b00      	cmp	r3, #0
  400d52:	bf14      	ite	ne
  400d54:	2301      	movne	r3, #1
  400d56:	2300      	moveq	r3, #0
  400d58:	b2db      	uxtb	r3, r3
  400d5a:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400d5c:	687b      	ldr	r3, [r7, #4]
  400d5e:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
  400d62:	2b00      	cmp	r3, #0
  400d64:	bf14      	ite	ne
  400d66:	2301      	movne	r3, #1
  400d68:	2300      	moveq	r3, #0
  400d6a:	b2db      	uxtb	r3, r3
  400d6c:	9300      	str	r3, [sp, #0]
  400d6e:	460b      	mov	r3, r1
  400d70:	68b9      	ldr	r1, [r7, #8]
  400d72:	68f8      	ldr	r0, [r7, #12]
  400d74:	4c07      	ldr	r4, [pc, #28]	; (400d94 <pio_configure_pin_group+0x128>)
  400d76:	47a0      	blx	r4
		break;
  400d78:	e001      	b.n	400d7e <pio_configure_pin_group+0x112>

	default:
		return 0;
  400d7a:	2300      	movs	r3, #0
  400d7c:	e000      	b.n	400d80 <pio_configure_pin_group+0x114>
	}

	return 1;
  400d7e:	2301      	movs	r3, #1
}
  400d80:	4618      	mov	r0, r3
  400d82:	3714      	adds	r7, #20
  400d84:	46bd      	mov	sp, r7
  400d86:	bd90      	pop	{r4, r7, pc}
  400d88:	00400883 	.word	0x00400883
  400d8c:	00400859 	.word	0x00400859
  400d90:	00400991 	.word	0x00400991
  400d94:	00400a11 	.word	0x00400a11

00400d98 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  400d98:	b480      	push	{r7}
  400d9a:	b085      	sub	sp, #20
  400d9c:	af00      	add	r7, sp, #0
  400d9e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400da0:	687b      	ldr	r3, [r7, #4]
  400da2:	095b      	lsrs	r3, r3, #5
  400da4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400da8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400dac:	025b      	lsls	r3, r3, #9
  400dae:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  400db0:	68fb      	ldr	r3, [r7, #12]
}
  400db2:	4618      	mov	r0, r3
  400db4:	3714      	adds	r7, #20
  400db6:	46bd      	mov	sp, r7
  400db8:	bc80      	pop	{r7}
  400dba:	4770      	bx	lr

00400dbc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400dbc:	b580      	push	{r7, lr}
  400dbe:	b084      	sub	sp, #16
  400dc0:	af00      	add	r7, sp, #0
  400dc2:	6078      	str	r0, [r7, #4]
  400dc4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400dc6:	6878      	ldr	r0, [r7, #4]
  400dc8:	4b2c      	ldr	r3, [pc, #176]	; (400e7c <pio_handler_process+0xc0>)
  400dca:	4798      	blx	r3
  400dcc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400dce:	6878      	ldr	r0, [r7, #4]
  400dd0:	4b2b      	ldr	r3, [pc, #172]	; (400e80 <pio_handler_process+0xc4>)
  400dd2:	4798      	blx	r3
  400dd4:	4602      	mov	r2, r0
  400dd6:	68fb      	ldr	r3, [r7, #12]
  400dd8:	4013      	ands	r3, r2
  400dda:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400ddc:	68fb      	ldr	r3, [r7, #12]
  400dde:	2b00      	cmp	r3, #0
  400de0:	d03c      	beq.n	400e5c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400de2:	2300      	movs	r3, #0
  400de4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400de6:	e034      	b.n	400e52 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400de8:	4a26      	ldr	r2, [pc, #152]	; (400e84 <pio_handler_process+0xc8>)
  400dea:	68bb      	ldr	r3, [r7, #8]
  400dec:	011b      	lsls	r3, r3, #4
  400dee:	4413      	add	r3, r2
  400df0:	681a      	ldr	r2, [r3, #0]
  400df2:	683b      	ldr	r3, [r7, #0]
  400df4:	429a      	cmp	r2, r3
  400df6:	d126      	bne.n	400e46 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400df8:	4a22      	ldr	r2, [pc, #136]	; (400e84 <pio_handler_process+0xc8>)
  400dfa:	68bb      	ldr	r3, [r7, #8]
  400dfc:	011b      	lsls	r3, r3, #4
  400dfe:	4413      	add	r3, r2
  400e00:	3304      	adds	r3, #4
  400e02:	681a      	ldr	r2, [r3, #0]
  400e04:	68fb      	ldr	r3, [r7, #12]
  400e06:	4013      	ands	r3, r2
  400e08:	2b00      	cmp	r3, #0
  400e0a:	d01c      	beq.n	400e46 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400e0c:	4a1d      	ldr	r2, [pc, #116]	; (400e84 <pio_handler_process+0xc8>)
  400e0e:	68bb      	ldr	r3, [r7, #8]
  400e10:	011b      	lsls	r3, r3, #4
  400e12:	4413      	add	r3, r2
  400e14:	330c      	adds	r3, #12
  400e16:	681b      	ldr	r3, [r3, #0]
  400e18:	491a      	ldr	r1, [pc, #104]	; (400e84 <pio_handler_process+0xc8>)
  400e1a:	68ba      	ldr	r2, [r7, #8]
  400e1c:	0112      	lsls	r2, r2, #4
  400e1e:	440a      	add	r2, r1
  400e20:	6810      	ldr	r0, [r2, #0]
  400e22:	4918      	ldr	r1, [pc, #96]	; (400e84 <pio_handler_process+0xc8>)
  400e24:	68ba      	ldr	r2, [r7, #8]
  400e26:	0112      	lsls	r2, r2, #4
  400e28:	440a      	add	r2, r1
  400e2a:	3204      	adds	r2, #4
  400e2c:	6812      	ldr	r2, [r2, #0]
  400e2e:	4611      	mov	r1, r2
  400e30:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400e32:	4a14      	ldr	r2, [pc, #80]	; (400e84 <pio_handler_process+0xc8>)
  400e34:	68bb      	ldr	r3, [r7, #8]
  400e36:	011b      	lsls	r3, r3, #4
  400e38:	4413      	add	r3, r2
  400e3a:	3304      	adds	r3, #4
  400e3c:	681b      	ldr	r3, [r3, #0]
  400e3e:	43db      	mvns	r3, r3
  400e40:	68fa      	ldr	r2, [r7, #12]
  400e42:	4013      	ands	r3, r2
  400e44:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400e46:	68bb      	ldr	r3, [r7, #8]
  400e48:	3301      	adds	r3, #1
  400e4a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400e4c:	68bb      	ldr	r3, [r7, #8]
  400e4e:	2b06      	cmp	r3, #6
  400e50:	d803      	bhi.n	400e5a <pio_handler_process+0x9e>
		while (status != 0) {
  400e52:	68fb      	ldr	r3, [r7, #12]
  400e54:	2b00      	cmp	r3, #0
  400e56:	d1c7      	bne.n	400de8 <pio_handler_process+0x2c>
  400e58:	e000      	b.n	400e5c <pio_handler_process+0xa0>
				break;
  400e5a:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400e5c:	4b0a      	ldr	r3, [pc, #40]	; (400e88 <pio_handler_process+0xcc>)
  400e5e:	681b      	ldr	r3, [r3, #0]
  400e60:	2b00      	cmp	r3, #0
  400e62:	d007      	beq.n	400e74 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400e64:	4b09      	ldr	r3, [pc, #36]	; (400e8c <pio_handler_process+0xd0>)
  400e66:	681b      	ldr	r3, [r3, #0]
  400e68:	2b00      	cmp	r3, #0
  400e6a:	d003      	beq.n	400e74 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400e6c:	4b07      	ldr	r3, [pc, #28]	; (400e8c <pio_handler_process+0xd0>)
  400e6e:	681b      	ldr	r3, [r3, #0]
  400e70:	6878      	ldr	r0, [r7, #4]
  400e72:	4798      	blx	r3
		}
	}
#endif
}
  400e74:	bf00      	nop
  400e76:	3710      	adds	r7, #16
  400e78:	46bd      	mov	sp, r7
  400e7a:	bd80      	pop	{r7, pc}
  400e7c:	00400a8f 	.word	0x00400a8f
  400e80:	00400aa5 	.word	0x00400aa5
  400e84:	200009cc 	.word	0x200009cc
  400e88:	20000a88 	.word	0x20000a88
  400e8c:	20000a3c 	.word	0x20000a3c

00400e90 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e90:	b580      	push	{r7, lr}
  400e92:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400e94:	210b      	movs	r1, #11
  400e96:	4802      	ldr	r0, [pc, #8]	; (400ea0 <PIOA_Handler+0x10>)
  400e98:	4b02      	ldr	r3, [pc, #8]	; (400ea4 <PIOA_Handler+0x14>)
  400e9a:	4798      	blx	r3
}
  400e9c:	bf00      	nop
  400e9e:	bd80      	pop	{r7, pc}
  400ea0:	400e0e00 	.word	0x400e0e00
  400ea4:	00400dbd 	.word	0x00400dbd

00400ea8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ea8:	b580      	push	{r7, lr}
  400eaa:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400eac:	210c      	movs	r1, #12
  400eae:	4802      	ldr	r0, [pc, #8]	; (400eb8 <PIOB_Handler+0x10>)
  400eb0:	4b02      	ldr	r3, [pc, #8]	; (400ebc <PIOB_Handler+0x14>)
  400eb2:	4798      	blx	r3
}
  400eb4:	bf00      	nop
  400eb6:	bd80      	pop	{r7, pc}
  400eb8:	400e1000 	.word	0x400e1000
  400ebc:	00400dbd 	.word	0x00400dbd

00400ec0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ec0:	b580      	push	{r7, lr}
  400ec2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400ec4:	210d      	movs	r1, #13
  400ec6:	4802      	ldr	r0, [pc, #8]	; (400ed0 <PIOC_Handler+0x10>)
  400ec8:	4b02      	ldr	r3, [pc, #8]	; (400ed4 <PIOC_Handler+0x14>)
  400eca:	4798      	blx	r3
}
  400ecc:	bf00      	nop
  400ece:	bd80      	pop	{r7, pc}
  400ed0:	400e1200 	.word	0x400e1200
  400ed4:	00400dbd 	.word	0x00400dbd

00400ed8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400ed8:	b480      	push	{r7}
  400eda:	b085      	sub	sp, #20
  400edc:	af00      	add	r7, sp, #0
  400ede:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ee0:	491c      	ldr	r1, [pc, #112]	; (400f54 <pmc_switch_mck_to_pllack+0x7c>)
  400ee2:	4b1c      	ldr	r3, [pc, #112]	; (400f54 <pmc_switch_mck_to_pllack+0x7c>)
  400ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	4313      	orrs	r3, r2
  400eee:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ef4:	60fb      	str	r3, [r7, #12]
  400ef6:	e007      	b.n	400f08 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	2b00      	cmp	r3, #0
  400efc:	d101      	bne.n	400f02 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400efe:	2301      	movs	r3, #1
  400f00:	e023      	b.n	400f4a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400f02:	68fb      	ldr	r3, [r7, #12]
  400f04:	3b01      	subs	r3, #1
  400f06:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f08:	4b12      	ldr	r3, [pc, #72]	; (400f54 <pmc_switch_mck_to_pllack+0x7c>)
  400f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f0c:	f003 0308 	and.w	r3, r3, #8
  400f10:	2b00      	cmp	r3, #0
  400f12:	d0f1      	beq.n	400ef8 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f14:	4a0f      	ldr	r2, [pc, #60]	; (400f54 <pmc_switch_mck_to_pllack+0x7c>)
  400f16:	4b0f      	ldr	r3, [pc, #60]	; (400f54 <pmc_switch_mck_to_pllack+0x7c>)
  400f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f1a:	f023 0303 	bic.w	r3, r3, #3
  400f1e:	f043 0302 	orr.w	r3, r3, #2
  400f22:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400f28:	60fb      	str	r3, [r7, #12]
  400f2a:	e007      	b.n	400f3c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f2c:	68fb      	ldr	r3, [r7, #12]
  400f2e:	2b00      	cmp	r3, #0
  400f30:	d101      	bne.n	400f36 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400f32:	2301      	movs	r3, #1
  400f34:	e009      	b.n	400f4a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400f36:	68fb      	ldr	r3, [r7, #12]
  400f38:	3b01      	subs	r3, #1
  400f3a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f3c:	4b05      	ldr	r3, [pc, #20]	; (400f54 <pmc_switch_mck_to_pllack+0x7c>)
  400f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f40:	f003 0308 	and.w	r3, r3, #8
  400f44:	2b00      	cmp	r3, #0
  400f46:	d0f1      	beq.n	400f2c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400f48:	2300      	movs	r3, #0
}
  400f4a:	4618      	mov	r0, r3
  400f4c:	3714      	adds	r7, #20
  400f4e:	46bd      	mov	sp, r7
  400f50:	bc80      	pop	{r7}
  400f52:	4770      	bx	lr
  400f54:	400e0400 	.word	0x400e0400

00400f58 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400f58:	b480      	push	{r7}
  400f5a:	b083      	sub	sp, #12
  400f5c:	af00      	add	r7, sp, #0
  400f5e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	2b01      	cmp	r3, #1
  400f64:	d107      	bne.n	400f76 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400f66:	4a08      	ldr	r2, [pc, #32]	; (400f88 <pmc_switch_sclk_to_32kxtal+0x30>)
  400f68:	4b07      	ldr	r3, [pc, #28]	; (400f88 <pmc_switch_sclk_to_32kxtal+0x30>)
  400f6a:	689b      	ldr	r3, [r3, #8]
  400f6c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400f74:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400f76:	4b04      	ldr	r3, [pc, #16]	; (400f88 <pmc_switch_sclk_to_32kxtal+0x30>)
  400f78:	4a04      	ldr	r2, [pc, #16]	; (400f8c <pmc_switch_sclk_to_32kxtal+0x34>)
  400f7a:	601a      	str	r2, [r3, #0]
}
  400f7c:	bf00      	nop
  400f7e:	370c      	adds	r7, #12
  400f80:	46bd      	mov	sp, r7
  400f82:	bc80      	pop	{r7}
  400f84:	4770      	bx	lr
  400f86:	bf00      	nop
  400f88:	400e1410 	.word	0x400e1410
  400f8c:	a5000008 	.word	0xa5000008

00400f90 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400f90:	b480      	push	{r7}
  400f92:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400f94:	4b09      	ldr	r3, [pc, #36]	; (400fbc <pmc_osc_is_ready_32kxtal+0x2c>)
  400f96:	695b      	ldr	r3, [r3, #20]
  400f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400f9c:	2b00      	cmp	r3, #0
  400f9e:	d007      	beq.n	400fb0 <pmc_osc_is_ready_32kxtal+0x20>
  400fa0:	4b07      	ldr	r3, [pc, #28]	; (400fc0 <pmc_osc_is_ready_32kxtal+0x30>)
  400fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400fa8:	2b00      	cmp	r3, #0
  400faa:	d001      	beq.n	400fb0 <pmc_osc_is_ready_32kxtal+0x20>
  400fac:	2301      	movs	r3, #1
  400fae:	e000      	b.n	400fb2 <pmc_osc_is_ready_32kxtal+0x22>
  400fb0:	2300      	movs	r3, #0
}
  400fb2:	4618      	mov	r0, r3
  400fb4:	46bd      	mov	sp, r7
  400fb6:	bc80      	pop	{r7}
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop
  400fbc:	400e1410 	.word	0x400e1410
  400fc0:	400e0400 	.word	0x400e0400

00400fc4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400fc4:	b480      	push	{r7}
  400fc6:	b083      	sub	sp, #12
  400fc8:	af00      	add	r7, sp, #0
  400fca:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400fcc:	4a18      	ldr	r2, [pc, #96]	; (401030 <pmc_switch_mainck_to_fastrc+0x6c>)
  400fce:	4b18      	ldr	r3, [pc, #96]	; (401030 <pmc_switch_mainck_to_fastrc+0x6c>)
  400fd0:	6a1b      	ldr	r3, [r3, #32]
  400fd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400fd6:	f043 0308 	orr.w	r3, r3, #8
  400fda:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400fdc:	bf00      	nop
  400fde:	4b14      	ldr	r3, [pc, #80]	; (401030 <pmc_switch_mainck_to_fastrc+0x6c>)
  400fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d0f9      	beq.n	400fde <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400fea:	4911      	ldr	r1, [pc, #68]	; (401030 <pmc_switch_mainck_to_fastrc+0x6c>)
  400fec:	4b10      	ldr	r3, [pc, #64]	; (401030 <pmc_switch_mainck_to_fastrc+0x6c>)
  400fee:	6a1b      	ldr	r3, [r3, #32]
  400ff0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400ff8:	687a      	ldr	r2, [r7, #4]
  400ffa:	4313      	orrs	r3, r2
  400ffc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401000:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401002:	bf00      	nop
  401004:	4b0a      	ldr	r3, [pc, #40]	; (401030 <pmc_switch_mainck_to_fastrc+0x6c>)
  401006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40100c:	2b00      	cmp	r3, #0
  40100e:	d0f9      	beq.n	401004 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401010:	4a07      	ldr	r2, [pc, #28]	; (401030 <pmc_switch_mainck_to_fastrc+0x6c>)
  401012:	4b07      	ldr	r3, [pc, #28]	; (401030 <pmc_switch_mainck_to_fastrc+0x6c>)
  401014:	6a1b      	ldr	r3, [r3, #32]
  401016:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40101e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401022:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401024:	bf00      	nop
  401026:	370c      	adds	r7, #12
  401028:	46bd      	mov	sp, r7
  40102a:	bc80      	pop	{r7}
  40102c:	4770      	bx	lr
  40102e:	bf00      	nop
  401030:	400e0400 	.word	0x400e0400

00401034 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401034:	b480      	push	{r7}
  401036:	b083      	sub	sp, #12
  401038:	af00      	add	r7, sp, #0
  40103a:	6078      	str	r0, [r7, #4]
  40103c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40103e:	687b      	ldr	r3, [r7, #4]
  401040:	2b00      	cmp	r3, #0
  401042:	d008      	beq.n	401056 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401044:	4916      	ldr	r1, [pc, #88]	; (4010a0 <pmc_switch_mainck_to_xtal+0x6c>)
  401046:	4b16      	ldr	r3, [pc, #88]	; (4010a0 <pmc_switch_mainck_to_xtal+0x6c>)
  401048:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40104a:	4a16      	ldr	r2, [pc, #88]	; (4010a4 <pmc_switch_mainck_to_xtal+0x70>)
  40104c:	401a      	ands	r2, r3
  40104e:	4b16      	ldr	r3, [pc, #88]	; (4010a8 <pmc_switch_mainck_to_xtal+0x74>)
  401050:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401052:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401054:	e01e      	b.n	401094 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401056:	4912      	ldr	r1, [pc, #72]	; (4010a0 <pmc_switch_mainck_to_xtal+0x6c>)
  401058:	4b11      	ldr	r3, [pc, #68]	; (4010a0 <pmc_switch_mainck_to_xtal+0x6c>)
  40105a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40105c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401060:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401064:	683a      	ldr	r2, [r7, #0]
  401066:	0212      	lsls	r2, r2, #8
  401068:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40106a:	4313      	orrs	r3, r2
  40106c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401070:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401074:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401076:	bf00      	nop
  401078:	4b09      	ldr	r3, [pc, #36]	; (4010a0 <pmc_switch_mainck_to_xtal+0x6c>)
  40107a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40107c:	f003 0301 	and.w	r3, r3, #1
  401080:	2b00      	cmp	r3, #0
  401082:	d0f9      	beq.n	401078 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401084:	4a06      	ldr	r2, [pc, #24]	; (4010a0 <pmc_switch_mainck_to_xtal+0x6c>)
  401086:	4b06      	ldr	r3, [pc, #24]	; (4010a0 <pmc_switch_mainck_to_xtal+0x6c>)
  401088:	6a1b      	ldr	r3, [r3, #32]
  40108a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40108e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401092:	6213      	str	r3, [r2, #32]
}
  401094:	bf00      	nop
  401096:	370c      	adds	r7, #12
  401098:	46bd      	mov	sp, r7
  40109a:	bc80      	pop	{r7}
  40109c:	4770      	bx	lr
  40109e:	bf00      	nop
  4010a0:	400e0400 	.word	0x400e0400
  4010a4:	fec8fffc 	.word	0xfec8fffc
  4010a8:	01370002 	.word	0x01370002

004010ac <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4010ac:	b480      	push	{r7}
  4010ae:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4010b0:	4b03      	ldr	r3, [pc, #12]	; (4010c0 <pmc_osc_is_ready_mainck+0x14>)
  4010b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4010b8:	4618      	mov	r0, r3
  4010ba:	46bd      	mov	sp, r7
  4010bc:	bc80      	pop	{r7}
  4010be:	4770      	bx	lr
  4010c0:	400e0400 	.word	0x400e0400

004010c4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4010c4:	b480      	push	{r7}
  4010c6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4010c8:	4b03      	ldr	r3, [pc, #12]	; (4010d8 <pmc_disable_pllack+0x14>)
  4010ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4010ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4010d0:	bf00      	nop
  4010d2:	46bd      	mov	sp, r7
  4010d4:	bc80      	pop	{r7}
  4010d6:	4770      	bx	lr
  4010d8:	400e0400 	.word	0x400e0400

004010dc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4010dc:	b480      	push	{r7}
  4010de:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4010e0:	4b03      	ldr	r3, [pc, #12]	; (4010f0 <pmc_is_locked_pllack+0x14>)
  4010e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4010e4:	f003 0302 	and.w	r3, r3, #2
}
  4010e8:	4618      	mov	r0, r3
  4010ea:	46bd      	mov	sp, r7
  4010ec:	bc80      	pop	{r7}
  4010ee:	4770      	bx	lr
  4010f0:	400e0400 	.word	0x400e0400

004010f4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4010f4:	b480      	push	{r7}
  4010f6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4010f8:	4b03      	ldr	r3, [pc, #12]	; (401108 <pmc_disable_pllbck+0x14>)
  4010fa:	2200      	movs	r2, #0
  4010fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4010fe:	bf00      	nop
  401100:	46bd      	mov	sp, r7
  401102:	bc80      	pop	{r7}
  401104:	4770      	bx	lr
  401106:	bf00      	nop
  401108:	400e0400 	.word	0x400e0400

0040110c <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40110c:	b480      	push	{r7}
  40110e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401110:	4b03      	ldr	r3, [pc, #12]	; (401120 <pmc_is_locked_pllbck+0x14>)
  401112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401114:	f003 0304 	and.w	r3, r3, #4
}
  401118:	4618      	mov	r0, r3
  40111a:	46bd      	mov	sp, r7
  40111c:	bc80      	pop	{r7}
  40111e:	4770      	bx	lr
  401120:	400e0400 	.word	0x400e0400

00401124 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401124:	b480      	push	{r7}
  401126:	b083      	sub	sp, #12
  401128:	af00      	add	r7, sp, #0
  40112a:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40112c:	687b      	ldr	r3, [r7, #4]
  40112e:	2b22      	cmp	r3, #34	; 0x22
  401130:	d901      	bls.n	401136 <pmc_enable_periph_clk+0x12>
		return 1;
  401132:	2301      	movs	r3, #1
  401134:	e02f      	b.n	401196 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401136:	687b      	ldr	r3, [r7, #4]
  401138:	2b1f      	cmp	r3, #31
  40113a:	d813      	bhi.n	401164 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40113c:	4b18      	ldr	r3, [pc, #96]	; (4011a0 <pmc_enable_periph_clk+0x7c>)
  40113e:	699a      	ldr	r2, [r3, #24]
  401140:	2101      	movs	r1, #1
  401142:	687b      	ldr	r3, [r7, #4]
  401144:	fa01 f303 	lsl.w	r3, r1, r3
  401148:	401a      	ands	r2, r3
  40114a:	2101      	movs	r1, #1
  40114c:	687b      	ldr	r3, [r7, #4]
  40114e:	fa01 f303 	lsl.w	r3, r1, r3
  401152:	429a      	cmp	r2, r3
  401154:	d01e      	beq.n	401194 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401156:	4a12      	ldr	r2, [pc, #72]	; (4011a0 <pmc_enable_periph_clk+0x7c>)
  401158:	2101      	movs	r1, #1
  40115a:	687b      	ldr	r3, [r7, #4]
  40115c:	fa01 f303 	lsl.w	r3, r1, r3
  401160:	6113      	str	r3, [r2, #16]
  401162:	e017      	b.n	401194 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401164:	687b      	ldr	r3, [r7, #4]
  401166:	3b20      	subs	r3, #32
  401168:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40116a:	4b0d      	ldr	r3, [pc, #52]	; (4011a0 <pmc_enable_periph_clk+0x7c>)
  40116c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401170:	2101      	movs	r1, #1
  401172:	687b      	ldr	r3, [r7, #4]
  401174:	fa01 f303 	lsl.w	r3, r1, r3
  401178:	401a      	ands	r2, r3
  40117a:	2101      	movs	r1, #1
  40117c:	687b      	ldr	r3, [r7, #4]
  40117e:	fa01 f303 	lsl.w	r3, r1, r3
  401182:	429a      	cmp	r2, r3
  401184:	d006      	beq.n	401194 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401186:	4a06      	ldr	r2, [pc, #24]	; (4011a0 <pmc_enable_periph_clk+0x7c>)
  401188:	2101      	movs	r1, #1
  40118a:	687b      	ldr	r3, [r7, #4]
  40118c:	fa01 f303 	lsl.w	r3, r1, r3
  401190:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401194:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401196:	4618      	mov	r0, r3
  401198:	370c      	adds	r7, #12
  40119a:	46bd      	mov	sp, r7
  40119c:	bc80      	pop	{r7}
  40119e:	4770      	bx	lr
  4011a0:	400e0400 	.word	0x400e0400

004011a4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4011a4:	b480      	push	{r7}
  4011a6:	b085      	sub	sp, #20
  4011a8:	af00      	add	r7, sp, #0
  4011aa:	6078      	str	r0, [r7, #4]
  4011ac:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4011ae:	2300      	movs	r3, #0
  4011b0:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4011b2:	687b      	ldr	r3, [r7, #4]
  4011b4:	22ac      	movs	r2, #172	; 0xac
  4011b6:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4011b8:	683b      	ldr	r3, [r7, #0]
  4011ba:	681a      	ldr	r2, [r3, #0]
  4011bc:	683b      	ldr	r3, [r7, #0]
  4011be:	685b      	ldr	r3, [r3, #4]
  4011c0:	fbb2 f3f3 	udiv	r3, r2, r3
  4011c4:	091b      	lsrs	r3, r3, #4
  4011c6:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4011c8:	68fb      	ldr	r3, [r7, #12]
  4011ca:	2b00      	cmp	r3, #0
  4011cc:	d003      	beq.n	4011d6 <uart_init+0x32>
  4011ce:	68fb      	ldr	r3, [r7, #12]
  4011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4011d4:	d301      	bcc.n	4011da <uart_init+0x36>
		return 1;
  4011d6:	2301      	movs	r3, #1
  4011d8:	e00f      	b.n	4011fa <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  4011da:	687b      	ldr	r3, [r7, #4]
  4011dc:	68fa      	ldr	r2, [r7, #12]
  4011de:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4011e0:	683b      	ldr	r3, [r7, #0]
  4011e2:	689a      	ldr	r2, [r3, #8]
  4011e4:	687b      	ldr	r3, [r7, #4]
  4011e6:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4011e8:	687b      	ldr	r3, [r7, #4]
  4011ea:	f240 2202 	movw	r2, #514	; 0x202
  4011ee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4011f2:	687b      	ldr	r3, [r7, #4]
  4011f4:	2250      	movs	r2, #80	; 0x50
  4011f6:	601a      	str	r2, [r3, #0]

	return 0;
  4011f8:	2300      	movs	r3, #0
}
  4011fa:	4618      	mov	r0, r3
  4011fc:	3714      	adds	r7, #20
  4011fe:	46bd      	mov	sp, r7
  401200:	bc80      	pop	{r7}
  401202:	4770      	bx	lr

00401204 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401204:	b480      	push	{r7}
  401206:	b083      	sub	sp, #12
  401208:	af00      	add	r7, sp, #0
  40120a:	6078      	str	r0, [r7, #4]
  40120c:	460b      	mov	r3, r1
  40120e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401210:	687b      	ldr	r3, [r7, #4]
  401212:	695b      	ldr	r3, [r3, #20]
  401214:	f003 0302 	and.w	r3, r3, #2
  401218:	2b00      	cmp	r3, #0
  40121a:	d101      	bne.n	401220 <uart_write+0x1c>
		return 1;
  40121c:	2301      	movs	r3, #1
  40121e:	e003      	b.n	401228 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401220:	78fa      	ldrb	r2, [r7, #3]
  401222:	687b      	ldr	r3, [r7, #4]
  401224:	61da      	str	r2, [r3, #28]
	return 0;
  401226:	2300      	movs	r3, #0
}
  401228:	4618      	mov	r0, r3
  40122a:	370c      	adds	r7, #12
  40122c:	46bd      	mov	sp, r7
  40122e:	bc80      	pop	{r7}
  401230:	4770      	bx	lr

00401232 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401232:	b480      	push	{r7}
  401234:	b083      	sub	sp, #12
  401236:	af00      	add	r7, sp, #0
  401238:	6078      	str	r0, [r7, #4]
  40123a:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40123c:	687b      	ldr	r3, [r7, #4]
  40123e:	695b      	ldr	r3, [r3, #20]
  401240:	f003 0301 	and.w	r3, r3, #1
  401244:	2b00      	cmp	r3, #0
  401246:	d101      	bne.n	40124c <uart_read+0x1a>
		return 1;
  401248:	2301      	movs	r3, #1
  40124a:	e005      	b.n	401258 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40124c:	687b      	ldr	r3, [r7, #4]
  40124e:	699b      	ldr	r3, [r3, #24]
  401250:	b2da      	uxtb	r2, r3
  401252:	683b      	ldr	r3, [r7, #0]
  401254:	701a      	strb	r2, [r3, #0]
	return 0;
  401256:	2300      	movs	r3, #0
}
  401258:	4618      	mov	r0, r3
  40125a:	370c      	adds	r7, #12
  40125c:	46bd      	mov	sp, r7
  40125e:	bc80      	pop	{r7}
  401260:	4770      	bx	lr

00401262 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401262:	b480      	push	{r7}
  401264:	b089      	sub	sp, #36	; 0x24
  401266:	af00      	add	r7, sp, #0
  401268:	60f8      	str	r0, [r7, #12]
  40126a:	60b9      	str	r1, [r7, #8]
  40126c:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40126e:	68bb      	ldr	r3, [r7, #8]
  401270:	011a      	lsls	r2, r3, #4
  401272:	687b      	ldr	r3, [r7, #4]
  401274:	429a      	cmp	r2, r3
  401276:	d802      	bhi.n	40127e <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401278:	2310      	movs	r3, #16
  40127a:	61fb      	str	r3, [r7, #28]
  40127c:	e001      	b.n	401282 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40127e:	2308      	movs	r3, #8
  401280:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401282:	687b      	ldr	r3, [r7, #4]
  401284:	00da      	lsls	r2, r3, #3
  401286:	69fb      	ldr	r3, [r7, #28]
  401288:	68b9      	ldr	r1, [r7, #8]
  40128a:	fb01 f303 	mul.w	r3, r1, r3
  40128e:	085b      	lsrs	r3, r3, #1
  401290:	441a      	add	r2, r3
  401292:	69fb      	ldr	r3, [r7, #28]
  401294:	68b9      	ldr	r1, [r7, #8]
  401296:	fb01 f303 	mul.w	r3, r1, r3
  40129a:	fbb2 f3f3 	udiv	r3, r2, r3
  40129e:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4012a0:	69bb      	ldr	r3, [r7, #24]
  4012a2:	08db      	lsrs	r3, r3, #3
  4012a4:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4012a6:	69bb      	ldr	r3, [r7, #24]
  4012a8:	f003 0307 	and.w	r3, r3, #7
  4012ac:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4012ae:	697b      	ldr	r3, [r7, #20]
  4012b0:	2b00      	cmp	r3, #0
  4012b2:	d003      	beq.n	4012bc <usart_set_async_baudrate+0x5a>
  4012b4:	697b      	ldr	r3, [r7, #20]
  4012b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4012ba:	d301      	bcc.n	4012c0 <usart_set_async_baudrate+0x5e>
		return 1;
  4012bc:	2301      	movs	r3, #1
  4012be:	e00f      	b.n	4012e0 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4012c0:	69fb      	ldr	r3, [r7, #28]
  4012c2:	2b08      	cmp	r3, #8
  4012c4:	d105      	bne.n	4012d2 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4012c6:	68fb      	ldr	r3, [r7, #12]
  4012c8:	685b      	ldr	r3, [r3, #4]
  4012ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4012ce:	68fb      	ldr	r3, [r7, #12]
  4012d0:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4012d2:	693b      	ldr	r3, [r7, #16]
  4012d4:	041a      	lsls	r2, r3, #16
  4012d6:	697b      	ldr	r3, [r7, #20]
  4012d8:	431a      	orrs	r2, r3
  4012da:	68fb      	ldr	r3, [r7, #12]
  4012dc:	621a      	str	r2, [r3, #32]

	return 0;
  4012de:	2300      	movs	r3, #0
}
  4012e0:	4618      	mov	r0, r3
  4012e2:	3724      	adds	r7, #36	; 0x24
  4012e4:	46bd      	mov	sp, r7
  4012e6:	bc80      	pop	{r7}
  4012e8:	4770      	bx	lr
	...

004012ec <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4012ec:	b580      	push	{r7, lr}
  4012ee:	b082      	sub	sp, #8
  4012f0:	af00      	add	r7, sp, #0
  4012f2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4012f4:	6878      	ldr	r0, [r7, #4]
  4012f6:	4b0f      	ldr	r3, [pc, #60]	; (401334 <usart_reset+0x48>)
  4012f8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4012fa:	687b      	ldr	r3, [r7, #4]
  4012fc:	2200      	movs	r2, #0
  4012fe:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401300:	687b      	ldr	r3, [r7, #4]
  401302:	2200      	movs	r2, #0
  401304:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401306:	687b      	ldr	r3, [r7, #4]
  401308:	2200      	movs	r2, #0
  40130a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40130c:	6878      	ldr	r0, [r7, #4]
  40130e:	4b0a      	ldr	r3, [pc, #40]	; (401338 <usart_reset+0x4c>)
  401310:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401312:	6878      	ldr	r0, [r7, #4]
  401314:	4b09      	ldr	r3, [pc, #36]	; (40133c <usart_reset+0x50>)
  401316:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401318:	6878      	ldr	r0, [r7, #4]
  40131a:	4b09      	ldr	r3, [pc, #36]	; (401340 <usart_reset+0x54>)
  40131c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40131e:	6878      	ldr	r0, [r7, #4]
  401320:	4b08      	ldr	r3, [pc, #32]	; (401344 <usart_reset+0x58>)
  401322:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  401324:	6878      	ldr	r0, [r7, #4]
  401326:	4b08      	ldr	r3, [pc, #32]	; (401348 <usart_reset+0x5c>)
  401328:	4798      	blx	r3
#endif
}
  40132a:	bf00      	nop
  40132c:	3708      	adds	r7, #8
  40132e:	46bd      	mov	sp, r7
  401330:	bd80      	pop	{r7, pc}
  401332:	bf00      	nop
  401334:	00401541 	.word	0x00401541
  401338:	004013e9 	.word	0x004013e9
  40133c:	00401419 	.word	0x00401419
  401340:	00401461 	.word	0x00401461
  401344:	00401495 	.word	0x00401495
  401348:	0040147b 	.word	0x0040147b

0040134c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40134c:	b580      	push	{r7, lr}
  40134e:	b084      	sub	sp, #16
  401350:	af00      	add	r7, sp, #0
  401352:	60f8      	str	r0, [r7, #12]
  401354:	60b9      	str	r1, [r7, #8]
  401356:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401358:	68f8      	ldr	r0, [r7, #12]
  40135a:	4b1a      	ldr	r3, [pc, #104]	; (4013c4 <usart_init_rs232+0x78>)
  40135c:	4798      	blx	r3

	ul_reg_val = 0;
  40135e:	4b1a      	ldr	r3, [pc, #104]	; (4013c8 <usart_init_rs232+0x7c>)
  401360:	2200      	movs	r2, #0
  401362:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401364:	68bb      	ldr	r3, [r7, #8]
  401366:	2b00      	cmp	r3, #0
  401368:	d009      	beq.n	40137e <usart_init_rs232+0x32>
  40136a:	68bb      	ldr	r3, [r7, #8]
  40136c:	681b      	ldr	r3, [r3, #0]
  40136e:	687a      	ldr	r2, [r7, #4]
  401370:	4619      	mov	r1, r3
  401372:	68f8      	ldr	r0, [r7, #12]
  401374:	4b15      	ldr	r3, [pc, #84]	; (4013cc <usart_init_rs232+0x80>)
  401376:	4798      	blx	r3
  401378:	4603      	mov	r3, r0
  40137a:	2b00      	cmp	r3, #0
  40137c:	d001      	beq.n	401382 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40137e:	2301      	movs	r3, #1
  401380:	e01b      	b.n	4013ba <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401382:	68bb      	ldr	r3, [r7, #8]
  401384:	685a      	ldr	r2, [r3, #4]
  401386:	68bb      	ldr	r3, [r7, #8]
  401388:	689b      	ldr	r3, [r3, #8]
  40138a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40138c:	68bb      	ldr	r3, [r7, #8]
  40138e:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401390:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401392:	68bb      	ldr	r3, [r7, #8]
  401394:	68db      	ldr	r3, [r3, #12]
  401396:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401398:	4b0b      	ldr	r3, [pc, #44]	; (4013c8 <usart_init_rs232+0x7c>)
  40139a:	681b      	ldr	r3, [r3, #0]
  40139c:	4313      	orrs	r3, r2
  40139e:	4a0a      	ldr	r2, [pc, #40]	; (4013c8 <usart_init_rs232+0x7c>)
  4013a0:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4013a2:	4b09      	ldr	r3, [pc, #36]	; (4013c8 <usart_init_rs232+0x7c>)
  4013a4:	681b      	ldr	r3, [r3, #0]
  4013a6:	4a08      	ldr	r2, [pc, #32]	; (4013c8 <usart_init_rs232+0x7c>)
  4013a8:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4013aa:	68fb      	ldr	r3, [r7, #12]
  4013ac:	685a      	ldr	r2, [r3, #4]
  4013ae:	4b06      	ldr	r3, [pc, #24]	; (4013c8 <usart_init_rs232+0x7c>)
  4013b0:	681b      	ldr	r3, [r3, #0]
  4013b2:	431a      	orrs	r2, r3
  4013b4:	68fb      	ldr	r3, [r7, #12]
  4013b6:	605a      	str	r2, [r3, #4]

	return 0;
  4013b8:	2300      	movs	r3, #0
}
  4013ba:	4618      	mov	r0, r3
  4013bc:	3710      	adds	r7, #16
  4013be:	46bd      	mov	sp, r7
  4013c0:	bd80      	pop	{r7, pc}
  4013c2:	bf00      	nop
  4013c4:	004012ed 	.word	0x004012ed
  4013c8:	20000a40 	.word	0x20000a40
  4013cc:	00401263 	.word	0x00401263

004013d0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4013d0:	b480      	push	{r7}
  4013d2:	b083      	sub	sp, #12
  4013d4:	af00      	add	r7, sp, #0
  4013d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4013d8:	687b      	ldr	r3, [r7, #4]
  4013da:	2240      	movs	r2, #64	; 0x40
  4013dc:	601a      	str	r2, [r3, #0]
}
  4013de:	bf00      	nop
  4013e0:	370c      	adds	r7, #12
  4013e2:	46bd      	mov	sp, r7
  4013e4:	bc80      	pop	{r7}
  4013e6:	4770      	bx	lr

004013e8 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4013e8:	b480      	push	{r7}
  4013ea:	b083      	sub	sp, #12
  4013ec:	af00      	add	r7, sp, #0
  4013ee:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4013f0:	687b      	ldr	r3, [r7, #4]
  4013f2:	2288      	movs	r2, #136	; 0x88
  4013f4:	601a      	str	r2, [r3, #0]
}
  4013f6:	bf00      	nop
  4013f8:	370c      	adds	r7, #12
  4013fa:	46bd      	mov	sp, r7
  4013fc:	bc80      	pop	{r7}
  4013fe:	4770      	bx	lr

00401400 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401400:	b480      	push	{r7}
  401402:	b083      	sub	sp, #12
  401404:	af00      	add	r7, sp, #0
  401406:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401408:	687b      	ldr	r3, [r7, #4]
  40140a:	2210      	movs	r2, #16
  40140c:	601a      	str	r2, [r3, #0]
}
  40140e:	bf00      	nop
  401410:	370c      	adds	r7, #12
  401412:	46bd      	mov	sp, r7
  401414:	bc80      	pop	{r7}
  401416:	4770      	bx	lr

00401418 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401418:	b480      	push	{r7}
  40141a:	b083      	sub	sp, #12
  40141c:	af00      	add	r7, sp, #0
  40141e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401420:	687b      	ldr	r3, [r7, #4]
  401422:	2224      	movs	r2, #36	; 0x24
  401424:	601a      	str	r2, [r3, #0]
}
  401426:	bf00      	nop
  401428:	370c      	adds	r7, #12
  40142a:	46bd      	mov	sp, r7
  40142c:	bc80      	pop	{r7}
  40142e:	4770      	bx	lr

00401430 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401430:	b480      	push	{r7}
  401432:	b083      	sub	sp, #12
  401434:	af00      	add	r7, sp, #0
  401436:	6078      	str	r0, [r7, #4]
  401438:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40143a:	687b      	ldr	r3, [r7, #4]
  40143c:	683a      	ldr	r2, [r7, #0]
  40143e:	609a      	str	r2, [r3, #8]
}
  401440:	bf00      	nop
  401442:	370c      	adds	r7, #12
  401444:	46bd      	mov	sp, r7
  401446:	bc80      	pop	{r7}
  401448:	4770      	bx	lr

0040144a <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  40144a:	b480      	push	{r7}
  40144c:	b083      	sub	sp, #12
  40144e:	af00      	add	r7, sp, #0
  401450:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  401452:	687b      	ldr	r3, [r7, #4]
  401454:	691b      	ldr	r3, [r3, #16]
}
  401456:	4618      	mov	r0, r3
  401458:	370c      	adds	r7, #12
  40145a:	46bd      	mov	sp, r7
  40145c:	bc80      	pop	{r7}
  40145e:	4770      	bx	lr

00401460 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401460:	b480      	push	{r7}
  401462:	b083      	sub	sp, #12
  401464:	af00      	add	r7, sp, #0
  401466:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401468:	687b      	ldr	r3, [r7, #4]
  40146a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40146e:	601a      	str	r2, [r3, #0]
}
  401470:	bf00      	nop
  401472:	370c      	adds	r7, #12
  401474:	46bd      	mov	sp, r7
  401476:	bc80      	pop	{r7}
  401478:	4770      	bx	lr

0040147a <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40147a:	b480      	push	{r7}
  40147c:	b083      	sub	sp, #12
  40147e:	af00      	add	r7, sp, #0
  401480:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  401482:	687b      	ldr	r3, [r7, #4]
  401484:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401488:	601a      	str	r2, [r3, #0]
}
  40148a:	bf00      	nop
  40148c:	370c      	adds	r7, #12
  40148e:	46bd      	mov	sp, r7
  401490:	bc80      	pop	{r7}
  401492:	4770      	bx	lr

00401494 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401494:	b480      	push	{r7}
  401496:	b083      	sub	sp, #12
  401498:	af00      	add	r7, sp, #0
  40149a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40149c:	687b      	ldr	r3, [r7, #4]
  40149e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4014a2:	601a      	str	r2, [r3, #0]
}
  4014a4:	bf00      	nop
  4014a6:	370c      	adds	r7, #12
  4014a8:	46bd      	mov	sp, r7
  4014aa:	bc80      	pop	{r7}
  4014ac:	4770      	bx	lr

004014ae <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4014ae:	b480      	push	{r7}
  4014b0:	b083      	sub	sp, #12
  4014b2:	af00      	add	r7, sp, #0
  4014b4:	6078      	str	r0, [r7, #4]
  4014b6:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4014b8:	687b      	ldr	r3, [r7, #4]
  4014ba:	695b      	ldr	r3, [r3, #20]
  4014bc:	f003 0302 	and.w	r3, r3, #2
  4014c0:	2b00      	cmp	r3, #0
  4014c2:	d101      	bne.n	4014c8 <usart_write+0x1a>
		return 1;
  4014c4:	2301      	movs	r3, #1
  4014c6:	e005      	b.n	4014d4 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4014c8:	683b      	ldr	r3, [r7, #0]
  4014ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4014ce:	687b      	ldr	r3, [r7, #4]
  4014d0:	61da      	str	r2, [r3, #28]
	return 0;
  4014d2:	2300      	movs	r3, #0
}
  4014d4:	4618      	mov	r0, r3
  4014d6:	370c      	adds	r7, #12
  4014d8:	46bd      	mov	sp, r7
  4014da:	bc80      	pop	{r7}
  4014dc:	4770      	bx	lr

004014de <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4014de:	b480      	push	{r7}
  4014e0:	b083      	sub	sp, #12
  4014e2:	af00      	add	r7, sp, #0
  4014e4:	6078      	str	r0, [r7, #4]
  4014e6:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4014e8:	687b      	ldr	r3, [r7, #4]
  4014ea:	695b      	ldr	r3, [r3, #20]
  4014ec:	f003 0301 	and.w	r3, r3, #1
  4014f0:	2b00      	cmp	r3, #0
  4014f2:	d101      	bne.n	4014f8 <usart_read+0x1a>
		return 1;
  4014f4:	2301      	movs	r3, #1
  4014f6:	e006      	b.n	401506 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4014f8:	687b      	ldr	r3, [r7, #4]
  4014fa:	699b      	ldr	r3, [r3, #24]
  4014fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401500:	683b      	ldr	r3, [r7, #0]
  401502:	601a      	str	r2, [r3, #0]

	return 0;
  401504:	2300      	movs	r3, #0
}
  401506:	4618      	mov	r0, r3
  401508:	370c      	adds	r7, #12
  40150a:	46bd      	mov	sp, r7
  40150c:	bc80      	pop	{r7}
  40150e:	4770      	bx	lr

00401510 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  401510:	b480      	push	{r7}
  401512:	b083      	sub	sp, #12
  401514:	af00      	add	r7, sp, #0
  401516:	6078      	str	r0, [r7, #4]
  401518:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40151a:	bf00      	nop
  40151c:	687b      	ldr	r3, [r7, #4]
  40151e:	695b      	ldr	r3, [r3, #20]
  401520:	f003 0301 	and.w	r3, r3, #1
  401524:	2b00      	cmp	r3, #0
  401526:	d0f9      	beq.n	40151c <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401528:	687b      	ldr	r3, [r7, #4]
  40152a:	699b      	ldr	r3, [r3, #24]
  40152c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401530:	683b      	ldr	r3, [r7, #0]
  401532:	601a      	str	r2, [r3, #0]

	return 0;
  401534:	2300      	movs	r3, #0
}
  401536:	4618      	mov	r0, r3
  401538:	370c      	adds	r7, #12
  40153a:	46bd      	mov	sp, r7
  40153c:	bc80      	pop	{r7}
  40153e:	4770      	bx	lr

00401540 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401540:	b480      	push	{r7}
  401542:	b083      	sub	sp, #12
  401544:	af00      	add	r7, sp, #0
  401546:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401548:	687b      	ldr	r3, [r7, #4]
  40154a:	4a04      	ldr	r2, [pc, #16]	; (40155c <usart_disable_writeprotect+0x1c>)
  40154c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401550:	bf00      	nop
  401552:	370c      	adds	r7, #12
  401554:	46bd      	mov	sp, r7
  401556:	bc80      	pop	{r7}
  401558:	4770      	bx	lr
  40155a:	bf00      	nop
  40155c:	55534100 	.word	0x55534100

00401560 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401560:	b480      	push	{r7}
  401562:	b083      	sub	sp, #12
  401564:	af00      	add	r7, sp, #0
  401566:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401568:	687b      	ldr	r3, [r7, #4]
  40156a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40156e:	605a      	str	r2, [r3, #4]

}
  401570:	bf00      	nop
  401572:	370c      	adds	r7, #12
  401574:	46bd      	mov	sp, r7
  401576:	bc80      	pop	{r7}
  401578:	4770      	bx	lr
	...

0040157c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40157c:	b580      	push	{r7, lr}
  40157e:	b084      	sub	sp, #16
  401580:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401582:	4b27      	ldr	r3, [pc, #156]	; (401620 <Reset_Handler+0xa4>)
  401584:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401586:	4b27      	ldr	r3, [pc, #156]	; (401624 <Reset_Handler+0xa8>)
  401588:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40158a:	68fa      	ldr	r2, [r7, #12]
  40158c:	68bb      	ldr	r3, [r7, #8]
  40158e:	429a      	cmp	r2, r3
  401590:	d90d      	bls.n	4015ae <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401592:	e007      	b.n	4015a4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401594:	68bb      	ldr	r3, [r7, #8]
  401596:	1d1a      	adds	r2, r3, #4
  401598:	60ba      	str	r2, [r7, #8]
  40159a:	68fa      	ldr	r2, [r7, #12]
  40159c:	1d11      	adds	r1, r2, #4
  40159e:	60f9      	str	r1, [r7, #12]
  4015a0:	6812      	ldr	r2, [r2, #0]
  4015a2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4015a4:	68bb      	ldr	r3, [r7, #8]
  4015a6:	4a20      	ldr	r2, [pc, #128]	; (401628 <Reset_Handler+0xac>)
  4015a8:	4293      	cmp	r3, r2
  4015aa:	d3f3      	bcc.n	401594 <Reset_Handler+0x18>
  4015ac:	e020      	b.n	4015f0 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  4015ae:	68fa      	ldr	r2, [r7, #12]
  4015b0:	68bb      	ldr	r3, [r7, #8]
  4015b2:	429a      	cmp	r2, r3
  4015b4:	d21c      	bcs.n	4015f0 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4015b6:	4a1c      	ldr	r2, [pc, #112]	; (401628 <Reset_Handler+0xac>)
  4015b8:	4b1a      	ldr	r3, [pc, #104]	; (401624 <Reset_Handler+0xa8>)
  4015ba:	1ad3      	subs	r3, r2, r3
  4015bc:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4015be:	68fa      	ldr	r2, [r7, #12]
  4015c0:	687b      	ldr	r3, [r7, #4]
  4015c2:	4413      	add	r3, r2
  4015c4:	3b04      	subs	r3, #4
  4015c6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4015c8:	68ba      	ldr	r2, [r7, #8]
  4015ca:	687b      	ldr	r3, [r7, #4]
  4015cc:	4413      	add	r3, r2
  4015ce:	3b04      	subs	r3, #4
  4015d0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4015d2:	e00a      	b.n	4015ea <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4015d4:	68bb      	ldr	r3, [r7, #8]
  4015d6:	1f1a      	subs	r2, r3, #4
  4015d8:	60ba      	str	r2, [r7, #8]
  4015da:	68fa      	ldr	r2, [r7, #12]
  4015dc:	1f11      	subs	r1, r2, #4
  4015de:	60f9      	str	r1, [r7, #12]
  4015e0:	6812      	ldr	r2, [r2, #0]
  4015e2:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  4015e4:	687b      	ldr	r3, [r7, #4]
  4015e6:	3b04      	subs	r3, #4
  4015e8:	607b      	str	r3, [r7, #4]
  4015ea:	687b      	ldr	r3, [r7, #4]
  4015ec:	2b00      	cmp	r3, #0
  4015ee:	d1f1      	bne.n	4015d4 <Reset_Handler+0x58>
		}
	}
	__NOP();
  4015f0:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4015f2:	4b0e      	ldr	r3, [pc, #56]	; (40162c <Reset_Handler+0xb0>)
  4015f4:	60bb      	str	r3, [r7, #8]
  4015f6:	e004      	b.n	401602 <Reset_Handler+0x86>
		*pDest++ = 0;
  4015f8:	68bb      	ldr	r3, [r7, #8]
  4015fa:	1d1a      	adds	r2, r3, #4
  4015fc:	60ba      	str	r2, [r7, #8]
  4015fe:	2200      	movs	r2, #0
  401600:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  401602:	68bb      	ldr	r3, [r7, #8]
  401604:	4a0a      	ldr	r2, [pc, #40]	; (401630 <Reset_Handler+0xb4>)
  401606:	4293      	cmp	r3, r2
  401608:	d3f6      	bcc.n	4015f8 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40160a:	4b0a      	ldr	r3, [pc, #40]	; (401634 <Reset_Handler+0xb8>)
  40160c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40160e:	4a0a      	ldr	r2, [pc, #40]	; (401638 <Reset_Handler+0xbc>)
  401610:	68fb      	ldr	r3, [r7, #12]
  401612:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401614:	4b09      	ldr	r3, [pc, #36]	; (40163c <Reset_Handler+0xc0>)
  401616:	4798      	blx	r3

	/* Branch to main function */
	main();
  401618:	4b09      	ldr	r3, [pc, #36]	; (401640 <Reset_Handler+0xc4>)
  40161a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40161c:	e7fe      	b.n	40161c <Reset_Handler+0xa0>
  40161e:	bf00      	nop
  401620:	00404f8c 	.word	0x00404f8c
  401624:	20000000 	.word	0x20000000
  401628:	200009b0 	.word	0x200009b0
  40162c:	200009b0 	.word	0x200009b0
  401630:	20000eb8 	.word	0x20000eb8
  401634:	00400000 	.word	0x00400000
  401638:	e000ed00 	.word	0xe000ed00
  40163c:	00402149 	.word	0x00402149
  401640:	00401d05 	.word	0x00401d05

00401644 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401644:	b480      	push	{r7}
  401646:	af00      	add	r7, sp, #0
	while (1) {
  401648:	e7fe      	b.n	401648 <Dummy_Handler+0x4>
	...

0040164c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40164c:	b480      	push	{r7}
  40164e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401650:	4b5d      	ldr	r3, [pc, #372]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  401652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401654:	f003 0303 	and.w	r3, r3, #3
  401658:	2b03      	cmp	r3, #3
  40165a:	f200 8096 	bhi.w	40178a <SystemCoreClockUpdate+0x13e>
  40165e:	a201      	add	r2, pc, #4	; (adr r2, 401664 <SystemCoreClockUpdate+0x18>)
  401660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401664:	00401675 	.word	0x00401675
  401668:	00401695 	.word	0x00401695
  40166c:	004016df 	.word	0x004016df
  401670:	004016df 	.word	0x004016df
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401674:	4b55      	ldr	r3, [pc, #340]	; (4017cc <SystemCoreClockUpdate+0x180>)
  401676:	695b      	ldr	r3, [r3, #20]
  401678:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40167c:	2b00      	cmp	r3, #0
  40167e:	d004      	beq.n	40168a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401680:	4b53      	ldr	r3, [pc, #332]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401682:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401686:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401688:	e080      	b.n	40178c <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40168a:	4b51      	ldr	r3, [pc, #324]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  40168c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401690:	601a      	str	r2, [r3, #0]
		break;
  401692:	e07b      	b.n	40178c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401694:	4b4c      	ldr	r3, [pc, #304]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  401696:	6a1b      	ldr	r3, [r3, #32]
  401698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40169c:	2b00      	cmp	r3, #0
  40169e:	d003      	beq.n	4016a8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4016a0:	4b4b      	ldr	r3, [pc, #300]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4016a2:	4a4c      	ldr	r2, [pc, #304]	; (4017d4 <SystemCoreClockUpdate+0x188>)
  4016a4:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4016a6:	e071      	b.n	40178c <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016a8:	4b49      	ldr	r3, [pc, #292]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4016aa:	4a4b      	ldr	r2, [pc, #300]	; (4017d8 <SystemCoreClockUpdate+0x18c>)
  4016ac:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4016ae:	4b46      	ldr	r3, [pc, #280]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  4016b0:	6a1b      	ldr	r3, [r3, #32]
  4016b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016b6:	2b10      	cmp	r3, #16
  4016b8:	d008      	beq.n	4016cc <SystemCoreClockUpdate+0x80>
  4016ba:	2b20      	cmp	r3, #32
  4016bc:	d00a      	beq.n	4016d4 <SystemCoreClockUpdate+0x88>
  4016be:	2b00      	cmp	r3, #0
  4016c0:	d000      	beq.n	4016c4 <SystemCoreClockUpdate+0x78>
			break;
  4016c2:	e00b      	b.n	4016dc <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016c4:	4b42      	ldr	r3, [pc, #264]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4016c6:	4a44      	ldr	r2, [pc, #272]	; (4017d8 <SystemCoreClockUpdate+0x18c>)
  4016c8:	601a      	str	r2, [r3, #0]
			break;
  4016ca:	e007      	b.n	4016dc <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4016cc:	4b40      	ldr	r3, [pc, #256]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4016ce:	4a43      	ldr	r2, [pc, #268]	; (4017dc <SystemCoreClockUpdate+0x190>)
  4016d0:	601a      	str	r2, [r3, #0]
			break;
  4016d2:	e003      	b.n	4016dc <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4016d4:	4b3e      	ldr	r3, [pc, #248]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4016d6:	4a3f      	ldr	r2, [pc, #252]	; (4017d4 <SystemCoreClockUpdate+0x188>)
  4016d8:	601a      	str	r2, [r3, #0]
			break;
  4016da:	bf00      	nop
		break;
  4016dc:	e056      	b.n	40178c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4016de:	4b3a      	ldr	r3, [pc, #232]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  4016e0:	6a1b      	ldr	r3, [r3, #32]
  4016e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4016e6:	2b00      	cmp	r3, #0
  4016e8:	d003      	beq.n	4016f2 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4016ea:	4b39      	ldr	r3, [pc, #228]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4016ec:	4a39      	ldr	r2, [pc, #228]	; (4017d4 <SystemCoreClockUpdate+0x188>)
  4016ee:	601a      	str	r2, [r3, #0]
  4016f0:	e019      	b.n	401726 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016f2:	4b37      	ldr	r3, [pc, #220]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4016f4:	4a38      	ldr	r2, [pc, #224]	; (4017d8 <SystemCoreClockUpdate+0x18c>)
  4016f6:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4016f8:	4b33      	ldr	r3, [pc, #204]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  4016fa:	6a1b      	ldr	r3, [r3, #32]
  4016fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401700:	2b10      	cmp	r3, #16
  401702:	d008      	beq.n	401716 <SystemCoreClockUpdate+0xca>
  401704:	2b20      	cmp	r3, #32
  401706:	d00a      	beq.n	40171e <SystemCoreClockUpdate+0xd2>
  401708:	2b00      	cmp	r3, #0
  40170a:	d000      	beq.n	40170e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40170c:	e00b      	b.n	401726 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40170e:	4b30      	ldr	r3, [pc, #192]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401710:	4a31      	ldr	r2, [pc, #196]	; (4017d8 <SystemCoreClockUpdate+0x18c>)
  401712:	601a      	str	r2, [r3, #0]
					break;
  401714:	e007      	b.n	401726 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401716:	4b2e      	ldr	r3, [pc, #184]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401718:	4a30      	ldr	r2, [pc, #192]	; (4017dc <SystemCoreClockUpdate+0x190>)
  40171a:	601a      	str	r2, [r3, #0]
					break;
  40171c:	e003      	b.n	401726 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40171e:	4b2c      	ldr	r3, [pc, #176]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401720:	4a2c      	ldr	r2, [pc, #176]	; (4017d4 <SystemCoreClockUpdate+0x188>)
  401722:	601a      	str	r2, [r3, #0]
					break;
  401724:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401726:	4b28      	ldr	r3, [pc, #160]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  401728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40172a:	f003 0303 	and.w	r3, r3, #3
  40172e:	2b02      	cmp	r3, #2
  401730:	d115      	bne.n	40175e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401732:	4b25      	ldr	r3, [pc, #148]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  401734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401736:	0c1b      	lsrs	r3, r3, #16
  401738:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40173c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40173e:	4a24      	ldr	r2, [pc, #144]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401740:	6812      	ldr	r2, [r2, #0]
  401742:	fb02 f303 	mul.w	r3, r2, r3
  401746:	4a22      	ldr	r2, [pc, #136]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401748:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40174a:	4b1f      	ldr	r3, [pc, #124]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  40174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40174e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401750:	4a1f      	ldr	r2, [pc, #124]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401752:	6812      	ldr	r2, [r2, #0]
  401754:	fbb2 f3f3 	udiv	r3, r2, r3
  401758:	4a1d      	ldr	r2, [pc, #116]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  40175a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40175c:	e016      	b.n	40178c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40175e:	4b1a      	ldr	r3, [pc, #104]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  401760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401762:	0c1b      	lsrs	r3, r3, #16
  401764:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401768:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40176a:	4a19      	ldr	r2, [pc, #100]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  40176c:	6812      	ldr	r2, [r2, #0]
  40176e:	fb02 f303 	mul.w	r3, r2, r3
  401772:	4a17      	ldr	r2, [pc, #92]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401774:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401776:	4b14      	ldr	r3, [pc, #80]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  401778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40177a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40177c:	4a14      	ldr	r2, [pc, #80]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  40177e:	6812      	ldr	r2, [r2, #0]
  401780:	fbb2 f3f3 	udiv	r3, r2, r3
  401784:	4a12      	ldr	r2, [pc, #72]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  401786:	6013      	str	r3, [r2, #0]
		break;
  401788:	e000      	b.n	40178c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40178a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40178c:	4b0e      	ldr	r3, [pc, #56]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  40178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401790:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401794:	2b70      	cmp	r3, #112	; 0x70
  401796:	d108      	bne.n	4017aa <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401798:	4b0d      	ldr	r3, [pc, #52]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  40179a:	681b      	ldr	r3, [r3, #0]
  40179c:	4a10      	ldr	r2, [pc, #64]	; (4017e0 <SystemCoreClockUpdate+0x194>)
  40179e:	fba2 2303 	umull	r2, r3, r2, r3
  4017a2:	085b      	lsrs	r3, r3, #1
  4017a4:	4a0a      	ldr	r2, [pc, #40]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4017a6:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4017a8:	e00a      	b.n	4017c0 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4017aa:	4b07      	ldr	r3, [pc, #28]	; (4017c8 <SystemCoreClockUpdate+0x17c>)
  4017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017ae:	091b      	lsrs	r3, r3, #4
  4017b0:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4017b4:	4a06      	ldr	r2, [pc, #24]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4017b6:	6812      	ldr	r2, [r2, #0]
  4017b8:	fa22 f303 	lsr.w	r3, r2, r3
  4017bc:	4a04      	ldr	r2, [pc, #16]	; (4017d0 <SystemCoreClockUpdate+0x184>)
  4017be:	6013      	str	r3, [r2, #0]
}
  4017c0:	bf00      	nop
  4017c2:	46bd      	mov	sp, r7
  4017c4:	bc80      	pop	{r7}
  4017c6:	4770      	bx	lr
  4017c8:	400e0400 	.word	0x400e0400
  4017cc:	400e1410 	.word	0x400e1410
  4017d0:	20000000 	.word	0x20000000
  4017d4:	00b71b00 	.word	0x00b71b00
  4017d8:	003d0900 	.word	0x003d0900
  4017dc:	007a1200 	.word	0x007a1200
  4017e0:	aaaaaaab 	.word	0xaaaaaaab

004017e4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4017e4:	b480      	push	{r7}
  4017e6:	b083      	sub	sp, #12
  4017e8:	af00      	add	r7, sp, #0
  4017ea:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4017ec:	687b      	ldr	r3, [r7, #4]
  4017ee:	4a22      	ldr	r2, [pc, #136]	; (401878 <system_init_flash+0x94>)
  4017f0:	4293      	cmp	r3, r2
  4017f2:	d808      	bhi.n	401806 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4017f4:	4b21      	ldr	r3, [pc, #132]	; (40187c <system_init_flash+0x98>)
  4017f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4017fa:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4017fc:	4b20      	ldr	r3, [pc, #128]	; (401880 <system_init_flash+0x9c>)
  4017fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401802:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401804:	e033      	b.n	40186e <system_init_flash+0x8a>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401806:	687b      	ldr	r3, [r7, #4]
  401808:	4a1e      	ldr	r2, [pc, #120]	; (401884 <system_init_flash+0xa0>)
  40180a:	4293      	cmp	r3, r2
  40180c:	d806      	bhi.n	40181c <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40180e:	4b1b      	ldr	r3, [pc, #108]	; (40187c <system_init_flash+0x98>)
  401810:	4a1d      	ldr	r2, [pc, #116]	; (401888 <system_init_flash+0xa4>)
  401812:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401814:	4b1a      	ldr	r3, [pc, #104]	; (401880 <system_init_flash+0x9c>)
  401816:	4a1c      	ldr	r2, [pc, #112]	; (401888 <system_init_flash+0xa4>)
  401818:	601a      	str	r2, [r3, #0]
}
  40181a:	e028      	b.n	40186e <system_init_flash+0x8a>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40181c:	687b      	ldr	r3, [r7, #4]
  40181e:	4a1b      	ldr	r2, [pc, #108]	; (40188c <system_init_flash+0xa8>)
  401820:	4293      	cmp	r3, r2
  401822:	d806      	bhi.n	401832 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401824:	4b15      	ldr	r3, [pc, #84]	; (40187c <system_init_flash+0x98>)
  401826:	4a1a      	ldr	r2, [pc, #104]	; (401890 <system_init_flash+0xac>)
  401828:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40182a:	4b15      	ldr	r3, [pc, #84]	; (401880 <system_init_flash+0x9c>)
  40182c:	4a18      	ldr	r2, [pc, #96]	; (401890 <system_init_flash+0xac>)
  40182e:	601a      	str	r2, [r3, #0]
}
  401830:	e01d      	b.n	40186e <system_init_flash+0x8a>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401832:	687b      	ldr	r3, [r7, #4]
  401834:	4a17      	ldr	r2, [pc, #92]	; (401894 <system_init_flash+0xb0>)
  401836:	4293      	cmp	r3, r2
  401838:	d806      	bhi.n	401848 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40183a:	4b10      	ldr	r3, [pc, #64]	; (40187c <system_init_flash+0x98>)
  40183c:	4a16      	ldr	r2, [pc, #88]	; (401898 <system_init_flash+0xb4>)
  40183e:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401840:	4b0f      	ldr	r3, [pc, #60]	; (401880 <system_init_flash+0x9c>)
  401842:	4a15      	ldr	r2, [pc, #84]	; (401898 <system_init_flash+0xb4>)
  401844:	601a      	str	r2, [r3, #0]
}
  401846:	e012      	b.n	40186e <system_init_flash+0x8a>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401848:	687b      	ldr	r3, [r7, #4]
  40184a:	4a14      	ldr	r2, [pc, #80]	; (40189c <system_init_flash+0xb8>)
  40184c:	4293      	cmp	r3, r2
  40184e:	d808      	bhi.n	401862 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401850:	4b0a      	ldr	r3, [pc, #40]	; (40187c <system_init_flash+0x98>)
  401852:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401856:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401858:	4b09      	ldr	r3, [pc, #36]	; (401880 <system_init_flash+0x9c>)
  40185a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40185e:	601a      	str	r2, [r3, #0]
}
  401860:	e005      	b.n	40186e <system_init_flash+0x8a>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401862:	4b06      	ldr	r3, [pc, #24]	; (40187c <system_init_flash+0x98>)
  401864:	4a0e      	ldr	r2, [pc, #56]	; (4018a0 <system_init_flash+0xbc>)
  401866:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401868:	4b05      	ldr	r3, [pc, #20]	; (401880 <system_init_flash+0x9c>)
  40186a:	4a0d      	ldr	r2, [pc, #52]	; (4018a0 <system_init_flash+0xbc>)
  40186c:	601a      	str	r2, [r3, #0]
}
  40186e:	bf00      	nop
  401870:	370c      	adds	r7, #12
  401872:	46bd      	mov	sp, r7
  401874:	bc80      	pop	{r7}
  401876:	4770      	bx	lr
  401878:	01312cff 	.word	0x01312cff
  40187c:	400e0a00 	.word	0x400e0a00
  401880:	400e0c00 	.word	0x400e0c00
  401884:	026259ff 	.word	0x026259ff
  401888:	04000100 	.word	0x04000100
  40188c:	039386ff 	.word	0x039386ff
  401890:	04000200 	.word	0x04000200
  401894:	04c4b3ff 	.word	0x04c4b3ff
  401898:	04000300 	.word	0x04000300
  40189c:	05f5e0ff 	.word	0x05f5e0ff
  4018a0:	04000500 	.word	0x04000500

004018a4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4018a4:	b480      	push	{r7}
  4018a6:	b085      	sub	sp, #20
  4018a8:	af00      	add	r7, sp, #0
  4018aa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4018ac:	4b10      	ldr	r3, [pc, #64]	; (4018f0 <_sbrk+0x4c>)
  4018ae:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4018b0:	4b10      	ldr	r3, [pc, #64]	; (4018f4 <_sbrk+0x50>)
  4018b2:	681b      	ldr	r3, [r3, #0]
  4018b4:	2b00      	cmp	r3, #0
  4018b6:	d102      	bne.n	4018be <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4018b8:	4b0e      	ldr	r3, [pc, #56]	; (4018f4 <_sbrk+0x50>)
  4018ba:	4a0f      	ldr	r2, [pc, #60]	; (4018f8 <_sbrk+0x54>)
  4018bc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4018be:	4b0d      	ldr	r3, [pc, #52]	; (4018f4 <_sbrk+0x50>)
  4018c0:	681b      	ldr	r3, [r3, #0]
  4018c2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4018c4:	68ba      	ldr	r2, [r7, #8]
  4018c6:	687b      	ldr	r3, [r7, #4]
  4018c8:	441a      	add	r2, r3
  4018ca:	68fb      	ldr	r3, [r7, #12]
  4018cc:	429a      	cmp	r2, r3
  4018ce:	dd02      	ble.n	4018d6 <_sbrk+0x32>
		return (caddr_t) -1;	
  4018d0:	f04f 33ff 	mov.w	r3, #4294967295
  4018d4:	e006      	b.n	4018e4 <_sbrk+0x40>
	}

	heap += incr;
  4018d6:	4b07      	ldr	r3, [pc, #28]	; (4018f4 <_sbrk+0x50>)
  4018d8:	681a      	ldr	r2, [r3, #0]
  4018da:	687b      	ldr	r3, [r7, #4]
  4018dc:	4413      	add	r3, r2
  4018de:	4a05      	ldr	r2, [pc, #20]	; (4018f4 <_sbrk+0x50>)
  4018e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4018e2:	68bb      	ldr	r3, [r7, #8]
}
  4018e4:	4618      	mov	r0, r3
  4018e6:	3714      	adds	r7, #20
  4018e8:	46bd      	mov	sp, r7
  4018ea:	bc80      	pop	{r7}
  4018ec:	4770      	bx	lr
  4018ee:	bf00      	nop
  4018f0:	20027ffc 	.word	0x20027ffc
  4018f4:	20000a44 	.word	0x20000a44
  4018f8:	20003eb8 	.word	0x20003eb8

004018fc <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4018fc:	b480      	push	{r7}
  4018fe:	b083      	sub	sp, #12
  401900:	af00      	add	r7, sp, #0
  401902:	6078      	str	r0, [r7, #4]
	return -1;
  401904:	f04f 33ff 	mov.w	r3, #4294967295
}
  401908:	4618      	mov	r0, r3
  40190a:	370c      	adds	r7, #12
  40190c:	46bd      	mov	sp, r7
  40190e:	bc80      	pop	{r7}
  401910:	4770      	bx	lr

00401912 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401912:	b480      	push	{r7}
  401914:	b083      	sub	sp, #12
  401916:	af00      	add	r7, sp, #0
  401918:	6078      	str	r0, [r7, #4]
  40191a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  40191c:	683b      	ldr	r3, [r7, #0]
  40191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401922:	605a      	str	r2, [r3, #4]

	return 0;
  401924:	2300      	movs	r3, #0
}
  401926:	4618      	mov	r0, r3
  401928:	370c      	adds	r7, #12
  40192a:	46bd      	mov	sp, r7
  40192c:	bc80      	pop	{r7}
  40192e:	4770      	bx	lr

00401930 <_isatty>:

extern int _isatty(int file)
{
  401930:	b480      	push	{r7}
  401932:	b083      	sub	sp, #12
  401934:	af00      	add	r7, sp, #0
  401936:	6078      	str	r0, [r7, #4]
	return 1;
  401938:	2301      	movs	r3, #1
}
  40193a:	4618      	mov	r0, r3
  40193c:	370c      	adds	r7, #12
  40193e:	46bd      	mov	sp, r7
  401940:	bc80      	pop	{r7}
  401942:	4770      	bx	lr

00401944 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401944:	b480      	push	{r7}
  401946:	b085      	sub	sp, #20
  401948:	af00      	add	r7, sp, #0
  40194a:	60f8      	str	r0, [r7, #12]
  40194c:	60b9      	str	r1, [r7, #8]
  40194e:	607a      	str	r2, [r7, #4]
	return 0;
  401950:	2300      	movs	r3, #0
}
  401952:	4618      	mov	r0, r3
  401954:	3714      	adds	r7, #20
  401956:	46bd      	mov	sp, r7
  401958:	bc80      	pop	{r7}
  40195a:	4770      	bx	lr

0040195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40195c:	b480      	push	{r7}
  40195e:	b083      	sub	sp, #12
  401960:	af00      	add	r7, sp, #0
  401962:	4603      	mov	r3, r0
  401964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401966:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40196a:	2b00      	cmp	r3, #0
  40196c:	db0b      	blt.n	401986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40196e:	4908      	ldr	r1, [pc, #32]	; (401990 <__NVIC_EnableIRQ+0x34>)
  401970:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401974:	095b      	lsrs	r3, r3, #5
  401976:	79fa      	ldrb	r2, [r7, #7]
  401978:	f002 021f 	and.w	r2, r2, #31
  40197c:	2001      	movs	r0, #1
  40197e:	fa00 f202 	lsl.w	r2, r0, r2
  401982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  401986:	bf00      	nop
  401988:	370c      	adds	r7, #12
  40198a:	46bd      	mov	sp, r7
  40198c:	bc80      	pop	{r7}
  40198e:	4770      	bx	lr
  401990:	e000e100 	.word	0xe000e100

00401994 <osc_get_rate>:
{
  401994:	b480      	push	{r7}
  401996:	b083      	sub	sp, #12
  401998:	af00      	add	r7, sp, #0
  40199a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40199c:	687b      	ldr	r3, [r7, #4]
  40199e:	2b07      	cmp	r3, #7
  4019a0:	d825      	bhi.n	4019ee <osc_get_rate+0x5a>
  4019a2:	a201      	add	r2, pc, #4	; (adr r2, 4019a8 <osc_get_rate+0x14>)
  4019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4019a8:	004019c9 	.word	0x004019c9
  4019ac:	004019cf 	.word	0x004019cf
  4019b0:	004019d5 	.word	0x004019d5
  4019b4:	004019db 	.word	0x004019db
  4019b8:	004019df 	.word	0x004019df
  4019bc:	004019e3 	.word	0x004019e3
  4019c0:	004019e7 	.word	0x004019e7
  4019c4:	004019eb 	.word	0x004019eb
		return OSC_SLCK_32K_RC_HZ;
  4019c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4019cc:	e010      	b.n	4019f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4019ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4019d2:	e00d      	b.n	4019f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4019d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4019d8:	e00a      	b.n	4019f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4019da:	4b08      	ldr	r3, [pc, #32]	; (4019fc <osc_get_rate+0x68>)
  4019dc:	e008      	b.n	4019f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4019de:	4b08      	ldr	r3, [pc, #32]	; (401a00 <osc_get_rate+0x6c>)
  4019e0:	e006      	b.n	4019f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4019e2:	4b08      	ldr	r3, [pc, #32]	; (401a04 <osc_get_rate+0x70>)
  4019e4:	e004      	b.n	4019f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4019e6:	4b07      	ldr	r3, [pc, #28]	; (401a04 <osc_get_rate+0x70>)
  4019e8:	e002      	b.n	4019f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4019ea:	4b06      	ldr	r3, [pc, #24]	; (401a04 <osc_get_rate+0x70>)
  4019ec:	e000      	b.n	4019f0 <osc_get_rate+0x5c>
	return 0;
  4019ee:	2300      	movs	r3, #0
}
  4019f0:	4618      	mov	r0, r3
  4019f2:	370c      	adds	r7, #12
  4019f4:	46bd      	mov	sp, r7
  4019f6:	bc80      	pop	{r7}
  4019f8:	4770      	bx	lr
  4019fa:	bf00      	nop
  4019fc:	003d0900 	.word	0x003d0900
  401a00:	007a1200 	.word	0x007a1200
  401a04:	00b71b00 	.word	0x00b71b00

00401a08 <sysclk_get_main_hz>:
{
  401a08:	b580      	push	{r7, lr}
  401a0a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401a0c:	2006      	movs	r0, #6
  401a0e:	4b04      	ldr	r3, [pc, #16]	; (401a20 <sysclk_get_main_hz+0x18>)
  401a10:	4798      	blx	r3
  401a12:	4602      	mov	r2, r0
  401a14:	4613      	mov	r3, r2
  401a16:	009b      	lsls	r3, r3, #2
  401a18:	4413      	add	r3, r2
  401a1a:	009b      	lsls	r3, r3, #2
}
  401a1c:	4618      	mov	r0, r3
  401a1e:	bd80      	pop	{r7, pc}
  401a20:	00401995 	.word	0x00401995

00401a24 <sysclk_get_peripheral_hz>:
{
  401a24:	b580      	push	{r7, lr}
  401a26:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401a28:	4b02      	ldr	r3, [pc, #8]	; (401a34 <sysclk_get_peripheral_hz+0x10>)
  401a2a:	4798      	blx	r3
  401a2c:	4603      	mov	r3, r0
  401a2e:	085b      	lsrs	r3, r3, #1
}
  401a30:	4618      	mov	r0, r3
  401a32:	bd80      	pop	{r7, pc}
  401a34:	00401a09 	.word	0x00401a09

00401a38 <sysclk_enable_peripheral_clock>:
{
  401a38:	b580      	push	{r7, lr}
  401a3a:	b082      	sub	sp, #8
  401a3c:	af00      	add	r7, sp, #0
  401a3e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401a40:	6878      	ldr	r0, [r7, #4]
  401a42:	4b03      	ldr	r3, [pc, #12]	; (401a50 <sysclk_enable_peripheral_clock+0x18>)
  401a44:	4798      	blx	r3
}
  401a46:	bf00      	nop
  401a48:	3708      	adds	r7, #8
  401a4a:	46bd      	mov	sp, r7
  401a4c:	bd80      	pop	{r7, pc}
  401a4e:	bf00      	nop
  401a50:	00401125 	.word	0x00401125

00401a54 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401a54:	b580      	push	{r7, lr}
  401a56:	b08c      	sub	sp, #48	; 0x30
  401a58:	af00      	add	r7, sp, #0
  401a5a:	6078      	str	r0, [r7, #4]
  401a5c:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401a5e:	4b31      	ldr	r3, [pc, #196]	; (401b24 <usart_serial_init+0xd0>)
  401a60:	4798      	blx	r3
  401a62:	4603      	mov	r3, r0
  401a64:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401a66:	683b      	ldr	r3, [r7, #0]
  401a68:	681b      	ldr	r3, [r3, #0]
  401a6a:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401a6c:	683b      	ldr	r3, [r7, #0]
  401a6e:	689b      	ldr	r3, [r3, #8]
  401a70:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401a72:	683b      	ldr	r3, [r7, #0]
  401a74:	681b      	ldr	r3, [r3, #0]
  401a76:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401a78:	683b      	ldr	r3, [r7, #0]
  401a7a:	685b      	ldr	r3, [r3, #4]
  401a7c:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401a7e:	683b      	ldr	r3, [r7, #0]
  401a80:	689b      	ldr	r3, [r3, #8]
  401a82:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401a84:	683b      	ldr	r3, [r7, #0]
  401a86:	68db      	ldr	r3, [r3, #12]
  401a88:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401a8a:	2300      	movs	r3, #0
  401a8c:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401a8e:	687b      	ldr	r3, [r7, #4]
  401a90:	4a25      	ldr	r2, [pc, #148]	; (401b28 <usart_serial_init+0xd4>)
  401a92:	4293      	cmp	r3, r2
  401a94:	d108      	bne.n	401aa8 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401a96:	2008      	movs	r0, #8
  401a98:	4b24      	ldr	r3, [pc, #144]	; (401b2c <usart_serial_init+0xd8>)
  401a9a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401aa0:	4619      	mov	r1, r3
  401aa2:	6878      	ldr	r0, [r7, #4]
  401aa4:	4b22      	ldr	r3, [pc, #136]	; (401b30 <usart_serial_init+0xdc>)
  401aa6:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401aa8:	687b      	ldr	r3, [r7, #4]
  401aaa:	4a22      	ldr	r2, [pc, #136]	; (401b34 <usart_serial_init+0xe0>)
  401aac:	4293      	cmp	r3, r2
  401aae:	d108      	bne.n	401ac2 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401ab0:	2009      	movs	r0, #9
  401ab2:	4b1e      	ldr	r3, [pc, #120]	; (401b2c <usart_serial_init+0xd8>)
  401ab4:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401aba:	4619      	mov	r1, r3
  401abc:	6878      	ldr	r0, [r7, #4]
  401abe:	4b1c      	ldr	r3, [pc, #112]	; (401b30 <usart_serial_init+0xdc>)
  401ac0:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401ac2:	687b      	ldr	r3, [r7, #4]
  401ac4:	4a1c      	ldr	r2, [pc, #112]	; (401b38 <usart_serial_init+0xe4>)
  401ac6:	4293      	cmp	r3, r2
  401ac8:	d111      	bne.n	401aee <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401aca:	200e      	movs	r0, #14
  401acc:	4b17      	ldr	r3, [pc, #92]	; (401b2c <usart_serial_init+0xd8>)
  401ace:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401ad0:	4b14      	ldr	r3, [pc, #80]	; (401b24 <usart_serial_init+0xd0>)
  401ad2:	4798      	blx	r3
  401ad4:	4602      	mov	r2, r0
  401ad6:	f107 030c 	add.w	r3, r7, #12
  401ada:	4619      	mov	r1, r3
  401adc:	6878      	ldr	r0, [r7, #4]
  401ade:	4b17      	ldr	r3, [pc, #92]	; (401b3c <usart_serial_init+0xe8>)
  401ae0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401ae2:	6878      	ldr	r0, [r7, #4]
  401ae4:	4b16      	ldr	r3, [pc, #88]	; (401b40 <usart_serial_init+0xec>)
  401ae6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401ae8:	6878      	ldr	r0, [r7, #4]
  401aea:	4b16      	ldr	r3, [pc, #88]	; (401b44 <usart_serial_init+0xf0>)
  401aec:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401aee:	687b      	ldr	r3, [r7, #4]
  401af0:	4a15      	ldr	r2, [pc, #84]	; (401b48 <usart_serial_init+0xf4>)
  401af2:	4293      	cmp	r3, r2
  401af4:	d111      	bne.n	401b1a <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401af6:	200f      	movs	r0, #15
  401af8:	4b0c      	ldr	r3, [pc, #48]	; (401b2c <usart_serial_init+0xd8>)
  401afa:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401afc:	4b09      	ldr	r3, [pc, #36]	; (401b24 <usart_serial_init+0xd0>)
  401afe:	4798      	blx	r3
  401b00:	4602      	mov	r2, r0
  401b02:	f107 030c 	add.w	r3, r7, #12
  401b06:	4619      	mov	r1, r3
  401b08:	6878      	ldr	r0, [r7, #4]
  401b0a:	4b0c      	ldr	r3, [pc, #48]	; (401b3c <usart_serial_init+0xe8>)
  401b0c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401b0e:	6878      	ldr	r0, [r7, #4]
  401b10:	4b0b      	ldr	r3, [pc, #44]	; (401b40 <usart_serial_init+0xec>)
  401b12:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401b14:	6878      	ldr	r0, [r7, #4]
  401b16:	4b0b      	ldr	r3, [pc, #44]	; (401b44 <usart_serial_init+0xf0>)
  401b18:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401b1a:	bf00      	nop
  401b1c:	3730      	adds	r7, #48	; 0x30
  401b1e:	46bd      	mov	sp, r7
  401b20:	bd80      	pop	{r7, pc}
  401b22:	bf00      	nop
  401b24:	00401a25 	.word	0x00401a25
  401b28:	400e0600 	.word	0x400e0600
  401b2c:	00401a39 	.word	0x00401a39
  401b30:	004011a5 	.word	0x004011a5
  401b34:	400e0800 	.word	0x400e0800
  401b38:	40024000 	.word	0x40024000
  401b3c:	0040134d 	.word	0x0040134d
  401b40:	004013d1 	.word	0x004013d1
  401b44:	00401401 	.word	0x00401401
  401b48:	40028000 	.word	0x40028000

00401b4c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401b4c:	b580      	push	{r7, lr}
  401b4e:	b082      	sub	sp, #8
  401b50:	af00      	add	r7, sp, #0
  401b52:	6078      	str	r0, [r7, #4]
  401b54:	460b      	mov	r3, r1
  401b56:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401b58:	687b      	ldr	r3, [r7, #4]
  401b5a:	4a20      	ldr	r2, [pc, #128]	; (401bdc <usart_serial_putchar+0x90>)
  401b5c:	4293      	cmp	r3, r2
  401b5e:	d10a      	bne.n	401b76 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401b60:	bf00      	nop
  401b62:	78fb      	ldrb	r3, [r7, #3]
  401b64:	4619      	mov	r1, r3
  401b66:	6878      	ldr	r0, [r7, #4]
  401b68:	4b1d      	ldr	r3, [pc, #116]	; (401be0 <usart_serial_putchar+0x94>)
  401b6a:	4798      	blx	r3
  401b6c:	4603      	mov	r3, r0
  401b6e:	2b00      	cmp	r3, #0
  401b70:	d1f7      	bne.n	401b62 <usart_serial_putchar+0x16>
		return 1;
  401b72:	2301      	movs	r3, #1
  401b74:	e02d      	b.n	401bd2 <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401b76:	687b      	ldr	r3, [r7, #4]
  401b78:	4a1a      	ldr	r2, [pc, #104]	; (401be4 <usart_serial_putchar+0x98>)
  401b7a:	4293      	cmp	r3, r2
  401b7c:	d10a      	bne.n	401b94 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401b7e:	bf00      	nop
  401b80:	78fb      	ldrb	r3, [r7, #3]
  401b82:	4619      	mov	r1, r3
  401b84:	6878      	ldr	r0, [r7, #4]
  401b86:	4b16      	ldr	r3, [pc, #88]	; (401be0 <usart_serial_putchar+0x94>)
  401b88:	4798      	blx	r3
  401b8a:	4603      	mov	r3, r0
  401b8c:	2b00      	cmp	r3, #0
  401b8e:	d1f7      	bne.n	401b80 <usart_serial_putchar+0x34>
		return 1;
  401b90:	2301      	movs	r3, #1
  401b92:	e01e      	b.n	401bd2 <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401b94:	687b      	ldr	r3, [r7, #4]
  401b96:	4a14      	ldr	r2, [pc, #80]	; (401be8 <usart_serial_putchar+0x9c>)
  401b98:	4293      	cmp	r3, r2
  401b9a:	d10a      	bne.n	401bb2 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  401b9c:	bf00      	nop
  401b9e:	78fb      	ldrb	r3, [r7, #3]
  401ba0:	4619      	mov	r1, r3
  401ba2:	6878      	ldr	r0, [r7, #4]
  401ba4:	4b11      	ldr	r3, [pc, #68]	; (401bec <usart_serial_putchar+0xa0>)
  401ba6:	4798      	blx	r3
  401ba8:	4603      	mov	r3, r0
  401baa:	2b00      	cmp	r3, #0
  401bac:	d1f7      	bne.n	401b9e <usart_serial_putchar+0x52>
		return 1;
  401bae:	2301      	movs	r3, #1
  401bb0:	e00f      	b.n	401bd2 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401bb2:	687b      	ldr	r3, [r7, #4]
  401bb4:	4a0e      	ldr	r2, [pc, #56]	; (401bf0 <usart_serial_putchar+0xa4>)
  401bb6:	4293      	cmp	r3, r2
  401bb8:	d10a      	bne.n	401bd0 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  401bba:	bf00      	nop
  401bbc:	78fb      	ldrb	r3, [r7, #3]
  401bbe:	4619      	mov	r1, r3
  401bc0:	6878      	ldr	r0, [r7, #4]
  401bc2:	4b0a      	ldr	r3, [pc, #40]	; (401bec <usart_serial_putchar+0xa0>)
  401bc4:	4798      	blx	r3
  401bc6:	4603      	mov	r3, r0
  401bc8:	2b00      	cmp	r3, #0
  401bca:	d1f7      	bne.n	401bbc <usart_serial_putchar+0x70>
		return 1;
  401bcc:	2301      	movs	r3, #1
  401bce:	e000      	b.n	401bd2 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401bd0:	2300      	movs	r3, #0
}
  401bd2:	4618      	mov	r0, r3
  401bd4:	3708      	adds	r7, #8
  401bd6:	46bd      	mov	sp, r7
  401bd8:	bd80      	pop	{r7, pc}
  401bda:	bf00      	nop
  401bdc:	400e0600 	.word	0x400e0600
  401be0:	00401205 	.word	0x00401205
  401be4:	400e0800 	.word	0x400e0800
  401be8:	40024000 	.word	0x40024000
  401bec:	004014af 	.word	0x004014af
  401bf0:	40028000 	.word	0x40028000

00401bf4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401bf4:	b580      	push	{r7, lr}
  401bf6:	b084      	sub	sp, #16
  401bf8:	af00      	add	r7, sp, #0
  401bfa:	6078      	str	r0, [r7, #4]
  401bfc:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401bfe:	2300      	movs	r3, #0
  401c00:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c02:	687b      	ldr	r3, [r7, #4]
  401c04:	4a1f      	ldr	r2, [pc, #124]	; (401c84 <usart_serial_getchar+0x90>)
  401c06:	4293      	cmp	r3, r2
  401c08:	d107      	bne.n	401c1a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401c0a:	bf00      	nop
  401c0c:	6839      	ldr	r1, [r7, #0]
  401c0e:	6878      	ldr	r0, [r7, #4]
  401c10:	4b1d      	ldr	r3, [pc, #116]	; (401c88 <usart_serial_getchar+0x94>)
  401c12:	4798      	blx	r3
  401c14:	4603      	mov	r3, r0
  401c16:	2b00      	cmp	r3, #0
  401c18:	d1f8      	bne.n	401c0c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c1a:	687b      	ldr	r3, [r7, #4]
  401c1c:	4a1b      	ldr	r2, [pc, #108]	; (401c8c <usart_serial_getchar+0x98>)
  401c1e:	4293      	cmp	r3, r2
  401c20:	d107      	bne.n	401c32 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401c22:	bf00      	nop
  401c24:	6839      	ldr	r1, [r7, #0]
  401c26:	6878      	ldr	r0, [r7, #4]
  401c28:	4b17      	ldr	r3, [pc, #92]	; (401c88 <usart_serial_getchar+0x94>)
  401c2a:	4798      	blx	r3
  401c2c:	4603      	mov	r3, r0
  401c2e:	2b00      	cmp	r3, #0
  401c30:	d1f8      	bne.n	401c24 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401c32:	687b      	ldr	r3, [r7, #4]
  401c34:	4a16      	ldr	r2, [pc, #88]	; (401c90 <usart_serial_getchar+0x9c>)
  401c36:	4293      	cmp	r3, r2
  401c38:	d10d      	bne.n	401c56 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  401c3a:	bf00      	nop
  401c3c:	f107 030c 	add.w	r3, r7, #12
  401c40:	4619      	mov	r1, r3
  401c42:	6878      	ldr	r0, [r7, #4]
  401c44:	4b13      	ldr	r3, [pc, #76]	; (401c94 <usart_serial_getchar+0xa0>)
  401c46:	4798      	blx	r3
  401c48:	4603      	mov	r3, r0
  401c4a:	2b00      	cmp	r3, #0
  401c4c:	d1f6      	bne.n	401c3c <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  401c4e:	68fb      	ldr	r3, [r7, #12]
  401c50:	b2da      	uxtb	r2, r3
  401c52:	683b      	ldr	r3, [r7, #0]
  401c54:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401c56:	687b      	ldr	r3, [r7, #4]
  401c58:	4a0f      	ldr	r2, [pc, #60]	; (401c98 <usart_serial_getchar+0xa4>)
  401c5a:	4293      	cmp	r3, r2
  401c5c:	d10d      	bne.n	401c7a <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  401c5e:	bf00      	nop
  401c60:	f107 030c 	add.w	r3, r7, #12
  401c64:	4619      	mov	r1, r3
  401c66:	6878      	ldr	r0, [r7, #4]
  401c68:	4b0a      	ldr	r3, [pc, #40]	; (401c94 <usart_serial_getchar+0xa0>)
  401c6a:	4798      	blx	r3
  401c6c:	4603      	mov	r3, r0
  401c6e:	2b00      	cmp	r3, #0
  401c70:	d1f6      	bne.n	401c60 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  401c72:	68fb      	ldr	r3, [r7, #12]
  401c74:	b2da      	uxtb	r2, r3
  401c76:	683b      	ldr	r3, [r7, #0]
  401c78:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401c7a:	bf00      	nop
  401c7c:	3710      	adds	r7, #16
  401c7e:	46bd      	mov	sp, r7
  401c80:	bd80      	pop	{r7, pc}
  401c82:	bf00      	nop
  401c84:	400e0600 	.word	0x400e0600
  401c88:	00401233 	.word	0x00401233
  401c8c:	400e0800 	.word	0x400e0800
  401c90:	40024000 	.word	0x40024000
  401c94:	004014df 	.word	0x004014df
  401c98:	40028000 	.word	0x40028000

00401c9c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401c9c:	b580      	push	{r7, lr}
  401c9e:	b082      	sub	sp, #8
  401ca0:	af00      	add	r7, sp, #0
  401ca2:	6078      	str	r0, [r7, #4]
  401ca4:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401ca6:	4a0f      	ldr	r2, [pc, #60]	; (401ce4 <stdio_serial_init+0x48>)
  401ca8:	687b      	ldr	r3, [r7, #4]
  401caa:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401cac:	4b0e      	ldr	r3, [pc, #56]	; (401ce8 <stdio_serial_init+0x4c>)
  401cae:	4a0f      	ldr	r2, [pc, #60]	; (401cec <stdio_serial_init+0x50>)
  401cb0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401cb2:	4b0f      	ldr	r3, [pc, #60]	; (401cf0 <stdio_serial_init+0x54>)
  401cb4:	4a0f      	ldr	r2, [pc, #60]	; (401cf4 <stdio_serial_init+0x58>)
  401cb6:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401cb8:	6839      	ldr	r1, [r7, #0]
  401cba:	6878      	ldr	r0, [r7, #4]
  401cbc:	4b0e      	ldr	r3, [pc, #56]	; (401cf8 <stdio_serial_init+0x5c>)
  401cbe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401cc0:	4b0e      	ldr	r3, [pc, #56]	; (401cfc <stdio_serial_init+0x60>)
  401cc2:	681b      	ldr	r3, [r3, #0]
  401cc4:	689b      	ldr	r3, [r3, #8]
  401cc6:	2100      	movs	r1, #0
  401cc8:	4618      	mov	r0, r3
  401cca:	4b0d      	ldr	r3, [pc, #52]	; (401d00 <stdio_serial_init+0x64>)
  401ccc:	4798      	blx	r3
	setbuf(stdin, NULL);
  401cce:	4b0b      	ldr	r3, [pc, #44]	; (401cfc <stdio_serial_init+0x60>)
  401cd0:	681b      	ldr	r3, [r3, #0]
  401cd2:	685b      	ldr	r3, [r3, #4]
  401cd4:	2100      	movs	r1, #0
  401cd6:	4618      	mov	r0, r3
  401cd8:	4b09      	ldr	r3, [pc, #36]	; (401d00 <stdio_serial_init+0x64>)
  401cda:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401cdc:	bf00      	nop
  401cde:	3708      	adds	r7, #8
  401ce0:	46bd      	mov	sp, r7
  401ce2:	bd80      	pop	{r7, pc}
  401ce4:	20000a84 	.word	0x20000a84
  401ce8:	20000a80 	.word	0x20000a80
  401cec:	00401b4d 	.word	0x00401b4d
  401cf0:	20000a7c 	.word	0x20000a7c
  401cf4:	00401bf5 	.word	0x00401bf5
  401cf8:	00401a55 	.word	0x00401a55
  401cfc:	20000004 	.word	0x20000004
  401d00:	00402809 	.word	0x00402809

00401d04 <main>:

static void Rx_Data_Clear(char *buffer,uint32_t length);
static void configure_console(void);

int main(void)
{
  401d04:	b580      	push	{r7, lr}
  401d06:	af00      	add	r7, sp, #0
	/* Initialize the board. */
	sysclk_init();
  401d08:	4b0e      	ldr	r3, [pc, #56]	; (401d44 <main+0x40>)
  401d0a:	4798      	blx	r3
	board_init();
  401d0c:	4b0e      	ldr	r3, [pc, #56]	; (401d48 <main+0x44>)
  401d0e:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
  401d10:	4b0e      	ldr	r3, [pc, #56]	; (401d4c <main+0x48>)
  401d12:	4798      	blx	r3

	printf("Main function address: %p\n", &main);
  401d14:	490e      	ldr	r1, [pc, #56]	; (401d50 <main+0x4c>)
  401d16:	480f      	ldr	r0, [pc, #60]	; (401d54 <main+0x50>)
  401d18:	4b0f      	ldr	r3, [pc, #60]	; (401d58 <main+0x54>)
  401d1a:	4798      	blx	r3
	while(1)
	{
		if (rx_data_length != 0) 
  401d1c:	4b0f      	ldr	r3, [pc, #60]	; (401d5c <main+0x58>)
  401d1e:	681b      	ldr	r3, [r3, #0]
  401d20:	2b00      	cmp	r3, #0
  401d22:	d0fb      	beq.n	401d1c <main+0x18>
		{
            printf("Received: %s\r\n", rx_data_buffer); // 수신된 문자 출력
  401d24:	490e      	ldr	r1, [pc, #56]	; (401d60 <main+0x5c>)
  401d26:	480f      	ldr	r0, [pc, #60]	; (401d64 <main+0x60>)
  401d28:	4b0b      	ldr	r3, [pc, #44]	; (401d58 <main+0x54>)
  401d2a:	4798      	blx	r3
			Rx_Data_Clear(rx_data_buffer,strlen(rx_data_buffer));
  401d2c:	480c      	ldr	r0, [pc, #48]	; (401d60 <main+0x5c>)
  401d2e:	4b0e      	ldr	r3, [pc, #56]	; (401d68 <main+0x64>)
  401d30:	4798      	blx	r3
  401d32:	4603      	mov	r3, r0
  401d34:	4619      	mov	r1, r3
  401d36:	480a      	ldr	r0, [pc, #40]	; (401d60 <main+0x5c>)
  401d38:	4b0c      	ldr	r3, [pc, #48]	; (401d6c <main+0x68>)
  401d3a:	4798      	blx	r3
            rx_data_length = 0; // 문자 저장 변수 초기화
  401d3c:	4b07      	ldr	r3, [pc, #28]	; (401d5c <main+0x58>)
  401d3e:	2200      	movs	r2, #0
  401d40:	601a      	str	r2, [r3, #0]
		if (rx_data_length != 0) 
  401d42:	e7eb      	b.n	401d1c <main+0x18>
  401d44:	00400421 	.word	0x00400421
  401d48:	00400799 	.word	0x00400799
  401d4c:	00401db9 	.word	0x00401db9
  401d50:	00401d05 	.word	0x00401d05
  401d54:	00404dbc 	.word	0x00404dbc
  401d58:	00402199 	.word	0x00402199
  401d5c:	20000a8c 	.word	0x20000a8c
  401d60:	20000a90 	.word	0x20000a90
  401d64:	00404dd8 	.word	0x00404dd8
  401d68:	004029c1 	.word	0x004029c1
  401d6c:	00401e09 	.word	0x00401e09

00401d70 <UART1_Handler>:
        }
	}
}

void UART1_Handler(void)
{
  401d70:	b580      	push	{r7, lr}
  401d72:	af00      	add	r7, sp, #0
    if (usart_get_interrupt_mask(UART1) & US_IER_RXRDY) 
  401d74:	480b      	ldr	r0, [pc, #44]	; (401da4 <UART1_Handler+0x34>)
  401d76:	4b0c      	ldr	r3, [pc, #48]	; (401da8 <UART1_Handler+0x38>)
  401d78:	4798      	blx	r3
  401d7a:	4603      	mov	r3, r0
  401d7c:	f003 0301 	and.w	r3, r3, #1
  401d80:	2b00      	cmp	r3, #0
  401d82:	d00c      	beq.n	401d9e <UART1_Handler+0x2e>
	{
        usart_getchar(UART1,&rx_data_buffer[rx_data_length]); // ?�신??문잝 ?�??
  401d84:	4b09      	ldr	r3, [pc, #36]	; (401dac <UART1_Handler+0x3c>)
  401d86:	681b      	ldr	r3, [r3, #0]
  401d88:	4a09      	ldr	r2, [pc, #36]	; (401db0 <UART1_Handler+0x40>)
  401d8a:	4413      	add	r3, r2
  401d8c:	4619      	mov	r1, r3
  401d8e:	4805      	ldr	r0, [pc, #20]	; (401da4 <UART1_Handler+0x34>)
  401d90:	4b08      	ldr	r3, [pc, #32]	; (401db4 <UART1_Handler+0x44>)
  401d92:	4798      	blx	r3
		rx_data_length++;
  401d94:	4b05      	ldr	r3, [pc, #20]	; (401dac <UART1_Handler+0x3c>)
  401d96:	681b      	ldr	r3, [r3, #0]
  401d98:	3301      	adds	r3, #1
  401d9a:	4a04      	ldr	r2, [pc, #16]	; (401dac <UART1_Handler+0x3c>)
  401d9c:	6013      	str	r3, [r2, #0]
    }
}
  401d9e:	bf00      	nop
  401da0:	bd80      	pop	{r7, pc}
  401da2:	bf00      	nop
  401da4:	400e0800 	.word	0x400e0800
  401da8:	0040144b 	.word	0x0040144b
  401dac:	20000a8c 	.word	0x20000a8c
  401db0:	20000a90 	.word	0x20000a90
  401db4:	00401511 	.word	0x00401511

00401db8 <configure_console>:

static void configure_console(void)
{
  401db8:	b590      	push	{r4, r7, lr}
  401dba:	b085      	sub	sp, #20
  401dbc:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = 
  401dbe:	4b0c      	ldr	r3, [pc, #48]	; (401df0 <configure_console+0x38>)
  401dc0:	463c      	mov	r4, r7
  401dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype =	CONF_UART_PARITY,
		.stopbits =		CONF_UART_STOP_BITS,
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(ID_UART1);
  401dc8:	2009      	movs	r0, #9
  401dca:	4b0a      	ldr	r3, [pc, #40]	; (401df4 <configure_console+0x3c>)
  401dcc:	4798      	blx	r3
	stdio_serial_init(UART1, &uart_serial_options);
  401dce:	463b      	mov	r3, r7
  401dd0:	4619      	mov	r1, r3
  401dd2:	4809      	ldr	r0, [pc, #36]	; (401df8 <configure_console+0x40>)
  401dd4:	4b09      	ldr	r3, [pc, #36]	; (401dfc <configure_console+0x44>)
  401dd6:	4798      	blx	r3
	usart_enable_interrupt(UART1, US_IER_RXRDY); // UART RX 인터럽트 활성화
  401dd8:	2101      	movs	r1, #1
  401dda:	4807      	ldr	r0, [pc, #28]	; (401df8 <configure_console+0x40>)
  401ddc:	4b08      	ldr	r3, [pc, #32]	; (401e00 <configure_console+0x48>)
  401dde:	4798      	blx	r3
    NVIC_EnableIRQ(UART1_IRQn); // 전체 인터럽트 활성화
  401de0:	2009      	movs	r0, #9
  401de2:	4b08      	ldr	r3, [pc, #32]	; (401e04 <configure_console+0x4c>)
  401de4:	4798      	blx	r3
}
  401de6:	bf00      	nop
  401de8:	3714      	adds	r7, #20
  401dea:	46bd      	mov	sp, r7
  401dec:	bd90      	pop	{r4, r7, pc}
  401dee:	bf00      	nop
  401df0:	00404de8 	.word	0x00404de8
  401df4:	00401a39 	.word	0x00401a39
  401df8:	400e0800 	.word	0x400e0800
  401dfc:	00401c9d 	.word	0x00401c9d
  401e00:	00401431 	.word	0x00401431
  401e04:	0040195d 	.word	0x0040195d

00401e08 <Rx_Data_Clear>:

static void Rx_Data_Clear(char *buffer,uint32_t length)
{
  401e08:	b480      	push	{r7}
  401e0a:	b085      	sub	sp, #20
  401e0c:	af00      	add	r7, sp, #0
  401e0e:	6078      	str	r0, [r7, #4]
  401e10:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < length; i++)
  401e12:	2300      	movs	r3, #0
  401e14:	60fb      	str	r3, [r7, #12]
  401e16:	e005      	b.n	401e24 <Rx_Data_Clear+0x1c>
	{
		*buffer = 0;
  401e18:	687b      	ldr	r3, [r7, #4]
  401e1a:	2200      	movs	r2, #0
  401e1c:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < length; i++)
  401e1e:	68fb      	ldr	r3, [r7, #12]
  401e20:	3301      	adds	r3, #1
  401e22:	60fb      	str	r3, [r7, #12]
  401e24:	68fa      	ldr	r2, [r7, #12]
  401e26:	683b      	ldr	r3, [r7, #0]
  401e28:	429a      	cmp	r2, r3
  401e2a:	d3f5      	bcc.n	401e18 <Rx_Data_Clear+0x10>
	}
  401e2c:	bf00      	nop
  401e2e:	3714      	adds	r7, #20
  401e30:	46bd      	mov	sp, r7
  401e32:	bc80      	pop	{r7}
  401e34:	4770      	bx	lr
	...

00401e38 <__aeabi_uldivmod>:
  401e38:	b953      	cbnz	r3, 401e50 <__aeabi_uldivmod+0x18>
  401e3a:	b94a      	cbnz	r2, 401e50 <__aeabi_uldivmod+0x18>
  401e3c:	2900      	cmp	r1, #0
  401e3e:	bf08      	it	eq
  401e40:	2800      	cmpeq	r0, #0
  401e42:	bf1c      	itt	ne
  401e44:	f04f 31ff 	movne.w	r1, #4294967295
  401e48:	f04f 30ff 	movne.w	r0, #4294967295
  401e4c:	f000 b97a 	b.w	402144 <__aeabi_idiv0>
  401e50:	f1ad 0c08 	sub.w	ip, sp, #8
  401e54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401e58:	f000 f806 	bl	401e68 <__udivmoddi4>
  401e5c:	f8dd e004 	ldr.w	lr, [sp, #4]
  401e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401e64:	b004      	add	sp, #16
  401e66:	4770      	bx	lr

00401e68 <__udivmoddi4>:
  401e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e6c:	468c      	mov	ip, r1
  401e6e:	460d      	mov	r5, r1
  401e70:	4604      	mov	r4, r0
  401e72:	9e08      	ldr	r6, [sp, #32]
  401e74:	2b00      	cmp	r3, #0
  401e76:	d151      	bne.n	401f1c <__udivmoddi4+0xb4>
  401e78:	428a      	cmp	r2, r1
  401e7a:	4617      	mov	r7, r2
  401e7c:	d96d      	bls.n	401f5a <__udivmoddi4+0xf2>
  401e7e:	fab2 fe82 	clz	lr, r2
  401e82:	f1be 0f00 	cmp.w	lr, #0
  401e86:	d00b      	beq.n	401ea0 <__udivmoddi4+0x38>
  401e88:	f1ce 0c20 	rsb	ip, lr, #32
  401e8c:	fa01 f50e 	lsl.w	r5, r1, lr
  401e90:	fa20 fc0c 	lsr.w	ip, r0, ip
  401e94:	fa02 f70e 	lsl.w	r7, r2, lr
  401e98:	ea4c 0c05 	orr.w	ip, ip, r5
  401e9c:	fa00 f40e 	lsl.w	r4, r0, lr
  401ea0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401ea4:	0c25      	lsrs	r5, r4, #16
  401ea6:	fbbc f8fa 	udiv	r8, ip, sl
  401eaa:	fa1f f987 	uxth.w	r9, r7
  401eae:	fb0a cc18 	mls	ip, sl, r8, ip
  401eb2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401eb6:	fb08 f309 	mul.w	r3, r8, r9
  401eba:	42ab      	cmp	r3, r5
  401ebc:	d90a      	bls.n	401ed4 <__udivmoddi4+0x6c>
  401ebe:	19ed      	adds	r5, r5, r7
  401ec0:	f108 32ff 	add.w	r2, r8, #4294967295
  401ec4:	f080 8123 	bcs.w	40210e <__udivmoddi4+0x2a6>
  401ec8:	42ab      	cmp	r3, r5
  401eca:	f240 8120 	bls.w	40210e <__udivmoddi4+0x2a6>
  401ece:	f1a8 0802 	sub.w	r8, r8, #2
  401ed2:	443d      	add	r5, r7
  401ed4:	1aed      	subs	r5, r5, r3
  401ed6:	b2a4      	uxth	r4, r4
  401ed8:	fbb5 f0fa 	udiv	r0, r5, sl
  401edc:	fb0a 5510 	mls	r5, sl, r0, r5
  401ee0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401ee4:	fb00 f909 	mul.w	r9, r0, r9
  401ee8:	45a1      	cmp	r9, r4
  401eea:	d909      	bls.n	401f00 <__udivmoddi4+0x98>
  401eec:	19e4      	adds	r4, r4, r7
  401eee:	f100 33ff 	add.w	r3, r0, #4294967295
  401ef2:	f080 810a 	bcs.w	40210a <__udivmoddi4+0x2a2>
  401ef6:	45a1      	cmp	r9, r4
  401ef8:	f240 8107 	bls.w	40210a <__udivmoddi4+0x2a2>
  401efc:	3802      	subs	r0, #2
  401efe:	443c      	add	r4, r7
  401f00:	eba4 0409 	sub.w	r4, r4, r9
  401f04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401f08:	2100      	movs	r1, #0
  401f0a:	2e00      	cmp	r6, #0
  401f0c:	d061      	beq.n	401fd2 <__udivmoddi4+0x16a>
  401f0e:	fa24 f40e 	lsr.w	r4, r4, lr
  401f12:	2300      	movs	r3, #0
  401f14:	6034      	str	r4, [r6, #0]
  401f16:	6073      	str	r3, [r6, #4]
  401f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f1c:	428b      	cmp	r3, r1
  401f1e:	d907      	bls.n	401f30 <__udivmoddi4+0xc8>
  401f20:	2e00      	cmp	r6, #0
  401f22:	d054      	beq.n	401fce <__udivmoddi4+0x166>
  401f24:	2100      	movs	r1, #0
  401f26:	e886 0021 	stmia.w	r6, {r0, r5}
  401f2a:	4608      	mov	r0, r1
  401f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f30:	fab3 f183 	clz	r1, r3
  401f34:	2900      	cmp	r1, #0
  401f36:	f040 808e 	bne.w	402056 <__udivmoddi4+0x1ee>
  401f3a:	42ab      	cmp	r3, r5
  401f3c:	d302      	bcc.n	401f44 <__udivmoddi4+0xdc>
  401f3e:	4282      	cmp	r2, r0
  401f40:	f200 80fa 	bhi.w	402138 <__udivmoddi4+0x2d0>
  401f44:	1a84      	subs	r4, r0, r2
  401f46:	eb65 0503 	sbc.w	r5, r5, r3
  401f4a:	2001      	movs	r0, #1
  401f4c:	46ac      	mov	ip, r5
  401f4e:	2e00      	cmp	r6, #0
  401f50:	d03f      	beq.n	401fd2 <__udivmoddi4+0x16a>
  401f52:	e886 1010 	stmia.w	r6, {r4, ip}
  401f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f5a:	b912      	cbnz	r2, 401f62 <__udivmoddi4+0xfa>
  401f5c:	2701      	movs	r7, #1
  401f5e:	fbb7 f7f2 	udiv	r7, r7, r2
  401f62:	fab7 fe87 	clz	lr, r7
  401f66:	f1be 0f00 	cmp.w	lr, #0
  401f6a:	d134      	bne.n	401fd6 <__udivmoddi4+0x16e>
  401f6c:	1beb      	subs	r3, r5, r7
  401f6e:	0c3a      	lsrs	r2, r7, #16
  401f70:	fa1f fc87 	uxth.w	ip, r7
  401f74:	2101      	movs	r1, #1
  401f76:	fbb3 f8f2 	udiv	r8, r3, r2
  401f7a:	0c25      	lsrs	r5, r4, #16
  401f7c:	fb02 3318 	mls	r3, r2, r8, r3
  401f80:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401f84:	fb0c f308 	mul.w	r3, ip, r8
  401f88:	42ab      	cmp	r3, r5
  401f8a:	d907      	bls.n	401f9c <__udivmoddi4+0x134>
  401f8c:	19ed      	adds	r5, r5, r7
  401f8e:	f108 30ff 	add.w	r0, r8, #4294967295
  401f92:	d202      	bcs.n	401f9a <__udivmoddi4+0x132>
  401f94:	42ab      	cmp	r3, r5
  401f96:	f200 80d1 	bhi.w	40213c <__udivmoddi4+0x2d4>
  401f9a:	4680      	mov	r8, r0
  401f9c:	1aed      	subs	r5, r5, r3
  401f9e:	b2a3      	uxth	r3, r4
  401fa0:	fbb5 f0f2 	udiv	r0, r5, r2
  401fa4:	fb02 5510 	mls	r5, r2, r0, r5
  401fa8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401fac:	fb0c fc00 	mul.w	ip, ip, r0
  401fb0:	45a4      	cmp	ip, r4
  401fb2:	d907      	bls.n	401fc4 <__udivmoddi4+0x15c>
  401fb4:	19e4      	adds	r4, r4, r7
  401fb6:	f100 33ff 	add.w	r3, r0, #4294967295
  401fba:	d202      	bcs.n	401fc2 <__udivmoddi4+0x15a>
  401fbc:	45a4      	cmp	ip, r4
  401fbe:	f200 80b8 	bhi.w	402132 <__udivmoddi4+0x2ca>
  401fc2:	4618      	mov	r0, r3
  401fc4:	eba4 040c 	sub.w	r4, r4, ip
  401fc8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401fcc:	e79d      	b.n	401f0a <__udivmoddi4+0xa2>
  401fce:	4631      	mov	r1, r6
  401fd0:	4630      	mov	r0, r6
  401fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401fd6:	f1ce 0420 	rsb	r4, lr, #32
  401fda:	fa05 f30e 	lsl.w	r3, r5, lr
  401fde:	fa07 f70e 	lsl.w	r7, r7, lr
  401fe2:	fa20 f804 	lsr.w	r8, r0, r4
  401fe6:	0c3a      	lsrs	r2, r7, #16
  401fe8:	fa25 f404 	lsr.w	r4, r5, r4
  401fec:	ea48 0803 	orr.w	r8, r8, r3
  401ff0:	fbb4 f1f2 	udiv	r1, r4, r2
  401ff4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401ff8:	fb02 4411 	mls	r4, r2, r1, r4
  401ffc:	fa1f fc87 	uxth.w	ip, r7
  402000:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402004:	fb01 f30c 	mul.w	r3, r1, ip
  402008:	42ab      	cmp	r3, r5
  40200a:	fa00 f40e 	lsl.w	r4, r0, lr
  40200e:	d909      	bls.n	402024 <__udivmoddi4+0x1bc>
  402010:	19ed      	adds	r5, r5, r7
  402012:	f101 30ff 	add.w	r0, r1, #4294967295
  402016:	f080 808a 	bcs.w	40212e <__udivmoddi4+0x2c6>
  40201a:	42ab      	cmp	r3, r5
  40201c:	f240 8087 	bls.w	40212e <__udivmoddi4+0x2c6>
  402020:	3902      	subs	r1, #2
  402022:	443d      	add	r5, r7
  402024:	1aeb      	subs	r3, r5, r3
  402026:	fa1f f588 	uxth.w	r5, r8
  40202a:	fbb3 f0f2 	udiv	r0, r3, r2
  40202e:	fb02 3310 	mls	r3, r2, r0, r3
  402032:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402036:	fb00 f30c 	mul.w	r3, r0, ip
  40203a:	42ab      	cmp	r3, r5
  40203c:	d907      	bls.n	40204e <__udivmoddi4+0x1e6>
  40203e:	19ed      	adds	r5, r5, r7
  402040:	f100 38ff 	add.w	r8, r0, #4294967295
  402044:	d26f      	bcs.n	402126 <__udivmoddi4+0x2be>
  402046:	42ab      	cmp	r3, r5
  402048:	d96d      	bls.n	402126 <__udivmoddi4+0x2be>
  40204a:	3802      	subs	r0, #2
  40204c:	443d      	add	r5, r7
  40204e:	1aeb      	subs	r3, r5, r3
  402050:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402054:	e78f      	b.n	401f76 <__udivmoddi4+0x10e>
  402056:	f1c1 0720 	rsb	r7, r1, #32
  40205a:	fa22 f807 	lsr.w	r8, r2, r7
  40205e:	408b      	lsls	r3, r1
  402060:	fa05 f401 	lsl.w	r4, r5, r1
  402064:	ea48 0303 	orr.w	r3, r8, r3
  402068:	fa20 fe07 	lsr.w	lr, r0, r7
  40206c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402070:	40fd      	lsrs	r5, r7
  402072:	ea4e 0e04 	orr.w	lr, lr, r4
  402076:	fbb5 f9fc 	udiv	r9, r5, ip
  40207a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40207e:	fb0c 5519 	mls	r5, ip, r9, r5
  402082:	fa1f f883 	uxth.w	r8, r3
  402086:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40208a:	fb09 f408 	mul.w	r4, r9, r8
  40208e:	42ac      	cmp	r4, r5
  402090:	fa02 f201 	lsl.w	r2, r2, r1
  402094:	fa00 fa01 	lsl.w	sl, r0, r1
  402098:	d908      	bls.n	4020ac <__udivmoddi4+0x244>
  40209a:	18ed      	adds	r5, r5, r3
  40209c:	f109 30ff 	add.w	r0, r9, #4294967295
  4020a0:	d243      	bcs.n	40212a <__udivmoddi4+0x2c2>
  4020a2:	42ac      	cmp	r4, r5
  4020a4:	d941      	bls.n	40212a <__udivmoddi4+0x2c2>
  4020a6:	f1a9 0902 	sub.w	r9, r9, #2
  4020aa:	441d      	add	r5, r3
  4020ac:	1b2d      	subs	r5, r5, r4
  4020ae:	fa1f fe8e 	uxth.w	lr, lr
  4020b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4020b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4020ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4020be:	fb00 f808 	mul.w	r8, r0, r8
  4020c2:	45a0      	cmp	r8, r4
  4020c4:	d907      	bls.n	4020d6 <__udivmoddi4+0x26e>
  4020c6:	18e4      	adds	r4, r4, r3
  4020c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4020cc:	d229      	bcs.n	402122 <__udivmoddi4+0x2ba>
  4020ce:	45a0      	cmp	r8, r4
  4020d0:	d927      	bls.n	402122 <__udivmoddi4+0x2ba>
  4020d2:	3802      	subs	r0, #2
  4020d4:	441c      	add	r4, r3
  4020d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4020da:	eba4 0408 	sub.w	r4, r4, r8
  4020de:	fba0 8902 	umull	r8, r9, r0, r2
  4020e2:	454c      	cmp	r4, r9
  4020e4:	46c6      	mov	lr, r8
  4020e6:	464d      	mov	r5, r9
  4020e8:	d315      	bcc.n	402116 <__udivmoddi4+0x2ae>
  4020ea:	d012      	beq.n	402112 <__udivmoddi4+0x2aa>
  4020ec:	b156      	cbz	r6, 402104 <__udivmoddi4+0x29c>
  4020ee:	ebba 030e 	subs.w	r3, sl, lr
  4020f2:	eb64 0405 	sbc.w	r4, r4, r5
  4020f6:	fa04 f707 	lsl.w	r7, r4, r7
  4020fa:	40cb      	lsrs	r3, r1
  4020fc:	431f      	orrs	r7, r3
  4020fe:	40cc      	lsrs	r4, r1
  402100:	6037      	str	r7, [r6, #0]
  402102:	6074      	str	r4, [r6, #4]
  402104:	2100      	movs	r1, #0
  402106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40210a:	4618      	mov	r0, r3
  40210c:	e6f8      	b.n	401f00 <__udivmoddi4+0x98>
  40210e:	4690      	mov	r8, r2
  402110:	e6e0      	b.n	401ed4 <__udivmoddi4+0x6c>
  402112:	45c2      	cmp	sl, r8
  402114:	d2ea      	bcs.n	4020ec <__udivmoddi4+0x284>
  402116:	ebb8 0e02 	subs.w	lr, r8, r2
  40211a:	eb69 0503 	sbc.w	r5, r9, r3
  40211e:	3801      	subs	r0, #1
  402120:	e7e4      	b.n	4020ec <__udivmoddi4+0x284>
  402122:	4628      	mov	r0, r5
  402124:	e7d7      	b.n	4020d6 <__udivmoddi4+0x26e>
  402126:	4640      	mov	r0, r8
  402128:	e791      	b.n	40204e <__udivmoddi4+0x1e6>
  40212a:	4681      	mov	r9, r0
  40212c:	e7be      	b.n	4020ac <__udivmoddi4+0x244>
  40212e:	4601      	mov	r1, r0
  402130:	e778      	b.n	402024 <__udivmoddi4+0x1bc>
  402132:	3802      	subs	r0, #2
  402134:	443c      	add	r4, r7
  402136:	e745      	b.n	401fc4 <__udivmoddi4+0x15c>
  402138:	4608      	mov	r0, r1
  40213a:	e708      	b.n	401f4e <__udivmoddi4+0xe6>
  40213c:	f1a8 0802 	sub.w	r8, r8, #2
  402140:	443d      	add	r5, r7
  402142:	e72b      	b.n	401f9c <__udivmoddi4+0x134>

00402144 <__aeabi_idiv0>:
  402144:	4770      	bx	lr
  402146:	bf00      	nop

00402148 <__libc_init_array>:
  402148:	b570      	push	{r4, r5, r6, lr}
  40214a:	4e0f      	ldr	r6, [pc, #60]	; (402188 <__libc_init_array+0x40>)
  40214c:	4d0f      	ldr	r5, [pc, #60]	; (40218c <__libc_init_array+0x44>)
  40214e:	1b76      	subs	r6, r6, r5
  402150:	10b6      	asrs	r6, r6, #2
  402152:	bf18      	it	ne
  402154:	2400      	movne	r4, #0
  402156:	d005      	beq.n	402164 <__libc_init_array+0x1c>
  402158:	3401      	adds	r4, #1
  40215a:	f855 3b04 	ldr.w	r3, [r5], #4
  40215e:	4798      	blx	r3
  402160:	42a6      	cmp	r6, r4
  402162:	d1f9      	bne.n	402158 <__libc_init_array+0x10>
  402164:	4e0a      	ldr	r6, [pc, #40]	; (402190 <__libc_init_array+0x48>)
  402166:	4d0b      	ldr	r5, [pc, #44]	; (402194 <__libc_init_array+0x4c>)
  402168:	1b76      	subs	r6, r6, r5
  40216a:	f002 fef9 	bl	404f60 <_init>
  40216e:	10b6      	asrs	r6, r6, #2
  402170:	bf18      	it	ne
  402172:	2400      	movne	r4, #0
  402174:	d006      	beq.n	402184 <__libc_init_array+0x3c>
  402176:	3401      	adds	r4, #1
  402178:	f855 3b04 	ldr.w	r3, [r5], #4
  40217c:	4798      	blx	r3
  40217e:	42a6      	cmp	r6, r4
  402180:	d1f9      	bne.n	402176 <__libc_init_array+0x2e>
  402182:	bd70      	pop	{r4, r5, r6, pc}
  402184:	bd70      	pop	{r4, r5, r6, pc}
  402186:	bf00      	nop
  402188:	00404f6c 	.word	0x00404f6c
  40218c:	00404f6c 	.word	0x00404f6c
  402190:	00404f74 	.word	0x00404f74
  402194:	00404f6c 	.word	0x00404f6c

00402198 <iprintf>:
  402198:	b40f      	push	{r0, r1, r2, r3}
  40219a:	b500      	push	{lr}
  40219c:	4907      	ldr	r1, [pc, #28]	; (4021bc <iprintf+0x24>)
  40219e:	b083      	sub	sp, #12
  4021a0:	ab04      	add	r3, sp, #16
  4021a2:	6808      	ldr	r0, [r1, #0]
  4021a4:	f853 2b04 	ldr.w	r2, [r3], #4
  4021a8:	6881      	ldr	r1, [r0, #8]
  4021aa:	9301      	str	r3, [sp, #4]
  4021ac:	f000 fcb6 	bl	402b1c <_vfiprintf_r>
  4021b0:	b003      	add	sp, #12
  4021b2:	f85d eb04 	ldr.w	lr, [sp], #4
  4021b6:	b004      	add	sp, #16
  4021b8:	4770      	bx	lr
  4021ba:	bf00      	nop
  4021bc:	20000004 	.word	0x20000004

004021c0 <malloc>:
  4021c0:	4b02      	ldr	r3, [pc, #8]	; (4021cc <malloc+0xc>)
  4021c2:	4601      	mov	r1, r0
  4021c4:	6818      	ldr	r0, [r3, #0]
  4021c6:	f000 b803 	b.w	4021d0 <_malloc_r>
  4021ca:	bf00      	nop
  4021cc:	20000004 	.word	0x20000004

004021d0 <_malloc_r>:
  4021d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021d4:	f101 060b 	add.w	r6, r1, #11
  4021d8:	2e16      	cmp	r6, #22
  4021da:	b083      	sub	sp, #12
  4021dc:	4605      	mov	r5, r0
  4021de:	f240 809e 	bls.w	40231e <_malloc_r+0x14e>
  4021e2:	f036 0607 	bics.w	r6, r6, #7
  4021e6:	f100 80bd 	bmi.w	402364 <_malloc_r+0x194>
  4021ea:	42b1      	cmp	r1, r6
  4021ec:	f200 80ba 	bhi.w	402364 <_malloc_r+0x194>
  4021f0:	f000 faec 	bl	4027cc <__malloc_lock>
  4021f4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4021f8:	f0c0 8293 	bcc.w	402722 <_malloc_r+0x552>
  4021fc:	0a73      	lsrs	r3, r6, #9
  4021fe:	f000 80b8 	beq.w	402372 <_malloc_r+0x1a2>
  402202:	2b04      	cmp	r3, #4
  402204:	f200 8179 	bhi.w	4024fa <_malloc_r+0x32a>
  402208:	09b3      	lsrs	r3, r6, #6
  40220a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40220e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402212:	00c3      	lsls	r3, r0, #3
  402214:	4fbf      	ldr	r7, [pc, #764]	; (402514 <_malloc_r+0x344>)
  402216:	443b      	add	r3, r7
  402218:	f1a3 0108 	sub.w	r1, r3, #8
  40221c:	685c      	ldr	r4, [r3, #4]
  40221e:	42a1      	cmp	r1, r4
  402220:	d106      	bne.n	402230 <_malloc_r+0x60>
  402222:	e00c      	b.n	40223e <_malloc_r+0x6e>
  402224:	2a00      	cmp	r2, #0
  402226:	f280 80aa 	bge.w	40237e <_malloc_r+0x1ae>
  40222a:	68e4      	ldr	r4, [r4, #12]
  40222c:	42a1      	cmp	r1, r4
  40222e:	d006      	beq.n	40223e <_malloc_r+0x6e>
  402230:	6863      	ldr	r3, [r4, #4]
  402232:	f023 0303 	bic.w	r3, r3, #3
  402236:	1b9a      	subs	r2, r3, r6
  402238:	2a0f      	cmp	r2, #15
  40223a:	ddf3      	ble.n	402224 <_malloc_r+0x54>
  40223c:	4670      	mov	r0, lr
  40223e:	693c      	ldr	r4, [r7, #16]
  402240:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402528 <_malloc_r+0x358>
  402244:	4574      	cmp	r4, lr
  402246:	f000 81ab 	beq.w	4025a0 <_malloc_r+0x3d0>
  40224a:	6863      	ldr	r3, [r4, #4]
  40224c:	f023 0303 	bic.w	r3, r3, #3
  402250:	1b9a      	subs	r2, r3, r6
  402252:	2a0f      	cmp	r2, #15
  402254:	f300 8190 	bgt.w	402578 <_malloc_r+0x3a8>
  402258:	2a00      	cmp	r2, #0
  40225a:	f8c7 e014 	str.w	lr, [r7, #20]
  40225e:	f8c7 e010 	str.w	lr, [r7, #16]
  402262:	f280 809d 	bge.w	4023a0 <_malloc_r+0x1d0>
  402266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40226a:	f080 8161 	bcs.w	402530 <_malloc_r+0x360>
  40226e:	08db      	lsrs	r3, r3, #3
  402270:	f103 0c01 	add.w	ip, r3, #1
  402274:	1099      	asrs	r1, r3, #2
  402276:	687a      	ldr	r2, [r7, #4]
  402278:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40227c:	f8c4 8008 	str.w	r8, [r4, #8]
  402280:	2301      	movs	r3, #1
  402282:	408b      	lsls	r3, r1
  402284:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402288:	4313      	orrs	r3, r2
  40228a:	3908      	subs	r1, #8
  40228c:	60e1      	str	r1, [r4, #12]
  40228e:	607b      	str	r3, [r7, #4]
  402290:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402294:	f8c8 400c 	str.w	r4, [r8, #12]
  402298:	1082      	asrs	r2, r0, #2
  40229a:	2401      	movs	r4, #1
  40229c:	4094      	lsls	r4, r2
  40229e:	429c      	cmp	r4, r3
  4022a0:	f200 808b 	bhi.w	4023ba <_malloc_r+0x1ea>
  4022a4:	421c      	tst	r4, r3
  4022a6:	d106      	bne.n	4022b6 <_malloc_r+0xe6>
  4022a8:	f020 0003 	bic.w	r0, r0, #3
  4022ac:	0064      	lsls	r4, r4, #1
  4022ae:	421c      	tst	r4, r3
  4022b0:	f100 0004 	add.w	r0, r0, #4
  4022b4:	d0fa      	beq.n	4022ac <_malloc_r+0xdc>
  4022b6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4022ba:	46cc      	mov	ip, r9
  4022bc:	4680      	mov	r8, r0
  4022be:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4022c2:	459c      	cmp	ip, r3
  4022c4:	d107      	bne.n	4022d6 <_malloc_r+0x106>
  4022c6:	e16d      	b.n	4025a4 <_malloc_r+0x3d4>
  4022c8:	2a00      	cmp	r2, #0
  4022ca:	f280 817b 	bge.w	4025c4 <_malloc_r+0x3f4>
  4022ce:	68db      	ldr	r3, [r3, #12]
  4022d0:	459c      	cmp	ip, r3
  4022d2:	f000 8167 	beq.w	4025a4 <_malloc_r+0x3d4>
  4022d6:	6859      	ldr	r1, [r3, #4]
  4022d8:	f021 0103 	bic.w	r1, r1, #3
  4022dc:	1b8a      	subs	r2, r1, r6
  4022de:	2a0f      	cmp	r2, #15
  4022e0:	ddf2      	ble.n	4022c8 <_malloc_r+0xf8>
  4022e2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4022e6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4022ea:	9300      	str	r3, [sp, #0]
  4022ec:	199c      	adds	r4, r3, r6
  4022ee:	4628      	mov	r0, r5
  4022f0:	f046 0601 	orr.w	r6, r6, #1
  4022f4:	f042 0501 	orr.w	r5, r2, #1
  4022f8:	605e      	str	r6, [r3, #4]
  4022fa:	f8c8 c00c 	str.w	ip, [r8, #12]
  4022fe:	f8cc 8008 	str.w	r8, [ip, #8]
  402302:	617c      	str	r4, [r7, #20]
  402304:	613c      	str	r4, [r7, #16]
  402306:	f8c4 e00c 	str.w	lr, [r4, #12]
  40230a:	f8c4 e008 	str.w	lr, [r4, #8]
  40230e:	6065      	str	r5, [r4, #4]
  402310:	505a      	str	r2, [r3, r1]
  402312:	f000 fa61 	bl	4027d8 <__malloc_unlock>
  402316:	9b00      	ldr	r3, [sp, #0]
  402318:	f103 0408 	add.w	r4, r3, #8
  40231c:	e01e      	b.n	40235c <_malloc_r+0x18c>
  40231e:	2910      	cmp	r1, #16
  402320:	d820      	bhi.n	402364 <_malloc_r+0x194>
  402322:	f000 fa53 	bl	4027cc <__malloc_lock>
  402326:	2610      	movs	r6, #16
  402328:	2318      	movs	r3, #24
  40232a:	2002      	movs	r0, #2
  40232c:	4f79      	ldr	r7, [pc, #484]	; (402514 <_malloc_r+0x344>)
  40232e:	443b      	add	r3, r7
  402330:	f1a3 0208 	sub.w	r2, r3, #8
  402334:	685c      	ldr	r4, [r3, #4]
  402336:	4294      	cmp	r4, r2
  402338:	f000 813d 	beq.w	4025b6 <_malloc_r+0x3e6>
  40233c:	6863      	ldr	r3, [r4, #4]
  40233e:	68e1      	ldr	r1, [r4, #12]
  402340:	68a6      	ldr	r6, [r4, #8]
  402342:	f023 0303 	bic.w	r3, r3, #3
  402346:	4423      	add	r3, r4
  402348:	4628      	mov	r0, r5
  40234a:	685a      	ldr	r2, [r3, #4]
  40234c:	60f1      	str	r1, [r6, #12]
  40234e:	f042 0201 	orr.w	r2, r2, #1
  402352:	608e      	str	r6, [r1, #8]
  402354:	605a      	str	r2, [r3, #4]
  402356:	f000 fa3f 	bl	4027d8 <__malloc_unlock>
  40235a:	3408      	adds	r4, #8
  40235c:	4620      	mov	r0, r4
  40235e:	b003      	add	sp, #12
  402360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402364:	2400      	movs	r4, #0
  402366:	230c      	movs	r3, #12
  402368:	4620      	mov	r0, r4
  40236a:	602b      	str	r3, [r5, #0]
  40236c:	b003      	add	sp, #12
  40236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402372:	2040      	movs	r0, #64	; 0x40
  402374:	f44f 7300 	mov.w	r3, #512	; 0x200
  402378:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40237c:	e74a      	b.n	402214 <_malloc_r+0x44>
  40237e:	4423      	add	r3, r4
  402380:	68e1      	ldr	r1, [r4, #12]
  402382:	685a      	ldr	r2, [r3, #4]
  402384:	68a6      	ldr	r6, [r4, #8]
  402386:	f042 0201 	orr.w	r2, r2, #1
  40238a:	60f1      	str	r1, [r6, #12]
  40238c:	4628      	mov	r0, r5
  40238e:	608e      	str	r6, [r1, #8]
  402390:	605a      	str	r2, [r3, #4]
  402392:	f000 fa21 	bl	4027d8 <__malloc_unlock>
  402396:	3408      	adds	r4, #8
  402398:	4620      	mov	r0, r4
  40239a:	b003      	add	sp, #12
  40239c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023a0:	4423      	add	r3, r4
  4023a2:	4628      	mov	r0, r5
  4023a4:	685a      	ldr	r2, [r3, #4]
  4023a6:	f042 0201 	orr.w	r2, r2, #1
  4023aa:	605a      	str	r2, [r3, #4]
  4023ac:	f000 fa14 	bl	4027d8 <__malloc_unlock>
  4023b0:	3408      	adds	r4, #8
  4023b2:	4620      	mov	r0, r4
  4023b4:	b003      	add	sp, #12
  4023b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023ba:	68bc      	ldr	r4, [r7, #8]
  4023bc:	6863      	ldr	r3, [r4, #4]
  4023be:	f023 0803 	bic.w	r8, r3, #3
  4023c2:	45b0      	cmp	r8, r6
  4023c4:	d304      	bcc.n	4023d0 <_malloc_r+0x200>
  4023c6:	eba8 0306 	sub.w	r3, r8, r6
  4023ca:	2b0f      	cmp	r3, #15
  4023cc:	f300 8085 	bgt.w	4024da <_malloc_r+0x30a>
  4023d0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40252c <_malloc_r+0x35c>
  4023d4:	4b50      	ldr	r3, [pc, #320]	; (402518 <_malloc_r+0x348>)
  4023d6:	f8d9 2000 	ldr.w	r2, [r9]
  4023da:	681b      	ldr	r3, [r3, #0]
  4023dc:	3201      	adds	r2, #1
  4023de:	4433      	add	r3, r6
  4023e0:	eb04 0a08 	add.w	sl, r4, r8
  4023e4:	f000 8155 	beq.w	402692 <_malloc_r+0x4c2>
  4023e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4023ec:	330f      	adds	r3, #15
  4023ee:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4023f2:	f02b 0b0f 	bic.w	fp, fp, #15
  4023f6:	4659      	mov	r1, fp
  4023f8:	4628      	mov	r0, r5
  4023fa:	f000 f9f3 	bl	4027e4 <_sbrk_r>
  4023fe:	1c41      	adds	r1, r0, #1
  402400:	4602      	mov	r2, r0
  402402:	f000 80fc 	beq.w	4025fe <_malloc_r+0x42e>
  402406:	4582      	cmp	sl, r0
  402408:	f200 80f7 	bhi.w	4025fa <_malloc_r+0x42a>
  40240c:	4b43      	ldr	r3, [pc, #268]	; (40251c <_malloc_r+0x34c>)
  40240e:	6819      	ldr	r1, [r3, #0]
  402410:	4459      	add	r1, fp
  402412:	6019      	str	r1, [r3, #0]
  402414:	f000 814d 	beq.w	4026b2 <_malloc_r+0x4e2>
  402418:	f8d9 0000 	ldr.w	r0, [r9]
  40241c:	3001      	adds	r0, #1
  40241e:	bf1b      	ittet	ne
  402420:	eba2 0a0a 	subne.w	sl, r2, sl
  402424:	4451      	addne	r1, sl
  402426:	f8c9 2000 	streq.w	r2, [r9]
  40242a:	6019      	strne	r1, [r3, #0]
  40242c:	f012 0107 	ands.w	r1, r2, #7
  402430:	f000 8115 	beq.w	40265e <_malloc_r+0x48e>
  402434:	f1c1 0008 	rsb	r0, r1, #8
  402438:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40243c:	4402      	add	r2, r0
  40243e:	3108      	adds	r1, #8
  402440:	eb02 090b 	add.w	r9, r2, fp
  402444:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402448:	eba1 0909 	sub.w	r9, r1, r9
  40244c:	4649      	mov	r1, r9
  40244e:	4628      	mov	r0, r5
  402450:	9301      	str	r3, [sp, #4]
  402452:	9200      	str	r2, [sp, #0]
  402454:	f000 f9c6 	bl	4027e4 <_sbrk_r>
  402458:	1c43      	adds	r3, r0, #1
  40245a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40245e:	f000 8143 	beq.w	4026e8 <_malloc_r+0x518>
  402462:	1a80      	subs	r0, r0, r2
  402464:	4448      	add	r0, r9
  402466:	f040 0001 	orr.w	r0, r0, #1
  40246a:	6819      	ldr	r1, [r3, #0]
  40246c:	60ba      	str	r2, [r7, #8]
  40246e:	4449      	add	r1, r9
  402470:	42bc      	cmp	r4, r7
  402472:	6050      	str	r0, [r2, #4]
  402474:	6019      	str	r1, [r3, #0]
  402476:	d017      	beq.n	4024a8 <_malloc_r+0x2d8>
  402478:	f1b8 0f0f 	cmp.w	r8, #15
  40247c:	f240 80fb 	bls.w	402676 <_malloc_r+0x4a6>
  402480:	6860      	ldr	r0, [r4, #4]
  402482:	f1a8 020c 	sub.w	r2, r8, #12
  402486:	f022 0207 	bic.w	r2, r2, #7
  40248a:	eb04 0e02 	add.w	lr, r4, r2
  40248e:	f000 0001 	and.w	r0, r0, #1
  402492:	f04f 0c05 	mov.w	ip, #5
  402496:	4310      	orrs	r0, r2
  402498:	2a0f      	cmp	r2, #15
  40249a:	6060      	str	r0, [r4, #4]
  40249c:	f8ce c004 	str.w	ip, [lr, #4]
  4024a0:	f8ce c008 	str.w	ip, [lr, #8]
  4024a4:	f200 8117 	bhi.w	4026d6 <_malloc_r+0x506>
  4024a8:	4b1d      	ldr	r3, [pc, #116]	; (402520 <_malloc_r+0x350>)
  4024aa:	68bc      	ldr	r4, [r7, #8]
  4024ac:	681a      	ldr	r2, [r3, #0]
  4024ae:	4291      	cmp	r1, r2
  4024b0:	bf88      	it	hi
  4024b2:	6019      	strhi	r1, [r3, #0]
  4024b4:	4b1b      	ldr	r3, [pc, #108]	; (402524 <_malloc_r+0x354>)
  4024b6:	681a      	ldr	r2, [r3, #0]
  4024b8:	4291      	cmp	r1, r2
  4024ba:	6862      	ldr	r2, [r4, #4]
  4024bc:	bf88      	it	hi
  4024be:	6019      	strhi	r1, [r3, #0]
  4024c0:	f022 0203 	bic.w	r2, r2, #3
  4024c4:	4296      	cmp	r6, r2
  4024c6:	eba2 0306 	sub.w	r3, r2, r6
  4024ca:	d801      	bhi.n	4024d0 <_malloc_r+0x300>
  4024cc:	2b0f      	cmp	r3, #15
  4024ce:	dc04      	bgt.n	4024da <_malloc_r+0x30a>
  4024d0:	4628      	mov	r0, r5
  4024d2:	f000 f981 	bl	4027d8 <__malloc_unlock>
  4024d6:	2400      	movs	r4, #0
  4024d8:	e740      	b.n	40235c <_malloc_r+0x18c>
  4024da:	19a2      	adds	r2, r4, r6
  4024dc:	f043 0301 	orr.w	r3, r3, #1
  4024e0:	f046 0601 	orr.w	r6, r6, #1
  4024e4:	6066      	str	r6, [r4, #4]
  4024e6:	4628      	mov	r0, r5
  4024e8:	60ba      	str	r2, [r7, #8]
  4024ea:	6053      	str	r3, [r2, #4]
  4024ec:	f000 f974 	bl	4027d8 <__malloc_unlock>
  4024f0:	3408      	adds	r4, #8
  4024f2:	4620      	mov	r0, r4
  4024f4:	b003      	add	sp, #12
  4024f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024fa:	2b14      	cmp	r3, #20
  4024fc:	d971      	bls.n	4025e2 <_malloc_r+0x412>
  4024fe:	2b54      	cmp	r3, #84	; 0x54
  402500:	f200 80a3 	bhi.w	40264a <_malloc_r+0x47a>
  402504:	0b33      	lsrs	r3, r6, #12
  402506:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40250a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40250e:	00c3      	lsls	r3, r0, #3
  402510:	e680      	b.n	402214 <_malloc_r+0x44>
  402512:	bf00      	nop
  402514:	20000430 	.word	0x20000430
  402518:	20000a78 	.word	0x20000a78
  40251c:	20000a48 	.word	0x20000a48
  402520:	20000a70 	.word	0x20000a70
  402524:	20000a74 	.word	0x20000a74
  402528:	20000438 	.word	0x20000438
  40252c:	20000838 	.word	0x20000838
  402530:	0a5a      	lsrs	r2, r3, #9
  402532:	2a04      	cmp	r2, #4
  402534:	d95b      	bls.n	4025ee <_malloc_r+0x41e>
  402536:	2a14      	cmp	r2, #20
  402538:	f200 80ae 	bhi.w	402698 <_malloc_r+0x4c8>
  40253c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402540:	00c9      	lsls	r1, r1, #3
  402542:	325b      	adds	r2, #91	; 0x5b
  402544:	eb07 0c01 	add.w	ip, r7, r1
  402548:	5879      	ldr	r1, [r7, r1]
  40254a:	f1ac 0c08 	sub.w	ip, ip, #8
  40254e:	458c      	cmp	ip, r1
  402550:	f000 8088 	beq.w	402664 <_malloc_r+0x494>
  402554:	684a      	ldr	r2, [r1, #4]
  402556:	f022 0203 	bic.w	r2, r2, #3
  40255a:	4293      	cmp	r3, r2
  40255c:	d273      	bcs.n	402646 <_malloc_r+0x476>
  40255e:	6889      	ldr	r1, [r1, #8]
  402560:	458c      	cmp	ip, r1
  402562:	d1f7      	bne.n	402554 <_malloc_r+0x384>
  402564:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402568:	687b      	ldr	r3, [r7, #4]
  40256a:	60e2      	str	r2, [r4, #12]
  40256c:	f8c4 c008 	str.w	ip, [r4, #8]
  402570:	6094      	str	r4, [r2, #8]
  402572:	f8cc 400c 	str.w	r4, [ip, #12]
  402576:	e68f      	b.n	402298 <_malloc_r+0xc8>
  402578:	19a1      	adds	r1, r4, r6
  40257a:	f046 0c01 	orr.w	ip, r6, #1
  40257e:	f042 0601 	orr.w	r6, r2, #1
  402582:	f8c4 c004 	str.w	ip, [r4, #4]
  402586:	4628      	mov	r0, r5
  402588:	6179      	str	r1, [r7, #20]
  40258a:	6139      	str	r1, [r7, #16]
  40258c:	f8c1 e00c 	str.w	lr, [r1, #12]
  402590:	f8c1 e008 	str.w	lr, [r1, #8]
  402594:	604e      	str	r6, [r1, #4]
  402596:	50e2      	str	r2, [r4, r3]
  402598:	f000 f91e 	bl	4027d8 <__malloc_unlock>
  40259c:	3408      	adds	r4, #8
  40259e:	e6dd      	b.n	40235c <_malloc_r+0x18c>
  4025a0:	687b      	ldr	r3, [r7, #4]
  4025a2:	e679      	b.n	402298 <_malloc_r+0xc8>
  4025a4:	f108 0801 	add.w	r8, r8, #1
  4025a8:	f018 0f03 	tst.w	r8, #3
  4025ac:	f10c 0c08 	add.w	ip, ip, #8
  4025b0:	f47f ae85 	bne.w	4022be <_malloc_r+0xee>
  4025b4:	e02d      	b.n	402612 <_malloc_r+0x442>
  4025b6:	68dc      	ldr	r4, [r3, #12]
  4025b8:	42a3      	cmp	r3, r4
  4025ba:	bf08      	it	eq
  4025bc:	3002      	addeq	r0, #2
  4025be:	f43f ae3e 	beq.w	40223e <_malloc_r+0x6e>
  4025c2:	e6bb      	b.n	40233c <_malloc_r+0x16c>
  4025c4:	4419      	add	r1, r3
  4025c6:	461c      	mov	r4, r3
  4025c8:	684a      	ldr	r2, [r1, #4]
  4025ca:	68db      	ldr	r3, [r3, #12]
  4025cc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4025d0:	f042 0201 	orr.w	r2, r2, #1
  4025d4:	604a      	str	r2, [r1, #4]
  4025d6:	4628      	mov	r0, r5
  4025d8:	60f3      	str	r3, [r6, #12]
  4025da:	609e      	str	r6, [r3, #8]
  4025dc:	f000 f8fc 	bl	4027d8 <__malloc_unlock>
  4025e0:	e6bc      	b.n	40235c <_malloc_r+0x18c>
  4025e2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4025e6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4025ea:	00c3      	lsls	r3, r0, #3
  4025ec:	e612      	b.n	402214 <_malloc_r+0x44>
  4025ee:	099a      	lsrs	r2, r3, #6
  4025f0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4025f4:	00c9      	lsls	r1, r1, #3
  4025f6:	3238      	adds	r2, #56	; 0x38
  4025f8:	e7a4      	b.n	402544 <_malloc_r+0x374>
  4025fa:	42bc      	cmp	r4, r7
  4025fc:	d054      	beq.n	4026a8 <_malloc_r+0x4d8>
  4025fe:	68bc      	ldr	r4, [r7, #8]
  402600:	6862      	ldr	r2, [r4, #4]
  402602:	f022 0203 	bic.w	r2, r2, #3
  402606:	e75d      	b.n	4024c4 <_malloc_r+0x2f4>
  402608:	f859 3908 	ldr.w	r3, [r9], #-8
  40260c:	4599      	cmp	r9, r3
  40260e:	f040 8086 	bne.w	40271e <_malloc_r+0x54e>
  402612:	f010 0f03 	tst.w	r0, #3
  402616:	f100 30ff 	add.w	r0, r0, #4294967295
  40261a:	d1f5      	bne.n	402608 <_malloc_r+0x438>
  40261c:	687b      	ldr	r3, [r7, #4]
  40261e:	ea23 0304 	bic.w	r3, r3, r4
  402622:	607b      	str	r3, [r7, #4]
  402624:	0064      	lsls	r4, r4, #1
  402626:	429c      	cmp	r4, r3
  402628:	f63f aec7 	bhi.w	4023ba <_malloc_r+0x1ea>
  40262c:	2c00      	cmp	r4, #0
  40262e:	f43f aec4 	beq.w	4023ba <_malloc_r+0x1ea>
  402632:	421c      	tst	r4, r3
  402634:	4640      	mov	r0, r8
  402636:	f47f ae3e 	bne.w	4022b6 <_malloc_r+0xe6>
  40263a:	0064      	lsls	r4, r4, #1
  40263c:	421c      	tst	r4, r3
  40263e:	f100 0004 	add.w	r0, r0, #4
  402642:	d0fa      	beq.n	40263a <_malloc_r+0x46a>
  402644:	e637      	b.n	4022b6 <_malloc_r+0xe6>
  402646:	468c      	mov	ip, r1
  402648:	e78c      	b.n	402564 <_malloc_r+0x394>
  40264a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40264e:	d815      	bhi.n	40267c <_malloc_r+0x4ac>
  402650:	0bf3      	lsrs	r3, r6, #15
  402652:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402656:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40265a:	00c3      	lsls	r3, r0, #3
  40265c:	e5da      	b.n	402214 <_malloc_r+0x44>
  40265e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402662:	e6ed      	b.n	402440 <_malloc_r+0x270>
  402664:	687b      	ldr	r3, [r7, #4]
  402666:	1092      	asrs	r2, r2, #2
  402668:	2101      	movs	r1, #1
  40266a:	fa01 f202 	lsl.w	r2, r1, r2
  40266e:	4313      	orrs	r3, r2
  402670:	607b      	str	r3, [r7, #4]
  402672:	4662      	mov	r2, ip
  402674:	e779      	b.n	40256a <_malloc_r+0x39a>
  402676:	2301      	movs	r3, #1
  402678:	6053      	str	r3, [r2, #4]
  40267a:	e729      	b.n	4024d0 <_malloc_r+0x300>
  40267c:	f240 5254 	movw	r2, #1364	; 0x554
  402680:	4293      	cmp	r3, r2
  402682:	d822      	bhi.n	4026ca <_malloc_r+0x4fa>
  402684:	0cb3      	lsrs	r3, r6, #18
  402686:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40268a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40268e:	00c3      	lsls	r3, r0, #3
  402690:	e5c0      	b.n	402214 <_malloc_r+0x44>
  402692:	f103 0b10 	add.w	fp, r3, #16
  402696:	e6ae      	b.n	4023f6 <_malloc_r+0x226>
  402698:	2a54      	cmp	r2, #84	; 0x54
  40269a:	d829      	bhi.n	4026f0 <_malloc_r+0x520>
  40269c:	0b1a      	lsrs	r2, r3, #12
  40269e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4026a2:	00c9      	lsls	r1, r1, #3
  4026a4:	326e      	adds	r2, #110	; 0x6e
  4026a6:	e74d      	b.n	402544 <_malloc_r+0x374>
  4026a8:	4b20      	ldr	r3, [pc, #128]	; (40272c <_malloc_r+0x55c>)
  4026aa:	6819      	ldr	r1, [r3, #0]
  4026ac:	4459      	add	r1, fp
  4026ae:	6019      	str	r1, [r3, #0]
  4026b0:	e6b2      	b.n	402418 <_malloc_r+0x248>
  4026b2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4026b6:	2800      	cmp	r0, #0
  4026b8:	f47f aeae 	bne.w	402418 <_malloc_r+0x248>
  4026bc:	eb08 030b 	add.w	r3, r8, fp
  4026c0:	68ba      	ldr	r2, [r7, #8]
  4026c2:	f043 0301 	orr.w	r3, r3, #1
  4026c6:	6053      	str	r3, [r2, #4]
  4026c8:	e6ee      	b.n	4024a8 <_malloc_r+0x2d8>
  4026ca:	207f      	movs	r0, #127	; 0x7f
  4026cc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4026d0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4026d4:	e59e      	b.n	402214 <_malloc_r+0x44>
  4026d6:	f104 0108 	add.w	r1, r4, #8
  4026da:	4628      	mov	r0, r5
  4026dc:	9300      	str	r3, [sp, #0]
  4026de:	f001 fb39 	bl	403d54 <_free_r>
  4026e2:	9b00      	ldr	r3, [sp, #0]
  4026e4:	6819      	ldr	r1, [r3, #0]
  4026e6:	e6df      	b.n	4024a8 <_malloc_r+0x2d8>
  4026e8:	2001      	movs	r0, #1
  4026ea:	f04f 0900 	mov.w	r9, #0
  4026ee:	e6bc      	b.n	40246a <_malloc_r+0x29a>
  4026f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4026f4:	d805      	bhi.n	402702 <_malloc_r+0x532>
  4026f6:	0bda      	lsrs	r2, r3, #15
  4026f8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4026fc:	00c9      	lsls	r1, r1, #3
  4026fe:	3277      	adds	r2, #119	; 0x77
  402700:	e720      	b.n	402544 <_malloc_r+0x374>
  402702:	f240 5154 	movw	r1, #1364	; 0x554
  402706:	428a      	cmp	r2, r1
  402708:	d805      	bhi.n	402716 <_malloc_r+0x546>
  40270a:	0c9a      	lsrs	r2, r3, #18
  40270c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402710:	00c9      	lsls	r1, r1, #3
  402712:	327c      	adds	r2, #124	; 0x7c
  402714:	e716      	b.n	402544 <_malloc_r+0x374>
  402716:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40271a:	227e      	movs	r2, #126	; 0x7e
  40271c:	e712      	b.n	402544 <_malloc_r+0x374>
  40271e:	687b      	ldr	r3, [r7, #4]
  402720:	e780      	b.n	402624 <_malloc_r+0x454>
  402722:	08f0      	lsrs	r0, r6, #3
  402724:	f106 0308 	add.w	r3, r6, #8
  402728:	e600      	b.n	40232c <_malloc_r+0x15c>
  40272a:	bf00      	nop
  40272c:	20000a48 	.word	0x20000a48

00402730 <memset>:
  402730:	b470      	push	{r4, r5, r6}
  402732:	0786      	lsls	r6, r0, #30
  402734:	d046      	beq.n	4027c4 <memset+0x94>
  402736:	1e54      	subs	r4, r2, #1
  402738:	2a00      	cmp	r2, #0
  40273a:	d041      	beq.n	4027c0 <memset+0x90>
  40273c:	b2ca      	uxtb	r2, r1
  40273e:	4603      	mov	r3, r0
  402740:	e002      	b.n	402748 <memset+0x18>
  402742:	f114 34ff 	adds.w	r4, r4, #4294967295
  402746:	d33b      	bcc.n	4027c0 <memset+0x90>
  402748:	f803 2b01 	strb.w	r2, [r3], #1
  40274c:	079d      	lsls	r5, r3, #30
  40274e:	d1f8      	bne.n	402742 <memset+0x12>
  402750:	2c03      	cmp	r4, #3
  402752:	d92e      	bls.n	4027b2 <memset+0x82>
  402754:	b2cd      	uxtb	r5, r1
  402756:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40275a:	2c0f      	cmp	r4, #15
  40275c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402760:	d919      	bls.n	402796 <memset+0x66>
  402762:	f103 0210 	add.w	r2, r3, #16
  402766:	4626      	mov	r6, r4
  402768:	3e10      	subs	r6, #16
  40276a:	2e0f      	cmp	r6, #15
  40276c:	f842 5c10 	str.w	r5, [r2, #-16]
  402770:	f842 5c0c 	str.w	r5, [r2, #-12]
  402774:	f842 5c08 	str.w	r5, [r2, #-8]
  402778:	f842 5c04 	str.w	r5, [r2, #-4]
  40277c:	f102 0210 	add.w	r2, r2, #16
  402780:	d8f2      	bhi.n	402768 <memset+0x38>
  402782:	f1a4 0210 	sub.w	r2, r4, #16
  402786:	f022 020f 	bic.w	r2, r2, #15
  40278a:	f004 040f 	and.w	r4, r4, #15
  40278e:	3210      	adds	r2, #16
  402790:	2c03      	cmp	r4, #3
  402792:	4413      	add	r3, r2
  402794:	d90d      	bls.n	4027b2 <memset+0x82>
  402796:	461e      	mov	r6, r3
  402798:	4622      	mov	r2, r4
  40279a:	3a04      	subs	r2, #4
  40279c:	2a03      	cmp	r2, #3
  40279e:	f846 5b04 	str.w	r5, [r6], #4
  4027a2:	d8fa      	bhi.n	40279a <memset+0x6a>
  4027a4:	1f22      	subs	r2, r4, #4
  4027a6:	f022 0203 	bic.w	r2, r2, #3
  4027aa:	3204      	adds	r2, #4
  4027ac:	4413      	add	r3, r2
  4027ae:	f004 0403 	and.w	r4, r4, #3
  4027b2:	b12c      	cbz	r4, 4027c0 <memset+0x90>
  4027b4:	b2c9      	uxtb	r1, r1
  4027b6:	441c      	add	r4, r3
  4027b8:	f803 1b01 	strb.w	r1, [r3], #1
  4027bc:	429c      	cmp	r4, r3
  4027be:	d1fb      	bne.n	4027b8 <memset+0x88>
  4027c0:	bc70      	pop	{r4, r5, r6}
  4027c2:	4770      	bx	lr
  4027c4:	4614      	mov	r4, r2
  4027c6:	4603      	mov	r3, r0
  4027c8:	e7c2      	b.n	402750 <memset+0x20>
  4027ca:	bf00      	nop

004027cc <__malloc_lock>:
  4027cc:	4801      	ldr	r0, [pc, #4]	; (4027d4 <__malloc_lock+0x8>)
  4027ce:	f001 bd5b 	b.w	404288 <__retarget_lock_acquire_recursive>
  4027d2:	bf00      	nop
  4027d4:	20000ea0 	.word	0x20000ea0

004027d8 <__malloc_unlock>:
  4027d8:	4801      	ldr	r0, [pc, #4]	; (4027e0 <__malloc_unlock+0x8>)
  4027da:	f001 bd57 	b.w	40428c <__retarget_lock_release_recursive>
  4027de:	bf00      	nop
  4027e0:	20000ea0 	.word	0x20000ea0

004027e4 <_sbrk_r>:
  4027e4:	b538      	push	{r3, r4, r5, lr}
  4027e6:	4c07      	ldr	r4, [pc, #28]	; (402804 <_sbrk_r+0x20>)
  4027e8:	2300      	movs	r3, #0
  4027ea:	4605      	mov	r5, r0
  4027ec:	4608      	mov	r0, r1
  4027ee:	6023      	str	r3, [r4, #0]
  4027f0:	f7ff f858 	bl	4018a4 <_sbrk>
  4027f4:	1c43      	adds	r3, r0, #1
  4027f6:	d000      	beq.n	4027fa <_sbrk_r+0x16>
  4027f8:	bd38      	pop	{r3, r4, r5, pc}
  4027fa:	6823      	ldr	r3, [r4, #0]
  4027fc:	2b00      	cmp	r3, #0
  4027fe:	d0fb      	beq.n	4027f8 <_sbrk_r+0x14>
  402800:	602b      	str	r3, [r5, #0]
  402802:	bd38      	pop	{r3, r4, r5, pc}
  402804:	20000eb4 	.word	0x20000eb4

00402808 <setbuf>:
  402808:	2900      	cmp	r1, #0
  40280a:	bf0c      	ite	eq
  40280c:	2202      	moveq	r2, #2
  40280e:	2200      	movne	r2, #0
  402810:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402814:	f000 b800 	b.w	402818 <setvbuf>

00402818 <setvbuf>:
  402818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40281c:	4c61      	ldr	r4, [pc, #388]	; (4029a4 <setvbuf+0x18c>)
  40281e:	6825      	ldr	r5, [r4, #0]
  402820:	b083      	sub	sp, #12
  402822:	4604      	mov	r4, r0
  402824:	460f      	mov	r7, r1
  402826:	4690      	mov	r8, r2
  402828:	461e      	mov	r6, r3
  40282a:	b115      	cbz	r5, 402832 <setvbuf+0x1a>
  40282c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40282e:	2b00      	cmp	r3, #0
  402830:	d064      	beq.n	4028fc <setvbuf+0xe4>
  402832:	f1b8 0f02 	cmp.w	r8, #2
  402836:	d006      	beq.n	402846 <setvbuf+0x2e>
  402838:	f1b8 0f01 	cmp.w	r8, #1
  40283c:	f200 809f 	bhi.w	40297e <setvbuf+0x166>
  402840:	2e00      	cmp	r6, #0
  402842:	f2c0 809c 	blt.w	40297e <setvbuf+0x166>
  402846:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402848:	07d8      	lsls	r0, r3, #31
  40284a:	d534      	bpl.n	4028b6 <setvbuf+0x9e>
  40284c:	4621      	mov	r1, r4
  40284e:	4628      	mov	r0, r5
  402850:	f001 f902 	bl	403a58 <_fflush_r>
  402854:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402856:	b141      	cbz	r1, 40286a <setvbuf+0x52>
  402858:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40285c:	4299      	cmp	r1, r3
  40285e:	d002      	beq.n	402866 <setvbuf+0x4e>
  402860:	4628      	mov	r0, r5
  402862:	f001 fa77 	bl	403d54 <_free_r>
  402866:	2300      	movs	r3, #0
  402868:	6323      	str	r3, [r4, #48]	; 0x30
  40286a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40286e:	2200      	movs	r2, #0
  402870:	61a2      	str	r2, [r4, #24]
  402872:	6062      	str	r2, [r4, #4]
  402874:	061a      	lsls	r2, r3, #24
  402876:	d43a      	bmi.n	4028ee <setvbuf+0xd6>
  402878:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40287c:	f023 0303 	bic.w	r3, r3, #3
  402880:	f1b8 0f02 	cmp.w	r8, #2
  402884:	81a3      	strh	r3, [r4, #12]
  402886:	d01d      	beq.n	4028c4 <setvbuf+0xac>
  402888:	ab01      	add	r3, sp, #4
  40288a:	466a      	mov	r2, sp
  40288c:	4621      	mov	r1, r4
  40288e:	4628      	mov	r0, r5
  402890:	f001 fcfe 	bl	404290 <__swhatbuf_r>
  402894:	89a3      	ldrh	r3, [r4, #12]
  402896:	4318      	orrs	r0, r3
  402898:	81a0      	strh	r0, [r4, #12]
  40289a:	2e00      	cmp	r6, #0
  40289c:	d132      	bne.n	402904 <setvbuf+0xec>
  40289e:	9e00      	ldr	r6, [sp, #0]
  4028a0:	4630      	mov	r0, r6
  4028a2:	f7ff fc8d 	bl	4021c0 <malloc>
  4028a6:	4607      	mov	r7, r0
  4028a8:	2800      	cmp	r0, #0
  4028aa:	d06b      	beq.n	402984 <setvbuf+0x16c>
  4028ac:	89a3      	ldrh	r3, [r4, #12]
  4028ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4028b2:	81a3      	strh	r3, [r4, #12]
  4028b4:	e028      	b.n	402908 <setvbuf+0xf0>
  4028b6:	89a3      	ldrh	r3, [r4, #12]
  4028b8:	0599      	lsls	r1, r3, #22
  4028ba:	d4c7      	bmi.n	40284c <setvbuf+0x34>
  4028bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4028be:	f001 fce3 	bl	404288 <__retarget_lock_acquire_recursive>
  4028c2:	e7c3      	b.n	40284c <setvbuf+0x34>
  4028c4:	2500      	movs	r5, #0
  4028c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4028c8:	2600      	movs	r6, #0
  4028ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4028ce:	f043 0302 	orr.w	r3, r3, #2
  4028d2:	2001      	movs	r0, #1
  4028d4:	60a6      	str	r6, [r4, #8]
  4028d6:	07ce      	lsls	r6, r1, #31
  4028d8:	81a3      	strh	r3, [r4, #12]
  4028da:	6022      	str	r2, [r4, #0]
  4028dc:	6122      	str	r2, [r4, #16]
  4028de:	6160      	str	r0, [r4, #20]
  4028e0:	d401      	bmi.n	4028e6 <setvbuf+0xce>
  4028e2:	0598      	lsls	r0, r3, #22
  4028e4:	d53e      	bpl.n	402964 <setvbuf+0x14c>
  4028e6:	4628      	mov	r0, r5
  4028e8:	b003      	add	sp, #12
  4028ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4028ee:	6921      	ldr	r1, [r4, #16]
  4028f0:	4628      	mov	r0, r5
  4028f2:	f001 fa2f 	bl	403d54 <_free_r>
  4028f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4028fa:	e7bd      	b.n	402878 <setvbuf+0x60>
  4028fc:	4628      	mov	r0, r5
  4028fe:	f001 f903 	bl	403b08 <__sinit>
  402902:	e796      	b.n	402832 <setvbuf+0x1a>
  402904:	2f00      	cmp	r7, #0
  402906:	d0cb      	beq.n	4028a0 <setvbuf+0x88>
  402908:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40290a:	2b00      	cmp	r3, #0
  40290c:	d033      	beq.n	402976 <setvbuf+0x15e>
  40290e:	9b00      	ldr	r3, [sp, #0]
  402910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402914:	6027      	str	r7, [r4, #0]
  402916:	429e      	cmp	r6, r3
  402918:	bf1c      	itt	ne
  40291a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40291e:	81a2      	strhne	r2, [r4, #12]
  402920:	f1b8 0f01 	cmp.w	r8, #1
  402924:	bf04      	itt	eq
  402926:	f042 0201 	orreq.w	r2, r2, #1
  40292a:	81a2      	strheq	r2, [r4, #12]
  40292c:	b292      	uxth	r2, r2
  40292e:	f012 0308 	ands.w	r3, r2, #8
  402932:	6127      	str	r7, [r4, #16]
  402934:	6166      	str	r6, [r4, #20]
  402936:	d00e      	beq.n	402956 <setvbuf+0x13e>
  402938:	07d1      	lsls	r1, r2, #31
  40293a:	d51a      	bpl.n	402972 <setvbuf+0x15a>
  40293c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40293e:	4276      	negs	r6, r6
  402940:	2300      	movs	r3, #0
  402942:	f015 0501 	ands.w	r5, r5, #1
  402946:	61a6      	str	r6, [r4, #24]
  402948:	60a3      	str	r3, [r4, #8]
  40294a:	d009      	beq.n	402960 <setvbuf+0x148>
  40294c:	2500      	movs	r5, #0
  40294e:	4628      	mov	r0, r5
  402950:	b003      	add	sp, #12
  402952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402956:	60a3      	str	r3, [r4, #8]
  402958:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40295a:	f015 0501 	ands.w	r5, r5, #1
  40295e:	d1f5      	bne.n	40294c <setvbuf+0x134>
  402960:	0593      	lsls	r3, r2, #22
  402962:	d4c0      	bmi.n	4028e6 <setvbuf+0xce>
  402964:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402966:	f001 fc91 	bl	40428c <__retarget_lock_release_recursive>
  40296a:	4628      	mov	r0, r5
  40296c:	b003      	add	sp, #12
  40296e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402972:	60a6      	str	r6, [r4, #8]
  402974:	e7f0      	b.n	402958 <setvbuf+0x140>
  402976:	4628      	mov	r0, r5
  402978:	f001 f8c6 	bl	403b08 <__sinit>
  40297c:	e7c7      	b.n	40290e <setvbuf+0xf6>
  40297e:	f04f 35ff 	mov.w	r5, #4294967295
  402982:	e7b0      	b.n	4028e6 <setvbuf+0xce>
  402984:	f8dd 9000 	ldr.w	r9, [sp]
  402988:	45b1      	cmp	r9, r6
  40298a:	d004      	beq.n	402996 <setvbuf+0x17e>
  40298c:	4648      	mov	r0, r9
  40298e:	f7ff fc17 	bl	4021c0 <malloc>
  402992:	4607      	mov	r7, r0
  402994:	b920      	cbnz	r0, 4029a0 <setvbuf+0x188>
  402996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40299a:	f04f 35ff 	mov.w	r5, #4294967295
  40299e:	e792      	b.n	4028c6 <setvbuf+0xae>
  4029a0:	464e      	mov	r6, r9
  4029a2:	e783      	b.n	4028ac <setvbuf+0x94>
  4029a4:	20000004 	.word	0x20000004
	...

004029c0 <strlen>:
  4029c0:	f890 f000 	pld	[r0]
  4029c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4029c8:	f020 0107 	bic.w	r1, r0, #7
  4029cc:	f06f 0c00 	mvn.w	ip, #0
  4029d0:	f010 0407 	ands.w	r4, r0, #7
  4029d4:	f891 f020 	pld	[r1, #32]
  4029d8:	f040 8049 	bne.w	402a6e <strlen+0xae>
  4029dc:	f04f 0400 	mov.w	r4, #0
  4029e0:	f06f 0007 	mvn.w	r0, #7
  4029e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4029e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4029ec:	f100 0008 	add.w	r0, r0, #8
  4029f0:	fa82 f24c 	uadd8	r2, r2, ip
  4029f4:	faa4 f28c 	sel	r2, r4, ip
  4029f8:	fa83 f34c 	uadd8	r3, r3, ip
  4029fc:	faa2 f38c 	sel	r3, r2, ip
  402a00:	bb4b      	cbnz	r3, 402a56 <strlen+0x96>
  402a02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402a06:	fa82 f24c 	uadd8	r2, r2, ip
  402a0a:	f100 0008 	add.w	r0, r0, #8
  402a0e:	faa4 f28c 	sel	r2, r4, ip
  402a12:	fa83 f34c 	uadd8	r3, r3, ip
  402a16:	faa2 f38c 	sel	r3, r2, ip
  402a1a:	b9e3      	cbnz	r3, 402a56 <strlen+0x96>
  402a1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402a20:	fa82 f24c 	uadd8	r2, r2, ip
  402a24:	f100 0008 	add.w	r0, r0, #8
  402a28:	faa4 f28c 	sel	r2, r4, ip
  402a2c:	fa83 f34c 	uadd8	r3, r3, ip
  402a30:	faa2 f38c 	sel	r3, r2, ip
  402a34:	b97b      	cbnz	r3, 402a56 <strlen+0x96>
  402a36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402a3a:	f101 0120 	add.w	r1, r1, #32
  402a3e:	fa82 f24c 	uadd8	r2, r2, ip
  402a42:	f100 0008 	add.w	r0, r0, #8
  402a46:	faa4 f28c 	sel	r2, r4, ip
  402a4a:	fa83 f34c 	uadd8	r3, r3, ip
  402a4e:	faa2 f38c 	sel	r3, r2, ip
  402a52:	2b00      	cmp	r3, #0
  402a54:	d0c6      	beq.n	4029e4 <strlen+0x24>
  402a56:	2a00      	cmp	r2, #0
  402a58:	bf04      	itt	eq
  402a5a:	3004      	addeq	r0, #4
  402a5c:	461a      	moveq	r2, r3
  402a5e:	ba12      	rev	r2, r2
  402a60:	fab2 f282 	clz	r2, r2
  402a64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402a68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402a6c:	4770      	bx	lr
  402a6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402a72:	f004 0503 	and.w	r5, r4, #3
  402a76:	f1c4 0000 	rsb	r0, r4, #0
  402a7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402a7e:	f014 0f04 	tst.w	r4, #4
  402a82:	f891 f040 	pld	[r1, #64]	; 0x40
  402a86:	fa0c f505 	lsl.w	r5, ip, r5
  402a8a:	ea62 0205 	orn	r2, r2, r5
  402a8e:	bf1c      	itt	ne
  402a90:	ea63 0305 	ornne	r3, r3, r5
  402a94:	4662      	movne	r2, ip
  402a96:	f04f 0400 	mov.w	r4, #0
  402a9a:	e7a9      	b.n	4029f0 <strlen+0x30>

00402a9c <__sprint_r.part.0>:
  402a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402aa0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402aa2:	049c      	lsls	r4, r3, #18
  402aa4:	4693      	mov	fp, r2
  402aa6:	d52f      	bpl.n	402b08 <__sprint_r.part.0+0x6c>
  402aa8:	6893      	ldr	r3, [r2, #8]
  402aaa:	6812      	ldr	r2, [r2, #0]
  402aac:	b353      	cbz	r3, 402b04 <__sprint_r.part.0+0x68>
  402aae:	460e      	mov	r6, r1
  402ab0:	4607      	mov	r7, r0
  402ab2:	f102 0908 	add.w	r9, r2, #8
  402ab6:	e919 0420 	ldmdb	r9, {r5, sl}
  402aba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402abe:	d017      	beq.n	402af0 <__sprint_r.part.0+0x54>
  402ac0:	3d04      	subs	r5, #4
  402ac2:	2400      	movs	r4, #0
  402ac4:	e001      	b.n	402aca <__sprint_r.part.0+0x2e>
  402ac6:	45a0      	cmp	r8, r4
  402ac8:	d010      	beq.n	402aec <__sprint_r.part.0+0x50>
  402aca:	4632      	mov	r2, r6
  402acc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402ad0:	4638      	mov	r0, r7
  402ad2:	f001 f8bb 	bl	403c4c <_fputwc_r>
  402ad6:	1c43      	adds	r3, r0, #1
  402ad8:	f104 0401 	add.w	r4, r4, #1
  402adc:	d1f3      	bne.n	402ac6 <__sprint_r.part.0+0x2a>
  402ade:	2300      	movs	r3, #0
  402ae0:	f8cb 3008 	str.w	r3, [fp, #8]
  402ae4:	f8cb 3004 	str.w	r3, [fp, #4]
  402ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402aec:	f8db 3008 	ldr.w	r3, [fp, #8]
  402af0:	f02a 0a03 	bic.w	sl, sl, #3
  402af4:	eba3 030a 	sub.w	r3, r3, sl
  402af8:	f8cb 3008 	str.w	r3, [fp, #8]
  402afc:	f109 0908 	add.w	r9, r9, #8
  402b00:	2b00      	cmp	r3, #0
  402b02:	d1d8      	bne.n	402ab6 <__sprint_r.part.0+0x1a>
  402b04:	2000      	movs	r0, #0
  402b06:	e7ea      	b.n	402ade <__sprint_r.part.0+0x42>
  402b08:	f001 fa0a 	bl	403f20 <__sfvwrite_r>
  402b0c:	2300      	movs	r3, #0
  402b0e:	f8cb 3008 	str.w	r3, [fp, #8]
  402b12:	f8cb 3004 	str.w	r3, [fp, #4]
  402b16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b1a:	bf00      	nop

00402b1c <_vfiprintf_r>:
  402b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b20:	b0ad      	sub	sp, #180	; 0xb4
  402b22:	461d      	mov	r5, r3
  402b24:	468b      	mov	fp, r1
  402b26:	4690      	mov	r8, r2
  402b28:	9307      	str	r3, [sp, #28]
  402b2a:	9006      	str	r0, [sp, #24]
  402b2c:	b118      	cbz	r0, 402b36 <_vfiprintf_r+0x1a>
  402b2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402b30:	2b00      	cmp	r3, #0
  402b32:	f000 80f3 	beq.w	402d1c <_vfiprintf_r+0x200>
  402b36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402b3a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402b3e:	07df      	lsls	r7, r3, #31
  402b40:	b281      	uxth	r1, r0
  402b42:	d402      	bmi.n	402b4a <_vfiprintf_r+0x2e>
  402b44:	058e      	lsls	r6, r1, #22
  402b46:	f140 80fc 	bpl.w	402d42 <_vfiprintf_r+0x226>
  402b4a:	048c      	lsls	r4, r1, #18
  402b4c:	d40a      	bmi.n	402b64 <_vfiprintf_r+0x48>
  402b4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402b52:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402b5a:	f8ab 100c 	strh.w	r1, [fp, #12]
  402b5e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402b62:	b289      	uxth	r1, r1
  402b64:	0708      	lsls	r0, r1, #28
  402b66:	f140 80b3 	bpl.w	402cd0 <_vfiprintf_r+0x1b4>
  402b6a:	f8db 3010 	ldr.w	r3, [fp, #16]
  402b6e:	2b00      	cmp	r3, #0
  402b70:	f000 80ae 	beq.w	402cd0 <_vfiprintf_r+0x1b4>
  402b74:	f001 031a 	and.w	r3, r1, #26
  402b78:	2b0a      	cmp	r3, #10
  402b7a:	f000 80b5 	beq.w	402ce8 <_vfiprintf_r+0x1cc>
  402b7e:	2300      	movs	r3, #0
  402b80:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402b84:	930b      	str	r3, [sp, #44]	; 0x2c
  402b86:	9311      	str	r3, [sp, #68]	; 0x44
  402b88:	9310      	str	r3, [sp, #64]	; 0x40
  402b8a:	9303      	str	r3, [sp, #12]
  402b8c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402b90:	46ca      	mov	sl, r9
  402b92:	f8cd b010 	str.w	fp, [sp, #16]
  402b96:	f898 3000 	ldrb.w	r3, [r8]
  402b9a:	4644      	mov	r4, r8
  402b9c:	b1fb      	cbz	r3, 402bde <_vfiprintf_r+0xc2>
  402b9e:	2b25      	cmp	r3, #37	; 0x25
  402ba0:	d102      	bne.n	402ba8 <_vfiprintf_r+0x8c>
  402ba2:	e01c      	b.n	402bde <_vfiprintf_r+0xc2>
  402ba4:	2b25      	cmp	r3, #37	; 0x25
  402ba6:	d003      	beq.n	402bb0 <_vfiprintf_r+0x94>
  402ba8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402bac:	2b00      	cmp	r3, #0
  402bae:	d1f9      	bne.n	402ba4 <_vfiprintf_r+0x88>
  402bb0:	eba4 0508 	sub.w	r5, r4, r8
  402bb4:	b19d      	cbz	r5, 402bde <_vfiprintf_r+0xc2>
  402bb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402bb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402bba:	f8ca 8000 	str.w	r8, [sl]
  402bbe:	3301      	adds	r3, #1
  402bc0:	442a      	add	r2, r5
  402bc2:	2b07      	cmp	r3, #7
  402bc4:	f8ca 5004 	str.w	r5, [sl, #4]
  402bc8:	9211      	str	r2, [sp, #68]	; 0x44
  402bca:	9310      	str	r3, [sp, #64]	; 0x40
  402bcc:	dd7a      	ble.n	402cc4 <_vfiprintf_r+0x1a8>
  402bce:	2a00      	cmp	r2, #0
  402bd0:	f040 84b0 	bne.w	403534 <_vfiprintf_r+0xa18>
  402bd4:	9b03      	ldr	r3, [sp, #12]
  402bd6:	9210      	str	r2, [sp, #64]	; 0x40
  402bd8:	442b      	add	r3, r5
  402bda:	46ca      	mov	sl, r9
  402bdc:	9303      	str	r3, [sp, #12]
  402bde:	7823      	ldrb	r3, [r4, #0]
  402be0:	2b00      	cmp	r3, #0
  402be2:	f000 83e0 	beq.w	4033a6 <_vfiprintf_r+0x88a>
  402be6:	2000      	movs	r0, #0
  402be8:	f04f 0300 	mov.w	r3, #0
  402bec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402bf0:	f104 0801 	add.w	r8, r4, #1
  402bf4:	7862      	ldrb	r2, [r4, #1]
  402bf6:	4605      	mov	r5, r0
  402bf8:	4606      	mov	r6, r0
  402bfa:	4603      	mov	r3, r0
  402bfc:	f04f 34ff 	mov.w	r4, #4294967295
  402c00:	f108 0801 	add.w	r8, r8, #1
  402c04:	f1a2 0120 	sub.w	r1, r2, #32
  402c08:	2958      	cmp	r1, #88	; 0x58
  402c0a:	f200 82de 	bhi.w	4031ca <_vfiprintf_r+0x6ae>
  402c0e:	e8df f011 	tbh	[pc, r1, lsl #1]
  402c12:	0221      	.short	0x0221
  402c14:	02dc02dc 	.word	0x02dc02dc
  402c18:	02dc0229 	.word	0x02dc0229
  402c1c:	02dc02dc 	.word	0x02dc02dc
  402c20:	02dc02dc 	.word	0x02dc02dc
  402c24:	028902dc 	.word	0x028902dc
  402c28:	02dc0295 	.word	0x02dc0295
  402c2c:	02bd00a2 	.word	0x02bd00a2
  402c30:	019f02dc 	.word	0x019f02dc
  402c34:	01a401a4 	.word	0x01a401a4
  402c38:	01a401a4 	.word	0x01a401a4
  402c3c:	01a401a4 	.word	0x01a401a4
  402c40:	01a401a4 	.word	0x01a401a4
  402c44:	02dc01a4 	.word	0x02dc01a4
  402c48:	02dc02dc 	.word	0x02dc02dc
  402c4c:	02dc02dc 	.word	0x02dc02dc
  402c50:	02dc02dc 	.word	0x02dc02dc
  402c54:	02dc02dc 	.word	0x02dc02dc
  402c58:	01b202dc 	.word	0x01b202dc
  402c5c:	02dc02dc 	.word	0x02dc02dc
  402c60:	02dc02dc 	.word	0x02dc02dc
  402c64:	02dc02dc 	.word	0x02dc02dc
  402c68:	02dc02dc 	.word	0x02dc02dc
  402c6c:	02dc02dc 	.word	0x02dc02dc
  402c70:	02dc0197 	.word	0x02dc0197
  402c74:	02dc02dc 	.word	0x02dc02dc
  402c78:	02dc02dc 	.word	0x02dc02dc
  402c7c:	02dc019b 	.word	0x02dc019b
  402c80:	025302dc 	.word	0x025302dc
  402c84:	02dc02dc 	.word	0x02dc02dc
  402c88:	02dc02dc 	.word	0x02dc02dc
  402c8c:	02dc02dc 	.word	0x02dc02dc
  402c90:	02dc02dc 	.word	0x02dc02dc
  402c94:	02dc02dc 	.word	0x02dc02dc
  402c98:	021b025a 	.word	0x021b025a
  402c9c:	02dc02dc 	.word	0x02dc02dc
  402ca0:	026e02dc 	.word	0x026e02dc
  402ca4:	02dc021b 	.word	0x02dc021b
  402ca8:	027302dc 	.word	0x027302dc
  402cac:	01f502dc 	.word	0x01f502dc
  402cb0:	02090182 	.word	0x02090182
  402cb4:	02dc02d7 	.word	0x02dc02d7
  402cb8:	02dc029a 	.word	0x02dc029a
  402cbc:	02dc00a7 	.word	0x02dc00a7
  402cc0:	022e02dc 	.word	0x022e02dc
  402cc4:	f10a 0a08 	add.w	sl, sl, #8
  402cc8:	9b03      	ldr	r3, [sp, #12]
  402cca:	442b      	add	r3, r5
  402ccc:	9303      	str	r3, [sp, #12]
  402cce:	e786      	b.n	402bde <_vfiprintf_r+0xc2>
  402cd0:	4659      	mov	r1, fp
  402cd2:	9806      	ldr	r0, [sp, #24]
  402cd4:	f000 fdac 	bl	403830 <__swsetup_r>
  402cd8:	bb18      	cbnz	r0, 402d22 <_vfiprintf_r+0x206>
  402cda:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402cde:	f001 031a 	and.w	r3, r1, #26
  402ce2:	2b0a      	cmp	r3, #10
  402ce4:	f47f af4b 	bne.w	402b7e <_vfiprintf_r+0x62>
  402ce8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402cec:	2b00      	cmp	r3, #0
  402cee:	f6ff af46 	blt.w	402b7e <_vfiprintf_r+0x62>
  402cf2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402cf6:	07db      	lsls	r3, r3, #31
  402cf8:	d405      	bmi.n	402d06 <_vfiprintf_r+0x1ea>
  402cfa:	058f      	lsls	r7, r1, #22
  402cfc:	d403      	bmi.n	402d06 <_vfiprintf_r+0x1ea>
  402cfe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402d02:	f001 fac3 	bl	40428c <__retarget_lock_release_recursive>
  402d06:	462b      	mov	r3, r5
  402d08:	4642      	mov	r2, r8
  402d0a:	4659      	mov	r1, fp
  402d0c:	9806      	ldr	r0, [sp, #24]
  402d0e:	f000 fd4d 	bl	4037ac <__sbprintf>
  402d12:	9003      	str	r0, [sp, #12]
  402d14:	9803      	ldr	r0, [sp, #12]
  402d16:	b02d      	add	sp, #180	; 0xb4
  402d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d1c:	f000 fef4 	bl	403b08 <__sinit>
  402d20:	e709      	b.n	402b36 <_vfiprintf_r+0x1a>
  402d22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402d26:	07d9      	lsls	r1, r3, #31
  402d28:	d404      	bmi.n	402d34 <_vfiprintf_r+0x218>
  402d2a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402d2e:	059a      	lsls	r2, r3, #22
  402d30:	f140 84aa 	bpl.w	403688 <_vfiprintf_r+0xb6c>
  402d34:	f04f 33ff 	mov.w	r3, #4294967295
  402d38:	9303      	str	r3, [sp, #12]
  402d3a:	9803      	ldr	r0, [sp, #12]
  402d3c:	b02d      	add	sp, #180	; 0xb4
  402d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d42:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402d46:	f001 fa9f 	bl	404288 <__retarget_lock_acquire_recursive>
  402d4a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402d4e:	b281      	uxth	r1, r0
  402d50:	e6fb      	b.n	402b4a <_vfiprintf_r+0x2e>
  402d52:	4276      	negs	r6, r6
  402d54:	9207      	str	r2, [sp, #28]
  402d56:	f043 0304 	orr.w	r3, r3, #4
  402d5a:	f898 2000 	ldrb.w	r2, [r8]
  402d5e:	e74f      	b.n	402c00 <_vfiprintf_r+0xe4>
  402d60:	9608      	str	r6, [sp, #32]
  402d62:	069e      	lsls	r6, r3, #26
  402d64:	f100 8450 	bmi.w	403608 <_vfiprintf_r+0xaec>
  402d68:	9907      	ldr	r1, [sp, #28]
  402d6a:	06dd      	lsls	r5, r3, #27
  402d6c:	460a      	mov	r2, r1
  402d6e:	f100 83ef 	bmi.w	403550 <_vfiprintf_r+0xa34>
  402d72:	0658      	lsls	r0, r3, #25
  402d74:	f140 83ec 	bpl.w	403550 <_vfiprintf_r+0xa34>
  402d78:	880e      	ldrh	r6, [r1, #0]
  402d7a:	3104      	adds	r1, #4
  402d7c:	2700      	movs	r7, #0
  402d7e:	2201      	movs	r2, #1
  402d80:	9107      	str	r1, [sp, #28]
  402d82:	f04f 0100 	mov.w	r1, #0
  402d86:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  402d8a:	2500      	movs	r5, #0
  402d8c:	1c61      	adds	r1, r4, #1
  402d8e:	f000 8116 	beq.w	402fbe <_vfiprintf_r+0x4a2>
  402d92:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402d96:	9102      	str	r1, [sp, #8]
  402d98:	ea56 0107 	orrs.w	r1, r6, r7
  402d9c:	f040 8114 	bne.w	402fc8 <_vfiprintf_r+0x4ac>
  402da0:	2c00      	cmp	r4, #0
  402da2:	f040 835c 	bne.w	40345e <_vfiprintf_r+0x942>
  402da6:	2a00      	cmp	r2, #0
  402da8:	f040 83b7 	bne.w	40351a <_vfiprintf_r+0x9fe>
  402dac:	f013 0301 	ands.w	r3, r3, #1
  402db0:	9305      	str	r3, [sp, #20]
  402db2:	f000 8457 	beq.w	403664 <_vfiprintf_r+0xb48>
  402db6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402dba:	2330      	movs	r3, #48	; 0x30
  402dbc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402dc0:	9b05      	ldr	r3, [sp, #20]
  402dc2:	42a3      	cmp	r3, r4
  402dc4:	bfb8      	it	lt
  402dc6:	4623      	movlt	r3, r4
  402dc8:	9301      	str	r3, [sp, #4]
  402dca:	b10d      	cbz	r5, 402dd0 <_vfiprintf_r+0x2b4>
  402dcc:	3301      	adds	r3, #1
  402dce:	9301      	str	r3, [sp, #4]
  402dd0:	9b02      	ldr	r3, [sp, #8]
  402dd2:	f013 0302 	ands.w	r3, r3, #2
  402dd6:	9309      	str	r3, [sp, #36]	; 0x24
  402dd8:	d002      	beq.n	402de0 <_vfiprintf_r+0x2c4>
  402dda:	9b01      	ldr	r3, [sp, #4]
  402ddc:	3302      	adds	r3, #2
  402dde:	9301      	str	r3, [sp, #4]
  402de0:	9b02      	ldr	r3, [sp, #8]
  402de2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402de6:	930a      	str	r3, [sp, #40]	; 0x28
  402de8:	f040 8217 	bne.w	40321a <_vfiprintf_r+0x6fe>
  402dec:	9b08      	ldr	r3, [sp, #32]
  402dee:	9a01      	ldr	r2, [sp, #4]
  402df0:	1a9d      	subs	r5, r3, r2
  402df2:	2d00      	cmp	r5, #0
  402df4:	f340 8211 	ble.w	40321a <_vfiprintf_r+0x6fe>
  402df8:	2d10      	cmp	r5, #16
  402dfa:	f340 8490 	ble.w	40371e <_vfiprintf_r+0xc02>
  402dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402e00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402e02:	4ec4      	ldr	r6, [pc, #784]	; (403114 <_vfiprintf_r+0x5f8>)
  402e04:	46d6      	mov	lr, sl
  402e06:	2710      	movs	r7, #16
  402e08:	46a2      	mov	sl, r4
  402e0a:	4619      	mov	r1, r3
  402e0c:	9c06      	ldr	r4, [sp, #24]
  402e0e:	e007      	b.n	402e20 <_vfiprintf_r+0x304>
  402e10:	f101 0c02 	add.w	ip, r1, #2
  402e14:	f10e 0e08 	add.w	lr, lr, #8
  402e18:	4601      	mov	r1, r0
  402e1a:	3d10      	subs	r5, #16
  402e1c:	2d10      	cmp	r5, #16
  402e1e:	dd11      	ble.n	402e44 <_vfiprintf_r+0x328>
  402e20:	1c48      	adds	r0, r1, #1
  402e22:	3210      	adds	r2, #16
  402e24:	2807      	cmp	r0, #7
  402e26:	9211      	str	r2, [sp, #68]	; 0x44
  402e28:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402e2c:	9010      	str	r0, [sp, #64]	; 0x40
  402e2e:	ddef      	ble.n	402e10 <_vfiprintf_r+0x2f4>
  402e30:	2a00      	cmp	r2, #0
  402e32:	f040 81e4 	bne.w	4031fe <_vfiprintf_r+0x6e2>
  402e36:	3d10      	subs	r5, #16
  402e38:	2d10      	cmp	r5, #16
  402e3a:	4611      	mov	r1, r2
  402e3c:	f04f 0c01 	mov.w	ip, #1
  402e40:	46ce      	mov	lr, r9
  402e42:	dced      	bgt.n	402e20 <_vfiprintf_r+0x304>
  402e44:	4654      	mov	r4, sl
  402e46:	4661      	mov	r1, ip
  402e48:	46f2      	mov	sl, lr
  402e4a:	442a      	add	r2, r5
  402e4c:	2907      	cmp	r1, #7
  402e4e:	9211      	str	r2, [sp, #68]	; 0x44
  402e50:	f8ca 6000 	str.w	r6, [sl]
  402e54:	f8ca 5004 	str.w	r5, [sl, #4]
  402e58:	9110      	str	r1, [sp, #64]	; 0x40
  402e5a:	f300 82ec 	bgt.w	403436 <_vfiprintf_r+0x91a>
  402e5e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402e62:	f10a 0a08 	add.w	sl, sl, #8
  402e66:	1c48      	adds	r0, r1, #1
  402e68:	2d00      	cmp	r5, #0
  402e6a:	f040 81de 	bne.w	40322a <_vfiprintf_r+0x70e>
  402e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402e70:	2b00      	cmp	r3, #0
  402e72:	f000 81f8 	beq.w	403266 <_vfiprintf_r+0x74a>
  402e76:	3202      	adds	r2, #2
  402e78:	a90e      	add	r1, sp, #56	; 0x38
  402e7a:	2302      	movs	r3, #2
  402e7c:	2807      	cmp	r0, #7
  402e7e:	9211      	str	r2, [sp, #68]	; 0x44
  402e80:	9010      	str	r0, [sp, #64]	; 0x40
  402e82:	e88a 000a 	stmia.w	sl, {r1, r3}
  402e86:	f340 81ea 	ble.w	40325e <_vfiprintf_r+0x742>
  402e8a:	2a00      	cmp	r2, #0
  402e8c:	f040 838c 	bne.w	4035a8 <_vfiprintf_r+0xa8c>
  402e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e92:	2b80      	cmp	r3, #128	; 0x80
  402e94:	f04f 0001 	mov.w	r0, #1
  402e98:	4611      	mov	r1, r2
  402e9a:	46ca      	mov	sl, r9
  402e9c:	f040 81e7 	bne.w	40326e <_vfiprintf_r+0x752>
  402ea0:	9b08      	ldr	r3, [sp, #32]
  402ea2:	9d01      	ldr	r5, [sp, #4]
  402ea4:	1b5e      	subs	r6, r3, r5
  402ea6:	2e00      	cmp	r6, #0
  402ea8:	f340 81e1 	ble.w	40326e <_vfiprintf_r+0x752>
  402eac:	2e10      	cmp	r6, #16
  402eae:	4d9a      	ldr	r5, [pc, #616]	; (403118 <_vfiprintf_r+0x5fc>)
  402eb0:	f340 8450 	ble.w	403754 <_vfiprintf_r+0xc38>
  402eb4:	46d4      	mov	ip, sl
  402eb6:	2710      	movs	r7, #16
  402eb8:	46a2      	mov	sl, r4
  402eba:	9c06      	ldr	r4, [sp, #24]
  402ebc:	e007      	b.n	402ece <_vfiprintf_r+0x3b2>
  402ebe:	f101 0e02 	add.w	lr, r1, #2
  402ec2:	f10c 0c08 	add.w	ip, ip, #8
  402ec6:	4601      	mov	r1, r0
  402ec8:	3e10      	subs	r6, #16
  402eca:	2e10      	cmp	r6, #16
  402ecc:	dd11      	ble.n	402ef2 <_vfiprintf_r+0x3d6>
  402ece:	1c48      	adds	r0, r1, #1
  402ed0:	3210      	adds	r2, #16
  402ed2:	2807      	cmp	r0, #7
  402ed4:	9211      	str	r2, [sp, #68]	; 0x44
  402ed6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402eda:	9010      	str	r0, [sp, #64]	; 0x40
  402edc:	ddef      	ble.n	402ebe <_vfiprintf_r+0x3a2>
  402ede:	2a00      	cmp	r2, #0
  402ee0:	f040 829d 	bne.w	40341e <_vfiprintf_r+0x902>
  402ee4:	3e10      	subs	r6, #16
  402ee6:	2e10      	cmp	r6, #16
  402ee8:	f04f 0e01 	mov.w	lr, #1
  402eec:	4611      	mov	r1, r2
  402eee:	46cc      	mov	ip, r9
  402ef0:	dced      	bgt.n	402ece <_vfiprintf_r+0x3b2>
  402ef2:	4654      	mov	r4, sl
  402ef4:	46e2      	mov	sl, ip
  402ef6:	4432      	add	r2, r6
  402ef8:	f1be 0f07 	cmp.w	lr, #7
  402efc:	9211      	str	r2, [sp, #68]	; 0x44
  402efe:	e88a 0060 	stmia.w	sl, {r5, r6}
  402f02:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402f06:	f300 8369 	bgt.w	4035dc <_vfiprintf_r+0xac0>
  402f0a:	f10a 0a08 	add.w	sl, sl, #8
  402f0e:	f10e 0001 	add.w	r0, lr, #1
  402f12:	4671      	mov	r1, lr
  402f14:	e1ab      	b.n	40326e <_vfiprintf_r+0x752>
  402f16:	9608      	str	r6, [sp, #32]
  402f18:	f013 0220 	ands.w	r2, r3, #32
  402f1c:	f040 838c 	bne.w	403638 <_vfiprintf_r+0xb1c>
  402f20:	f013 0110 	ands.w	r1, r3, #16
  402f24:	f040 831a 	bne.w	40355c <_vfiprintf_r+0xa40>
  402f28:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402f2c:	f000 8316 	beq.w	40355c <_vfiprintf_r+0xa40>
  402f30:	9807      	ldr	r0, [sp, #28]
  402f32:	460a      	mov	r2, r1
  402f34:	4601      	mov	r1, r0
  402f36:	3104      	adds	r1, #4
  402f38:	8806      	ldrh	r6, [r0, #0]
  402f3a:	9107      	str	r1, [sp, #28]
  402f3c:	2700      	movs	r7, #0
  402f3e:	e720      	b.n	402d82 <_vfiprintf_r+0x266>
  402f40:	9608      	str	r6, [sp, #32]
  402f42:	f043 0310 	orr.w	r3, r3, #16
  402f46:	e7e7      	b.n	402f18 <_vfiprintf_r+0x3fc>
  402f48:	9608      	str	r6, [sp, #32]
  402f4a:	f043 0310 	orr.w	r3, r3, #16
  402f4e:	e708      	b.n	402d62 <_vfiprintf_r+0x246>
  402f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402f54:	f898 2000 	ldrb.w	r2, [r8]
  402f58:	e652      	b.n	402c00 <_vfiprintf_r+0xe4>
  402f5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402f5e:	2600      	movs	r6, #0
  402f60:	f818 2b01 	ldrb.w	r2, [r8], #1
  402f64:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402f68:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402f6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402f70:	2909      	cmp	r1, #9
  402f72:	d9f5      	bls.n	402f60 <_vfiprintf_r+0x444>
  402f74:	e646      	b.n	402c04 <_vfiprintf_r+0xe8>
  402f76:	9608      	str	r6, [sp, #32]
  402f78:	2800      	cmp	r0, #0
  402f7a:	f040 8408 	bne.w	40378e <_vfiprintf_r+0xc72>
  402f7e:	f043 0310 	orr.w	r3, r3, #16
  402f82:	069e      	lsls	r6, r3, #26
  402f84:	f100 834c 	bmi.w	403620 <_vfiprintf_r+0xb04>
  402f88:	06dd      	lsls	r5, r3, #27
  402f8a:	f100 82f3 	bmi.w	403574 <_vfiprintf_r+0xa58>
  402f8e:	0658      	lsls	r0, r3, #25
  402f90:	f140 82f0 	bpl.w	403574 <_vfiprintf_r+0xa58>
  402f94:	9d07      	ldr	r5, [sp, #28]
  402f96:	f9b5 6000 	ldrsh.w	r6, [r5]
  402f9a:	462a      	mov	r2, r5
  402f9c:	17f7      	asrs	r7, r6, #31
  402f9e:	3204      	adds	r2, #4
  402fa0:	4630      	mov	r0, r6
  402fa2:	4639      	mov	r1, r7
  402fa4:	9207      	str	r2, [sp, #28]
  402fa6:	2800      	cmp	r0, #0
  402fa8:	f171 0200 	sbcs.w	r2, r1, #0
  402fac:	f2c0 835d 	blt.w	40366a <_vfiprintf_r+0xb4e>
  402fb0:	1c61      	adds	r1, r4, #1
  402fb2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402fb6:	f04f 0201 	mov.w	r2, #1
  402fba:	f47f aeea 	bne.w	402d92 <_vfiprintf_r+0x276>
  402fbe:	ea56 0107 	orrs.w	r1, r6, r7
  402fc2:	f000 824d 	beq.w	403460 <_vfiprintf_r+0x944>
  402fc6:	9302      	str	r3, [sp, #8]
  402fc8:	2a01      	cmp	r2, #1
  402fca:	f000 828c 	beq.w	4034e6 <_vfiprintf_r+0x9ca>
  402fce:	2a02      	cmp	r2, #2
  402fd0:	f040 825c 	bne.w	40348c <_vfiprintf_r+0x970>
  402fd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402fd6:	46cb      	mov	fp, r9
  402fd8:	0933      	lsrs	r3, r6, #4
  402fda:	f006 010f 	and.w	r1, r6, #15
  402fde:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402fe2:	093a      	lsrs	r2, r7, #4
  402fe4:	461e      	mov	r6, r3
  402fe6:	4617      	mov	r7, r2
  402fe8:	5c43      	ldrb	r3, [r0, r1]
  402fea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  402fee:	ea56 0307 	orrs.w	r3, r6, r7
  402ff2:	d1f1      	bne.n	402fd8 <_vfiprintf_r+0x4bc>
  402ff4:	eba9 030b 	sub.w	r3, r9, fp
  402ff8:	9305      	str	r3, [sp, #20]
  402ffa:	e6e1      	b.n	402dc0 <_vfiprintf_r+0x2a4>
  402ffc:	2800      	cmp	r0, #0
  402ffe:	f040 83c0 	bne.w	403782 <_vfiprintf_r+0xc66>
  403002:	0699      	lsls	r1, r3, #26
  403004:	f100 8367 	bmi.w	4036d6 <_vfiprintf_r+0xbba>
  403008:	06da      	lsls	r2, r3, #27
  40300a:	f100 80f1 	bmi.w	4031f0 <_vfiprintf_r+0x6d4>
  40300e:	065b      	lsls	r3, r3, #25
  403010:	f140 80ee 	bpl.w	4031f0 <_vfiprintf_r+0x6d4>
  403014:	9a07      	ldr	r2, [sp, #28]
  403016:	6813      	ldr	r3, [r2, #0]
  403018:	3204      	adds	r2, #4
  40301a:	9207      	str	r2, [sp, #28]
  40301c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403020:	801a      	strh	r2, [r3, #0]
  403022:	e5b8      	b.n	402b96 <_vfiprintf_r+0x7a>
  403024:	9807      	ldr	r0, [sp, #28]
  403026:	4a3d      	ldr	r2, [pc, #244]	; (40311c <_vfiprintf_r+0x600>)
  403028:	9608      	str	r6, [sp, #32]
  40302a:	920b      	str	r2, [sp, #44]	; 0x2c
  40302c:	6806      	ldr	r6, [r0, #0]
  40302e:	2278      	movs	r2, #120	; 0x78
  403030:	2130      	movs	r1, #48	; 0x30
  403032:	3004      	adds	r0, #4
  403034:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403038:	f043 0302 	orr.w	r3, r3, #2
  40303c:	9007      	str	r0, [sp, #28]
  40303e:	2700      	movs	r7, #0
  403040:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403044:	2202      	movs	r2, #2
  403046:	e69c      	b.n	402d82 <_vfiprintf_r+0x266>
  403048:	9608      	str	r6, [sp, #32]
  40304a:	2800      	cmp	r0, #0
  40304c:	d099      	beq.n	402f82 <_vfiprintf_r+0x466>
  40304e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403052:	e796      	b.n	402f82 <_vfiprintf_r+0x466>
  403054:	f898 2000 	ldrb.w	r2, [r8]
  403058:	2d00      	cmp	r5, #0
  40305a:	f47f add1 	bne.w	402c00 <_vfiprintf_r+0xe4>
  40305e:	2001      	movs	r0, #1
  403060:	2520      	movs	r5, #32
  403062:	e5cd      	b.n	402c00 <_vfiprintf_r+0xe4>
  403064:	f043 0301 	orr.w	r3, r3, #1
  403068:	f898 2000 	ldrb.w	r2, [r8]
  40306c:	e5c8      	b.n	402c00 <_vfiprintf_r+0xe4>
  40306e:	9608      	str	r6, [sp, #32]
  403070:	2800      	cmp	r0, #0
  403072:	f040 8393 	bne.w	40379c <_vfiprintf_r+0xc80>
  403076:	4929      	ldr	r1, [pc, #164]	; (40311c <_vfiprintf_r+0x600>)
  403078:	910b      	str	r1, [sp, #44]	; 0x2c
  40307a:	069f      	lsls	r7, r3, #26
  40307c:	f100 82e8 	bmi.w	403650 <_vfiprintf_r+0xb34>
  403080:	9807      	ldr	r0, [sp, #28]
  403082:	06de      	lsls	r6, r3, #27
  403084:	4601      	mov	r1, r0
  403086:	f100 8270 	bmi.w	40356a <_vfiprintf_r+0xa4e>
  40308a:	065d      	lsls	r5, r3, #25
  40308c:	f140 826d 	bpl.w	40356a <_vfiprintf_r+0xa4e>
  403090:	3104      	adds	r1, #4
  403092:	8806      	ldrh	r6, [r0, #0]
  403094:	9107      	str	r1, [sp, #28]
  403096:	2700      	movs	r7, #0
  403098:	07d8      	lsls	r0, r3, #31
  40309a:	f140 8222 	bpl.w	4034e2 <_vfiprintf_r+0x9c6>
  40309e:	ea56 0107 	orrs.w	r1, r6, r7
  4030a2:	f000 821e 	beq.w	4034e2 <_vfiprintf_r+0x9c6>
  4030a6:	2130      	movs	r1, #48	; 0x30
  4030a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4030ac:	f043 0302 	orr.w	r3, r3, #2
  4030b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4030b4:	2202      	movs	r2, #2
  4030b6:	e664      	b.n	402d82 <_vfiprintf_r+0x266>
  4030b8:	9608      	str	r6, [sp, #32]
  4030ba:	2800      	cmp	r0, #0
  4030bc:	f040 836b 	bne.w	403796 <_vfiprintf_r+0xc7a>
  4030c0:	4917      	ldr	r1, [pc, #92]	; (403120 <_vfiprintf_r+0x604>)
  4030c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4030c4:	e7d9      	b.n	40307a <_vfiprintf_r+0x55e>
  4030c6:	9907      	ldr	r1, [sp, #28]
  4030c8:	9608      	str	r6, [sp, #32]
  4030ca:	680a      	ldr	r2, [r1, #0]
  4030cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4030d0:	f04f 0000 	mov.w	r0, #0
  4030d4:	460a      	mov	r2, r1
  4030d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4030da:	3204      	adds	r2, #4
  4030dc:	2001      	movs	r0, #1
  4030de:	9001      	str	r0, [sp, #4]
  4030e0:	9207      	str	r2, [sp, #28]
  4030e2:	9005      	str	r0, [sp, #20]
  4030e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4030e8:	9302      	str	r3, [sp, #8]
  4030ea:	2400      	movs	r4, #0
  4030ec:	e670      	b.n	402dd0 <_vfiprintf_r+0x2b4>
  4030ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030f2:	f898 2000 	ldrb.w	r2, [r8]
  4030f6:	e583      	b.n	402c00 <_vfiprintf_r+0xe4>
  4030f8:	f898 2000 	ldrb.w	r2, [r8]
  4030fc:	2a6c      	cmp	r2, #108	; 0x6c
  4030fe:	bf03      	ittte	eq
  403100:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403104:	f043 0320 	orreq.w	r3, r3, #32
  403108:	f108 0801 	addeq.w	r8, r8, #1
  40310c:	f043 0310 	orrne.w	r3, r3, #16
  403110:	e576      	b.n	402c00 <_vfiprintf_r+0xe4>
  403112:	bf00      	nop
  403114:	00404e2c 	.word	0x00404e2c
  403118:	00404e3c 	.word	0x00404e3c
  40311c:	00404e10 	.word	0x00404e10
  403120:	00404dfc 	.word	0x00404dfc
  403124:	9907      	ldr	r1, [sp, #28]
  403126:	680e      	ldr	r6, [r1, #0]
  403128:	460a      	mov	r2, r1
  40312a:	2e00      	cmp	r6, #0
  40312c:	f102 0204 	add.w	r2, r2, #4
  403130:	f6ff ae0f 	blt.w	402d52 <_vfiprintf_r+0x236>
  403134:	9207      	str	r2, [sp, #28]
  403136:	f898 2000 	ldrb.w	r2, [r8]
  40313a:	e561      	b.n	402c00 <_vfiprintf_r+0xe4>
  40313c:	f898 2000 	ldrb.w	r2, [r8]
  403140:	2001      	movs	r0, #1
  403142:	252b      	movs	r5, #43	; 0x2b
  403144:	e55c      	b.n	402c00 <_vfiprintf_r+0xe4>
  403146:	9907      	ldr	r1, [sp, #28]
  403148:	9608      	str	r6, [sp, #32]
  40314a:	f8d1 b000 	ldr.w	fp, [r1]
  40314e:	f04f 0200 	mov.w	r2, #0
  403152:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403156:	1d0e      	adds	r6, r1, #4
  403158:	f1bb 0f00 	cmp.w	fp, #0
  40315c:	f000 82e5 	beq.w	40372a <_vfiprintf_r+0xc0e>
  403160:	1c67      	adds	r7, r4, #1
  403162:	f000 82c4 	beq.w	4036ee <_vfiprintf_r+0xbd2>
  403166:	4622      	mov	r2, r4
  403168:	2100      	movs	r1, #0
  40316a:	4658      	mov	r0, fp
  40316c:	9301      	str	r3, [sp, #4]
  40316e:	f001 f91f 	bl	4043b0 <memchr>
  403172:	9b01      	ldr	r3, [sp, #4]
  403174:	2800      	cmp	r0, #0
  403176:	f000 82e5 	beq.w	403744 <_vfiprintf_r+0xc28>
  40317a:	eba0 020b 	sub.w	r2, r0, fp
  40317e:	9205      	str	r2, [sp, #20]
  403180:	9607      	str	r6, [sp, #28]
  403182:	9302      	str	r3, [sp, #8]
  403184:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403188:	2400      	movs	r4, #0
  40318a:	e619      	b.n	402dc0 <_vfiprintf_r+0x2a4>
  40318c:	f898 2000 	ldrb.w	r2, [r8]
  403190:	2a2a      	cmp	r2, #42	; 0x2a
  403192:	f108 0701 	add.w	r7, r8, #1
  403196:	f000 82e9 	beq.w	40376c <_vfiprintf_r+0xc50>
  40319a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40319e:	2909      	cmp	r1, #9
  4031a0:	46b8      	mov	r8, r7
  4031a2:	f04f 0400 	mov.w	r4, #0
  4031a6:	f63f ad2d 	bhi.w	402c04 <_vfiprintf_r+0xe8>
  4031aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4031ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4031b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4031b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4031ba:	2909      	cmp	r1, #9
  4031bc:	d9f5      	bls.n	4031aa <_vfiprintf_r+0x68e>
  4031be:	e521      	b.n	402c04 <_vfiprintf_r+0xe8>
  4031c0:	f043 0320 	orr.w	r3, r3, #32
  4031c4:	f898 2000 	ldrb.w	r2, [r8]
  4031c8:	e51a      	b.n	402c00 <_vfiprintf_r+0xe4>
  4031ca:	9608      	str	r6, [sp, #32]
  4031cc:	2800      	cmp	r0, #0
  4031ce:	f040 82db 	bne.w	403788 <_vfiprintf_r+0xc6c>
  4031d2:	2a00      	cmp	r2, #0
  4031d4:	f000 80e7 	beq.w	4033a6 <_vfiprintf_r+0x88a>
  4031d8:	2101      	movs	r1, #1
  4031da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4031de:	f04f 0200 	mov.w	r2, #0
  4031e2:	9101      	str	r1, [sp, #4]
  4031e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4031e8:	9105      	str	r1, [sp, #20]
  4031ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4031ee:	e77b      	b.n	4030e8 <_vfiprintf_r+0x5cc>
  4031f0:	9a07      	ldr	r2, [sp, #28]
  4031f2:	6813      	ldr	r3, [r2, #0]
  4031f4:	3204      	adds	r2, #4
  4031f6:	9207      	str	r2, [sp, #28]
  4031f8:	9a03      	ldr	r2, [sp, #12]
  4031fa:	601a      	str	r2, [r3, #0]
  4031fc:	e4cb      	b.n	402b96 <_vfiprintf_r+0x7a>
  4031fe:	aa0f      	add	r2, sp, #60	; 0x3c
  403200:	9904      	ldr	r1, [sp, #16]
  403202:	4620      	mov	r0, r4
  403204:	f7ff fc4a 	bl	402a9c <__sprint_r.part.0>
  403208:	2800      	cmp	r0, #0
  40320a:	f040 8139 	bne.w	403480 <_vfiprintf_r+0x964>
  40320e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403210:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403212:	f101 0c01 	add.w	ip, r1, #1
  403216:	46ce      	mov	lr, r9
  403218:	e5ff      	b.n	402e1a <_vfiprintf_r+0x2fe>
  40321a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40321c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40321e:	1c48      	adds	r0, r1, #1
  403220:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403224:	2d00      	cmp	r5, #0
  403226:	f43f ae22 	beq.w	402e6e <_vfiprintf_r+0x352>
  40322a:	3201      	adds	r2, #1
  40322c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403230:	2101      	movs	r1, #1
  403232:	2807      	cmp	r0, #7
  403234:	9211      	str	r2, [sp, #68]	; 0x44
  403236:	9010      	str	r0, [sp, #64]	; 0x40
  403238:	f8ca 5000 	str.w	r5, [sl]
  40323c:	f8ca 1004 	str.w	r1, [sl, #4]
  403240:	f340 8108 	ble.w	403454 <_vfiprintf_r+0x938>
  403244:	2a00      	cmp	r2, #0
  403246:	f040 81bc 	bne.w	4035c2 <_vfiprintf_r+0xaa6>
  40324a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40324c:	2b00      	cmp	r3, #0
  40324e:	f43f ae1f 	beq.w	402e90 <_vfiprintf_r+0x374>
  403252:	ab0e      	add	r3, sp, #56	; 0x38
  403254:	2202      	movs	r2, #2
  403256:	4608      	mov	r0, r1
  403258:	931c      	str	r3, [sp, #112]	; 0x70
  40325a:	921d      	str	r2, [sp, #116]	; 0x74
  40325c:	46ca      	mov	sl, r9
  40325e:	4601      	mov	r1, r0
  403260:	f10a 0a08 	add.w	sl, sl, #8
  403264:	3001      	adds	r0, #1
  403266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403268:	2b80      	cmp	r3, #128	; 0x80
  40326a:	f43f ae19 	beq.w	402ea0 <_vfiprintf_r+0x384>
  40326e:	9b05      	ldr	r3, [sp, #20]
  403270:	1ae4      	subs	r4, r4, r3
  403272:	2c00      	cmp	r4, #0
  403274:	dd2e      	ble.n	4032d4 <_vfiprintf_r+0x7b8>
  403276:	2c10      	cmp	r4, #16
  403278:	4db3      	ldr	r5, [pc, #716]	; (403548 <_vfiprintf_r+0xa2c>)
  40327a:	dd1e      	ble.n	4032ba <_vfiprintf_r+0x79e>
  40327c:	46d6      	mov	lr, sl
  40327e:	2610      	movs	r6, #16
  403280:	9f06      	ldr	r7, [sp, #24]
  403282:	f8dd a010 	ldr.w	sl, [sp, #16]
  403286:	e006      	b.n	403296 <_vfiprintf_r+0x77a>
  403288:	1c88      	adds	r0, r1, #2
  40328a:	f10e 0e08 	add.w	lr, lr, #8
  40328e:	4619      	mov	r1, r3
  403290:	3c10      	subs	r4, #16
  403292:	2c10      	cmp	r4, #16
  403294:	dd10      	ble.n	4032b8 <_vfiprintf_r+0x79c>
  403296:	1c4b      	adds	r3, r1, #1
  403298:	3210      	adds	r2, #16
  40329a:	2b07      	cmp	r3, #7
  40329c:	9211      	str	r2, [sp, #68]	; 0x44
  40329e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4032a2:	9310      	str	r3, [sp, #64]	; 0x40
  4032a4:	ddf0      	ble.n	403288 <_vfiprintf_r+0x76c>
  4032a6:	2a00      	cmp	r2, #0
  4032a8:	d165      	bne.n	403376 <_vfiprintf_r+0x85a>
  4032aa:	3c10      	subs	r4, #16
  4032ac:	2c10      	cmp	r4, #16
  4032ae:	f04f 0001 	mov.w	r0, #1
  4032b2:	4611      	mov	r1, r2
  4032b4:	46ce      	mov	lr, r9
  4032b6:	dcee      	bgt.n	403296 <_vfiprintf_r+0x77a>
  4032b8:	46f2      	mov	sl, lr
  4032ba:	4422      	add	r2, r4
  4032bc:	2807      	cmp	r0, #7
  4032be:	9211      	str	r2, [sp, #68]	; 0x44
  4032c0:	f8ca 5000 	str.w	r5, [sl]
  4032c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4032c8:	9010      	str	r0, [sp, #64]	; 0x40
  4032ca:	f300 8085 	bgt.w	4033d8 <_vfiprintf_r+0x8bc>
  4032ce:	f10a 0a08 	add.w	sl, sl, #8
  4032d2:	3001      	adds	r0, #1
  4032d4:	9905      	ldr	r1, [sp, #20]
  4032d6:	f8ca b000 	str.w	fp, [sl]
  4032da:	440a      	add	r2, r1
  4032dc:	2807      	cmp	r0, #7
  4032de:	9211      	str	r2, [sp, #68]	; 0x44
  4032e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4032e4:	9010      	str	r0, [sp, #64]	; 0x40
  4032e6:	f340 8082 	ble.w	4033ee <_vfiprintf_r+0x8d2>
  4032ea:	2a00      	cmp	r2, #0
  4032ec:	f040 8118 	bne.w	403520 <_vfiprintf_r+0xa04>
  4032f0:	9b02      	ldr	r3, [sp, #8]
  4032f2:	9210      	str	r2, [sp, #64]	; 0x40
  4032f4:	0758      	lsls	r0, r3, #29
  4032f6:	d535      	bpl.n	403364 <_vfiprintf_r+0x848>
  4032f8:	9b08      	ldr	r3, [sp, #32]
  4032fa:	9901      	ldr	r1, [sp, #4]
  4032fc:	1a5c      	subs	r4, r3, r1
  4032fe:	2c00      	cmp	r4, #0
  403300:	f340 80e7 	ble.w	4034d2 <_vfiprintf_r+0x9b6>
  403304:	46ca      	mov	sl, r9
  403306:	2c10      	cmp	r4, #16
  403308:	f340 8218 	ble.w	40373c <_vfiprintf_r+0xc20>
  40330c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40330e:	4e8f      	ldr	r6, [pc, #572]	; (40354c <_vfiprintf_r+0xa30>)
  403310:	9f06      	ldr	r7, [sp, #24]
  403312:	f8dd b010 	ldr.w	fp, [sp, #16]
  403316:	2510      	movs	r5, #16
  403318:	e006      	b.n	403328 <_vfiprintf_r+0x80c>
  40331a:	1c88      	adds	r0, r1, #2
  40331c:	f10a 0a08 	add.w	sl, sl, #8
  403320:	4619      	mov	r1, r3
  403322:	3c10      	subs	r4, #16
  403324:	2c10      	cmp	r4, #16
  403326:	dd11      	ble.n	40334c <_vfiprintf_r+0x830>
  403328:	1c4b      	adds	r3, r1, #1
  40332a:	3210      	adds	r2, #16
  40332c:	2b07      	cmp	r3, #7
  40332e:	9211      	str	r2, [sp, #68]	; 0x44
  403330:	f8ca 6000 	str.w	r6, [sl]
  403334:	f8ca 5004 	str.w	r5, [sl, #4]
  403338:	9310      	str	r3, [sp, #64]	; 0x40
  40333a:	ddee      	ble.n	40331a <_vfiprintf_r+0x7fe>
  40333c:	bb42      	cbnz	r2, 403390 <_vfiprintf_r+0x874>
  40333e:	3c10      	subs	r4, #16
  403340:	2c10      	cmp	r4, #16
  403342:	f04f 0001 	mov.w	r0, #1
  403346:	4611      	mov	r1, r2
  403348:	46ca      	mov	sl, r9
  40334a:	dced      	bgt.n	403328 <_vfiprintf_r+0x80c>
  40334c:	4422      	add	r2, r4
  40334e:	2807      	cmp	r0, #7
  403350:	9211      	str	r2, [sp, #68]	; 0x44
  403352:	f8ca 6000 	str.w	r6, [sl]
  403356:	f8ca 4004 	str.w	r4, [sl, #4]
  40335a:	9010      	str	r0, [sp, #64]	; 0x40
  40335c:	dd51      	ble.n	403402 <_vfiprintf_r+0x8e6>
  40335e:	2a00      	cmp	r2, #0
  403360:	f040 819b 	bne.w	40369a <_vfiprintf_r+0xb7e>
  403364:	9b03      	ldr	r3, [sp, #12]
  403366:	9a08      	ldr	r2, [sp, #32]
  403368:	9901      	ldr	r1, [sp, #4]
  40336a:	428a      	cmp	r2, r1
  40336c:	bfac      	ite	ge
  40336e:	189b      	addge	r3, r3, r2
  403370:	185b      	addlt	r3, r3, r1
  403372:	9303      	str	r3, [sp, #12]
  403374:	e04e      	b.n	403414 <_vfiprintf_r+0x8f8>
  403376:	aa0f      	add	r2, sp, #60	; 0x3c
  403378:	4651      	mov	r1, sl
  40337a:	4638      	mov	r0, r7
  40337c:	f7ff fb8e 	bl	402a9c <__sprint_r.part.0>
  403380:	2800      	cmp	r0, #0
  403382:	f040 813f 	bne.w	403604 <_vfiprintf_r+0xae8>
  403386:	9910      	ldr	r1, [sp, #64]	; 0x40
  403388:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40338a:	1c48      	adds	r0, r1, #1
  40338c:	46ce      	mov	lr, r9
  40338e:	e77f      	b.n	403290 <_vfiprintf_r+0x774>
  403390:	aa0f      	add	r2, sp, #60	; 0x3c
  403392:	4659      	mov	r1, fp
  403394:	4638      	mov	r0, r7
  403396:	f7ff fb81 	bl	402a9c <__sprint_r.part.0>
  40339a:	b960      	cbnz	r0, 4033b6 <_vfiprintf_r+0x89a>
  40339c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40339e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4033a0:	1c48      	adds	r0, r1, #1
  4033a2:	46ca      	mov	sl, r9
  4033a4:	e7bd      	b.n	403322 <_vfiprintf_r+0x806>
  4033a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4033a8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4033ac:	2b00      	cmp	r3, #0
  4033ae:	f040 81d4 	bne.w	40375a <_vfiprintf_r+0xc3e>
  4033b2:	2300      	movs	r3, #0
  4033b4:	9310      	str	r3, [sp, #64]	; 0x40
  4033b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4033ba:	f013 0f01 	tst.w	r3, #1
  4033be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4033c2:	d102      	bne.n	4033ca <_vfiprintf_r+0x8ae>
  4033c4:	059a      	lsls	r2, r3, #22
  4033c6:	f140 80de 	bpl.w	403586 <_vfiprintf_r+0xa6a>
  4033ca:	065b      	lsls	r3, r3, #25
  4033cc:	f53f acb2 	bmi.w	402d34 <_vfiprintf_r+0x218>
  4033d0:	9803      	ldr	r0, [sp, #12]
  4033d2:	b02d      	add	sp, #180	; 0xb4
  4033d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033d8:	2a00      	cmp	r2, #0
  4033da:	f040 8106 	bne.w	4035ea <_vfiprintf_r+0xace>
  4033de:	9a05      	ldr	r2, [sp, #20]
  4033e0:	921d      	str	r2, [sp, #116]	; 0x74
  4033e2:	2301      	movs	r3, #1
  4033e4:	9211      	str	r2, [sp, #68]	; 0x44
  4033e6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4033ea:	9310      	str	r3, [sp, #64]	; 0x40
  4033ec:	46ca      	mov	sl, r9
  4033ee:	f10a 0a08 	add.w	sl, sl, #8
  4033f2:	9b02      	ldr	r3, [sp, #8]
  4033f4:	0759      	lsls	r1, r3, #29
  4033f6:	d504      	bpl.n	403402 <_vfiprintf_r+0x8e6>
  4033f8:	9b08      	ldr	r3, [sp, #32]
  4033fa:	9901      	ldr	r1, [sp, #4]
  4033fc:	1a5c      	subs	r4, r3, r1
  4033fe:	2c00      	cmp	r4, #0
  403400:	dc81      	bgt.n	403306 <_vfiprintf_r+0x7ea>
  403402:	9b03      	ldr	r3, [sp, #12]
  403404:	9908      	ldr	r1, [sp, #32]
  403406:	9801      	ldr	r0, [sp, #4]
  403408:	4281      	cmp	r1, r0
  40340a:	bfac      	ite	ge
  40340c:	185b      	addge	r3, r3, r1
  40340e:	181b      	addlt	r3, r3, r0
  403410:	9303      	str	r3, [sp, #12]
  403412:	bb72      	cbnz	r2, 403472 <_vfiprintf_r+0x956>
  403414:	2300      	movs	r3, #0
  403416:	9310      	str	r3, [sp, #64]	; 0x40
  403418:	46ca      	mov	sl, r9
  40341a:	f7ff bbbc 	b.w	402b96 <_vfiprintf_r+0x7a>
  40341e:	aa0f      	add	r2, sp, #60	; 0x3c
  403420:	9904      	ldr	r1, [sp, #16]
  403422:	4620      	mov	r0, r4
  403424:	f7ff fb3a 	bl	402a9c <__sprint_r.part.0>
  403428:	bb50      	cbnz	r0, 403480 <_vfiprintf_r+0x964>
  40342a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40342c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40342e:	f101 0e01 	add.w	lr, r1, #1
  403432:	46cc      	mov	ip, r9
  403434:	e548      	b.n	402ec8 <_vfiprintf_r+0x3ac>
  403436:	2a00      	cmp	r2, #0
  403438:	f040 8140 	bne.w	4036bc <_vfiprintf_r+0xba0>
  40343c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403440:	2900      	cmp	r1, #0
  403442:	f000 811b 	beq.w	40367c <_vfiprintf_r+0xb60>
  403446:	2201      	movs	r2, #1
  403448:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40344c:	4610      	mov	r0, r2
  40344e:	921d      	str	r2, [sp, #116]	; 0x74
  403450:	911c      	str	r1, [sp, #112]	; 0x70
  403452:	46ca      	mov	sl, r9
  403454:	4601      	mov	r1, r0
  403456:	f10a 0a08 	add.w	sl, sl, #8
  40345a:	3001      	adds	r0, #1
  40345c:	e507      	b.n	402e6e <_vfiprintf_r+0x352>
  40345e:	9b02      	ldr	r3, [sp, #8]
  403460:	2a01      	cmp	r2, #1
  403462:	f000 8098 	beq.w	403596 <_vfiprintf_r+0xa7a>
  403466:	2a02      	cmp	r2, #2
  403468:	d10d      	bne.n	403486 <_vfiprintf_r+0x96a>
  40346a:	9302      	str	r3, [sp, #8]
  40346c:	2600      	movs	r6, #0
  40346e:	2700      	movs	r7, #0
  403470:	e5b0      	b.n	402fd4 <_vfiprintf_r+0x4b8>
  403472:	aa0f      	add	r2, sp, #60	; 0x3c
  403474:	9904      	ldr	r1, [sp, #16]
  403476:	9806      	ldr	r0, [sp, #24]
  403478:	f7ff fb10 	bl	402a9c <__sprint_r.part.0>
  40347c:	2800      	cmp	r0, #0
  40347e:	d0c9      	beq.n	403414 <_vfiprintf_r+0x8f8>
  403480:	f8dd b010 	ldr.w	fp, [sp, #16]
  403484:	e797      	b.n	4033b6 <_vfiprintf_r+0x89a>
  403486:	9302      	str	r3, [sp, #8]
  403488:	2600      	movs	r6, #0
  40348a:	2700      	movs	r7, #0
  40348c:	4649      	mov	r1, r9
  40348e:	e000      	b.n	403492 <_vfiprintf_r+0x976>
  403490:	4659      	mov	r1, fp
  403492:	08f2      	lsrs	r2, r6, #3
  403494:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403498:	08f8      	lsrs	r0, r7, #3
  40349a:	f006 0307 	and.w	r3, r6, #7
  40349e:	4607      	mov	r7, r0
  4034a0:	4616      	mov	r6, r2
  4034a2:	3330      	adds	r3, #48	; 0x30
  4034a4:	ea56 0207 	orrs.w	r2, r6, r7
  4034a8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4034ac:	f101 3bff 	add.w	fp, r1, #4294967295
  4034b0:	d1ee      	bne.n	403490 <_vfiprintf_r+0x974>
  4034b2:	9a02      	ldr	r2, [sp, #8]
  4034b4:	07d6      	lsls	r6, r2, #31
  4034b6:	f57f ad9d 	bpl.w	402ff4 <_vfiprintf_r+0x4d8>
  4034ba:	2b30      	cmp	r3, #48	; 0x30
  4034bc:	f43f ad9a 	beq.w	402ff4 <_vfiprintf_r+0x4d8>
  4034c0:	3902      	subs	r1, #2
  4034c2:	2330      	movs	r3, #48	; 0x30
  4034c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4034c8:	eba9 0301 	sub.w	r3, r9, r1
  4034cc:	9305      	str	r3, [sp, #20]
  4034ce:	468b      	mov	fp, r1
  4034d0:	e476      	b.n	402dc0 <_vfiprintf_r+0x2a4>
  4034d2:	9b03      	ldr	r3, [sp, #12]
  4034d4:	9a08      	ldr	r2, [sp, #32]
  4034d6:	428a      	cmp	r2, r1
  4034d8:	bfac      	ite	ge
  4034da:	189b      	addge	r3, r3, r2
  4034dc:	185b      	addlt	r3, r3, r1
  4034de:	9303      	str	r3, [sp, #12]
  4034e0:	e798      	b.n	403414 <_vfiprintf_r+0x8f8>
  4034e2:	2202      	movs	r2, #2
  4034e4:	e44d      	b.n	402d82 <_vfiprintf_r+0x266>
  4034e6:	2f00      	cmp	r7, #0
  4034e8:	bf08      	it	eq
  4034ea:	2e0a      	cmpeq	r6, #10
  4034ec:	d352      	bcc.n	403594 <_vfiprintf_r+0xa78>
  4034ee:	46cb      	mov	fp, r9
  4034f0:	4630      	mov	r0, r6
  4034f2:	4639      	mov	r1, r7
  4034f4:	220a      	movs	r2, #10
  4034f6:	2300      	movs	r3, #0
  4034f8:	f7fe fc9e 	bl	401e38 <__aeabi_uldivmod>
  4034fc:	3230      	adds	r2, #48	; 0x30
  4034fe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403502:	4630      	mov	r0, r6
  403504:	4639      	mov	r1, r7
  403506:	2300      	movs	r3, #0
  403508:	220a      	movs	r2, #10
  40350a:	f7fe fc95 	bl	401e38 <__aeabi_uldivmod>
  40350e:	4606      	mov	r6, r0
  403510:	460f      	mov	r7, r1
  403512:	ea56 0307 	orrs.w	r3, r6, r7
  403516:	d1eb      	bne.n	4034f0 <_vfiprintf_r+0x9d4>
  403518:	e56c      	b.n	402ff4 <_vfiprintf_r+0x4d8>
  40351a:	9405      	str	r4, [sp, #20]
  40351c:	46cb      	mov	fp, r9
  40351e:	e44f      	b.n	402dc0 <_vfiprintf_r+0x2a4>
  403520:	aa0f      	add	r2, sp, #60	; 0x3c
  403522:	9904      	ldr	r1, [sp, #16]
  403524:	9806      	ldr	r0, [sp, #24]
  403526:	f7ff fab9 	bl	402a9c <__sprint_r.part.0>
  40352a:	2800      	cmp	r0, #0
  40352c:	d1a8      	bne.n	403480 <_vfiprintf_r+0x964>
  40352e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403530:	46ca      	mov	sl, r9
  403532:	e75e      	b.n	4033f2 <_vfiprintf_r+0x8d6>
  403534:	aa0f      	add	r2, sp, #60	; 0x3c
  403536:	9904      	ldr	r1, [sp, #16]
  403538:	9806      	ldr	r0, [sp, #24]
  40353a:	f7ff faaf 	bl	402a9c <__sprint_r.part.0>
  40353e:	2800      	cmp	r0, #0
  403540:	d19e      	bne.n	403480 <_vfiprintf_r+0x964>
  403542:	46ca      	mov	sl, r9
  403544:	f7ff bbc0 	b.w	402cc8 <_vfiprintf_r+0x1ac>
  403548:	00404e3c 	.word	0x00404e3c
  40354c:	00404e2c 	.word	0x00404e2c
  403550:	3104      	adds	r1, #4
  403552:	6816      	ldr	r6, [r2, #0]
  403554:	9107      	str	r1, [sp, #28]
  403556:	2201      	movs	r2, #1
  403558:	2700      	movs	r7, #0
  40355a:	e412      	b.n	402d82 <_vfiprintf_r+0x266>
  40355c:	9807      	ldr	r0, [sp, #28]
  40355e:	4601      	mov	r1, r0
  403560:	3104      	adds	r1, #4
  403562:	6806      	ldr	r6, [r0, #0]
  403564:	9107      	str	r1, [sp, #28]
  403566:	2700      	movs	r7, #0
  403568:	e40b      	b.n	402d82 <_vfiprintf_r+0x266>
  40356a:	680e      	ldr	r6, [r1, #0]
  40356c:	3104      	adds	r1, #4
  40356e:	9107      	str	r1, [sp, #28]
  403570:	2700      	movs	r7, #0
  403572:	e591      	b.n	403098 <_vfiprintf_r+0x57c>
  403574:	9907      	ldr	r1, [sp, #28]
  403576:	680e      	ldr	r6, [r1, #0]
  403578:	460a      	mov	r2, r1
  40357a:	17f7      	asrs	r7, r6, #31
  40357c:	3204      	adds	r2, #4
  40357e:	9207      	str	r2, [sp, #28]
  403580:	4630      	mov	r0, r6
  403582:	4639      	mov	r1, r7
  403584:	e50f      	b.n	402fa6 <_vfiprintf_r+0x48a>
  403586:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40358a:	f000 fe7f 	bl	40428c <__retarget_lock_release_recursive>
  40358e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403592:	e71a      	b.n	4033ca <_vfiprintf_r+0x8ae>
  403594:	9b02      	ldr	r3, [sp, #8]
  403596:	9302      	str	r3, [sp, #8]
  403598:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40359c:	3630      	adds	r6, #48	; 0x30
  40359e:	2301      	movs	r3, #1
  4035a0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4035a4:	9305      	str	r3, [sp, #20]
  4035a6:	e40b      	b.n	402dc0 <_vfiprintf_r+0x2a4>
  4035a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4035aa:	9904      	ldr	r1, [sp, #16]
  4035ac:	9806      	ldr	r0, [sp, #24]
  4035ae:	f7ff fa75 	bl	402a9c <__sprint_r.part.0>
  4035b2:	2800      	cmp	r0, #0
  4035b4:	f47f af64 	bne.w	403480 <_vfiprintf_r+0x964>
  4035b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4035ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4035bc:	1c48      	adds	r0, r1, #1
  4035be:	46ca      	mov	sl, r9
  4035c0:	e651      	b.n	403266 <_vfiprintf_r+0x74a>
  4035c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4035c4:	9904      	ldr	r1, [sp, #16]
  4035c6:	9806      	ldr	r0, [sp, #24]
  4035c8:	f7ff fa68 	bl	402a9c <__sprint_r.part.0>
  4035cc:	2800      	cmp	r0, #0
  4035ce:	f47f af57 	bne.w	403480 <_vfiprintf_r+0x964>
  4035d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4035d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4035d6:	1c48      	adds	r0, r1, #1
  4035d8:	46ca      	mov	sl, r9
  4035da:	e448      	b.n	402e6e <_vfiprintf_r+0x352>
  4035dc:	2a00      	cmp	r2, #0
  4035de:	f040 8091 	bne.w	403704 <_vfiprintf_r+0xbe8>
  4035e2:	2001      	movs	r0, #1
  4035e4:	4611      	mov	r1, r2
  4035e6:	46ca      	mov	sl, r9
  4035e8:	e641      	b.n	40326e <_vfiprintf_r+0x752>
  4035ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4035ec:	9904      	ldr	r1, [sp, #16]
  4035ee:	9806      	ldr	r0, [sp, #24]
  4035f0:	f7ff fa54 	bl	402a9c <__sprint_r.part.0>
  4035f4:	2800      	cmp	r0, #0
  4035f6:	f47f af43 	bne.w	403480 <_vfiprintf_r+0x964>
  4035fa:	9810      	ldr	r0, [sp, #64]	; 0x40
  4035fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4035fe:	3001      	adds	r0, #1
  403600:	46ca      	mov	sl, r9
  403602:	e667      	b.n	4032d4 <_vfiprintf_r+0x7b8>
  403604:	46d3      	mov	fp, sl
  403606:	e6d6      	b.n	4033b6 <_vfiprintf_r+0x89a>
  403608:	9e07      	ldr	r6, [sp, #28]
  40360a:	3607      	adds	r6, #7
  40360c:	f026 0207 	bic.w	r2, r6, #7
  403610:	f102 0108 	add.w	r1, r2, #8
  403614:	e9d2 6700 	ldrd	r6, r7, [r2]
  403618:	9107      	str	r1, [sp, #28]
  40361a:	2201      	movs	r2, #1
  40361c:	f7ff bbb1 	b.w	402d82 <_vfiprintf_r+0x266>
  403620:	9e07      	ldr	r6, [sp, #28]
  403622:	3607      	adds	r6, #7
  403624:	f026 0607 	bic.w	r6, r6, #7
  403628:	e9d6 0100 	ldrd	r0, r1, [r6]
  40362c:	f106 0208 	add.w	r2, r6, #8
  403630:	9207      	str	r2, [sp, #28]
  403632:	4606      	mov	r6, r0
  403634:	460f      	mov	r7, r1
  403636:	e4b6      	b.n	402fa6 <_vfiprintf_r+0x48a>
  403638:	9e07      	ldr	r6, [sp, #28]
  40363a:	3607      	adds	r6, #7
  40363c:	f026 0207 	bic.w	r2, r6, #7
  403640:	f102 0108 	add.w	r1, r2, #8
  403644:	e9d2 6700 	ldrd	r6, r7, [r2]
  403648:	9107      	str	r1, [sp, #28]
  40364a:	2200      	movs	r2, #0
  40364c:	f7ff bb99 	b.w	402d82 <_vfiprintf_r+0x266>
  403650:	9e07      	ldr	r6, [sp, #28]
  403652:	3607      	adds	r6, #7
  403654:	f026 0107 	bic.w	r1, r6, #7
  403658:	f101 0008 	add.w	r0, r1, #8
  40365c:	9007      	str	r0, [sp, #28]
  40365e:	e9d1 6700 	ldrd	r6, r7, [r1]
  403662:	e519      	b.n	403098 <_vfiprintf_r+0x57c>
  403664:	46cb      	mov	fp, r9
  403666:	f7ff bbab 	b.w	402dc0 <_vfiprintf_r+0x2a4>
  40366a:	252d      	movs	r5, #45	; 0x2d
  40366c:	4276      	negs	r6, r6
  40366e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403672:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403676:	2201      	movs	r2, #1
  403678:	f7ff bb88 	b.w	402d8c <_vfiprintf_r+0x270>
  40367c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40367e:	b9b3      	cbnz	r3, 4036ae <_vfiprintf_r+0xb92>
  403680:	4611      	mov	r1, r2
  403682:	2001      	movs	r0, #1
  403684:	46ca      	mov	sl, r9
  403686:	e5f2      	b.n	40326e <_vfiprintf_r+0x752>
  403688:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40368c:	f000 fdfe 	bl	40428c <__retarget_lock_release_recursive>
  403690:	f04f 33ff 	mov.w	r3, #4294967295
  403694:	9303      	str	r3, [sp, #12]
  403696:	f7ff bb50 	b.w	402d3a <_vfiprintf_r+0x21e>
  40369a:	aa0f      	add	r2, sp, #60	; 0x3c
  40369c:	9904      	ldr	r1, [sp, #16]
  40369e:	9806      	ldr	r0, [sp, #24]
  4036a0:	f7ff f9fc 	bl	402a9c <__sprint_r.part.0>
  4036a4:	2800      	cmp	r0, #0
  4036a6:	f47f aeeb 	bne.w	403480 <_vfiprintf_r+0x964>
  4036aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4036ac:	e6a9      	b.n	403402 <_vfiprintf_r+0x8e6>
  4036ae:	ab0e      	add	r3, sp, #56	; 0x38
  4036b0:	2202      	movs	r2, #2
  4036b2:	931c      	str	r3, [sp, #112]	; 0x70
  4036b4:	921d      	str	r2, [sp, #116]	; 0x74
  4036b6:	2001      	movs	r0, #1
  4036b8:	46ca      	mov	sl, r9
  4036ba:	e5d0      	b.n	40325e <_vfiprintf_r+0x742>
  4036bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4036be:	9904      	ldr	r1, [sp, #16]
  4036c0:	9806      	ldr	r0, [sp, #24]
  4036c2:	f7ff f9eb 	bl	402a9c <__sprint_r.part.0>
  4036c6:	2800      	cmp	r0, #0
  4036c8:	f47f aeda 	bne.w	403480 <_vfiprintf_r+0x964>
  4036cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4036ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4036d0:	1c48      	adds	r0, r1, #1
  4036d2:	46ca      	mov	sl, r9
  4036d4:	e5a4      	b.n	403220 <_vfiprintf_r+0x704>
  4036d6:	9a07      	ldr	r2, [sp, #28]
  4036d8:	9903      	ldr	r1, [sp, #12]
  4036da:	6813      	ldr	r3, [r2, #0]
  4036dc:	17cd      	asrs	r5, r1, #31
  4036de:	4608      	mov	r0, r1
  4036e0:	3204      	adds	r2, #4
  4036e2:	4629      	mov	r1, r5
  4036e4:	9207      	str	r2, [sp, #28]
  4036e6:	e9c3 0100 	strd	r0, r1, [r3]
  4036ea:	f7ff ba54 	b.w	402b96 <_vfiprintf_r+0x7a>
  4036ee:	4658      	mov	r0, fp
  4036f0:	9607      	str	r6, [sp, #28]
  4036f2:	9302      	str	r3, [sp, #8]
  4036f4:	f7ff f964 	bl	4029c0 <strlen>
  4036f8:	2400      	movs	r4, #0
  4036fa:	9005      	str	r0, [sp, #20]
  4036fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403700:	f7ff bb5e 	b.w	402dc0 <_vfiprintf_r+0x2a4>
  403704:	aa0f      	add	r2, sp, #60	; 0x3c
  403706:	9904      	ldr	r1, [sp, #16]
  403708:	9806      	ldr	r0, [sp, #24]
  40370a:	f7ff f9c7 	bl	402a9c <__sprint_r.part.0>
  40370e:	2800      	cmp	r0, #0
  403710:	f47f aeb6 	bne.w	403480 <_vfiprintf_r+0x964>
  403714:	9910      	ldr	r1, [sp, #64]	; 0x40
  403716:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403718:	1c48      	adds	r0, r1, #1
  40371a:	46ca      	mov	sl, r9
  40371c:	e5a7      	b.n	40326e <_vfiprintf_r+0x752>
  40371e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403720:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403722:	4e20      	ldr	r6, [pc, #128]	; (4037a4 <_vfiprintf_r+0xc88>)
  403724:	3101      	adds	r1, #1
  403726:	f7ff bb90 	b.w	402e4a <_vfiprintf_r+0x32e>
  40372a:	2c06      	cmp	r4, #6
  40372c:	bf28      	it	cs
  40372e:	2406      	movcs	r4, #6
  403730:	9405      	str	r4, [sp, #20]
  403732:	9607      	str	r6, [sp, #28]
  403734:	9401      	str	r4, [sp, #4]
  403736:	f8df b070 	ldr.w	fp, [pc, #112]	; 4037a8 <_vfiprintf_r+0xc8c>
  40373a:	e4d5      	b.n	4030e8 <_vfiprintf_r+0x5cc>
  40373c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40373e:	4e19      	ldr	r6, [pc, #100]	; (4037a4 <_vfiprintf_r+0xc88>)
  403740:	3001      	adds	r0, #1
  403742:	e603      	b.n	40334c <_vfiprintf_r+0x830>
  403744:	9405      	str	r4, [sp, #20]
  403746:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40374a:	9607      	str	r6, [sp, #28]
  40374c:	9302      	str	r3, [sp, #8]
  40374e:	4604      	mov	r4, r0
  403750:	f7ff bb36 	b.w	402dc0 <_vfiprintf_r+0x2a4>
  403754:	4686      	mov	lr, r0
  403756:	f7ff bbce 	b.w	402ef6 <_vfiprintf_r+0x3da>
  40375a:	9806      	ldr	r0, [sp, #24]
  40375c:	aa0f      	add	r2, sp, #60	; 0x3c
  40375e:	4659      	mov	r1, fp
  403760:	f7ff f99c 	bl	402a9c <__sprint_r.part.0>
  403764:	2800      	cmp	r0, #0
  403766:	f43f ae24 	beq.w	4033b2 <_vfiprintf_r+0x896>
  40376a:	e624      	b.n	4033b6 <_vfiprintf_r+0x89a>
  40376c:	9907      	ldr	r1, [sp, #28]
  40376e:	f898 2001 	ldrb.w	r2, [r8, #1]
  403772:	680c      	ldr	r4, [r1, #0]
  403774:	3104      	adds	r1, #4
  403776:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40377a:	46b8      	mov	r8, r7
  40377c:	9107      	str	r1, [sp, #28]
  40377e:	f7ff ba3f 	b.w	402c00 <_vfiprintf_r+0xe4>
  403782:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403786:	e43c      	b.n	403002 <_vfiprintf_r+0x4e6>
  403788:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40378c:	e521      	b.n	4031d2 <_vfiprintf_r+0x6b6>
  40378e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403792:	f7ff bbf4 	b.w	402f7e <_vfiprintf_r+0x462>
  403796:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40379a:	e491      	b.n	4030c0 <_vfiprintf_r+0x5a4>
  40379c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4037a0:	e469      	b.n	403076 <_vfiprintf_r+0x55a>
  4037a2:	bf00      	nop
  4037a4:	00404e2c 	.word	0x00404e2c
  4037a8:	00404e24 	.word	0x00404e24

004037ac <__sbprintf>:
  4037ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037b0:	460c      	mov	r4, r1
  4037b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4037b6:	8989      	ldrh	r1, [r1, #12]
  4037b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4037ba:	89e5      	ldrh	r5, [r4, #14]
  4037bc:	9619      	str	r6, [sp, #100]	; 0x64
  4037be:	f021 0102 	bic.w	r1, r1, #2
  4037c2:	4606      	mov	r6, r0
  4037c4:	69e0      	ldr	r0, [r4, #28]
  4037c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  4037ca:	4617      	mov	r7, r2
  4037cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4037d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4037d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4037d6:	4698      	mov	r8, r3
  4037d8:	ad1a      	add	r5, sp, #104	; 0x68
  4037da:	2300      	movs	r3, #0
  4037dc:	9007      	str	r0, [sp, #28]
  4037de:	a816      	add	r0, sp, #88	; 0x58
  4037e0:	9209      	str	r2, [sp, #36]	; 0x24
  4037e2:	9306      	str	r3, [sp, #24]
  4037e4:	9500      	str	r5, [sp, #0]
  4037e6:	9504      	str	r5, [sp, #16]
  4037e8:	9102      	str	r1, [sp, #8]
  4037ea:	9105      	str	r1, [sp, #20]
  4037ec:	f000 fd48 	bl	404280 <__retarget_lock_init_recursive>
  4037f0:	4643      	mov	r3, r8
  4037f2:	463a      	mov	r2, r7
  4037f4:	4669      	mov	r1, sp
  4037f6:	4630      	mov	r0, r6
  4037f8:	f7ff f990 	bl	402b1c <_vfiprintf_r>
  4037fc:	1e05      	subs	r5, r0, #0
  4037fe:	db07      	blt.n	403810 <__sbprintf+0x64>
  403800:	4630      	mov	r0, r6
  403802:	4669      	mov	r1, sp
  403804:	f000 f928 	bl	403a58 <_fflush_r>
  403808:	2800      	cmp	r0, #0
  40380a:	bf18      	it	ne
  40380c:	f04f 35ff 	movne.w	r5, #4294967295
  403810:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403814:	065b      	lsls	r3, r3, #25
  403816:	d503      	bpl.n	403820 <__sbprintf+0x74>
  403818:	89a3      	ldrh	r3, [r4, #12]
  40381a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40381e:	81a3      	strh	r3, [r4, #12]
  403820:	9816      	ldr	r0, [sp, #88]	; 0x58
  403822:	f000 fd2f 	bl	404284 <__retarget_lock_close_recursive>
  403826:	4628      	mov	r0, r5
  403828:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40382c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403830 <__swsetup_r>:
  403830:	b538      	push	{r3, r4, r5, lr}
  403832:	4b30      	ldr	r3, [pc, #192]	; (4038f4 <__swsetup_r+0xc4>)
  403834:	681b      	ldr	r3, [r3, #0]
  403836:	4605      	mov	r5, r0
  403838:	460c      	mov	r4, r1
  40383a:	b113      	cbz	r3, 403842 <__swsetup_r+0x12>
  40383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40383e:	2a00      	cmp	r2, #0
  403840:	d038      	beq.n	4038b4 <__swsetup_r+0x84>
  403842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403846:	b293      	uxth	r3, r2
  403848:	0718      	lsls	r0, r3, #28
  40384a:	d50c      	bpl.n	403866 <__swsetup_r+0x36>
  40384c:	6920      	ldr	r0, [r4, #16]
  40384e:	b1a8      	cbz	r0, 40387c <__swsetup_r+0x4c>
  403850:	f013 0201 	ands.w	r2, r3, #1
  403854:	d01e      	beq.n	403894 <__swsetup_r+0x64>
  403856:	6963      	ldr	r3, [r4, #20]
  403858:	2200      	movs	r2, #0
  40385a:	425b      	negs	r3, r3
  40385c:	61a3      	str	r3, [r4, #24]
  40385e:	60a2      	str	r2, [r4, #8]
  403860:	b1f0      	cbz	r0, 4038a0 <__swsetup_r+0x70>
  403862:	2000      	movs	r0, #0
  403864:	bd38      	pop	{r3, r4, r5, pc}
  403866:	06d9      	lsls	r1, r3, #27
  403868:	d53c      	bpl.n	4038e4 <__swsetup_r+0xb4>
  40386a:	0758      	lsls	r0, r3, #29
  40386c:	d426      	bmi.n	4038bc <__swsetup_r+0x8c>
  40386e:	6920      	ldr	r0, [r4, #16]
  403870:	f042 0308 	orr.w	r3, r2, #8
  403874:	81a3      	strh	r3, [r4, #12]
  403876:	b29b      	uxth	r3, r3
  403878:	2800      	cmp	r0, #0
  40387a:	d1e9      	bne.n	403850 <__swsetup_r+0x20>
  40387c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403880:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403884:	d0e4      	beq.n	403850 <__swsetup_r+0x20>
  403886:	4628      	mov	r0, r5
  403888:	4621      	mov	r1, r4
  40388a:	f000 fd2f 	bl	4042ec <__smakebuf_r>
  40388e:	89a3      	ldrh	r3, [r4, #12]
  403890:	6920      	ldr	r0, [r4, #16]
  403892:	e7dd      	b.n	403850 <__swsetup_r+0x20>
  403894:	0799      	lsls	r1, r3, #30
  403896:	bf58      	it	pl
  403898:	6962      	ldrpl	r2, [r4, #20]
  40389a:	60a2      	str	r2, [r4, #8]
  40389c:	2800      	cmp	r0, #0
  40389e:	d1e0      	bne.n	403862 <__swsetup_r+0x32>
  4038a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038a4:	061a      	lsls	r2, r3, #24
  4038a6:	d5dd      	bpl.n	403864 <__swsetup_r+0x34>
  4038a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4038ac:	81a3      	strh	r3, [r4, #12]
  4038ae:	f04f 30ff 	mov.w	r0, #4294967295
  4038b2:	bd38      	pop	{r3, r4, r5, pc}
  4038b4:	4618      	mov	r0, r3
  4038b6:	f000 f927 	bl	403b08 <__sinit>
  4038ba:	e7c2      	b.n	403842 <__swsetup_r+0x12>
  4038bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4038be:	b151      	cbz	r1, 4038d6 <__swsetup_r+0xa6>
  4038c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4038c4:	4299      	cmp	r1, r3
  4038c6:	d004      	beq.n	4038d2 <__swsetup_r+0xa2>
  4038c8:	4628      	mov	r0, r5
  4038ca:	f000 fa43 	bl	403d54 <_free_r>
  4038ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4038d2:	2300      	movs	r3, #0
  4038d4:	6323      	str	r3, [r4, #48]	; 0x30
  4038d6:	2300      	movs	r3, #0
  4038d8:	6920      	ldr	r0, [r4, #16]
  4038da:	6063      	str	r3, [r4, #4]
  4038dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4038e0:	6020      	str	r0, [r4, #0]
  4038e2:	e7c5      	b.n	403870 <__swsetup_r+0x40>
  4038e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4038e8:	2309      	movs	r3, #9
  4038ea:	602b      	str	r3, [r5, #0]
  4038ec:	f04f 30ff 	mov.w	r0, #4294967295
  4038f0:	81a2      	strh	r2, [r4, #12]
  4038f2:	bd38      	pop	{r3, r4, r5, pc}
  4038f4:	20000004 	.word	0x20000004

004038f8 <register_fini>:
  4038f8:	4b02      	ldr	r3, [pc, #8]	; (403904 <register_fini+0xc>)
  4038fa:	b113      	cbz	r3, 403902 <register_fini+0xa>
  4038fc:	4802      	ldr	r0, [pc, #8]	; (403908 <register_fini+0x10>)
  4038fe:	f000 b805 	b.w	40390c <atexit>
  403902:	4770      	bx	lr
  403904:	00000000 	.word	0x00000000
  403908:	00403b79 	.word	0x00403b79

0040390c <atexit>:
  40390c:	2300      	movs	r3, #0
  40390e:	4601      	mov	r1, r0
  403910:	461a      	mov	r2, r3
  403912:	4618      	mov	r0, r3
  403914:	f001 b92a 	b.w	404b6c <__register_exitproc>

00403918 <__sflush_r>:
  403918:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40391c:	b29a      	uxth	r2, r3
  40391e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403922:	460d      	mov	r5, r1
  403924:	0711      	lsls	r1, r2, #28
  403926:	4680      	mov	r8, r0
  403928:	d43a      	bmi.n	4039a0 <__sflush_r+0x88>
  40392a:	686a      	ldr	r2, [r5, #4]
  40392c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403930:	2a00      	cmp	r2, #0
  403932:	81ab      	strh	r3, [r5, #12]
  403934:	dd6f      	ble.n	403a16 <__sflush_r+0xfe>
  403936:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403938:	2c00      	cmp	r4, #0
  40393a:	d049      	beq.n	4039d0 <__sflush_r+0xb8>
  40393c:	2200      	movs	r2, #0
  40393e:	b29b      	uxth	r3, r3
  403940:	f8d8 6000 	ldr.w	r6, [r8]
  403944:	f8c8 2000 	str.w	r2, [r8]
  403948:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40394c:	d067      	beq.n	403a1e <__sflush_r+0x106>
  40394e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403950:	075f      	lsls	r7, r3, #29
  403952:	d505      	bpl.n	403960 <__sflush_r+0x48>
  403954:	6869      	ldr	r1, [r5, #4]
  403956:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403958:	1a52      	subs	r2, r2, r1
  40395a:	b10b      	cbz	r3, 403960 <__sflush_r+0x48>
  40395c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40395e:	1ad2      	subs	r2, r2, r3
  403960:	2300      	movs	r3, #0
  403962:	69e9      	ldr	r1, [r5, #28]
  403964:	4640      	mov	r0, r8
  403966:	47a0      	blx	r4
  403968:	1c44      	adds	r4, r0, #1
  40396a:	d03c      	beq.n	4039e6 <__sflush_r+0xce>
  40396c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403970:	692a      	ldr	r2, [r5, #16]
  403972:	602a      	str	r2, [r5, #0]
  403974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403978:	2200      	movs	r2, #0
  40397a:	81ab      	strh	r3, [r5, #12]
  40397c:	04db      	lsls	r3, r3, #19
  40397e:	606a      	str	r2, [r5, #4]
  403980:	d447      	bmi.n	403a12 <__sflush_r+0xfa>
  403982:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403984:	f8c8 6000 	str.w	r6, [r8]
  403988:	b311      	cbz	r1, 4039d0 <__sflush_r+0xb8>
  40398a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40398e:	4299      	cmp	r1, r3
  403990:	d002      	beq.n	403998 <__sflush_r+0x80>
  403992:	4640      	mov	r0, r8
  403994:	f000 f9de 	bl	403d54 <_free_r>
  403998:	2000      	movs	r0, #0
  40399a:	6328      	str	r0, [r5, #48]	; 0x30
  40399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039a0:	692e      	ldr	r6, [r5, #16]
  4039a2:	b1ae      	cbz	r6, 4039d0 <__sflush_r+0xb8>
  4039a4:	682c      	ldr	r4, [r5, #0]
  4039a6:	602e      	str	r6, [r5, #0]
  4039a8:	0791      	lsls	r1, r2, #30
  4039aa:	bf0c      	ite	eq
  4039ac:	696b      	ldreq	r3, [r5, #20]
  4039ae:	2300      	movne	r3, #0
  4039b0:	1ba4      	subs	r4, r4, r6
  4039b2:	60ab      	str	r3, [r5, #8]
  4039b4:	e00a      	b.n	4039cc <__sflush_r+0xb4>
  4039b6:	4623      	mov	r3, r4
  4039b8:	4632      	mov	r2, r6
  4039ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4039bc:	69e9      	ldr	r1, [r5, #28]
  4039be:	4640      	mov	r0, r8
  4039c0:	47b8      	blx	r7
  4039c2:	2800      	cmp	r0, #0
  4039c4:	eba4 0400 	sub.w	r4, r4, r0
  4039c8:	4406      	add	r6, r0
  4039ca:	dd04      	ble.n	4039d6 <__sflush_r+0xbe>
  4039cc:	2c00      	cmp	r4, #0
  4039ce:	dcf2      	bgt.n	4039b6 <__sflush_r+0x9e>
  4039d0:	2000      	movs	r0, #0
  4039d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039d6:	89ab      	ldrh	r3, [r5, #12]
  4039d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4039dc:	81ab      	strh	r3, [r5, #12]
  4039de:	f04f 30ff 	mov.w	r0, #4294967295
  4039e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039e6:	f8d8 4000 	ldr.w	r4, [r8]
  4039ea:	2c1d      	cmp	r4, #29
  4039ec:	d8f3      	bhi.n	4039d6 <__sflush_r+0xbe>
  4039ee:	4b19      	ldr	r3, [pc, #100]	; (403a54 <__sflush_r+0x13c>)
  4039f0:	40e3      	lsrs	r3, r4
  4039f2:	43db      	mvns	r3, r3
  4039f4:	f013 0301 	ands.w	r3, r3, #1
  4039f8:	d1ed      	bne.n	4039d6 <__sflush_r+0xbe>
  4039fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4039fe:	606b      	str	r3, [r5, #4]
  403a00:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403a04:	6929      	ldr	r1, [r5, #16]
  403a06:	81ab      	strh	r3, [r5, #12]
  403a08:	04da      	lsls	r2, r3, #19
  403a0a:	6029      	str	r1, [r5, #0]
  403a0c:	d5b9      	bpl.n	403982 <__sflush_r+0x6a>
  403a0e:	2c00      	cmp	r4, #0
  403a10:	d1b7      	bne.n	403982 <__sflush_r+0x6a>
  403a12:	6528      	str	r0, [r5, #80]	; 0x50
  403a14:	e7b5      	b.n	403982 <__sflush_r+0x6a>
  403a16:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403a18:	2a00      	cmp	r2, #0
  403a1a:	dc8c      	bgt.n	403936 <__sflush_r+0x1e>
  403a1c:	e7d8      	b.n	4039d0 <__sflush_r+0xb8>
  403a1e:	2301      	movs	r3, #1
  403a20:	69e9      	ldr	r1, [r5, #28]
  403a22:	4640      	mov	r0, r8
  403a24:	47a0      	blx	r4
  403a26:	1c43      	adds	r3, r0, #1
  403a28:	4602      	mov	r2, r0
  403a2a:	d002      	beq.n	403a32 <__sflush_r+0x11a>
  403a2c:	89ab      	ldrh	r3, [r5, #12]
  403a2e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403a30:	e78e      	b.n	403950 <__sflush_r+0x38>
  403a32:	f8d8 3000 	ldr.w	r3, [r8]
  403a36:	2b00      	cmp	r3, #0
  403a38:	d0f8      	beq.n	403a2c <__sflush_r+0x114>
  403a3a:	2b1d      	cmp	r3, #29
  403a3c:	d001      	beq.n	403a42 <__sflush_r+0x12a>
  403a3e:	2b16      	cmp	r3, #22
  403a40:	d102      	bne.n	403a48 <__sflush_r+0x130>
  403a42:	f8c8 6000 	str.w	r6, [r8]
  403a46:	e7c3      	b.n	4039d0 <__sflush_r+0xb8>
  403a48:	89ab      	ldrh	r3, [r5, #12]
  403a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a4e:	81ab      	strh	r3, [r5, #12]
  403a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a54:	20400001 	.word	0x20400001

00403a58 <_fflush_r>:
  403a58:	b538      	push	{r3, r4, r5, lr}
  403a5a:	460d      	mov	r5, r1
  403a5c:	4604      	mov	r4, r0
  403a5e:	b108      	cbz	r0, 403a64 <_fflush_r+0xc>
  403a60:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a62:	b1bb      	cbz	r3, 403a94 <_fflush_r+0x3c>
  403a64:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403a68:	b188      	cbz	r0, 403a8e <_fflush_r+0x36>
  403a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403a6c:	07db      	lsls	r3, r3, #31
  403a6e:	d401      	bmi.n	403a74 <_fflush_r+0x1c>
  403a70:	0581      	lsls	r1, r0, #22
  403a72:	d517      	bpl.n	403aa4 <_fflush_r+0x4c>
  403a74:	4620      	mov	r0, r4
  403a76:	4629      	mov	r1, r5
  403a78:	f7ff ff4e 	bl	403918 <__sflush_r>
  403a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403a7e:	07da      	lsls	r2, r3, #31
  403a80:	4604      	mov	r4, r0
  403a82:	d402      	bmi.n	403a8a <_fflush_r+0x32>
  403a84:	89ab      	ldrh	r3, [r5, #12]
  403a86:	059b      	lsls	r3, r3, #22
  403a88:	d507      	bpl.n	403a9a <_fflush_r+0x42>
  403a8a:	4620      	mov	r0, r4
  403a8c:	bd38      	pop	{r3, r4, r5, pc}
  403a8e:	4604      	mov	r4, r0
  403a90:	4620      	mov	r0, r4
  403a92:	bd38      	pop	{r3, r4, r5, pc}
  403a94:	f000 f838 	bl	403b08 <__sinit>
  403a98:	e7e4      	b.n	403a64 <_fflush_r+0xc>
  403a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403a9c:	f000 fbf6 	bl	40428c <__retarget_lock_release_recursive>
  403aa0:	4620      	mov	r0, r4
  403aa2:	bd38      	pop	{r3, r4, r5, pc}
  403aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403aa6:	f000 fbef 	bl	404288 <__retarget_lock_acquire_recursive>
  403aaa:	e7e3      	b.n	403a74 <_fflush_r+0x1c>

00403aac <_cleanup_r>:
  403aac:	4901      	ldr	r1, [pc, #4]	; (403ab4 <_cleanup_r+0x8>)
  403aae:	f000 bbaf 	b.w	404210 <_fwalk_reent>
  403ab2:	bf00      	nop
  403ab4:	00404c55 	.word	0x00404c55

00403ab8 <std.isra.0>:
  403ab8:	b510      	push	{r4, lr}
  403aba:	2300      	movs	r3, #0
  403abc:	4604      	mov	r4, r0
  403abe:	8181      	strh	r1, [r0, #12]
  403ac0:	81c2      	strh	r2, [r0, #14]
  403ac2:	6003      	str	r3, [r0, #0]
  403ac4:	6043      	str	r3, [r0, #4]
  403ac6:	6083      	str	r3, [r0, #8]
  403ac8:	6643      	str	r3, [r0, #100]	; 0x64
  403aca:	6103      	str	r3, [r0, #16]
  403acc:	6143      	str	r3, [r0, #20]
  403ace:	6183      	str	r3, [r0, #24]
  403ad0:	4619      	mov	r1, r3
  403ad2:	2208      	movs	r2, #8
  403ad4:	305c      	adds	r0, #92	; 0x5c
  403ad6:	f7fe fe2b 	bl	402730 <memset>
  403ada:	4807      	ldr	r0, [pc, #28]	; (403af8 <std.isra.0+0x40>)
  403adc:	4907      	ldr	r1, [pc, #28]	; (403afc <std.isra.0+0x44>)
  403ade:	4a08      	ldr	r2, [pc, #32]	; (403b00 <std.isra.0+0x48>)
  403ae0:	4b08      	ldr	r3, [pc, #32]	; (403b04 <std.isra.0+0x4c>)
  403ae2:	6220      	str	r0, [r4, #32]
  403ae4:	61e4      	str	r4, [r4, #28]
  403ae6:	6261      	str	r1, [r4, #36]	; 0x24
  403ae8:	62a2      	str	r2, [r4, #40]	; 0x28
  403aea:	62e3      	str	r3, [r4, #44]	; 0x2c
  403aec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403af4:	f000 bbc4 	b.w	404280 <__retarget_lock_init_recursive>
  403af8:	00404999 	.word	0x00404999
  403afc:	004049bd 	.word	0x004049bd
  403b00:	004049f9 	.word	0x004049f9
  403b04:	00404a19 	.word	0x00404a19

00403b08 <__sinit>:
  403b08:	b510      	push	{r4, lr}
  403b0a:	4604      	mov	r4, r0
  403b0c:	4812      	ldr	r0, [pc, #72]	; (403b58 <__sinit+0x50>)
  403b0e:	f000 fbbb 	bl	404288 <__retarget_lock_acquire_recursive>
  403b12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403b14:	b9d2      	cbnz	r2, 403b4c <__sinit+0x44>
  403b16:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403b1a:	4810      	ldr	r0, [pc, #64]	; (403b5c <__sinit+0x54>)
  403b1c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403b20:	2103      	movs	r1, #3
  403b22:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403b26:	63e0      	str	r0, [r4, #60]	; 0x3c
  403b28:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403b2c:	6860      	ldr	r0, [r4, #4]
  403b2e:	2104      	movs	r1, #4
  403b30:	f7ff ffc2 	bl	403ab8 <std.isra.0>
  403b34:	2201      	movs	r2, #1
  403b36:	2109      	movs	r1, #9
  403b38:	68a0      	ldr	r0, [r4, #8]
  403b3a:	f7ff ffbd 	bl	403ab8 <std.isra.0>
  403b3e:	2202      	movs	r2, #2
  403b40:	2112      	movs	r1, #18
  403b42:	68e0      	ldr	r0, [r4, #12]
  403b44:	f7ff ffb8 	bl	403ab8 <std.isra.0>
  403b48:	2301      	movs	r3, #1
  403b4a:	63a3      	str	r3, [r4, #56]	; 0x38
  403b4c:	4802      	ldr	r0, [pc, #8]	; (403b58 <__sinit+0x50>)
  403b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403b52:	f000 bb9b 	b.w	40428c <__retarget_lock_release_recursive>
  403b56:	bf00      	nop
  403b58:	20000e9c 	.word	0x20000e9c
  403b5c:	00403aad 	.word	0x00403aad

00403b60 <__sfp_lock_acquire>:
  403b60:	4801      	ldr	r0, [pc, #4]	; (403b68 <__sfp_lock_acquire+0x8>)
  403b62:	f000 bb91 	b.w	404288 <__retarget_lock_acquire_recursive>
  403b66:	bf00      	nop
  403b68:	20000eb0 	.word	0x20000eb0

00403b6c <__sfp_lock_release>:
  403b6c:	4801      	ldr	r0, [pc, #4]	; (403b74 <__sfp_lock_release+0x8>)
  403b6e:	f000 bb8d 	b.w	40428c <__retarget_lock_release_recursive>
  403b72:	bf00      	nop
  403b74:	20000eb0 	.word	0x20000eb0

00403b78 <__libc_fini_array>:
  403b78:	b538      	push	{r3, r4, r5, lr}
  403b7a:	4c0a      	ldr	r4, [pc, #40]	; (403ba4 <__libc_fini_array+0x2c>)
  403b7c:	4d0a      	ldr	r5, [pc, #40]	; (403ba8 <__libc_fini_array+0x30>)
  403b7e:	1b64      	subs	r4, r4, r5
  403b80:	10a4      	asrs	r4, r4, #2
  403b82:	d00a      	beq.n	403b9a <__libc_fini_array+0x22>
  403b84:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403b88:	3b01      	subs	r3, #1
  403b8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403b8e:	3c01      	subs	r4, #1
  403b90:	f855 3904 	ldr.w	r3, [r5], #-4
  403b94:	4798      	blx	r3
  403b96:	2c00      	cmp	r4, #0
  403b98:	d1f9      	bne.n	403b8e <__libc_fini_array+0x16>
  403b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403b9e:	f001 b9e9 	b.w	404f74 <_fini>
  403ba2:	bf00      	nop
  403ba4:	00404f84 	.word	0x00404f84
  403ba8:	00404f80 	.word	0x00404f80

00403bac <__fputwc>:
  403bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403bb0:	b082      	sub	sp, #8
  403bb2:	4680      	mov	r8, r0
  403bb4:	4689      	mov	r9, r1
  403bb6:	4614      	mov	r4, r2
  403bb8:	f000 fb54 	bl	404264 <__locale_mb_cur_max>
  403bbc:	2801      	cmp	r0, #1
  403bbe:	d036      	beq.n	403c2e <__fputwc+0x82>
  403bc0:	464a      	mov	r2, r9
  403bc2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403bc6:	a901      	add	r1, sp, #4
  403bc8:	4640      	mov	r0, r8
  403bca:	f000 ff81 	bl	404ad0 <_wcrtomb_r>
  403bce:	1c42      	adds	r2, r0, #1
  403bd0:	4606      	mov	r6, r0
  403bd2:	d025      	beq.n	403c20 <__fputwc+0x74>
  403bd4:	b3a8      	cbz	r0, 403c42 <__fputwc+0x96>
  403bd6:	f89d e004 	ldrb.w	lr, [sp, #4]
  403bda:	2500      	movs	r5, #0
  403bdc:	f10d 0a04 	add.w	sl, sp, #4
  403be0:	e009      	b.n	403bf6 <__fputwc+0x4a>
  403be2:	6823      	ldr	r3, [r4, #0]
  403be4:	1c5a      	adds	r2, r3, #1
  403be6:	6022      	str	r2, [r4, #0]
  403be8:	f883 e000 	strb.w	lr, [r3]
  403bec:	3501      	adds	r5, #1
  403bee:	42b5      	cmp	r5, r6
  403bf0:	d227      	bcs.n	403c42 <__fputwc+0x96>
  403bf2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403bf6:	68a3      	ldr	r3, [r4, #8]
  403bf8:	3b01      	subs	r3, #1
  403bfa:	2b00      	cmp	r3, #0
  403bfc:	60a3      	str	r3, [r4, #8]
  403bfe:	daf0      	bge.n	403be2 <__fputwc+0x36>
  403c00:	69a7      	ldr	r7, [r4, #24]
  403c02:	42bb      	cmp	r3, r7
  403c04:	4671      	mov	r1, lr
  403c06:	4622      	mov	r2, r4
  403c08:	4640      	mov	r0, r8
  403c0a:	db02      	blt.n	403c12 <__fputwc+0x66>
  403c0c:	f1be 0f0a 	cmp.w	lr, #10
  403c10:	d1e7      	bne.n	403be2 <__fputwc+0x36>
  403c12:	f000 ff05 	bl	404a20 <__swbuf_r>
  403c16:	1c43      	adds	r3, r0, #1
  403c18:	d1e8      	bne.n	403bec <__fputwc+0x40>
  403c1a:	b002      	add	sp, #8
  403c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c20:	89a3      	ldrh	r3, [r4, #12]
  403c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c26:	81a3      	strh	r3, [r4, #12]
  403c28:	b002      	add	sp, #8
  403c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c2e:	f109 33ff 	add.w	r3, r9, #4294967295
  403c32:	2bfe      	cmp	r3, #254	; 0xfe
  403c34:	d8c4      	bhi.n	403bc0 <__fputwc+0x14>
  403c36:	fa5f fe89 	uxtb.w	lr, r9
  403c3a:	4606      	mov	r6, r0
  403c3c:	f88d e004 	strb.w	lr, [sp, #4]
  403c40:	e7cb      	b.n	403bda <__fputwc+0x2e>
  403c42:	4648      	mov	r0, r9
  403c44:	b002      	add	sp, #8
  403c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c4a:	bf00      	nop

00403c4c <_fputwc_r>:
  403c4c:	b530      	push	{r4, r5, lr}
  403c4e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403c50:	f013 0f01 	tst.w	r3, #1
  403c54:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403c58:	4614      	mov	r4, r2
  403c5a:	b083      	sub	sp, #12
  403c5c:	4605      	mov	r5, r0
  403c5e:	b29a      	uxth	r2, r3
  403c60:	d101      	bne.n	403c66 <_fputwc_r+0x1a>
  403c62:	0590      	lsls	r0, r2, #22
  403c64:	d51c      	bpl.n	403ca0 <_fputwc_r+0x54>
  403c66:	0490      	lsls	r0, r2, #18
  403c68:	d406      	bmi.n	403c78 <_fputwc_r+0x2c>
  403c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403c74:	81a3      	strh	r3, [r4, #12]
  403c76:	6662      	str	r2, [r4, #100]	; 0x64
  403c78:	4628      	mov	r0, r5
  403c7a:	4622      	mov	r2, r4
  403c7c:	f7ff ff96 	bl	403bac <__fputwc>
  403c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403c82:	07da      	lsls	r2, r3, #31
  403c84:	4605      	mov	r5, r0
  403c86:	d402      	bmi.n	403c8e <_fputwc_r+0x42>
  403c88:	89a3      	ldrh	r3, [r4, #12]
  403c8a:	059b      	lsls	r3, r3, #22
  403c8c:	d502      	bpl.n	403c94 <_fputwc_r+0x48>
  403c8e:	4628      	mov	r0, r5
  403c90:	b003      	add	sp, #12
  403c92:	bd30      	pop	{r4, r5, pc}
  403c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c96:	f000 faf9 	bl	40428c <__retarget_lock_release_recursive>
  403c9a:	4628      	mov	r0, r5
  403c9c:	b003      	add	sp, #12
  403c9e:	bd30      	pop	{r4, r5, pc}
  403ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ca2:	9101      	str	r1, [sp, #4]
  403ca4:	f000 faf0 	bl	404288 <__retarget_lock_acquire_recursive>
  403ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403cac:	9901      	ldr	r1, [sp, #4]
  403cae:	b29a      	uxth	r2, r3
  403cb0:	e7d9      	b.n	403c66 <_fputwc_r+0x1a>
  403cb2:	bf00      	nop

00403cb4 <_malloc_trim_r>:
  403cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403cb6:	4f24      	ldr	r7, [pc, #144]	; (403d48 <_malloc_trim_r+0x94>)
  403cb8:	460c      	mov	r4, r1
  403cba:	4606      	mov	r6, r0
  403cbc:	f7fe fd86 	bl	4027cc <__malloc_lock>
  403cc0:	68bb      	ldr	r3, [r7, #8]
  403cc2:	685d      	ldr	r5, [r3, #4]
  403cc4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403cc8:	310f      	adds	r1, #15
  403cca:	f025 0503 	bic.w	r5, r5, #3
  403cce:	4429      	add	r1, r5
  403cd0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403cd4:	f021 010f 	bic.w	r1, r1, #15
  403cd8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403cdc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403ce0:	db07      	blt.n	403cf2 <_malloc_trim_r+0x3e>
  403ce2:	2100      	movs	r1, #0
  403ce4:	4630      	mov	r0, r6
  403ce6:	f7fe fd7d 	bl	4027e4 <_sbrk_r>
  403cea:	68bb      	ldr	r3, [r7, #8]
  403cec:	442b      	add	r3, r5
  403cee:	4298      	cmp	r0, r3
  403cf0:	d004      	beq.n	403cfc <_malloc_trim_r+0x48>
  403cf2:	4630      	mov	r0, r6
  403cf4:	f7fe fd70 	bl	4027d8 <__malloc_unlock>
  403cf8:	2000      	movs	r0, #0
  403cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403cfc:	4261      	negs	r1, r4
  403cfe:	4630      	mov	r0, r6
  403d00:	f7fe fd70 	bl	4027e4 <_sbrk_r>
  403d04:	3001      	adds	r0, #1
  403d06:	d00d      	beq.n	403d24 <_malloc_trim_r+0x70>
  403d08:	4b10      	ldr	r3, [pc, #64]	; (403d4c <_malloc_trim_r+0x98>)
  403d0a:	68ba      	ldr	r2, [r7, #8]
  403d0c:	6819      	ldr	r1, [r3, #0]
  403d0e:	1b2d      	subs	r5, r5, r4
  403d10:	f045 0501 	orr.w	r5, r5, #1
  403d14:	4630      	mov	r0, r6
  403d16:	1b09      	subs	r1, r1, r4
  403d18:	6055      	str	r5, [r2, #4]
  403d1a:	6019      	str	r1, [r3, #0]
  403d1c:	f7fe fd5c 	bl	4027d8 <__malloc_unlock>
  403d20:	2001      	movs	r0, #1
  403d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403d24:	2100      	movs	r1, #0
  403d26:	4630      	mov	r0, r6
  403d28:	f7fe fd5c 	bl	4027e4 <_sbrk_r>
  403d2c:	68ba      	ldr	r2, [r7, #8]
  403d2e:	1a83      	subs	r3, r0, r2
  403d30:	2b0f      	cmp	r3, #15
  403d32:	ddde      	ble.n	403cf2 <_malloc_trim_r+0x3e>
  403d34:	4c06      	ldr	r4, [pc, #24]	; (403d50 <_malloc_trim_r+0x9c>)
  403d36:	4905      	ldr	r1, [pc, #20]	; (403d4c <_malloc_trim_r+0x98>)
  403d38:	6824      	ldr	r4, [r4, #0]
  403d3a:	f043 0301 	orr.w	r3, r3, #1
  403d3e:	1b00      	subs	r0, r0, r4
  403d40:	6053      	str	r3, [r2, #4]
  403d42:	6008      	str	r0, [r1, #0]
  403d44:	e7d5      	b.n	403cf2 <_malloc_trim_r+0x3e>
  403d46:	bf00      	nop
  403d48:	20000430 	.word	0x20000430
  403d4c:	20000a48 	.word	0x20000a48
  403d50:	20000838 	.word	0x20000838

00403d54 <_free_r>:
  403d54:	2900      	cmp	r1, #0
  403d56:	d044      	beq.n	403de2 <_free_r+0x8e>
  403d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d5c:	460d      	mov	r5, r1
  403d5e:	4680      	mov	r8, r0
  403d60:	f7fe fd34 	bl	4027cc <__malloc_lock>
  403d64:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403d68:	4969      	ldr	r1, [pc, #420]	; (403f10 <_free_r+0x1bc>)
  403d6a:	f027 0301 	bic.w	r3, r7, #1
  403d6e:	f1a5 0408 	sub.w	r4, r5, #8
  403d72:	18e2      	adds	r2, r4, r3
  403d74:	688e      	ldr	r6, [r1, #8]
  403d76:	6850      	ldr	r0, [r2, #4]
  403d78:	42b2      	cmp	r2, r6
  403d7a:	f020 0003 	bic.w	r0, r0, #3
  403d7e:	d05e      	beq.n	403e3e <_free_r+0xea>
  403d80:	07fe      	lsls	r6, r7, #31
  403d82:	6050      	str	r0, [r2, #4]
  403d84:	d40b      	bmi.n	403d9e <_free_r+0x4a>
  403d86:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403d8a:	1be4      	subs	r4, r4, r7
  403d8c:	f101 0e08 	add.w	lr, r1, #8
  403d90:	68a5      	ldr	r5, [r4, #8]
  403d92:	4575      	cmp	r5, lr
  403d94:	443b      	add	r3, r7
  403d96:	d06d      	beq.n	403e74 <_free_r+0x120>
  403d98:	68e7      	ldr	r7, [r4, #12]
  403d9a:	60ef      	str	r7, [r5, #12]
  403d9c:	60bd      	str	r5, [r7, #8]
  403d9e:	1815      	adds	r5, r2, r0
  403da0:	686d      	ldr	r5, [r5, #4]
  403da2:	07ed      	lsls	r5, r5, #31
  403da4:	d53e      	bpl.n	403e24 <_free_r+0xd0>
  403da6:	f043 0201 	orr.w	r2, r3, #1
  403daa:	6062      	str	r2, [r4, #4]
  403dac:	50e3      	str	r3, [r4, r3]
  403dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403db2:	d217      	bcs.n	403de4 <_free_r+0x90>
  403db4:	08db      	lsrs	r3, r3, #3
  403db6:	1c58      	adds	r0, r3, #1
  403db8:	109a      	asrs	r2, r3, #2
  403dba:	684d      	ldr	r5, [r1, #4]
  403dbc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403dc0:	60a7      	str	r7, [r4, #8]
  403dc2:	2301      	movs	r3, #1
  403dc4:	4093      	lsls	r3, r2
  403dc6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403dca:	432b      	orrs	r3, r5
  403dcc:	3a08      	subs	r2, #8
  403dce:	60e2      	str	r2, [r4, #12]
  403dd0:	604b      	str	r3, [r1, #4]
  403dd2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403dd6:	60fc      	str	r4, [r7, #12]
  403dd8:	4640      	mov	r0, r8
  403dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403dde:	f7fe bcfb 	b.w	4027d8 <__malloc_unlock>
  403de2:	4770      	bx	lr
  403de4:	0a5a      	lsrs	r2, r3, #9
  403de6:	2a04      	cmp	r2, #4
  403de8:	d852      	bhi.n	403e90 <_free_r+0x13c>
  403dea:	099a      	lsrs	r2, r3, #6
  403dec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403df0:	00ff      	lsls	r7, r7, #3
  403df2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403df6:	19c8      	adds	r0, r1, r7
  403df8:	59ca      	ldr	r2, [r1, r7]
  403dfa:	3808      	subs	r0, #8
  403dfc:	4290      	cmp	r0, r2
  403dfe:	d04f      	beq.n	403ea0 <_free_r+0x14c>
  403e00:	6851      	ldr	r1, [r2, #4]
  403e02:	f021 0103 	bic.w	r1, r1, #3
  403e06:	428b      	cmp	r3, r1
  403e08:	d232      	bcs.n	403e70 <_free_r+0x11c>
  403e0a:	6892      	ldr	r2, [r2, #8]
  403e0c:	4290      	cmp	r0, r2
  403e0e:	d1f7      	bne.n	403e00 <_free_r+0xac>
  403e10:	68c3      	ldr	r3, [r0, #12]
  403e12:	60a0      	str	r0, [r4, #8]
  403e14:	60e3      	str	r3, [r4, #12]
  403e16:	609c      	str	r4, [r3, #8]
  403e18:	60c4      	str	r4, [r0, #12]
  403e1a:	4640      	mov	r0, r8
  403e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403e20:	f7fe bcda 	b.w	4027d8 <__malloc_unlock>
  403e24:	6895      	ldr	r5, [r2, #8]
  403e26:	4f3b      	ldr	r7, [pc, #236]	; (403f14 <_free_r+0x1c0>)
  403e28:	42bd      	cmp	r5, r7
  403e2a:	4403      	add	r3, r0
  403e2c:	d040      	beq.n	403eb0 <_free_r+0x15c>
  403e2e:	68d0      	ldr	r0, [r2, #12]
  403e30:	60e8      	str	r0, [r5, #12]
  403e32:	f043 0201 	orr.w	r2, r3, #1
  403e36:	6085      	str	r5, [r0, #8]
  403e38:	6062      	str	r2, [r4, #4]
  403e3a:	50e3      	str	r3, [r4, r3]
  403e3c:	e7b7      	b.n	403dae <_free_r+0x5a>
  403e3e:	07ff      	lsls	r7, r7, #31
  403e40:	4403      	add	r3, r0
  403e42:	d407      	bmi.n	403e54 <_free_r+0x100>
  403e44:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403e48:	1aa4      	subs	r4, r4, r2
  403e4a:	4413      	add	r3, r2
  403e4c:	68a0      	ldr	r0, [r4, #8]
  403e4e:	68e2      	ldr	r2, [r4, #12]
  403e50:	60c2      	str	r2, [r0, #12]
  403e52:	6090      	str	r0, [r2, #8]
  403e54:	4a30      	ldr	r2, [pc, #192]	; (403f18 <_free_r+0x1c4>)
  403e56:	6812      	ldr	r2, [r2, #0]
  403e58:	f043 0001 	orr.w	r0, r3, #1
  403e5c:	4293      	cmp	r3, r2
  403e5e:	6060      	str	r0, [r4, #4]
  403e60:	608c      	str	r4, [r1, #8]
  403e62:	d3b9      	bcc.n	403dd8 <_free_r+0x84>
  403e64:	4b2d      	ldr	r3, [pc, #180]	; (403f1c <_free_r+0x1c8>)
  403e66:	4640      	mov	r0, r8
  403e68:	6819      	ldr	r1, [r3, #0]
  403e6a:	f7ff ff23 	bl	403cb4 <_malloc_trim_r>
  403e6e:	e7b3      	b.n	403dd8 <_free_r+0x84>
  403e70:	4610      	mov	r0, r2
  403e72:	e7cd      	b.n	403e10 <_free_r+0xbc>
  403e74:	1811      	adds	r1, r2, r0
  403e76:	6849      	ldr	r1, [r1, #4]
  403e78:	07c9      	lsls	r1, r1, #31
  403e7a:	d444      	bmi.n	403f06 <_free_r+0x1b2>
  403e7c:	6891      	ldr	r1, [r2, #8]
  403e7e:	68d2      	ldr	r2, [r2, #12]
  403e80:	60ca      	str	r2, [r1, #12]
  403e82:	4403      	add	r3, r0
  403e84:	f043 0001 	orr.w	r0, r3, #1
  403e88:	6091      	str	r1, [r2, #8]
  403e8a:	6060      	str	r0, [r4, #4]
  403e8c:	50e3      	str	r3, [r4, r3]
  403e8e:	e7a3      	b.n	403dd8 <_free_r+0x84>
  403e90:	2a14      	cmp	r2, #20
  403e92:	d816      	bhi.n	403ec2 <_free_r+0x16e>
  403e94:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403e98:	00ff      	lsls	r7, r7, #3
  403e9a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403e9e:	e7aa      	b.n	403df6 <_free_r+0xa2>
  403ea0:	10aa      	asrs	r2, r5, #2
  403ea2:	2301      	movs	r3, #1
  403ea4:	684d      	ldr	r5, [r1, #4]
  403ea6:	4093      	lsls	r3, r2
  403ea8:	432b      	orrs	r3, r5
  403eaa:	604b      	str	r3, [r1, #4]
  403eac:	4603      	mov	r3, r0
  403eae:	e7b0      	b.n	403e12 <_free_r+0xbe>
  403eb0:	f043 0201 	orr.w	r2, r3, #1
  403eb4:	614c      	str	r4, [r1, #20]
  403eb6:	610c      	str	r4, [r1, #16]
  403eb8:	60e5      	str	r5, [r4, #12]
  403eba:	60a5      	str	r5, [r4, #8]
  403ebc:	6062      	str	r2, [r4, #4]
  403ebe:	50e3      	str	r3, [r4, r3]
  403ec0:	e78a      	b.n	403dd8 <_free_r+0x84>
  403ec2:	2a54      	cmp	r2, #84	; 0x54
  403ec4:	d806      	bhi.n	403ed4 <_free_r+0x180>
  403ec6:	0b1a      	lsrs	r2, r3, #12
  403ec8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403ecc:	00ff      	lsls	r7, r7, #3
  403ece:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403ed2:	e790      	b.n	403df6 <_free_r+0xa2>
  403ed4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403ed8:	d806      	bhi.n	403ee8 <_free_r+0x194>
  403eda:	0bda      	lsrs	r2, r3, #15
  403edc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403ee0:	00ff      	lsls	r7, r7, #3
  403ee2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403ee6:	e786      	b.n	403df6 <_free_r+0xa2>
  403ee8:	f240 5054 	movw	r0, #1364	; 0x554
  403eec:	4282      	cmp	r2, r0
  403eee:	d806      	bhi.n	403efe <_free_r+0x1aa>
  403ef0:	0c9a      	lsrs	r2, r3, #18
  403ef2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403ef6:	00ff      	lsls	r7, r7, #3
  403ef8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403efc:	e77b      	b.n	403df6 <_free_r+0xa2>
  403efe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403f02:	257e      	movs	r5, #126	; 0x7e
  403f04:	e777      	b.n	403df6 <_free_r+0xa2>
  403f06:	f043 0101 	orr.w	r1, r3, #1
  403f0a:	6061      	str	r1, [r4, #4]
  403f0c:	6013      	str	r3, [r2, #0]
  403f0e:	e763      	b.n	403dd8 <_free_r+0x84>
  403f10:	20000430 	.word	0x20000430
  403f14:	20000438 	.word	0x20000438
  403f18:	2000083c 	.word	0x2000083c
  403f1c:	20000a78 	.word	0x20000a78

00403f20 <__sfvwrite_r>:
  403f20:	6893      	ldr	r3, [r2, #8]
  403f22:	2b00      	cmp	r3, #0
  403f24:	d073      	beq.n	40400e <__sfvwrite_r+0xee>
  403f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f2a:	898b      	ldrh	r3, [r1, #12]
  403f2c:	b083      	sub	sp, #12
  403f2e:	460c      	mov	r4, r1
  403f30:	0719      	lsls	r1, r3, #28
  403f32:	9000      	str	r0, [sp, #0]
  403f34:	4616      	mov	r6, r2
  403f36:	d526      	bpl.n	403f86 <__sfvwrite_r+0x66>
  403f38:	6922      	ldr	r2, [r4, #16]
  403f3a:	b322      	cbz	r2, 403f86 <__sfvwrite_r+0x66>
  403f3c:	f013 0002 	ands.w	r0, r3, #2
  403f40:	6835      	ldr	r5, [r6, #0]
  403f42:	d02c      	beq.n	403f9e <__sfvwrite_r+0x7e>
  403f44:	f04f 0900 	mov.w	r9, #0
  403f48:	4fb0      	ldr	r7, [pc, #704]	; (40420c <__sfvwrite_r+0x2ec>)
  403f4a:	46c8      	mov	r8, r9
  403f4c:	46b2      	mov	sl, r6
  403f4e:	45b8      	cmp	r8, r7
  403f50:	4643      	mov	r3, r8
  403f52:	464a      	mov	r2, r9
  403f54:	bf28      	it	cs
  403f56:	463b      	movcs	r3, r7
  403f58:	9800      	ldr	r0, [sp, #0]
  403f5a:	f1b8 0f00 	cmp.w	r8, #0
  403f5e:	d050      	beq.n	404002 <__sfvwrite_r+0xe2>
  403f60:	69e1      	ldr	r1, [r4, #28]
  403f62:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403f64:	47b0      	blx	r6
  403f66:	2800      	cmp	r0, #0
  403f68:	dd58      	ble.n	40401c <__sfvwrite_r+0xfc>
  403f6a:	f8da 3008 	ldr.w	r3, [sl, #8]
  403f6e:	1a1b      	subs	r3, r3, r0
  403f70:	4481      	add	r9, r0
  403f72:	eba8 0800 	sub.w	r8, r8, r0
  403f76:	f8ca 3008 	str.w	r3, [sl, #8]
  403f7a:	2b00      	cmp	r3, #0
  403f7c:	d1e7      	bne.n	403f4e <__sfvwrite_r+0x2e>
  403f7e:	2000      	movs	r0, #0
  403f80:	b003      	add	sp, #12
  403f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f86:	4621      	mov	r1, r4
  403f88:	9800      	ldr	r0, [sp, #0]
  403f8a:	f7ff fc51 	bl	403830 <__swsetup_r>
  403f8e:	2800      	cmp	r0, #0
  403f90:	f040 8133 	bne.w	4041fa <__sfvwrite_r+0x2da>
  403f94:	89a3      	ldrh	r3, [r4, #12]
  403f96:	6835      	ldr	r5, [r6, #0]
  403f98:	f013 0002 	ands.w	r0, r3, #2
  403f9c:	d1d2      	bne.n	403f44 <__sfvwrite_r+0x24>
  403f9e:	f013 0901 	ands.w	r9, r3, #1
  403fa2:	d145      	bne.n	404030 <__sfvwrite_r+0x110>
  403fa4:	464f      	mov	r7, r9
  403fa6:	9601      	str	r6, [sp, #4]
  403fa8:	b337      	cbz	r7, 403ff8 <__sfvwrite_r+0xd8>
  403faa:	059a      	lsls	r2, r3, #22
  403fac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403fb0:	f140 8083 	bpl.w	4040ba <__sfvwrite_r+0x19a>
  403fb4:	4547      	cmp	r7, r8
  403fb6:	46c3      	mov	fp, r8
  403fb8:	f0c0 80ab 	bcc.w	404112 <__sfvwrite_r+0x1f2>
  403fbc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403fc0:	f040 80ac 	bne.w	40411c <__sfvwrite_r+0x1fc>
  403fc4:	6820      	ldr	r0, [r4, #0]
  403fc6:	46ba      	mov	sl, r7
  403fc8:	465a      	mov	r2, fp
  403fca:	4649      	mov	r1, r9
  403fcc:	f000 fada 	bl	404584 <memmove>
  403fd0:	68a2      	ldr	r2, [r4, #8]
  403fd2:	6823      	ldr	r3, [r4, #0]
  403fd4:	eba2 0208 	sub.w	r2, r2, r8
  403fd8:	445b      	add	r3, fp
  403fda:	60a2      	str	r2, [r4, #8]
  403fdc:	6023      	str	r3, [r4, #0]
  403fde:	9a01      	ldr	r2, [sp, #4]
  403fe0:	6893      	ldr	r3, [r2, #8]
  403fe2:	eba3 030a 	sub.w	r3, r3, sl
  403fe6:	44d1      	add	r9, sl
  403fe8:	eba7 070a 	sub.w	r7, r7, sl
  403fec:	6093      	str	r3, [r2, #8]
  403fee:	2b00      	cmp	r3, #0
  403ff0:	d0c5      	beq.n	403f7e <__sfvwrite_r+0x5e>
  403ff2:	89a3      	ldrh	r3, [r4, #12]
  403ff4:	2f00      	cmp	r7, #0
  403ff6:	d1d8      	bne.n	403faa <__sfvwrite_r+0x8a>
  403ff8:	f8d5 9000 	ldr.w	r9, [r5]
  403ffc:	686f      	ldr	r7, [r5, #4]
  403ffe:	3508      	adds	r5, #8
  404000:	e7d2      	b.n	403fa8 <__sfvwrite_r+0x88>
  404002:	f8d5 9000 	ldr.w	r9, [r5]
  404006:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40400a:	3508      	adds	r5, #8
  40400c:	e79f      	b.n	403f4e <__sfvwrite_r+0x2e>
  40400e:	2000      	movs	r0, #0
  404010:	4770      	bx	lr
  404012:	4621      	mov	r1, r4
  404014:	9800      	ldr	r0, [sp, #0]
  404016:	f7ff fd1f 	bl	403a58 <_fflush_r>
  40401a:	b370      	cbz	r0, 40407a <__sfvwrite_r+0x15a>
  40401c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404024:	f04f 30ff 	mov.w	r0, #4294967295
  404028:	81a3      	strh	r3, [r4, #12]
  40402a:	b003      	add	sp, #12
  40402c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404030:	4681      	mov	r9, r0
  404032:	4633      	mov	r3, r6
  404034:	464e      	mov	r6, r9
  404036:	46a8      	mov	r8, r5
  404038:	469a      	mov	sl, r3
  40403a:	464d      	mov	r5, r9
  40403c:	b34e      	cbz	r6, 404092 <__sfvwrite_r+0x172>
  40403e:	b380      	cbz	r0, 4040a2 <__sfvwrite_r+0x182>
  404040:	6820      	ldr	r0, [r4, #0]
  404042:	6923      	ldr	r3, [r4, #16]
  404044:	6962      	ldr	r2, [r4, #20]
  404046:	45b1      	cmp	r9, r6
  404048:	46cb      	mov	fp, r9
  40404a:	bf28      	it	cs
  40404c:	46b3      	movcs	fp, r6
  40404e:	4298      	cmp	r0, r3
  404050:	465f      	mov	r7, fp
  404052:	d904      	bls.n	40405e <__sfvwrite_r+0x13e>
  404054:	68a3      	ldr	r3, [r4, #8]
  404056:	4413      	add	r3, r2
  404058:	459b      	cmp	fp, r3
  40405a:	f300 80a6 	bgt.w	4041aa <__sfvwrite_r+0x28a>
  40405e:	4593      	cmp	fp, r2
  404060:	db4b      	blt.n	4040fa <__sfvwrite_r+0x1da>
  404062:	4613      	mov	r3, r2
  404064:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404066:	69e1      	ldr	r1, [r4, #28]
  404068:	9800      	ldr	r0, [sp, #0]
  40406a:	462a      	mov	r2, r5
  40406c:	47b8      	blx	r7
  40406e:	1e07      	subs	r7, r0, #0
  404070:	ddd4      	ble.n	40401c <__sfvwrite_r+0xfc>
  404072:	ebb9 0907 	subs.w	r9, r9, r7
  404076:	d0cc      	beq.n	404012 <__sfvwrite_r+0xf2>
  404078:	2001      	movs	r0, #1
  40407a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40407e:	1bdb      	subs	r3, r3, r7
  404080:	443d      	add	r5, r7
  404082:	1bf6      	subs	r6, r6, r7
  404084:	f8ca 3008 	str.w	r3, [sl, #8]
  404088:	2b00      	cmp	r3, #0
  40408a:	f43f af78 	beq.w	403f7e <__sfvwrite_r+0x5e>
  40408e:	2e00      	cmp	r6, #0
  404090:	d1d5      	bne.n	40403e <__sfvwrite_r+0x11e>
  404092:	f108 0308 	add.w	r3, r8, #8
  404096:	e913 0060 	ldmdb	r3, {r5, r6}
  40409a:	4698      	mov	r8, r3
  40409c:	3308      	adds	r3, #8
  40409e:	2e00      	cmp	r6, #0
  4040a0:	d0f9      	beq.n	404096 <__sfvwrite_r+0x176>
  4040a2:	4632      	mov	r2, r6
  4040a4:	210a      	movs	r1, #10
  4040a6:	4628      	mov	r0, r5
  4040a8:	f000 f982 	bl	4043b0 <memchr>
  4040ac:	2800      	cmp	r0, #0
  4040ae:	f000 80a1 	beq.w	4041f4 <__sfvwrite_r+0x2d4>
  4040b2:	3001      	adds	r0, #1
  4040b4:	eba0 0905 	sub.w	r9, r0, r5
  4040b8:	e7c2      	b.n	404040 <__sfvwrite_r+0x120>
  4040ba:	6820      	ldr	r0, [r4, #0]
  4040bc:	6923      	ldr	r3, [r4, #16]
  4040be:	4298      	cmp	r0, r3
  4040c0:	d802      	bhi.n	4040c8 <__sfvwrite_r+0x1a8>
  4040c2:	6963      	ldr	r3, [r4, #20]
  4040c4:	429f      	cmp	r7, r3
  4040c6:	d25d      	bcs.n	404184 <__sfvwrite_r+0x264>
  4040c8:	45b8      	cmp	r8, r7
  4040ca:	bf28      	it	cs
  4040cc:	46b8      	movcs	r8, r7
  4040ce:	4642      	mov	r2, r8
  4040d0:	4649      	mov	r1, r9
  4040d2:	f000 fa57 	bl	404584 <memmove>
  4040d6:	68a3      	ldr	r3, [r4, #8]
  4040d8:	6822      	ldr	r2, [r4, #0]
  4040da:	eba3 0308 	sub.w	r3, r3, r8
  4040de:	4442      	add	r2, r8
  4040e0:	60a3      	str	r3, [r4, #8]
  4040e2:	6022      	str	r2, [r4, #0]
  4040e4:	b10b      	cbz	r3, 4040ea <__sfvwrite_r+0x1ca>
  4040e6:	46c2      	mov	sl, r8
  4040e8:	e779      	b.n	403fde <__sfvwrite_r+0xbe>
  4040ea:	4621      	mov	r1, r4
  4040ec:	9800      	ldr	r0, [sp, #0]
  4040ee:	f7ff fcb3 	bl	403a58 <_fflush_r>
  4040f2:	2800      	cmp	r0, #0
  4040f4:	d192      	bne.n	40401c <__sfvwrite_r+0xfc>
  4040f6:	46c2      	mov	sl, r8
  4040f8:	e771      	b.n	403fde <__sfvwrite_r+0xbe>
  4040fa:	465a      	mov	r2, fp
  4040fc:	4629      	mov	r1, r5
  4040fe:	f000 fa41 	bl	404584 <memmove>
  404102:	68a2      	ldr	r2, [r4, #8]
  404104:	6823      	ldr	r3, [r4, #0]
  404106:	eba2 020b 	sub.w	r2, r2, fp
  40410a:	445b      	add	r3, fp
  40410c:	60a2      	str	r2, [r4, #8]
  40410e:	6023      	str	r3, [r4, #0]
  404110:	e7af      	b.n	404072 <__sfvwrite_r+0x152>
  404112:	6820      	ldr	r0, [r4, #0]
  404114:	46b8      	mov	r8, r7
  404116:	46ba      	mov	sl, r7
  404118:	46bb      	mov	fp, r7
  40411a:	e755      	b.n	403fc8 <__sfvwrite_r+0xa8>
  40411c:	6962      	ldr	r2, [r4, #20]
  40411e:	6820      	ldr	r0, [r4, #0]
  404120:	6921      	ldr	r1, [r4, #16]
  404122:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404126:	eba0 0a01 	sub.w	sl, r0, r1
  40412a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40412e:	f10a 0001 	add.w	r0, sl, #1
  404132:	ea4f 0868 	mov.w	r8, r8, asr #1
  404136:	4438      	add	r0, r7
  404138:	4540      	cmp	r0, r8
  40413a:	4642      	mov	r2, r8
  40413c:	bf84      	itt	hi
  40413e:	4680      	movhi	r8, r0
  404140:	4642      	movhi	r2, r8
  404142:	055b      	lsls	r3, r3, #21
  404144:	d544      	bpl.n	4041d0 <__sfvwrite_r+0x2b0>
  404146:	4611      	mov	r1, r2
  404148:	9800      	ldr	r0, [sp, #0]
  40414a:	f7fe f841 	bl	4021d0 <_malloc_r>
  40414e:	4683      	mov	fp, r0
  404150:	2800      	cmp	r0, #0
  404152:	d055      	beq.n	404200 <__sfvwrite_r+0x2e0>
  404154:	4652      	mov	r2, sl
  404156:	6921      	ldr	r1, [r4, #16]
  404158:	f000 f97a 	bl	404450 <memcpy>
  40415c:	89a3      	ldrh	r3, [r4, #12]
  40415e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404166:	81a3      	strh	r3, [r4, #12]
  404168:	eb0b 000a 	add.w	r0, fp, sl
  40416c:	eba8 030a 	sub.w	r3, r8, sl
  404170:	f8c4 b010 	str.w	fp, [r4, #16]
  404174:	f8c4 8014 	str.w	r8, [r4, #20]
  404178:	6020      	str	r0, [r4, #0]
  40417a:	60a3      	str	r3, [r4, #8]
  40417c:	46b8      	mov	r8, r7
  40417e:	46ba      	mov	sl, r7
  404180:	46bb      	mov	fp, r7
  404182:	e721      	b.n	403fc8 <__sfvwrite_r+0xa8>
  404184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404188:	42b9      	cmp	r1, r7
  40418a:	bf28      	it	cs
  40418c:	4639      	movcs	r1, r7
  40418e:	464a      	mov	r2, r9
  404190:	fb91 f1f3 	sdiv	r1, r1, r3
  404194:	9800      	ldr	r0, [sp, #0]
  404196:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404198:	fb03 f301 	mul.w	r3, r3, r1
  40419c:	69e1      	ldr	r1, [r4, #28]
  40419e:	47b0      	blx	r6
  4041a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4041a4:	f73f af1b 	bgt.w	403fde <__sfvwrite_r+0xbe>
  4041a8:	e738      	b.n	40401c <__sfvwrite_r+0xfc>
  4041aa:	461a      	mov	r2, r3
  4041ac:	4629      	mov	r1, r5
  4041ae:	9301      	str	r3, [sp, #4]
  4041b0:	f000 f9e8 	bl	404584 <memmove>
  4041b4:	6822      	ldr	r2, [r4, #0]
  4041b6:	9b01      	ldr	r3, [sp, #4]
  4041b8:	9800      	ldr	r0, [sp, #0]
  4041ba:	441a      	add	r2, r3
  4041bc:	6022      	str	r2, [r4, #0]
  4041be:	4621      	mov	r1, r4
  4041c0:	f7ff fc4a 	bl	403a58 <_fflush_r>
  4041c4:	9b01      	ldr	r3, [sp, #4]
  4041c6:	2800      	cmp	r0, #0
  4041c8:	f47f af28 	bne.w	40401c <__sfvwrite_r+0xfc>
  4041cc:	461f      	mov	r7, r3
  4041ce:	e750      	b.n	404072 <__sfvwrite_r+0x152>
  4041d0:	9800      	ldr	r0, [sp, #0]
  4041d2:	f000 fa3b 	bl	40464c <_realloc_r>
  4041d6:	4683      	mov	fp, r0
  4041d8:	2800      	cmp	r0, #0
  4041da:	d1c5      	bne.n	404168 <__sfvwrite_r+0x248>
  4041dc:	9d00      	ldr	r5, [sp, #0]
  4041de:	6921      	ldr	r1, [r4, #16]
  4041e0:	4628      	mov	r0, r5
  4041e2:	f7ff fdb7 	bl	403d54 <_free_r>
  4041e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041ea:	220c      	movs	r2, #12
  4041ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4041f0:	602a      	str	r2, [r5, #0]
  4041f2:	e715      	b.n	404020 <__sfvwrite_r+0x100>
  4041f4:	f106 0901 	add.w	r9, r6, #1
  4041f8:	e722      	b.n	404040 <__sfvwrite_r+0x120>
  4041fa:	f04f 30ff 	mov.w	r0, #4294967295
  4041fe:	e6bf      	b.n	403f80 <__sfvwrite_r+0x60>
  404200:	9a00      	ldr	r2, [sp, #0]
  404202:	230c      	movs	r3, #12
  404204:	6013      	str	r3, [r2, #0]
  404206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40420a:	e709      	b.n	404020 <__sfvwrite_r+0x100>
  40420c:	7ffffc00 	.word	0x7ffffc00

00404210 <_fwalk_reent>:
  404210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404214:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404218:	d01f      	beq.n	40425a <_fwalk_reent+0x4a>
  40421a:	4688      	mov	r8, r1
  40421c:	4606      	mov	r6, r0
  40421e:	f04f 0900 	mov.w	r9, #0
  404222:	687d      	ldr	r5, [r7, #4]
  404224:	68bc      	ldr	r4, [r7, #8]
  404226:	3d01      	subs	r5, #1
  404228:	d411      	bmi.n	40424e <_fwalk_reent+0x3e>
  40422a:	89a3      	ldrh	r3, [r4, #12]
  40422c:	2b01      	cmp	r3, #1
  40422e:	f105 35ff 	add.w	r5, r5, #4294967295
  404232:	d908      	bls.n	404246 <_fwalk_reent+0x36>
  404234:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404238:	3301      	adds	r3, #1
  40423a:	4621      	mov	r1, r4
  40423c:	4630      	mov	r0, r6
  40423e:	d002      	beq.n	404246 <_fwalk_reent+0x36>
  404240:	47c0      	blx	r8
  404242:	ea49 0900 	orr.w	r9, r9, r0
  404246:	1c6b      	adds	r3, r5, #1
  404248:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40424c:	d1ed      	bne.n	40422a <_fwalk_reent+0x1a>
  40424e:	683f      	ldr	r7, [r7, #0]
  404250:	2f00      	cmp	r7, #0
  404252:	d1e6      	bne.n	404222 <_fwalk_reent+0x12>
  404254:	4648      	mov	r0, r9
  404256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40425a:	46b9      	mov	r9, r7
  40425c:	4648      	mov	r0, r9
  40425e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404262:	bf00      	nop

00404264 <__locale_mb_cur_max>:
  404264:	4b04      	ldr	r3, [pc, #16]	; (404278 <__locale_mb_cur_max+0x14>)
  404266:	4a05      	ldr	r2, [pc, #20]	; (40427c <__locale_mb_cur_max+0x18>)
  404268:	681b      	ldr	r3, [r3, #0]
  40426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40426c:	2b00      	cmp	r3, #0
  40426e:	bf08      	it	eq
  404270:	4613      	moveq	r3, r2
  404272:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404276:	4770      	bx	lr
  404278:	20000004 	.word	0x20000004
  40427c:	20000844 	.word	0x20000844

00404280 <__retarget_lock_init_recursive>:
  404280:	4770      	bx	lr
  404282:	bf00      	nop

00404284 <__retarget_lock_close_recursive>:
  404284:	4770      	bx	lr
  404286:	bf00      	nop

00404288 <__retarget_lock_acquire_recursive>:
  404288:	4770      	bx	lr
  40428a:	bf00      	nop

0040428c <__retarget_lock_release_recursive>:
  40428c:	4770      	bx	lr
  40428e:	bf00      	nop

00404290 <__swhatbuf_r>:
  404290:	b570      	push	{r4, r5, r6, lr}
  404292:	460c      	mov	r4, r1
  404294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404298:	2900      	cmp	r1, #0
  40429a:	b090      	sub	sp, #64	; 0x40
  40429c:	4615      	mov	r5, r2
  40429e:	461e      	mov	r6, r3
  4042a0:	db14      	blt.n	4042cc <__swhatbuf_r+0x3c>
  4042a2:	aa01      	add	r2, sp, #4
  4042a4:	f000 fd38 	bl	404d18 <_fstat_r>
  4042a8:	2800      	cmp	r0, #0
  4042aa:	db0f      	blt.n	4042cc <__swhatbuf_r+0x3c>
  4042ac:	9a02      	ldr	r2, [sp, #8]
  4042ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4042b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4042b6:	fab2 f282 	clz	r2, r2
  4042ba:	0952      	lsrs	r2, r2, #5
  4042bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4042c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4042c4:	6032      	str	r2, [r6, #0]
  4042c6:	602b      	str	r3, [r5, #0]
  4042c8:	b010      	add	sp, #64	; 0x40
  4042ca:	bd70      	pop	{r4, r5, r6, pc}
  4042cc:	89a2      	ldrh	r2, [r4, #12]
  4042ce:	2300      	movs	r3, #0
  4042d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4042d4:	6033      	str	r3, [r6, #0]
  4042d6:	d004      	beq.n	4042e2 <__swhatbuf_r+0x52>
  4042d8:	2240      	movs	r2, #64	; 0x40
  4042da:	4618      	mov	r0, r3
  4042dc:	602a      	str	r2, [r5, #0]
  4042de:	b010      	add	sp, #64	; 0x40
  4042e0:	bd70      	pop	{r4, r5, r6, pc}
  4042e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4042e6:	602b      	str	r3, [r5, #0]
  4042e8:	b010      	add	sp, #64	; 0x40
  4042ea:	bd70      	pop	{r4, r5, r6, pc}

004042ec <__smakebuf_r>:
  4042ec:	898a      	ldrh	r2, [r1, #12]
  4042ee:	0792      	lsls	r2, r2, #30
  4042f0:	460b      	mov	r3, r1
  4042f2:	d506      	bpl.n	404302 <__smakebuf_r+0x16>
  4042f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4042f8:	2101      	movs	r1, #1
  4042fa:	601a      	str	r2, [r3, #0]
  4042fc:	611a      	str	r2, [r3, #16]
  4042fe:	6159      	str	r1, [r3, #20]
  404300:	4770      	bx	lr
  404302:	b5f0      	push	{r4, r5, r6, r7, lr}
  404304:	b083      	sub	sp, #12
  404306:	ab01      	add	r3, sp, #4
  404308:	466a      	mov	r2, sp
  40430a:	460c      	mov	r4, r1
  40430c:	4606      	mov	r6, r0
  40430e:	f7ff ffbf 	bl	404290 <__swhatbuf_r>
  404312:	9900      	ldr	r1, [sp, #0]
  404314:	4605      	mov	r5, r0
  404316:	4630      	mov	r0, r6
  404318:	f7fd ff5a 	bl	4021d0 <_malloc_r>
  40431c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404320:	b1d8      	cbz	r0, 40435a <__smakebuf_r+0x6e>
  404322:	9a01      	ldr	r2, [sp, #4]
  404324:	4f15      	ldr	r7, [pc, #84]	; (40437c <__smakebuf_r+0x90>)
  404326:	9900      	ldr	r1, [sp, #0]
  404328:	63f7      	str	r7, [r6, #60]	; 0x3c
  40432a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40432e:	81a3      	strh	r3, [r4, #12]
  404330:	6020      	str	r0, [r4, #0]
  404332:	6120      	str	r0, [r4, #16]
  404334:	6161      	str	r1, [r4, #20]
  404336:	b91a      	cbnz	r2, 404340 <__smakebuf_r+0x54>
  404338:	432b      	orrs	r3, r5
  40433a:	81a3      	strh	r3, [r4, #12]
  40433c:	b003      	add	sp, #12
  40433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404340:	4630      	mov	r0, r6
  404342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404346:	f000 fcfb 	bl	404d40 <_isatty_r>
  40434a:	b1a0      	cbz	r0, 404376 <__smakebuf_r+0x8a>
  40434c:	89a3      	ldrh	r3, [r4, #12]
  40434e:	f023 0303 	bic.w	r3, r3, #3
  404352:	f043 0301 	orr.w	r3, r3, #1
  404356:	b21b      	sxth	r3, r3
  404358:	e7ee      	b.n	404338 <__smakebuf_r+0x4c>
  40435a:	059a      	lsls	r2, r3, #22
  40435c:	d4ee      	bmi.n	40433c <__smakebuf_r+0x50>
  40435e:	f023 0303 	bic.w	r3, r3, #3
  404362:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404366:	f043 0302 	orr.w	r3, r3, #2
  40436a:	2101      	movs	r1, #1
  40436c:	81a3      	strh	r3, [r4, #12]
  40436e:	6022      	str	r2, [r4, #0]
  404370:	6122      	str	r2, [r4, #16]
  404372:	6161      	str	r1, [r4, #20]
  404374:	e7e2      	b.n	40433c <__smakebuf_r+0x50>
  404376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40437a:	e7dd      	b.n	404338 <__smakebuf_r+0x4c>
  40437c:	00403aad 	.word	0x00403aad

00404380 <__ascii_mbtowc>:
  404380:	b082      	sub	sp, #8
  404382:	b149      	cbz	r1, 404398 <__ascii_mbtowc+0x18>
  404384:	b15a      	cbz	r2, 40439e <__ascii_mbtowc+0x1e>
  404386:	b16b      	cbz	r3, 4043a4 <__ascii_mbtowc+0x24>
  404388:	7813      	ldrb	r3, [r2, #0]
  40438a:	600b      	str	r3, [r1, #0]
  40438c:	7812      	ldrb	r2, [r2, #0]
  40438e:	1c10      	adds	r0, r2, #0
  404390:	bf18      	it	ne
  404392:	2001      	movne	r0, #1
  404394:	b002      	add	sp, #8
  404396:	4770      	bx	lr
  404398:	a901      	add	r1, sp, #4
  40439a:	2a00      	cmp	r2, #0
  40439c:	d1f3      	bne.n	404386 <__ascii_mbtowc+0x6>
  40439e:	4610      	mov	r0, r2
  4043a0:	b002      	add	sp, #8
  4043a2:	4770      	bx	lr
  4043a4:	f06f 0001 	mvn.w	r0, #1
  4043a8:	e7f4      	b.n	404394 <__ascii_mbtowc+0x14>
  4043aa:	bf00      	nop
  4043ac:	0000      	movs	r0, r0
	...

004043b0 <memchr>:
  4043b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4043b4:	2a10      	cmp	r2, #16
  4043b6:	db2b      	blt.n	404410 <memchr+0x60>
  4043b8:	f010 0f07 	tst.w	r0, #7
  4043bc:	d008      	beq.n	4043d0 <memchr+0x20>
  4043be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4043c2:	3a01      	subs	r2, #1
  4043c4:	428b      	cmp	r3, r1
  4043c6:	d02d      	beq.n	404424 <memchr+0x74>
  4043c8:	f010 0f07 	tst.w	r0, #7
  4043cc:	b342      	cbz	r2, 404420 <memchr+0x70>
  4043ce:	d1f6      	bne.n	4043be <memchr+0xe>
  4043d0:	b4f0      	push	{r4, r5, r6, r7}
  4043d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4043d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4043da:	f022 0407 	bic.w	r4, r2, #7
  4043de:	f07f 0700 	mvns.w	r7, #0
  4043e2:	2300      	movs	r3, #0
  4043e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4043e8:	3c08      	subs	r4, #8
  4043ea:	ea85 0501 	eor.w	r5, r5, r1
  4043ee:	ea86 0601 	eor.w	r6, r6, r1
  4043f2:	fa85 f547 	uadd8	r5, r5, r7
  4043f6:	faa3 f587 	sel	r5, r3, r7
  4043fa:	fa86 f647 	uadd8	r6, r6, r7
  4043fe:	faa5 f687 	sel	r6, r5, r7
  404402:	b98e      	cbnz	r6, 404428 <memchr+0x78>
  404404:	d1ee      	bne.n	4043e4 <memchr+0x34>
  404406:	bcf0      	pop	{r4, r5, r6, r7}
  404408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40440c:	f002 0207 	and.w	r2, r2, #7
  404410:	b132      	cbz	r2, 404420 <memchr+0x70>
  404412:	f810 3b01 	ldrb.w	r3, [r0], #1
  404416:	3a01      	subs	r2, #1
  404418:	ea83 0301 	eor.w	r3, r3, r1
  40441c:	b113      	cbz	r3, 404424 <memchr+0x74>
  40441e:	d1f8      	bne.n	404412 <memchr+0x62>
  404420:	2000      	movs	r0, #0
  404422:	4770      	bx	lr
  404424:	3801      	subs	r0, #1
  404426:	4770      	bx	lr
  404428:	2d00      	cmp	r5, #0
  40442a:	bf06      	itte	eq
  40442c:	4635      	moveq	r5, r6
  40442e:	3803      	subeq	r0, #3
  404430:	3807      	subne	r0, #7
  404432:	f015 0f01 	tst.w	r5, #1
  404436:	d107      	bne.n	404448 <memchr+0x98>
  404438:	3001      	adds	r0, #1
  40443a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40443e:	bf02      	ittt	eq
  404440:	3001      	addeq	r0, #1
  404442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404446:	3001      	addeq	r0, #1
  404448:	bcf0      	pop	{r4, r5, r6, r7}
  40444a:	3801      	subs	r0, #1
  40444c:	4770      	bx	lr
  40444e:	bf00      	nop

00404450 <memcpy>:
  404450:	4684      	mov	ip, r0
  404452:	ea41 0300 	orr.w	r3, r1, r0
  404456:	f013 0303 	ands.w	r3, r3, #3
  40445a:	d16d      	bne.n	404538 <memcpy+0xe8>
  40445c:	3a40      	subs	r2, #64	; 0x40
  40445e:	d341      	bcc.n	4044e4 <memcpy+0x94>
  404460:	f851 3b04 	ldr.w	r3, [r1], #4
  404464:	f840 3b04 	str.w	r3, [r0], #4
  404468:	f851 3b04 	ldr.w	r3, [r1], #4
  40446c:	f840 3b04 	str.w	r3, [r0], #4
  404470:	f851 3b04 	ldr.w	r3, [r1], #4
  404474:	f840 3b04 	str.w	r3, [r0], #4
  404478:	f851 3b04 	ldr.w	r3, [r1], #4
  40447c:	f840 3b04 	str.w	r3, [r0], #4
  404480:	f851 3b04 	ldr.w	r3, [r1], #4
  404484:	f840 3b04 	str.w	r3, [r0], #4
  404488:	f851 3b04 	ldr.w	r3, [r1], #4
  40448c:	f840 3b04 	str.w	r3, [r0], #4
  404490:	f851 3b04 	ldr.w	r3, [r1], #4
  404494:	f840 3b04 	str.w	r3, [r0], #4
  404498:	f851 3b04 	ldr.w	r3, [r1], #4
  40449c:	f840 3b04 	str.w	r3, [r0], #4
  4044a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044a4:	f840 3b04 	str.w	r3, [r0], #4
  4044a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044ac:	f840 3b04 	str.w	r3, [r0], #4
  4044b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044b4:	f840 3b04 	str.w	r3, [r0], #4
  4044b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044bc:	f840 3b04 	str.w	r3, [r0], #4
  4044c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044c4:	f840 3b04 	str.w	r3, [r0], #4
  4044c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044cc:	f840 3b04 	str.w	r3, [r0], #4
  4044d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044d4:	f840 3b04 	str.w	r3, [r0], #4
  4044d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044dc:	f840 3b04 	str.w	r3, [r0], #4
  4044e0:	3a40      	subs	r2, #64	; 0x40
  4044e2:	d2bd      	bcs.n	404460 <memcpy+0x10>
  4044e4:	3230      	adds	r2, #48	; 0x30
  4044e6:	d311      	bcc.n	40450c <memcpy+0xbc>
  4044e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044ec:	f840 3b04 	str.w	r3, [r0], #4
  4044f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044f4:	f840 3b04 	str.w	r3, [r0], #4
  4044f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044fc:	f840 3b04 	str.w	r3, [r0], #4
  404500:	f851 3b04 	ldr.w	r3, [r1], #4
  404504:	f840 3b04 	str.w	r3, [r0], #4
  404508:	3a10      	subs	r2, #16
  40450a:	d2ed      	bcs.n	4044e8 <memcpy+0x98>
  40450c:	320c      	adds	r2, #12
  40450e:	d305      	bcc.n	40451c <memcpy+0xcc>
  404510:	f851 3b04 	ldr.w	r3, [r1], #4
  404514:	f840 3b04 	str.w	r3, [r0], #4
  404518:	3a04      	subs	r2, #4
  40451a:	d2f9      	bcs.n	404510 <memcpy+0xc0>
  40451c:	3204      	adds	r2, #4
  40451e:	d008      	beq.n	404532 <memcpy+0xe2>
  404520:	07d2      	lsls	r2, r2, #31
  404522:	bf1c      	itt	ne
  404524:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404528:	f800 3b01 	strbne.w	r3, [r0], #1
  40452c:	d301      	bcc.n	404532 <memcpy+0xe2>
  40452e:	880b      	ldrh	r3, [r1, #0]
  404530:	8003      	strh	r3, [r0, #0]
  404532:	4660      	mov	r0, ip
  404534:	4770      	bx	lr
  404536:	bf00      	nop
  404538:	2a08      	cmp	r2, #8
  40453a:	d313      	bcc.n	404564 <memcpy+0x114>
  40453c:	078b      	lsls	r3, r1, #30
  40453e:	d08d      	beq.n	40445c <memcpy+0xc>
  404540:	f010 0303 	ands.w	r3, r0, #3
  404544:	d08a      	beq.n	40445c <memcpy+0xc>
  404546:	f1c3 0304 	rsb	r3, r3, #4
  40454a:	1ad2      	subs	r2, r2, r3
  40454c:	07db      	lsls	r3, r3, #31
  40454e:	bf1c      	itt	ne
  404550:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404554:	f800 3b01 	strbne.w	r3, [r0], #1
  404558:	d380      	bcc.n	40445c <memcpy+0xc>
  40455a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40455e:	f820 3b02 	strh.w	r3, [r0], #2
  404562:	e77b      	b.n	40445c <memcpy+0xc>
  404564:	3a04      	subs	r2, #4
  404566:	d3d9      	bcc.n	40451c <memcpy+0xcc>
  404568:	3a01      	subs	r2, #1
  40456a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40456e:	f800 3b01 	strb.w	r3, [r0], #1
  404572:	d2f9      	bcs.n	404568 <memcpy+0x118>
  404574:	780b      	ldrb	r3, [r1, #0]
  404576:	7003      	strb	r3, [r0, #0]
  404578:	784b      	ldrb	r3, [r1, #1]
  40457a:	7043      	strb	r3, [r0, #1]
  40457c:	788b      	ldrb	r3, [r1, #2]
  40457e:	7083      	strb	r3, [r0, #2]
  404580:	4660      	mov	r0, ip
  404582:	4770      	bx	lr

00404584 <memmove>:
  404584:	4288      	cmp	r0, r1
  404586:	b5f0      	push	{r4, r5, r6, r7, lr}
  404588:	d90d      	bls.n	4045a6 <memmove+0x22>
  40458a:	188b      	adds	r3, r1, r2
  40458c:	4298      	cmp	r0, r3
  40458e:	d20a      	bcs.n	4045a6 <memmove+0x22>
  404590:	1884      	adds	r4, r0, r2
  404592:	2a00      	cmp	r2, #0
  404594:	d051      	beq.n	40463a <memmove+0xb6>
  404596:	4622      	mov	r2, r4
  404598:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40459c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4045a0:	4299      	cmp	r1, r3
  4045a2:	d1f9      	bne.n	404598 <memmove+0x14>
  4045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4045a6:	2a0f      	cmp	r2, #15
  4045a8:	d948      	bls.n	40463c <memmove+0xb8>
  4045aa:	ea41 0300 	orr.w	r3, r1, r0
  4045ae:	079b      	lsls	r3, r3, #30
  4045b0:	d146      	bne.n	404640 <memmove+0xbc>
  4045b2:	f100 0410 	add.w	r4, r0, #16
  4045b6:	f101 0310 	add.w	r3, r1, #16
  4045ba:	4615      	mov	r5, r2
  4045bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4045c0:	f844 6c10 	str.w	r6, [r4, #-16]
  4045c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4045c8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4045cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4045d0:	f844 6c08 	str.w	r6, [r4, #-8]
  4045d4:	3d10      	subs	r5, #16
  4045d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4045da:	f844 6c04 	str.w	r6, [r4, #-4]
  4045de:	2d0f      	cmp	r5, #15
  4045e0:	f103 0310 	add.w	r3, r3, #16
  4045e4:	f104 0410 	add.w	r4, r4, #16
  4045e8:	d8e8      	bhi.n	4045bc <memmove+0x38>
  4045ea:	f1a2 0310 	sub.w	r3, r2, #16
  4045ee:	f023 030f 	bic.w	r3, r3, #15
  4045f2:	f002 0e0f 	and.w	lr, r2, #15
  4045f6:	3310      	adds	r3, #16
  4045f8:	f1be 0f03 	cmp.w	lr, #3
  4045fc:	4419      	add	r1, r3
  4045fe:	4403      	add	r3, r0
  404600:	d921      	bls.n	404646 <memmove+0xc2>
  404602:	1f1e      	subs	r6, r3, #4
  404604:	460d      	mov	r5, r1
  404606:	4674      	mov	r4, lr
  404608:	3c04      	subs	r4, #4
  40460a:	f855 7b04 	ldr.w	r7, [r5], #4
  40460e:	f846 7f04 	str.w	r7, [r6, #4]!
  404612:	2c03      	cmp	r4, #3
  404614:	d8f8      	bhi.n	404608 <memmove+0x84>
  404616:	f1ae 0404 	sub.w	r4, lr, #4
  40461a:	f024 0403 	bic.w	r4, r4, #3
  40461e:	3404      	adds	r4, #4
  404620:	4421      	add	r1, r4
  404622:	4423      	add	r3, r4
  404624:	f002 0203 	and.w	r2, r2, #3
  404628:	b162      	cbz	r2, 404644 <memmove+0xc0>
  40462a:	3b01      	subs	r3, #1
  40462c:	440a      	add	r2, r1
  40462e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404632:	f803 4f01 	strb.w	r4, [r3, #1]!
  404636:	428a      	cmp	r2, r1
  404638:	d1f9      	bne.n	40462e <memmove+0xaa>
  40463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40463c:	4603      	mov	r3, r0
  40463e:	e7f3      	b.n	404628 <memmove+0xa4>
  404640:	4603      	mov	r3, r0
  404642:	e7f2      	b.n	40462a <memmove+0xa6>
  404644:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404646:	4672      	mov	r2, lr
  404648:	e7ee      	b.n	404628 <memmove+0xa4>
  40464a:	bf00      	nop

0040464c <_realloc_r>:
  40464c:	2900      	cmp	r1, #0
  40464e:	f000 8095 	beq.w	40477c <_realloc_r+0x130>
  404652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404656:	460d      	mov	r5, r1
  404658:	4616      	mov	r6, r2
  40465a:	b083      	sub	sp, #12
  40465c:	4680      	mov	r8, r0
  40465e:	f106 070b 	add.w	r7, r6, #11
  404662:	f7fe f8b3 	bl	4027cc <__malloc_lock>
  404666:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40466a:	2f16      	cmp	r7, #22
  40466c:	f02e 0403 	bic.w	r4, lr, #3
  404670:	f1a5 0908 	sub.w	r9, r5, #8
  404674:	d83c      	bhi.n	4046f0 <_realloc_r+0xa4>
  404676:	2210      	movs	r2, #16
  404678:	4617      	mov	r7, r2
  40467a:	42be      	cmp	r6, r7
  40467c:	d83d      	bhi.n	4046fa <_realloc_r+0xae>
  40467e:	4294      	cmp	r4, r2
  404680:	da43      	bge.n	40470a <_realloc_r+0xbe>
  404682:	4bc4      	ldr	r3, [pc, #784]	; (404994 <_realloc_r+0x348>)
  404684:	6899      	ldr	r1, [r3, #8]
  404686:	eb09 0004 	add.w	r0, r9, r4
  40468a:	4288      	cmp	r0, r1
  40468c:	f000 80b4 	beq.w	4047f8 <_realloc_r+0x1ac>
  404690:	6843      	ldr	r3, [r0, #4]
  404692:	f023 0101 	bic.w	r1, r3, #1
  404696:	4401      	add	r1, r0
  404698:	6849      	ldr	r1, [r1, #4]
  40469a:	07c9      	lsls	r1, r1, #31
  40469c:	d54c      	bpl.n	404738 <_realloc_r+0xec>
  40469e:	f01e 0f01 	tst.w	lr, #1
  4046a2:	f000 809b 	beq.w	4047dc <_realloc_r+0x190>
  4046a6:	4631      	mov	r1, r6
  4046a8:	4640      	mov	r0, r8
  4046aa:	f7fd fd91 	bl	4021d0 <_malloc_r>
  4046ae:	4606      	mov	r6, r0
  4046b0:	2800      	cmp	r0, #0
  4046b2:	d03a      	beq.n	40472a <_realloc_r+0xde>
  4046b4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4046b8:	f023 0301 	bic.w	r3, r3, #1
  4046bc:	444b      	add	r3, r9
  4046be:	f1a0 0208 	sub.w	r2, r0, #8
  4046c2:	429a      	cmp	r2, r3
  4046c4:	f000 8121 	beq.w	40490a <_realloc_r+0x2be>
  4046c8:	1f22      	subs	r2, r4, #4
  4046ca:	2a24      	cmp	r2, #36	; 0x24
  4046cc:	f200 8107 	bhi.w	4048de <_realloc_r+0x292>
  4046d0:	2a13      	cmp	r2, #19
  4046d2:	f200 80db 	bhi.w	40488c <_realloc_r+0x240>
  4046d6:	4603      	mov	r3, r0
  4046d8:	462a      	mov	r2, r5
  4046da:	6811      	ldr	r1, [r2, #0]
  4046dc:	6019      	str	r1, [r3, #0]
  4046de:	6851      	ldr	r1, [r2, #4]
  4046e0:	6059      	str	r1, [r3, #4]
  4046e2:	6892      	ldr	r2, [r2, #8]
  4046e4:	609a      	str	r2, [r3, #8]
  4046e6:	4629      	mov	r1, r5
  4046e8:	4640      	mov	r0, r8
  4046ea:	f7ff fb33 	bl	403d54 <_free_r>
  4046ee:	e01c      	b.n	40472a <_realloc_r+0xde>
  4046f0:	f027 0707 	bic.w	r7, r7, #7
  4046f4:	2f00      	cmp	r7, #0
  4046f6:	463a      	mov	r2, r7
  4046f8:	dabf      	bge.n	40467a <_realloc_r+0x2e>
  4046fa:	2600      	movs	r6, #0
  4046fc:	230c      	movs	r3, #12
  4046fe:	4630      	mov	r0, r6
  404700:	f8c8 3000 	str.w	r3, [r8]
  404704:	b003      	add	sp, #12
  404706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40470a:	462e      	mov	r6, r5
  40470c:	1be3      	subs	r3, r4, r7
  40470e:	2b0f      	cmp	r3, #15
  404710:	d81e      	bhi.n	404750 <_realloc_r+0x104>
  404712:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404716:	f003 0301 	and.w	r3, r3, #1
  40471a:	4323      	orrs	r3, r4
  40471c:	444c      	add	r4, r9
  40471e:	f8c9 3004 	str.w	r3, [r9, #4]
  404722:	6863      	ldr	r3, [r4, #4]
  404724:	f043 0301 	orr.w	r3, r3, #1
  404728:	6063      	str	r3, [r4, #4]
  40472a:	4640      	mov	r0, r8
  40472c:	f7fe f854 	bl	4027d8 <__malloc_unlock>
  404730:	4630      	mov	r0, r6
  404732:	b003      	add	sp, #12
  404734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404738:	f023 0303 	bic.w	r3, r3, #3
  40473c:	18e1      	adds	r1, r4, r3
  40473e:	4291      	cmp	r1, r2
  404740:	db1f      	blt.n	404782 <_realloc_r+0x136>
  404742:	68c3      	ldr	r3, [r0, #12]
  404744:	6882      	ldr	r2, [r0, #8]
  404746:	462e      	mov	r6, r5
  404748:	60d3      	str	r3, [r2, #12]
  40474a:	460c      	mov	r4, r1
  40474c:	609a      	str	r2, [r3, #8]
  40474e:	e7dd      	b.n	40470c <_realloc_r+0xc0>
  404750:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404754:	eb09 0107 	add.w	r1, r9, r7
  404758:	f002 0201 	and.w	r2, r2, #1
  40475c:	444c      	add	r4, r9
  40475e:	f043 0301 	orr.w	r3, r3, #1
  404762:	4317      	orrs	r7, r2
  404764:	f8c9 7004 	str.w	r7, [r9, #4]
  404768:	604b      	str	r3, [r1, #4]
  40476a:	6863      	ldr	r3, [r4, #4]
  40476c:	f043 0301 	orr.w	r3, r3, #1
  404770:	3108      	adds	r1, #8
  404772:	6063      	str	r3, [r4, #4]
  404774:	4640      	mov	r0, r8
  404776:	f7ff faed 	bl	403d54 <_free_r>
  40477a:	e7d6      	b.n	40472a <_realloc_r+0xde>
  40477c:	4611      	mov	r1, r2
  40477e:	f7fd bd27 	b.w	4021d0 <_malloc_r>
  404782:	f01e 0f01 	tst.w	lr, #1
  404786:	d18e      	bne.n	4046a6 <_realloc_r+0x5a>
  404788:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40478c:	eba9 0a01 	sub.w	sl, r9, r1
  404790:	f8da 1004 	ldr.w	r1, [sl, #4]
  404794:	f021 0103 	bic.w	r1, r1, #3
  404798:	440b      	add	r3, r1
  40479a:	4423      	add	r3, r4
  40479c:	4293      	cmp	r3, r2
  40479e:	db25      	blt.n	4047ec <_realloc_r+0x1a0>
  4047a0:	68c2      	ldr	r2, [r0, #12]
  4047a2:	6881      	ldr	r1, [r0, #8]
  4047a4:	4656      	mov	r6, sl
  4047a6:	60ca      	str	r2, [r1, #12]
  4047a8:	6091      	str	r1, [r2, #8]
  4047aa:	f8da 100c 	ldr.w	r1, [sl, #12]
  4047ae:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4047b2:	1f22      	subs	r2, r4, #4
  4047b4:	2a24      	cmp	r2, #36	; 0x24
  4047b6:	60c1      	str	r1, [r0, #12]
  4047b8:	6088      	str	r0, [r1, #8]
  4047ba:	f200 8094 	bhi.w	4048e6 <_realloc_r+0x29a>
  4047be:	2a13      	cmp	r2, #19
  4047c0:	d96f      	bls.n	4048a2 <_realloc_r+0x256>
  4047c2:	6829      	ldr	r1, [r5, #0]
  4047c4:	f8ca 1008 	str.w	r1, [sl, #8]
  4047c8:	6869      	ldr	r1, [r5, #4]
  4047ca:	f8ca 100c 	str.w	r1, [sl, #12]
  4047ce:	2a1b      	cmp	r2, #27
  4047d0:	f200 80a2 	bhi.w	404918 <_realloc_r+0x2cc>
  4047d4:	3508      	adds	r5, #8
  4047d6:	f10a 0210 	add.w	r2, sl, #16
  4047da:	e063      	b.n	4048a4 <_realloc_r+0x258>
  4047dc:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4047e0:	eba9 0a03 	sub.w	sl, r9, r3
  4047e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4047e8:	f021 0103 	bic.w	r1, r1, #3
  4047ec:	1863      	adds	r3, r4, r1
  4047ee:	4293      	cmp	r3, r2
  4047f0:	f6ff af59 	blt.w	4046a6 <_realloc_r+0x5a>
  4047f4:	4656      	mov	r6, sl
  4047f6:	e7d8      	b.n	4047aa <_realloc_r+0x15e>
  4047f8:	6841      	ldr	r1, [r0, #4]
  4047fa:	f021 0b03 	bic.w	fp, r1, #3
  4047fe:	44a3      	add	fp, r4
  404800:	f107 0010 	add.w	r0, r7, #16
  404804:	4583      	cmp	fp, r0
  404806:	da56      	bge.n	4048b6 <_realloc_r+0x26a>
  404808:	f01e 0f01 	tst.w	lr, #1
  40480c:	f47f af4b 	bne.w	4046a6 <_realloc_r+0x5a>
  404810:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404814:	eba9 0a01 	sub.w	sl, r9, r1
  404818:	f8da 1004 	ldr.w	r1, [sl, #4]
  40481c:	f021 0103 	bic.w	r1, r1, #3
  404820:	448b      	add	fp, r1
  404822:	4558      	cmp	r0, fp
  404824:	dce2      	bgt.n	4047ec <_realloc_r+0x1a0>
  404826:	4656      	mov	r6, sl
  404828:	f8da 100c 	ldr.w	r1, [sl, #12]
  40482c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404830:	1f22      	subs	r2, r4, #4
  404832:	2a24      	cmp	r2, #36	; 0x24
  404834:	60c1      	str	r1, [r0, #12]
  404836:	6088      	str	r0, [r1, #8]
  404838:	f200 808f 	bhi.w	40495a <_realloc_r+0x30e>
  40483c:	2a13      	cmp	r2, #19
  40483e:	f240 808a 	bls.w	404956 <_realloc_r+0x30a>
  404842:	6829      	ldr	r1, [r5, #0]
  404844:	f8ca 1008 	str.w	r1, [sl, #8]
  404848:	6869      	ldr	r1, [r5, #4]
  40484a:	f8ca 100c 	str.w	r1, [sl, #12]
  40484e:	2a1b      	cmp	r2, #27
  404850:	f200 808a 	bhi.w	404968 <_realloc_r+0x31c>
  404854:	3508      	adds	r5, #8
  404856:	f10a 0210 	add.w	r2, sl, #16
  40485a:	6829      	ldr	r1, [r5, #0]
  40485c:	6011      	str	r1, [r2, #0]
  40485e:	6869      	ldr	r1, [r5, #4]
  404860:	6051      	str	r1, [r2, #4]
  404862:	68a9      	ldr	r1, [r5, #8]
  404864:	6091      	str	r1, [r2, #8]
  404866:	eb0a 0107 	add.w	r1, sl, r7
  40486a:	ebab 0207 	sub.w	r2, fp, r7
  40486e:	f042 0201 	orr.w	r2, r2, #1
  404872:	6099      	str	r1, [r3, #8]
  404874:	604a      	str	r2, [r1, #4]
  404876:	f8da 3004 	ldr.w	r3, [sl, #4]
  40487a:	f003 0301 	and.w	r3, r3, #1
  40487e:	431f      	orrs	r7, r3
  404880:	4640      	mov	r0, r8
  404882:	f8ca 7004 	str.w	r7, [sl, #4]
  404886:	f7fd ffa7 	bl	4027d8 <__malloc_unlock>
  40488a:	e751      	b.n	404730 <_realloc_r+0xe4>
  40488c:	682b      	ldr	r3, [r5, #0]
  40488e:	6003      	str	r3, [r0, #0]
  404890:	686b      	ldr	r3, [r5, #4]
  404892:	6043      	str	r3, [r0, #4]
  404894:	2a1b      	cmp	r2, #27
  404896:	d82d      	bhi.n	4048f4 <_realloc_r+0x2a8>
  404898:	f100 0308 	add.w	r3, r0, #8
  40489c:	f105 0208 	add.w	r2, r5, #8
  4048a0:	e71b      	b.n	4046da <_realloc_r+0x8e>
  4048a2:	4632      	mov	r2, r6
  4048a4:	6829      	ldr	r1, [r5, #0]
  4048a6:	6011      	str	r1, [r2, #0]
  4048a8:	6869      	ldr	r1, [r5, #4]
  4048aa:	6051      	str	r1, [r2, #4]
  4048ac:	68a9      	ldr	r1, [r5, #8]
  4048ae:	6091      	str	r1, [r2, #8]
  4048b0:	461c      	mov	r4, r3
  4048b2:	46d1      	mov	r9, sl
  4048b4:	e72a      	b.n	40470c <_realloc_r+0xc0>
  4048b6:	eb09 0107 	add.w	r1, r9, r7
  4048ba:	ebab 0b07 	sub.w	fp, fp, r7
  4048be:	f04b 0201 	orr.w	r2, fp, #1
  4048c2:	6099      	str	r1, [r3, #8]
  4048c4:	604a      	str	r2, [r1, #4]
  4048c6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4048ca:	f003 0301 	and.w	r3, r3, #1
  4048ce:	431f      	orrs	r7, r3
  4048d0:	4640      	mov	r0, r8
  4048d2:	f845 7c04 	str.w	r7, [r5, #-4]
  4048d6:	f7fd ff7f 	bl	4027d8 <__malloc_unlock>
  4048da:	462e      	mov	r6, r5
  4048dc:	e728      	b.n	404730 <_realloc_r+0xe4>
  4048de:	4629      	mov	r1, r5
  4048e0:	f7ff fe50 	bl	404584 <memmove>
  4048e4:	e6ff      	b.n	4046e6 <_realloc_r+0x9a>
  4048e6:	4629      	mov	r1, r5
  4048e8:	4630      	mov	r0, r6
  4048ea:	461c      	mov	r4, r3
  4048ec:	46d1      	mov	r9, sl
  4048ee:	f7ff fe49 	bl	404584 <memmove>
  4048f2:	e70b      	b.n	40470c <_realloc_r+0xc0>
  4048f4:	68ab      	ldr	r3, [r5, #8]
  4048f6:	6083      	str	r3, [r0, #8]
  4048f8:	68eb      	ldr	r3, [r5, #12]
  4048fa:	60c3      	str	r3, [r0, #12]
  4048fc:	2a24      	cmp	r2, #36	; 0x24
  4048fe:	d017      	beq.n	404930 <_realloc_r+0x2e4>
  404900:	f100 0310 	add.w	r3, r0, #16
  404904:	f105 0210 	add.w	r2, r5, #16
  404908:	e6e7      	b.n	4046da <_realloc_r+0x8e>
  40490a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40490e:	f023 0303 	bic.w	r3, r3, #3
  404912:	441c      	add	r4, r3
  404914:	462e      	mov	r6, r5
  404916:	e6f9      	b.n	40470c <_realloc_r+0xc0>
  404918:	68a9      	ldr	r1, [r5, #8]
  40491a:	f8ca 1010 	str.w	r1, [sl, #16]
  40491e:	68e9      	ldr	r1, [r5, #12]
  404920:	f8ca 1014 	str.w	r1, [sl, #20]
  404924:	2a24      	cmp	r2, #36	; 0x24
  404926:	d00c      	beq.n	404942 <_realloc_r+0x2f6>
  404928:	3510      	adds	r5, #16
  40492a:	f10a 0218 	add.w	r2, sl, #24
  40492e:	e7b9      	b.n	4048a4 <_realloc_r+0x258>
  404930:	692b      	ldr	r3, [r5, #16]
  404932:	6103      	str	r3, [r0, #16]
  404934:	696b      	ldr	r3, [r5, #20]
  404936:	6143      	str	r3, [r0, #20]
  404938:	f105 0218 	add.w	r2, r5, #24
  40493c:	f100 0318 	add.w	r3, r0, #24
  404940:	e6cb      	b.n	4046da <_realloc_r+0x8e>
  404942:	692a      	ldr	r2, [r5, #16]
  404944:	f8ca 2018 	str.w	r2, [sl, #24]
  404948:	696a      	ldr	r2, [r5, #20]
  40494a:	f8ca 201c 	str.w	r2, [sl, #28]
  40494e:	3518      	adds	r5, #24
  404950:	f10a 0220 	add.w	r2, sl, #32
  404954:	e7a6      	b.n	4048a4 <_realloc_r+0x258>
  404956:	4632      	mov	r2, r6
  404958:	e77f      	b.n	40485a <_realloc_r+0x20e>
  40495a:	4629      	mov	r1, r5
  40495c:	4630      	mov	r0, r6
  40495e:	9301      	str	r3, [sp, #4]
  404960:	f7ff fe10 	bl	404584 <memmove>
  404964:	9b01      	ldr	r3, [sp, #4]
  404966:	e77e      	b.n	404866 <_realloc_r+0x21a>
  404968:	68a9      	ldr	r1, [r5, #8]
  40496a:	f8ca 1010 	str.w	r1, [sl, #16]
  40496e:	68e9      	ldr	r1, [r5, #12]
  404970:	f8ca 1014 	str.w	r1, [sl, #20]
  404974:	2a24      	cmp	r2, #36	; 0x24
  404976:	d003      	beq.n	404980 <_realloc_r+0x334>
  404978:	3510      	adds	r5, #16
  40497a:	f10a 0218 	add.w	r2, sl, #24
  40497e:	e76c      	b.n	40485a <_realloc_r+0x20e>
  404980:	692a      	ldr	r2, [r5, #16]
  404982:	f8ca 2018 	str.w	r2, [sl, #24]
  404986:	696a      	ldr	r2, [r5, #20]
  404988:	f8ca 201c 	str.w	r2, [sl, #28]
  40498c:	3518      	adds	r5, #24
  40498e:	f10a 0220 	add.w	r2, sl, #32
  404992:	e762      	b.n	40485a <_realloc_r+0x20e>
  404994:	20000430 	.word	0x20000430

00404998 <__sread>:
  404998:	b510      	push	{r4, lr}
  40499a:	460c      	mov	r4, r1
  40499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4049a0:	f000 f9f6 	bl	404d90 <_read_r>
  4049a4:	2800      	cmp	r0, #0
  4049a6:	db03      	blt.n	4049b0 <__sread+0x18>
  4049a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4049aa:	4403      	add	r3, r0
  4049ac:	6523      	str	r3, [r4, #80]	; 0x50
  4049ae:	bd10      	pop	{r4, pc}
  4049b0:	89a3      	ldrh	r3, [r4, #12]
  4049b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4049b6:	81a3      	strh	r3, [r4, #12]
  4049b8:	bd10      	pop	{r4, pc}
  4049ba:	bf00      	nop

004049bc <__swrite>:
  4049bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4049c0:	4616      	mov	r6, r2
  4049c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4049c6:	461f      	mov	r7, r3
  4049c8:	05d3      	lsls	r3, r2, #23
  4049ca:	460c      	mov	r4, r1
  4049cc:	4605      	mov	r5, r0
  4049ce:	d507      	bpl.n	4049e0 <__swrite+0x24>
  4049d0:	2200      	movs	r2, #0
  4049d2:	2302      	movs	r3, #2
  4049d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4049d8:	f000 f9c4 	bl	404d64 <_lseek_r>
  4049dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4049e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4049e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4049e8:	81a2      	strh	r2, [r4, #12]
  4049ea:	463b      	mov	r3, r7
  4049ec:	4632      	mov	r2, r6
  4049ee:	4628      	mov	r0, r5
  4049f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4049f4:	f000 b8a4 	b.w	404b40 <_write_r>

004049f8 <__sseek>:
  4049f8:	b510      	push	{r4, lr}
  4049fa:	460c      	mov	r4, r1
  4049fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a00:	f000 f9b0 	bl	404d64 <_lseek_r>
  404a04:	89a3      	ldrh	r3, [r4, #12]
  404a06:	1c42      	adds	r2, r0, #1
  404a08:	bf0e      	itee	eq
  404a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404a12:	6520      	strne	r0, [r4, #80]	; 0x50
  404a14:	81a3      	strh	r3, [r4, #12]
  404a16:	bd10      	pop	{r4, pc}

00404a18 <__sclose>:
  404a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a1c:	f000 b908 	b.w	404c30 <_close_r>

00404a20 <__swbuf_r>:
  404a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404a22:	460d      	mov	r5, r1
  404a24:	4614      	mov	r4, r2
  404a26:	4606      	mov	r6, r0
  404a28:	b110      	cbz	r0, 404a30 <__swbuf_r+0x10>
  404a2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a2c:	2b00      	cmp	r3, #0
  404a2e:	d04b      	beq.n	404ac8 <__swbuf_r+0xa8>
  404a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a34:	69a3      	ldr	r3, [r4, #24]
  404a36:	60a3      	str	r3, [r4, #8]
  404a38:	b291      	uxth	r1, r2
  404a3a:	0708      	lsls	r0, r1, #28
  404a3c:	d539      	bpl.n	404ab2 <__swbuf_r+0x92>
  404a3e:	6923      	ldr	r3, [r4, #16]
  404a40:	2b00      	cmp	r3, #0
  404a42:	d036      	beq.n	404ab2 <__swbuf_r+0x92>
  404a44:	b2ed      	uxtb	r5, r5
  404a46:	0489      	lsls	r1, r1, #18
  404a48:	462f      	mov	r7, r5
  404a4a:	d515      	bpl.n	404a78 <__swbuf_r+0x58>
  404a4c:	6822      	ldr	r2, [r4, #0]
  404a4e:	6961      	ldr	r1, [r4, #20]
  404a50:	1ad3      	subs	r3, r2, r3
  404a52:	428b      	cmp	r3, r1
  404a54:	da1c      	bge.n	404a90 <__swbuf_r+0x70>
  404a56:	3301      	adds	r3, #1
  404a58:	68a1      	ldr	r1, [r4, #8]
  404a5a:	1c50      	adds	r0, r2, #1
  404a5c:	3901      	subs	r1, #1
  404a5e:	60a1      	str	r1, [r4, #8]
  404a60:	6020      	str	r0, [r4, #0]
  404a62:	7015      	strb	r5, [r2, #0]
  404a64:	6962      	ldr	r2, [r4, #20]
  404a66:	429a      	cmp	r2, r3
  404a68:	d01a      	beq.n	404aa0 <__swbuf_r+0x80>
  404a6a:	89a3      	ldrh	r3, [r4, #12]
  404a6c:	07db      	lsls	r3, r3, #31
  404a6e:	d501      	bpl.n	404a74 <__swbuf_r+0x54>
  404a70:	2d0a      	cmp	r5, #10
  404a72:	d015      	beq.n	404aa0 <__swbuf_r+0x80>
  404a74:	4638      	mov	r0, r7
  404a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404a78:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404a7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404a7e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404a82:	81a2      	strh	r2, [r4, #12]
  404a84:	6822      	ldr	r2, [r4, #0]
  404a86:	6661      	str	r1, [r4, #100]	; 0x64
  404a88:	6961      	ldr	r1, [r4, #20]
  404a8a:	1ad3      	subs	r3, r2, r3
  404a8c:	428b      	cmp	r3, r1
  404a8e:	dbe2      	blt.n	404a56 <__swbuf_r+0x36>
  404a90:	4621      	mov	r1, r4
  404a92:	4630      	mov	r0, r6
  404a94:	f7fe ffe0 	bl	403a58 <_fflush_r>
  404a98:	b940      	cbnz	r0, 404aac <__swbuf_r+0x8c>
  404a9a:	6822      	ldr	r2, [r4, #0]
  404a9c:	2301      	movs	r3, #1
  404a9e:	e7db      	b.n	404a58 <__swbuf_r+0x38>
  404aa0:	4621      	mov	r1, r4
  404aa2:	4630      	mov	r0, r6
  404aa4:	f7fe ffd8 	bl	403a58 <_fflush_r>
  404aa8:	2800      	cmp	r0, #0
  404aaa:	d0e3      	beq.n	404a74 <__swbuf_r+0x54>
  404aac:	f04f 37ff 	mov.w	r7, #4294967295
  404ab0:	e7e0      	b.n	404a74 <__swbuf_r+0x54>
  404ab2:	4621      	mov	r1, r4
  404ab4:	4630      	mov	r0, r6
  404ab6:	f7fe febb 	bl	403830 <__swsetup_r>
  404aba:	2800      	cmp	r0, #0
  404abc:	d1f6      	bne.n	404aac <__swbuf_r+0x8c>
  404abe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404ac2:	6923      	ldr	r3, [r4, #16]
  404ac4:	b291      	uxth	r1, r2
  404ac6:	e7bd      	b.n	404a44 <__swbuf_r+0x24>
  404ac8:	f7ff f81e 	bl	403b08 <__sinit>
  404acc:	e7b0      	b.n	404a30 <__swbuf_r+0x10>
  404ace:	bf00      	nop

00404ad0 <_wcrtomb_r>:
  404ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
  404ad2:	4606      	mov	r6, r0
  404ad4:	b085      	sub	sp, #20
  404ad6:	461f      	mov	r7, r3
  404ad8:	b189      	cbz	r1, 404afe <_wcrtomb_r+0x2e>
  404ada:	4c10      	ldr	r4, [pc, #64]	; (404b1c <_wcrtomb_r+0x4c>)
  404adc:	4d10      	ldr	r5, [pc, #64]	; (404b20 <_wcrtomb_r+0x50>)
  404ade:	6824      	ldr	r4, [r4, #0]
  404ae0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  404ae2:	2c00      	cmp	r4, #0
  404ae4:	bf08      	it	eq
  404ae6:	462c      	moveq	r4, r5
  404ae8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404aec:	47a0      	blx	r4
  404aee:	1c43      	adds	r3, r0, #1
  404af0:	d103      	bne.n	404afa <_wcrtomb_r+0x2a>
  404af2:	2200      	movs	r2, #0
  404af4:	238a      	movs	r3, #138	; 0x8a
  404af6:	603a      	str	r2, [r7, #0]
  404af8:	6033      	str	r3, [r6, #0]
  404afa:	b005      	add	sp, #20
  404afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404afe:	460c      	mov	r4, r1
  404b00:	4906      	ldr	r1, [pc, #24]	; (404b1c <_wcrtomb_r+0x4c>)
  404b02:	4a07      	ldr	r2, [pc, #28]	; (404b20 <_wcrtomb_r+0x50>)
  404b04:	6809      	ldr	r1, [r1, #0]
  404b06:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404b08:	2900      	cmp	r1, #0
  404b0a:	bf08      	it	eq
  404b0c:	4611      	moveq	r1, r2
  404b0e:	4622      	mov	r2, r4
  404b10:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404b14:	a901      	add	r1, sp, #4
  404b16:	47a0      	blx	r4
  404b18:	e7e9      	b.n	404aee <_wcrtomb_r+0x1e>
  404b1a:	bf00      	nop
  404b1c:	20000004 	.word	0x20000004
  404b20:	20000844 	.word	0x20000844

00404b24 <__ascii_wctomb>:
  404b24:	b121      	cbz	r1, 404b30 <__ascii_wctomb+0xc>
  404b26:	2aff      	cmp	r2, #255	; 0xff
  404b28:	d804      	bhi.n	404b34 <__ascii_wctomb+0x10>
  404b2a:	700a      	strb	r2, [r1, #0]
  404b2c:	2001      	movs	r0, #1
  404b2e:	4770      	bx	lr
  404b30:	4608      	mov	r0, r1
  404b32:	4770      	bx	lr
  404b34:	238a      	movs	r3, #138	; 0x8a
  404b36:	6003      	str	r3, [r0, #0]
  404b38:	f04f 30ff 	mov.w	r0, #4294967295
  404b3c:	4770      	bx	lr
  404b3e:	bf00      	nop

00404b40 <_write_r>:
  404b40:	b570      	push	{r4, r5, r6, lr}
  404b42:	460d      	mov	r5, r1
  404b44:	4c08      	ldr	r4, [pc, #32]	; (404b68 <_write_r+0x28>)
  404b46:	4611      	mov	r1, r2
  404b48:	4606      	mov	r6, r0
  404b4a:	461a      	mov	r2, r3
  404b4c:	4628      	mov	r0, r5
  404b4e:	2300      	movs	r3, #0
  404b50:	6023      	str	r3, [r4, #0]
  404b52:	f7fb fcc7 	bl	4004e4 <_write>
  404b56:	1c43      	adds	r3, r0, #1
  404b58:	d000      	beq.n	404b5c <_write_r+0x1c>
  404b5a:	bd70      	pop	{r4, r5, r6, pc}
  404b5c:	6823      	ldr	r3, [r4, #0]
  404b5e:	2b00      	cmp	r3, #0
  404b60:	d0fb      	beq.n	404b5a <_write_r+0x1a>
  404b62:	6033      	str	r3, [r6, #0]
  404b64:	bd70      	pop	{r4, r5, r6, pc}
  404b66:	bf00      	nop
  404b68:	20000eb4 	.word	0x20000eb4

00404b6c <__register_exitproc>:
  404b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404b70:	4d2c      	ldr	r5, [pc, #176]	; (404c24 <__register_exitproc+0xb8>)
  404b72:	4606      	mov	r6, r0
  404b74:	6828      	ldr	r0, [r5, #0]
  404b76:	4698      	mov	r8, r3
  404b78:	460f      	mov	r7, r1
  404b7a:	4691      	mov	r9, r2
  404b7c:	f7ff fb84 	bl	404288 <__retarget_lock_acquire_recursive>
  404b80:	4b29      	ldr	r3, [pc, #164]	; (404c28 <__register_exitproc+0xbc>)
  404b82:	681c      	ldr	r4, [r3, #0]
  404b84:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404b88:	2b00      	cmp	r3, #0
  404b8a:	d03e      	beq.n	404c0a <__register_exitproc+0x9e>
  404b8c:	685a      	ldr	r2, [r3, #4]
  404b8e:	2a1f      	cmp	r2, #31
  404b90:	dc1c      	bgt.n	404bcc <__register_exitproc+0x60>
  404b92:	f102 0e01 	add.w	lr, r2, #1
  404b96:	b176      	cbz	r6, 404bb6 <__register_exitproc+0x4a>
  404b98:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404b9c:	2401      	movs	r4, #1
  404b9e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  404ba2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404ba6:	4094      	lsls	r4, r2
  404ba8:	4320      	orrs	r0, r4
  404baa:	2e02      	cmp	r6, #2
  404bac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  404bb0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404bb4:	d023      	beq.n	404bfe <__register_exitproc+0x92>
  404bb6:	3202      	adds	r2, #2
  404bb8:	f8c3 e004 	str.w	lr, [r3, #4]
  404bbc:	6828      	ldr	r0, [r5, #0]
  404bbe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  404bc2:	f7ff fb63 	bl	40428c <__retarget_lock_release_recursive>
  404bc6:	2000      	movs	r0, #0
  404bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404bcc:	4b17      	ldr	r3, [pc, #92]	; (404c2c <__register_exitproc+0xc0>)
  404bce:	b30b      	cbz	r3, 404c14 <__register_exitproc+0xa8>
  404bd0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404bd4:	f7fd faf4 	bl	4021c0 <malloc>
  404bd8:	4603      	mov	r3, r0
  404bda:	b1d8      	cbz	r0, 404c14 <__register_exitproc+0xa8>
  404bdc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404be0:	6002      	str	r2, [r0, #0]
  404be2:	2100      	movs	r1, #0
  404be4:	6041      	str	r1, [r0, #4]
  404be6:	460a      	mov	r2, r1
  404be8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404bec:	f04f 0e01 	mov.w	lr, #1
  404bf0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404bf4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404bf8:	2e00      	cmp	r6, #0
  404bfa:	d0dc      	beq.n	404bb6 <__register_exitproc+0x4a>
  404bfc:	e7cc      	b.n	404b98 <__register_exitproc+0x2c>
  404bfe:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  404c02:	430c      	orrs	r4, r1
  404c04:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404c08:	e7d5      	b.n	404bb6 <__register_exitproc+0x4a>
  404c0a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404c0e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  404c12:	e7bb      	b.n	404b8c <__register_exitproc+0x20>
  404c14:	6828      	ldr	r0, [r5, #0]
  404c16:	f7ff fb39 	bl	40428c <__retarget_lock_release_recursive>
  404c1a:	f04f 30ff 	mov.w	r0, #4294967295
  404c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404c22:	bf00      	nop
  404c24:	20000840 	.word	0x20000840
  404c28:	00404df8 	.word	0x00404df8
  404c2c:	004021c1 	.word	0x004021c1

00404c30 <_close_r>:
  404c30:	b538      	push	{r3, r4, r5, lr}
  404c32:	4c07      	ldr	r4, [pc, #28]	; (404c50 <_close_r+0x20>)
  404c34:	2300      	movs	r3, #0
  404c36:	4605      	mov	r5, r0
  404c38:	4608      	mov	r0, r1
  404c3a:	6023      	str	r3, [r4, #0]
  404c3c:	f7fc fe5e 	bl	4018fc <_close>
  404c40:	1c43      	adds	r3, r0, #1
  404c42:	d000      	beq.n	404c46 <_close_r+0x16>
  404c44:	bd38      	pop	{r3, r4, r5, pc}
  404c46:	6823      	ldr	r3, [r4, #0]
  404c48:	2b00      	cmp	r3, #0
  404c4a:	d0fb      	beq.n	404c44 <_close_r+0x14>
  404c4c:	602b      	str	r3, [r5, #0]
  404c4e:	bd38      	pop	{r3, r4, r5, pc}
  404c50:	20000eb4 	.word	0x20000eb4

00404c54 <_fclose_r>:
  404c54:	b570      	push	{r4, r5, r6, lr}
  404c56:	b159      	cbz	r1, 404c70 <_fclose_r+0x1c>
  404c58:	4605      	mov	r5, r0
  404c5a:	460c      	mov	r4, r1
  404c5c:	b110      	cbz	r0, 404c64 <_fclose_r+0x10>
  404c5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c60:	2b00      	cmp	r3, #0
  404c62:	d03c      	beq.n	404cde <_fclose_r+0x8a>
  404c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404c66:	07d8      	lsls	r0, r3, #31
  404c68:	d505      	bpl.n	404c76 <_fclose_r+0x22>
  404c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c6e:	b92b      	cbnz	r3, 404c7c <_fclose_r+0x28>
  404c70:	2600      	movs	r6, #0
  404c72:	4630      	mov	r0, r6
  404c74:	bd70      	pop	{r4, r5, r6, pc}
  404c76:	89a3      	ldrh	r3, [r4, #12]
  404c78:	0599      	lsls	r1, r3, #22
  404c7a:	d53c      	bpl.n	404cf6 <_fclose_r+0xa2>
  404c7c:	4621      	mov	r1, r4
  404c7e:	4628      	mov	r0, r5
  404c80:	f7fe fe4a 	bl	403918 <__sflush_r>
  404c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404c86:	4606      	mov	r6, r0
  404c88:	b133      	cbz	r3, 404c98 <_fclose_r+0x44>
  404c8a:	69e1      	ldr	r1, [r4, #28]
  404c8c:	4628      	mov	r0, r5
  404c8e:	4798      	blx	r3
  404c90:	2800      	cmp	r0, #0
  404c92:	bfb8      	it	lt
  404c94:	f04f 36ff 	movlt.w	r6, #4294967295
  404c98:	89a3      	ldrh	r3, [r4, #12]
  404c9a:	061a      	lsls	r2, r3, #24
  404c9c:	d422      	bmi.n	404ce4 <_fclose_r+0x90>
  404c9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404ca0:	b141      	cbz	r1, 404cb4 <_fclose_r+0x60>
  404ca2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404ca6:	4299      	cmp	r1, r3
  404ca8:	d002      	beq.n	404cb0 <_fclose_r+0x5c>
  404caa:	4628      	mov	r0, r5
  404cac:	f7ff f852 	bl	403d54 <_free_r>
  404cb0:	2300      	movs	r3, #0
  404cb2:	6323      	str	r3, [r4, #48]	; 0x30
  404cb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404cb6:	b121      	cbz	r1, 404cc2 <_fclose_r+0x6e>
  404cb8:	4628      	mov	r0, r5
  404cba:	f7ff f84b 	bl	403d54 <_free_r>
  404cbe:	2300      	movs	r3, #0
  404cc0:	6463      	str	r3, [r4, #68]	; 0x44
  404cc2:	f7fe ff4d 	bl	403b60 <__sfp_lock_acquire>
  404cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404cc8:	2200      	movs	r2, #0
  404cca:	07db      	lsls	r3, r3, #31
  404ccc:	81a2      	strh	r2, [r4, #12]
  404cce:	d50e      	bpl.n	404cee <_fclose_r+0x9a>
  404cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404cd2:	f7ff fad7 	bl	404284 <__retarget_lock_close_recursive>
  404cd6:	f7fe ff49 	bl	403b6c <__sfp_lock_release>
  404cda:	4630      	mov	r0, r6
  404cdc:	bd70      	pop	{r4, r5, r6, pc}
  404cde:	f7fe ff13 	bl	403b08 <__sinit>
  404ce2:	e7bf      	b.n	404c64 <_fclose_r+0x10>
  404ce4:	6921      	ldr	r1, [r4, #16]
  404ce6:	4628      	mov	r0, r5
  404ce8:	f7ff f834 	bl	403d54 <_free_r>
  404cec:	e7d7      	b.n	404c9e <_fclose_r+0x4a>
  404cee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404cf0:	f7ff facc 	bl	40428c <__retarget_lock_release_recursive>
  404cf4:	e7ec      	b.n	404cd0 <_fclose_r+0x7c>
  404cf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404cf8:	f7ff fac6 	bl	404288 <__retarget_lock_acquire_recursive>
  404cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d00:	2b00      	cmp	r3, #0
  404d02:	d1bb      	bne.n	404c7c <_fclose_r+0x28>
  404d04:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404d06:	f016 0601 	ands.w	r6, r6, #1
  404d0a:	d1b1      	bne.n	404c70 <_fclose_r+0x1c>
  404d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404d0e:	f7ff fabd 	bl	40428c <__retarget_lock_release_recursive>
  404d12:	4630      	mov	r0, r6
  404d14:	bd70      	pop	{r4, r5, r6, pc}
  404d16:	bf00      	nop

00404d18 <_fstat_r>:
  404d18:	b538      	push	{r3, r4, r5, lr}
  404d1a:	460b      	mov	r3, r1
  404d1c:	4c07      	ldr	r4, [pc, #28]	; (404d3c <_fstat_r+0x24>)
  404d1e:	4605      	mov	r5, r0
  404d20:	4611      	mov	r1, r2
  404d22:	4618      	mov	r0, r3
  404d24:	2300      	movs	r3, #0
  404d26:	6023      	str	r3, [r4, #0]
  404d28:	f7fc fdf3 	bl	401912 <_fstat>
  404d2c:	1c43      	adds	r3, r0, #1
  404d2e:	d000      	beq.n	404d32 <_fstat_r+0x1a>
  404d30:	bd38      	pop	{r3, r4, r5, pc}
  404d32:	6823      	ldr	r3, [r4, #0]
  404d34:	2b00      	cmp	r3, #0
  404d36:	d0fb      	beq.n	404d30 <_fstat_r+0x18>
  404d38:	602b      	str	r3, [r5, #0]
  404d3a:	bd38      	pop	{r3, r4, r5, pc}
  404d3c:	20000eb4 	.word	0x20000eb4

00404d40 <_isatty_r>:
  404d40:	b538      	push	{r3, r4, r5, lr}
  404d42:	4c07      	ldr	r4, [pc, #28]	; (404d60 <_isatty_r+0x20>)
  404d44:	2300      	movs	r3, #0
  404d46:	4605      	mov	r5, r0
  404d48:	4608      	mov	r0, r1
  404d4a:	6023      	str	r3, [r4, #0]
  404d4c:	f7fc fdf0 	bl	401930 <_isatty>
  404d50:	1c43      	adds	r3, r0, #1
  404d52:	d000      	beq.n	404d56 <_isatty_r+0x16>
  404d54:	bd38      	pop	{r3, r4, r5, pc}
  404d56:	6823      	ldr	r3, [r4, #0]
  404d58:	2b00      	cmp	r3, #0
  404d5a:	d0fb      	beq.n	404d54 <_isatty_r+0x14>
  404d5c:	602b      	str	r3, [r5, #0]
  404d5e:	bd38      	pop	{r3, r4, r5, pc}
  404d60:	20000eb4 	.word	0x20000eb4

00404d64 <_lseek_r>:
  404d64:	b570      	push	{r4, r5, r6, lr}
  404d66:	460d      	mov	r5, r1
  404d68:	4c08      	ldr	r4, [pc, #32]	; (404d8c <_lseek_r+0x28>)
  404d6a:	4611      	mov	r1, r2
  404d6c:	4606      	mov	r6, r0
  404d6e:	461a      	mov	r2, r3
  404d70:	4628      	mov	r0, r5
  404d72:	2300      	movs	r3, #0
  404d74:	6023      	str	r3, [r4, #0]
  404d76:	f7fc fde5 	bl	401944 <_lseek>
  404d7a:	1c43      	adds	r3, r0, #1
  404d7c:	d000      	beq.n	404d80 <_lseek_r+0x1c>
  404d7e:	bd70      	pop	{r4, r5, r6, pc}
  404d80:	6823      	ldr	r3, [r4, #0]
  404d82:	2b00      	cmp	r3, #0
  404d84:	d0fb      	beq.n	404d7e <_lseek_r+0x1a>
  404d86:	6033      	str	r3, [r6, #0]
  404d88:	bd70      	pop	{r4, r5, r6, pc}
  404d8a:	bf00      	nop
  404d8c:	20000eb4 	.word	0x20000eb4

00404d90 <_read_r>:
  404d90:	b570      	push	{r4, r5, r6, lr}
  404d92:	460d      	mov	r5, r1
  404d94:	4c08      	ldr	r4, [pc, #32]	; (404db8 <_read_r+0x28>)
  404d96:	4611      	mov	r1, r2
  404d98:	4606      	mov	r6, r0
  404d9a:	461a      	mov	r2, r3
  404d9c:	4628      	mov	r0, r5
  404d9e:	2300      	movs	r3, #0
  404da0:	6023      	str	r3, [r4, #0]
  404da2:	f7fb fb75 	bl	400490 <_read>
  404da6:	1c43      	adds	r3, r0, #1
  404da8:	d000      	beq.n	404dac <_read_r+0x1c>
  404daa:	bd70      	pop	{r4, r5, r6, pc}
  404dac:	6823      	ldr	r3, [r4, #0]
  404dae:	2b00      	cmp	r3, #0
  404db0:	d0fb      	beq.n	404daa <_read_r+0x1a>
  404db2:	6033      	str	r3, [r6, #0]
  404db4:	bd70      	pop	{r4, r5, r6, pc}
  404db6:	bf00      	nop
  404db8:	20000eb4 	.word	0x20000eb4
  404dbc:	6e69614d 	.word	0x6e69614d
  404dc0:	6e756620 	.word	0x6e756620
  404dc4:	6f697463 	.word	0x6f697463
  404dc8:	6461206e 	.word	0x6461206e
  404dcc:	73657264 	.word	0x73657264
  404dd0:	25203a73 	.word	0x25203a73
  404dd4:	00000a70 	.word	0x00000a70
  404dd8:	65636552 	.word	0x65636552
  404ddc:	64657669 	.word	0x64657669
  404de0:	7325203a 	.word	0x7325203a
  404de4:	00000a0d 	.word	0x00000a0d
  404de8:	0001c200 	.word	0x0001c200
  404dec:	000000c0 	.word	0x000000c0
  404df0:	00000800 	.word	0x00000800
  404df4:	00000000 	.word	0x00000000

00404df8 <_global_impure_ptr>:
  404df8:	20000008 33323130 37363534 42413938     ... 0123456789AB
  404e08:	46454443 00000000 33323130 37363534     CDEF....01234567
  404e18:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  404e28:	0000296c                                l)..

00404e2c <blanks.7217>:
  404e2c:	20202020 20202020 20202020 20202020                     

00404e3c <zeroes.7218>:
  404e3c:	30303030 30303030 30303030 30303030     0000000000000000
  404e4c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404e5c <_ctype_>:
  404e5c:	20202000 20202020 28282020 20282828     .         ((((( 
  404e6c:	20202020 20202020 20202020 20202020                     
  404e7c:	10108820 10101010 10101010 10101010      ...............
  404e8c:	04040410 04040404 10040404 10101010     ................
  404e9c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404eac:	01010101 01010101 01010101 10101010     ................
  404ebc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404ecc:	02020202 02020202 02020202 10101010     ................
  404edc:	00000020 00000000 00000000 00000000      ...............
	...

00404f60 <_init>:
  404f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f62:	bf00      	nop
  404f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404f66:	bc08      	pop	{r3}
  404f68:	469e      	mov	lr, r3
  404f6a:	4770      	bx	lr

00404f6c <__init_array_start>:
  404f6c:	004038f9 	.word	0x004038f9

00404f70 <__frame_dummy_init_array_entry>:
  404f70:	004000f1                                ..@.

00404f74 <_fini>:
  404f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f76:	bf00      	nop
  404f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404f7a:	bc08      	pop	{r3}
  404f7c:	469e      	mov	lr, r3
  404f7e:	4770      	bx	lr

00404f80 <__fini_array_start>:
  404f80:	004000cd 	.word	0x004000cd


ATSAM4_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005688  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405688  00405688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  00405690  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000518  200009c0  00406050  000209c0  2**2
                  ALLOC
  4 .stack        00003000  20000ed8  00406568  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  7 .debug_info   00011df3  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026cf  00000000  00000000  00032836  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005dce  00000000  00000000  00034f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a70  00000000  00000000  0003acd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009a8  00000000  00000000  0003b743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015122  00000000  00000000  0003c0eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d509  00000000  00000000  0005120d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055dd9  00000000  00000000  0005e716  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003840  00000000  00000000  000b44f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 3e 00 20 f9 1f 40 00 c1 20 40 00 c1 20 40 00     .>. ..@.. @.. @.
  400010:	c1 20 40 00 c1 20 40 00 c1 20 40 00 00 00 00 00     . @.. @.. @.....
	...
  40002c:	c1 20 40 00 c1 20 40 00 00 00 00 00 c1 20 40 00     . @.. @...... @.
  40003c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40004c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40005c:	c1 20 40 00 c1 20 40 00 11 06 40 00 00 00 00 00     . @.. @...@.....
  40006c:	0d 19 40 00 25 19 40 00 3d 19 40 00 c1 20 40 00     ..@.%.@.=.@.. @.
  40007c:	c1 20 40 00 00 00 00 00 00 00 00 00 c1 20 40 00     . @.......... @.
  40008c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40009c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  4000ac:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  4000bc:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009c0 	.word	0x200009c0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00405690 	.word	0x00405690

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00405690 	.word	0x00405690
  40012c:	200009c4 	.word	0x200009c4
  400130:	00405690 	.word	0x00405690
  400134:	00000000 	.word	0x00000000

00400138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400138:	b480      	push	{r7}
  40013a:	b083      	sub	sp, #12
  40013c:	af00      	add	r7, sp, #0
  40013e:	4603      	mov	r3, r0
  400140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400142:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400146:	2b00      	cmp	r3, #0
  400148:	db0b      	blt.n	400162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40014a:	4908      	ldr	r1, [pc, #32]	; (40016c <__NVIC_EnableIRQ+0x34>)
  40014c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400150:	095b      	lsrs	r3, r3, #5
  400152:	79fa      	ldrb	r2, [r7, #7]
  400154:	f002 021f 	and.w	r2, r2, #31
  400158:	2001      	movs	r0, #1
  40015a:	fa00 f202 	lsl.w	r2, r0, r2
  40015e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400162:	bf00      	nop
  400164:	370c      	adds	r7, #12
  400166:	46bd      	mov	sp, r7
  400168:	bc80      	pop	{r7}
  40016a:	4770      	bx	lr
  40016c:	e000e100 	.word	0xe000e100

00400170 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400178:	687b      	ldr	r3, [r7, #4]
  40017a:	2b07      	cmp	r3, #7
  40017c:	d825      	bhi.n	4001ca <osc_get_rate+0x5a>
  40017e:	a201      	add	r2, pc, #4	; (adr r2, 400184 <osc_get_rate+0x14>)
  400180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400184:	004001a5 	.word	0x004001a5
  400188:	004001ab 	.word	0x004001ab
  40018c:	004001b1 	.word	0x004001b1
  400190:	004001b7 	.word	0x004001b7
  400194:	004001bb 	.word	0x004001bb
  400198:	004001bf 	.word	0x004001bf
  40019c:	004001c3 	.word	0x004001c3
  4001a0:	004001c7 	.word	0x004001c7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4001a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4001a8:	e010      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4001aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001ae:	e00d      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4001b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001b4:	e00a      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4001b6:	4b08      	ldr	r3, [pc, #32]	; (4001d8 <osc_get_rate+0x68>)
  4001b8:	e008      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4001ba:	4b08      	ldr	r3, [pc, #32]	; (4001dc <osc_get_rate+0x6c>)
  4001bc:	e006      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4001be:	4b08      	ldr	r3, [pc, #32]	; (4001e0 <osc_get_rate+0x70>)
  4001c0:	e004      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4001c2:	4b07      	ldr	r3, [pc, #28]	; (4001e0 <osc_get_rate+0x70>)
  4001c4:	e002      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4001c6:	4b06      	ldr	r3, [pc, #24]	; (4001e0 <osc_get_rate+0x70>)
  4001c8:	e000      	b.n	4001cc <osc_get_rate+0x5c>
	}

	return 0;
  4001ca:	2300      	movs	r3, #0
}
  4001cc:	4618      	mov	r0, r3
  4001ce:	370c      	adds	r7, #12
  4001d0:	46bd      	mov	sp, r7
  4001d2:	bc80      	pop	{r7}
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	003d0900 	.word	0x003d0900
  4001dc:	007a1200 	.word	0x007a1200
  4001e0:	00b71b00 	.word	0x00b71b00

004001e4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4001e4:	b580      	push	{r7, lr}
  4001e6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001e8:	2006      	movs	r0, #6
  4001ea:	4b04      	ldr	r3, [pc, #16]	; (4001fc <sysclk_get_main_hz+0x18>)
  4001ec:	4798      	blx	r3
  4001ee:	4602      	mov	r2, r0
  4001f0:	4613      	mov	r3, r2
  4001f2:	009b      	lsls	r3, r3, #2
  4001f4:	4413      	add	r3, r2
  4001f6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001f8:	4618      	mov	r0, r3
  4001fa:	bd80      	pop	{r7, pc}
  4001fc:	00400171 	.word	0x00400171

00400200 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400200:	b580      	push	{r7, lr}
  400202:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400204:	4b02      	ldr	r3, [pc, #8]	; (400210 <sysclk_get_peripheral_hz+0x10>)
  400206:	4798      	blx	r3
  400208:	4603      	mov	r3, r0
  40020a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40020c:	4618      	mov	r0, r3
  40020e:	bd80      	pop	{r7, pc}
  400210:	004001e5 	.word	0x004001e5

00400214 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400214:	b580      	push	{r7, lr}
  400216:	b082      	sub	sp, #8
  400218:	af00      	add	r7, sp, #0
  40021a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40021c:	6878      	ldr	r0, [r7, #4]
  40021e:	4b03      	ldr	r3, [pc, #12]	; (40022c <sysclk_enable_peripheral_clock+0x18>)
  400220:	4798      	blx	r3
}
  400222:	bf00      	nop
  400224:	3708      	adds	r7, #8
  400226:	46bd      	mov	sp, r7
  400228:	bd80      	pop	{r7, pc}
  40022a:	bf00      	nop
  40022c:	00401ba1 	.word	0x00401ba1

00400230 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  400230:	b580      	push	{r7, lr}
  400232:	b08c      	sub	sp, #48	; 0x30
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
  400238:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40023a:	4b31      	ldr	r3, [pc, #196]	; (400300 <usart_serial_init+0xd0>)
  40023c:	4798      	blx	r3
  40023e:	4603      	mov	r3, r0
  400240:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  400242:	683b      	ldr	r3, [r7, #0]
  400244:	681b      	ldr	r3, [r3, #0]
  400246:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  400248:	683b      	ldr	r3, [r7, #0]
  40024a:	689b      	ldr	r3, [r3, #8]
  40024c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40024e:	683b      	ldr	r3, [r7, #0]
  400250:	681b      	ldr	r3, [r3, #0]
  400252:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  400254:	683b      	ldr	r3, [r7, #0]
  400256:	685b      	ldr	r3, [r3, #4]
  400258:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40025a:	683b      	ldr	r3, [r7, #0]
  40025c:	689b      	ldr	r3, [r3, #8]
  40025e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  400260:	683b      	ldr	r3, [r7, #0]
  400262:	68db      	ldr	r3, [r3, #12]
  400264:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400266:	2300      	movs	r3, #0
  400268:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40026a:	687b      	ldr	r3, [r7, #4]
  40026c:	4a25      	ldr	r2, [pc, #148]	; (400304 <usart_serial_init+0xd4>)
  40026e:	4293      	cmp	r3, r2
  400270:	d108      	bne.n	400284 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  400272:	2008      	movs	r0, #8
  400274:	4b24      	ldr	r3, [pc, #144]	; (400308 <usart_serial_init+0xd8>)
  400276:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400278:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40027c:	4619      	mov	r1, r3
  40027e:	6878      	ldr	r0, [r7, #4]
  400280:	4b22      	ldr	r3, [pc, #136]	; (40030c <usart_serial_init+0xdc>)
  400282:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	4a22      	ldr	r2, [pc, #136]	; (400310 <usart_serial_init+0xe0>)
  400288:	4293      	cmp	r3, r2
  40028a:	d108      	bne.n	40029e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40028c:	2009      	movs	r0, #9
  40028e:	4b1e      	ldr	r3, [pc, #120]	; (400308 <usart_serial_init+0xd8>)
  400290:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400292:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400296:	4619      	mov	r1, r3
  400298:	6878      	ldr	r0, [r7, #4]
  40029a:	4b1c      	ldr	r3, [pc, #112]	; (40030c <usart_serial_init+0xdc>)
  40029c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40029e:	687b      	ldr	r3, [r7, #4]
  4002a0:	4a1c      	ldr	r2, [pc, #112]	; (400314 <usart_serial_init+0xe4>)
  4002a2:	4293      	cmp	r3, r2
  4002a4:	d111      	bne.n	4002ca <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4002a6:	200e      	movs	r0, #14
  4002a8:	4b17      	ldr	r3, [pc, #92]	; (400308 <usart_serial_init+0xd8>)
  4002aa:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002ac:	4b14      	ldr	r3, [pc, #80]	; (400300 <usart_serial_init+0xd0>)
  4002ae:	4798      	blx	r3
  4002b0:	4602      	mov	r2, r0
  4002b2:	f107 030c 	add.w	r3, r7, #12
  4002b6:	4619      	mov	r1, r3
  4002b8:	6878      	ldr	r0, [r7, #4]
  4002ba:	4b17      	ldr	r3, [pc, #92]	; (400318 <usart_serial_init+0xe8>)
  4002bc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002be:	6878      	ldr	r0, [r7, #4]
  4002c0:	4b16      	ldr	r3, [pc, #88]	; (40031c <usart_serial_init+0xec>)
  4002c2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4002c4:	6878      	ldr	r0, [r7, #4]
  4002c6:	4b16      	ldr	r3, [pc, #88]	; (400320 <usart_serial_init+0xf0>)
  4002c8:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	4a15      	ldr	r2, [pc, #84]	; (400324 <usart_serial_init+0xf4>)
  4002ce:	4293      	cmp	r3, r2
  4002d0:	d111      	bne.n	4002f6 <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4002d2:	200f      	movs	r0, #15
  4002d4:	4b0c      	ldr	r3, [pc, #48]	; (400308 <usart_serial_init+0xd8>)
  4002d6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002d8:	4b09      	ldr	r3, [pc, #36]	; (400300 <usart_serial_init+0xd0>)
  4002da:	4798      	blx	r3
  4002dc:	4602      	mov	r2, r0
  4002de:	f107 030c 	add.w	r3, r7, #12
  4002e2:	4619      	mov	r1, r3
  4002e4:	6878      	ldr	r0, [r7, #4]
  4002e6:	4b0c      	ldr	r3, [pc, #48]	; (400318 <usart_serial_init+0xe8>)
  4002e8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002ea:	6878      	ldr	r0, [r7, #4]
  4002ec:	4b0b      	ldr	r3, [pc, #44]	; (40031c <usart_serial_init+0xec>)
  4002ee:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4002f0:	6878      	ldr	r0, [r7, #4]
  4002f2:	4b0b      	ldr	r3, [pc, #44]	; (400320 <usart_serial_init+0xf0>)
  4002f4:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4002f6:	bf00      	nop
  4002f8:	3730      	adds	r7, #48	; 0x30
  4002fa:	46bd      	mov	sp, r7
  4002fc:	bd80      	pop	{r7, pc}
  4002fe:	bf00      	nop
  400300:	00400201 	.word	0x00400201
  400304:	400e0600 	.word	0x400e0600
  400308:	00400215 	.word	0x00400215
  40030c:	00401c21 	.word	0x00401c21
  400310:	400e0800 	.word	0x400e0800
  400314:	40024000 	.word	0x40024000
  400318:	00401dc9 	.word	0x00401dc9
  40031c:	00401e4d 	.word	0x00401e4d
  400320:	00401e7d 	.word	0x00401e7d
  400324:	40028000 	.word	0x40028000

00400328 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400328:	b580      	push	{r7, lr}
  40032a:	b082      	sub	sp, #8
  40032c:	af00      	add	r7, sp, #0
  40032e:	6078      	str	r0, [r7, #4]
  400330:	460b      	mov	r3, r1
  400332:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400334:	687b      	ldr	r3, [r7, #4]
  400336:	4a20      	ldr	r2, [pc, #128]	; (4003b8 <usart_serial_putchar+0x90>)
  400338:	4293      	cmp	r3, r2
  40033a:	d10a      	bne.n	400352 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40033c:	bf00      	nop
  40033e:	78fb      	ldrb	r3, [r7, #3]
  400340:	4619      	mov	r1, r3
  400342:	6878      	ldr	r0, [r7, #4]
  400344:	4b1d      	ldr	r3, [pc, #116]	; (4003bc <usart_serial_putchar+0x94>)
  400346:	4798      	blx	r3
  400348:	4603      	mov	r3, r0
  40034a:	2b00      	cmp	r3, #0
  40034c:	d1f7      	bne.n	40033e <usart_serial_putchar+0x16>
		return 1;
  40034e:	2301      	movs	r3, #1
  400350:	e02d      	b.n	4003ae <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400352:	687b      	ldr	r3, [r7, #4]
  400354:	4a1a      	ldr	r2, [pc, #104]	; (4003c0 <usart_serial_putchar+0x98>)
  400356:	4293      	cmp	r3, r2
  400358:	d10a      	bne.n	400370 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40035a:	bf00      	nop
  40035c:	78fb      	ldrb	r3, [r7, #3]
  40035e:	4619      	mov	r1, r3
  400360:	6878      	ldr	r0, [r7, #4]
  400362:	4b16      	ldr	r3, [pc, #88]	; (4003bc <usart_serial_putchar+0x94>)
  400364:	4798      	blx	r3
  400366:	4603      	mov	r3, r0
  400368:	2b00      	cmp	r3, #0
  40036a:	d1f7      	bne.n	40035c <usart_serial_putchar+0x34>
		return 1;
  40036c:	2301      	movs	r3, #1
  40036e:	e01e      	b.n	4003ae <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	4a14      	ldr	r2, [pc, #80]	; (4003c4 <usart_serial_putchar+0x9c>)
  400374:	4293      	cmp	r3, r2
  400376:	d10a      	bne.n	40038e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  400378:	bf00      	nop
  40037a:	78fb      	ldrb	r3, [r7, #3]
  40037c:	4619      	mov	r1, r3
  40037e:	6878      	ldr	r0, [r7, #4]
  400380:	4b11      	ldr	r3, [pc, #68]	; (4003c8 <usart_serial_putchar+0xa0>)
  400382:	4798      	blx	r3
  400384:	4603      	mov	r3, r0
  400386:	2b00      	cmp	r3, #0
  400388:	d1f7      	bne.n	40037a <usart_serial_putchar+0x52>
		return 1;
  40038a:	2301      	movs	r3, #1
  40038c:	e00f      	b.n	4003ae <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40038e:	687b      	ldr	r3, [r7, #4]
  400390:	4a0e      	ldr	r2, [pc, #56]	; (4003cc <usart_serial_putchar+0xa4>)
  400392:	4293      	cmp	r3, r2
  400394:	d10a      	bne.n	4003ac <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  400396:	bf00      	nop
  400398:	78fb      	ldrb	r3, [r7, #3]
  40039a:	4619      	mov	r1, r3
  40039c:	6878      	ldr	r0, [r7, #4]
  40039e:	4b0a      	ldr	r3, [pc, #40]	; (4003c8 <usart_serial_putchar+0xa0>)
  4003a0:	4798      	blx	r3
  4003a2:	4603      	mov	r3, r0
  4003a4:	2b00      	cmp	r3, #0
  4003a6:	d1f7      	bne.n	400398 <usart_serial_putchar+0x70>
		return 1;
  4003a8:	2301      	movs	r3, #1
  4003aa:	e000      	b.n	4003ae <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4003ac:	2300      	movs	r3, #0
}
  4003ae:	4618      	mov	r0, r3
  4003b0:	3708      	adds	r7, #8
  4003b2:	46bd      	mov	sp, r7
  4003b4:	bd80      	pop	{r7, pc}
  4003b6:	bf00      	nop
  4003b8:	400e0600 	.word	0x400e0600
  4003bc:	00401c81 	.word	0x00401c81
  4003c0:	400e0800 	.word	0x400e0800
  4003c4:	40024000 	.word	0x40024000
  4003c8:	00401f2b 	.word	0x00401f2b
  4003cc:	40028000 	.word	0x40028000

004003d0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4003d0:	b580      	push	{r7, lr}
  4003d2:	b084      	sub	sp, #16
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4003da:	2300      	movs	r3, #0
  4003dc:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4003de:	687b      	ldr	r3, [r7, #4]
  4003e0:	4a1f      	ldr	r2, [pc, #124]	; (400460 <usart_serial_getchar+0x90>)
  4003e2:	4293      	cmp	r3, r2
  4003e4:	d107      	bne.n	4003f6 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4003e6:	bf00      	nop
  4003e8:	6839      	ldr	r1, [r7, #0]
  4003ea:	6878      	ldr	r0, [r7, #4]
  4003ec:	4b1d      	ldr	r3, [pc, #116]	; (400464 <usart_serial_getchar+0x94>)
  4003ee:	4798      	blx	r3
  4003f0:	4603      	mov	r3, r0
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	d1f8      	bne.n	4003e8 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4003f6:	687b      	ldr	r3, [r7, #4]
  4003f8:	4a1b      	ldr	r2, [pc, #108]	; (400468 <usart_serial_getchar+0x98>)
  4003fa:	4293      	cmp	r3, r2
  4003fc:	d107      	bne.n	40040e <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4003fe:	bf00      	nop
  400400:	6839      	ldr	r1, [r7, #0]
  400402:	6878      	ldr	r0, [r7, #4]
  400404:	4b17      	ldr	r3, [pc, #92]	; (400464 <usart_serial_getchar+0x94>)
  400406:	4798      	blx	r3
  400408:	4603      	mov	r3, r0
  40040a:	2b00      	cmp	r3, #0
  40040c:	d1f8      	bne.n	400400 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40040e:	687b      	ldr	r3, [r7, #4]
  400410:	4a16      	ldr	r2, [pc, #88]	; (40046c <usart_serial_getchar+0x9c>)
  400412:	4293      	cmp	r3, r2
  400414:	d10d      	bne.n	400432 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  400416:	bf00      	nop
  400418:	f107 030c 	add.w	r3, r7, #12
  40041c:	4619      	mov	r1, r3
  40041e:	6878      	ldr	r0, [r7, #4]
  400420:	4b13      	ldr	r3, [pc, #76]	; (400470 <usart_serial_getchar+0xa0>)
  400422:	4798      	blx	r3
  400424:	4603      	mov	r3, r0
  400426:	2b00      	cmp	r3, #0
  400428:	d1f6      	bne.n	400418 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  40042a:	68fb      	ldr	r3, [r7, #12]
  40042c:	b2da      	uxtb	r2, r3
  40042e:	683b      	ldr	r3, [r7, #0]
  400430:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400432:	687b      	ldr	r3, [r7, #4]
  400434:	4a0f      	ldr	r2, [pc, #60]	; (400474 <usart_serial_getchar+0xa4>)
  400436:	4293      	cmp	r3, r2
  400438:	d10d      	bne.n	400456 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  40043a:	bf00      	nop
  40043c:	f107 030c 	add.w	r3, r7, #12
  400440:	4619      	mov	r1, r3
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b0a      	ldr	r3, [pc, #40]	; (400470 <usart_serial_getchar+0xa0>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d1f6      	bne.n	40043c <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  40044e:	68fb      	ldr	r3, [r7, #12]
  400450:	b2da      	uxtb	r2, r3
  400452:	683b      	ldr	r3, [r7, #0]
  400454:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400456:	bf00      	nop
  400458:	3710      	adds	r7, #16
  40045a:	46bd      	mov	sp, r7
  40045c:	bd80      	pop	{r7, pc}
  40045e:	bf00      	nop
  400460:	400e0600 	.word	0x400e0600
  400464:	00401caf 	.word	0x00401caf
  400468:	400e0800 	.word	0x400e0800
  40046c:	40024000 	.word	0x40024000
  400470:	00401f5b 	.word	0x00401f5b
  400474:	40028000 	.word	0x40028000

00400478 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  400478:	b580      	push	{r7, lr}
  40047a:	b082      	sub	sp, #8
  40047c:	af00      	add	r7, sp, #0
  40047e:	6078      	str	r0, [r7, #4]
  400480:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  400482:	4a0f      	ldr	r2, [pc, #60]	; (4004c0 <stdio_serial_init+0x48>)
  400484:	687b      	ldr	r3, [r7, #4]
  400486:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400488:	4b0e      	ldr	r3, [pc, #56]	; (4004c4 <stdio_serial_init+0x4c>)
  40048a:	4a0f      	ldr	r2, [pc, #60]	; (4004c8 <stdio_serial_init+0x50>)
  40048c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40048e:	4b0f      	ldr	r3, [pc, #60]	; (4004cc <stdio_serial_init+0x54>)
  400490:	4a0f      	ldr	r2, [pc, #60]	; (4004d0 <stdio_serial_init+0x58>)
  400492:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  400494:	6839      	ldr	r1, [r7, #0]
  400496:	6878      	ldr	r0, [r7, #4]
  400498:	4b0e      	ldr	r3, [pc, #56]	; (4004d4 <stdio_serial_init+0x5c>)
  40049a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40049c:	4b0e      	ldr	r3, [pc, #56]	; (4004d8 <stdio_serial_init+0x60>)
  40049e:	681b      	ldr	r3, [r3, #0]
  4004a0:	689b      	ldr	r3, [r3, #8]
  4004a2:	2100      	movs	r1, #0
  4004a4:	4618      	mov	r0, r3
  4004a6:	4b0d      	ldr	r3, [pc, #52]	; (4004dc <stdio_serial_init+0x64>)
  4004a8:	4798      	blx	r3
	setbuf(stdin, NULL);
  4004aa:	4b0b      	ldr	r3, [pc, #44]	; (4004d8 <stdio_serial_init+0x60>)
  4004ac:	681b      	ldr	r3, [r3, #0]
  4004ae:	685b      	ldr	r3, [r3, #4]
  4004b0:	2100      	movs	r1, #0
  4004b2:	4618      	mov	r0, r3
  4004b4:	4b09      	ldr	r3, [pc, #36]	; (4004dc <stdio_serial_init+0x64>)
  4004b6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4004b8:	bf00      	nop
  4004ba:	3708      	adds	r7, #8
  4004bc:	46bd      	mov	sp, r7
  4004be:	bd80      	pop	{r7, pc}
  4004c0:	20000ea8 	.word	0x20000ea8
  4004c4:	20000ea4 	.word	0x20000ea4
  4004c8:	00400329 	.word	0x00400329
  4004cc:	20000ea0 	.word	0x20000ea0
  4004d0:	004003d1 	.word	0x004003d1
  4004d4:	00400231 	.word	0x00400231
  4004d8:	20000010 	.word	0x20000010
  4004dc:	00402e01 	.word	0x00402e01

004004e0 <Boot_Uart_Init>:

uint8_t Uart_Buffer[1029];
uint16_t Uart_Buffer_Length;
uint8_t Uart_Packet_Received_Flag;
void Boot_Uart_Init(void)
{
  4004e0:	b590      	push	{r4, r7, lr}
  4004e2:	b085      	sub	sp, #20
  4004e4:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = 
  4004e6:	4b0c      	ldr	r3, [pc, #48]	; (400518 <Boot_Uart_Init+0x38>)
  4004e8:	463c      	mov	r4, r7
  4004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4004ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits =	CONF_UART_STOP_BITS,
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(ID_UART1);
  4004f0:	2009      	movs	r0, #9
  4004f2:	4b0a      	ldr	r3, [pc, #40]	; (40051c <Boot_Uart_Init+0x3c>)
  4004f4:	4798      	blx	r3
	stdio_serial_init(UART1, &uart_serial_options);
  4004f6:	463b      	mov	r3, r7
  4004f8:	4619      	mov	r1, r3
  4004fa:	4809      	ldr	r0, [pc, #36]	; (400520 <Boot_Uart_Init+0x40>)
  4004fc:	4b09      	ldr	r3, [pc, #36]	; (400524 <Boot_Uart_Init+0x44>)
  4004fe:	4798      	blx	r3
	usart_enable_interrupt(UART1, US_IER_RXRDY); // UART RX 인터럽트 활성화
  400500:	2101      	movs	r1, #1
  400502:	4807      	ldr	r0, [pc, #28]	; (400520 <Boot_Uart_Init+0x40>)
  400504:	4b08      	ldr	r3, [pc, #32]	; (400528 <Boot_Uart_Init+0x48>)
  400506:	4798      	blx	r3
    NVIC_EnableIRQ(UART1_IRQn); // 전체 인터럽트 활성화
  400508:	2009      	movs	r0, #9
  40050a:	4b08      	ldr	r3, [pc, #32]	; (40052c <Boot_Uart_Init+0x4c>)
  40050c:	4798      	blx	r3
}
  40050e:	bf00      	nop
  400510:	3714      	adds	r7, #20
  400512:	46bd      	mov	sp, r7
  400514:	bd90      	pop	{r4, r7, pc}
  400516:	bf00      	nop
  400518:	004053bc 	.word	0x004053bc
  40051c:	00400215 	.word	0x00400215
  400520:	400e0800 	.word	0x400e0800
  400524:	00400479 	.word	0x00400479
  400528:	00401ead 	.word	0x00401ead
  40052c:	00400139 	.word	0x00400139

00400530 <uart_transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_ch(uint8_t data)
{
  400530:	b580      	push	{r7, lr}
  400532:	b084      	sub	sp, #16
  400534:	af00      	add	r7, sp, #0
  400536:	4603      	mov	r3, r0
  400538:	71fb      	strb	r3, [r7, #7]
	uart_status status = UART_ERROR;
  40053a:	23ff      	movs	r3, #255	; 0xff
  40053c:	73fb      	strb	r3, [r7, #15]

	if(uart_write(UART1,data) == 0)
  40053e:	79fb      	ldrb	r3, [r7, #7]
  400540:	4619      	mov	r1, r3
  400542:	4806      	ldr	r0, [pc, #24]	; (40055c <uart_transmit_ch+0x2c>)
  400544:	4b06      	ldr	r3, [pc, #24]	; (400560 <uart_transmit_ch+0x30>)
  400546:	4798      	blx	r3
  400548:	4603      	mov	r3, r0
  40054a:	2b00      	cmp	r3, #0
  40054c:	d101      	bne.n	400552 <uart_transmit_ch+0x22>
	{
		status = UART_OK;
  40054e:	2300      	movs	r3, #0
  400550:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  400552:	7bfb      	ldrb	r3, [r7, #15]
}
  400554:	4618      	mov	r0, r3
  400556:	3710      	adds	r7, #16
  400558:	46bd      	mov	sp, r7
  40055a:	bd80      	pop	{r7, pc}
  40055c:	400e0800 	.word	0x400e0800
  400560:	00401c81 	.word	0x00401c81

00400564 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
  400564:	b590      	push	{r4, r7, lr}
  400566:	b085      	sub	sp, #20
  400568:	af00      	add	r7, sp, #0
  40056a:	6078      	str	r0, [r7, #4]
	uart_status status = UART_ERROR;
  40056c:	23ff      	movs	r3, #255	; 0xff
  40056e:	737b      	strb	r3, [r7, #13]

	/* Calculate the length. */
	for(uint16_t i = 0; i < strlen(data); i++)
  400570:	2300      	movs	r3, #0
  400572:	81fb      	strh	r3, [r7, #14]
  400574:	e00e      	b.n	400594 <uart_transmit_str+0x30>
	{
		if (UART_ERROR == uart_transmit_ch(data[i]))
  400576:	89fb      	ldrh	r3, [r7, #14]
  400578:	687a      	ldr	r2, [r7, #4]
  40057a:	4413      	add	r3, r2
  40057c:	781b      	ldrb	r3, [r3, #0]
  40057e:	4618      	mov	r0, r3
  400580:	4b0b      	ldr	r3, [pc, #44]	; (4005b0 <uart_transmit_str+0x4c>)
  400582:	4798      	blx	r3
  400584:	4603      	mov	r3, r0
  400586:	2bff      	cmp	r3, #255	; 0xff
  400588:	d101      	bne.n	40058e <uart_transmit_str+0x2a>
		{
			return status;
  40058a:	7b7b      	ldrb	r3, [r7, #13]
  40058c:	e00c      	b.n	4005a8 <uart_transmit_str+0x44>
	for(uint16_t i = 0; i < strlen(data); i++)
  40058e:	89fb      	ldrh	r3, [r7, #14]
  400590:	3301      	adds	r3, #1
  400592:	81fb      	strh	r3, [r7, #14]
  400594:	89fc      	ldrh	r4, [r7, #14]
  400596:	6878      	ldr	r0, [r7, #4]
  400598:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <uart_transmit_str+0x50>)
  40059a:	4798      	blx	r3
  40059c:	4603      	mov	r3, r0
  40059e:	429c      	cmp	r4, r3
  4005a0:	d3e9      	bcc.n	400576 <uart_transmit_str+0x12>
		}
	}

	status = UART_OK;
  4005a2:	2300      	movs	r3, #0
  4005a4:	737b      	strb	r3, [r7, #13]

	return status;
  4005a6:	7b7b      	ldrb	r3, [r7, #13]
}
  4005a8:	4618      	mov	r0, r3
  4005aa:	3714      	adds	r7, #20
  4005ac:	46bd      	mov	sp, r7
  4005ae:	bd90      	pop	{r4, r7, pc}
  4005b0:	00400531 	.word	0x00400531
  4005b4:	00402fc1 	.word	0x00402fc1

004005b8 <uart_receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status uart_receive(uint8_t *data, uint16_t length)
{
  4005b8:	b480      	push	{r7}
  4005ba:	b085      	sub	sp, #20
  4005bc:	af00      	add	r7, sp, #0
  4005be:	6078      	str	r0, [r7, #4]
  4005c0:	460b      	mov	r3, r1
  4005c2:	807b      	strh	r3, [r7, #2]
	uart_status status = UART_ERROR;
  4005c4:	23ff      	movs	r3, #255	; 0xff
  4005c6:	73fb      	strb	r3, [r7, #15]

	if(Uart_Buffer_Length > 0)
  4005c8:	4b0f      	ldr	r3, [pc, #60]	; (400608 <uart_receive+0x50>)
  4005ca:	881b      	ldrh	r3, [r3, #0]
  4005cc:	2b00      	cmp	r3, #0
  4005ce:	d013      	beq.n	4005f8 <uart_receive+0x40>
	{
		for(uint16_t i = 0; i < length; i++)
  4005d0:	2300      	movs	r3, #0
  4005d2:	81bb      	strh	r3, [r7, #12]
  4005d4:	e009      	b.n	4005ea <uart_receive+0x32>
		{
			*(data+i) = Uart_Buffer[i];
  4005d6:	89bb      	ldrh	r3, [r7, #12]
  4005d8:	687a      	ldr	r2, [r7, #4]
  4005da:	4413      	add	r3, r2
  4005dc:	89ba      	ldrh	r2, [r7, #12]
  4005de:	490b      	ldr	r1, [pc, #44]	; (40060c <uart_receive+0x54>)
  4005e0:	5c8a      	ldrb	r2, [r1, r2]
  4005e2:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 0; i < length; i++)
  4005e4:	89bb      	ldrh	r3, [r7, #12]
  4005e6:	3301      	adds	r3, #1
  4005e8:	81bb      	strh	r3, [r7, #12]
  4005ea:	89ba      	ldrh	r2, [r7, #12]
  4005ec:	887b      	ldrh	r3, [r7, #2]
  4005ee:	429a      	cmp	r2, r3
  4005f0:	d3f1      	bcc.n	4005d6 <uart_receive+0x1e>
		}
		status = UART_OK;
  4005f2:	2300      	movs	r3, #0
  4005f4:	73fb      	strb	r3, [r7, #15]
  4005f6:	e001      	b.n	4005fc <uart_receive+0x44>
	}
	else
	{
		status = UART_ERROR;
  4005f8:	23ff      	movs	r3, #255	; 0xff
  4005fa:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  4005fc:	7bfb      	ldrb	r3, [r7, #15]
}
  4005fe:	4618      	mov	r0, r3
  400600:	3714      	adds	r7, #20
  400602:	46bd      	mov	sp, r7
  400604:	bc80      	pop	{r7}
  400606:	4770      	bx	lr
  400608:	20000a96 	.word	0x20000a96
  40060c:	20000a98 	.word	0x20000a98

00400610 <UART1_Handler>:

void UART1_Handler(void)
{
  400610:	b580      	push	{r7, lr}
  400612:	af00      	add	r7, sp, #0
    if (usart_get_interrupt_mask(UART1) & US_IER_RXRDY) 
  400614:	4812      	ldr	r0, [pc, #72]	; (400660 <UART1_Handler+0x50>)
  400616:	4b13      	ldr	r3, [pc, #76]	; (400664 <UART1_Handler+0x54>)
  400618:	4798      	blx	r3
  40061a:	4603      	mov	r3, r0
  40061c:	f003 0301 	and.w	r3, r3, #1
  400620:	2b00      	cmp	r3, #0
  400622:	d01a      	beq.n	40065a <UART1_Handler+0x4a>
	{
        usart_getchar(UART1,&Uart_Buffer[Uart_Buffer_Length]); 
  400624:	4b10      	ldr	r3, [pc, #64]	; (400668 <UART1_Handler+0x58>)
  400626:	881b      	ldrh	r3, [r3, #0]
  400628:	461a      	mov	r2, r3
  40062a:	4b10      	ldr	r3, [pc, #64]	; (40066c <UART1_Handler+0x5c>)
  40062c:	4413      	add	r3, r2
  40062e:	4619      	mov	r1, r3
  400630:	480b      	ldr	r0, [pc, #44]	; (400660 <UART1_Handler+0x50>)
  400632:	4b0f      	ldr	r3, [pc, #60]	; (400670 <UART1_Handler+0x60>)
  400634:	4798      	blx	r3
		Uart_Buffer_Length++;
  400636:	4b0c      	ldr	r3, [pc, #48]	; (400668 <UART1_Handler+0x58>)
  400638:	881b      	ldrh	r3, [r3, #0]
  40063a:	3301      	adds	r3, #1
  40063c:	b29a      	uxth	r2, r3
  40063e:	4b0a      	ldr	r3, [pc, #40]	; (400668 <UART1_Handler+0x58>)
  400640:	801a      	strh	r2, [r3, #0]
		if (Uart_Buffer_Length == 1029)
  400642:	4b09      	ldr	r3, [pc, #36]	; (400668 <UART1_Handler+0x58>)
  400644:	881b      	ldrh	r3, [r3, #0]
  400646:	f240 4205 	movw	r2, #1029	; 0x405
  40064a:	4293      	cmp	r3, r2
  40064c:	d105      	bne.n	40065a <UART1_Handler+0x4a>
		{
			Uart_Packet_Received_Flag = 1;
  40064e:	4b09      	ldr	r3, [pc, #36]	; (400674 <UART1_Handler+0x64>)
  400650:	2201      	movs	r2, #1
  400652:	701a      	strb	r2, [r3, #0]
			Uart_Buffer_Length = 0;
  400654:	4b04      	ldr	r3, [pc, #16]	; (400668 <UART1_Handler+0x58>)
  400656:	2200      	movs	r2, #0
  400658:	801a      	strh	r2, [r3, #0]
		}
    }
}
  40065a:	bf00      	nop
  40065c:	bd80      	pop	{r7, pc}
  40065e:	bf00      	nop
  400660:	400e0800 	.word	0x400e0800
  400664:	00401ec7 	.word	0x00401ec7
  400668:	20000a96 	.word	0x20000a96
  40066c:	20000a98 	.word	0x20000a98
  400670:	00401f8d 	.word	0x00401f8d
  400674:	20000a94 	.word	0x20000a94

00400678 <osc_get_rate>:
{
  400678:	b480      	push	{r7}
  40067a:	b083      	sub	sp, #12
  40067c:	af00      	add	r7, sp, #0
  40067e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400680:	687b      	ldr	r3, [r7, #4]
  400682:	2b07      	cmp	r3, #7
  400684:	d825      	bhi.n	4006d2 <osc_get_rate+0x5a>
  400686:	a201      	add	r2, pc, #4	; (adr r2, 40068c <osc_get_rate+0x14>)
  400688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40068c:	004006ad 	.word	0x004006ad
  400690:	004006b3 	.word	0x004006b3
  400694:	004006b9 	.word	0x004006b9
  400698:	004006bf 	.word	0x004006bf
  40069c:	004006c3 	.word	0x004006c3
  4006a0:	004006c7 	.word	0x004006c7
  4006a4:	004006cb 	.word	0x004006cb
  4006a8:	004006cf 	.word	0x004006cf
		return OSC_SLCK_32K_RC_HZ;
  4006ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4006b0:	e010      	b.n	4006d4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4006b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006b6:	e00d      	b.n	4006d4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4006b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006bc:	e00a      	b.n	4006d4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4006be:	4b08      	ldr	r3, [pc, #32]	; (4006e0 <osc_get_rate+0x68>)
  4006c0:	e008      	b.n	4006d4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4006c2:	4b08      	ldr	r3, [pc, #32]	; (4006e4 <osc_get_rate+0x6c>)
  4006c4:	e006      	b.n	4006d4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4006c6:	4b08      	ldr	r3, [pc, #32]	; (4006e8 <osc_get_rate+0x70>)
  4006c8:	e004      	b.n	4006d4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4006ca:	4b07      	ldr	r3, [pc, #28]	; (4006e8 <osc_get_rate+0x70>)
  4006cc:	e002      	b.n	4006d4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4006ce:	4b06      	ldr	r3, [pc, #24]	; (4006e8 <osc_get_rate+0x70>)
  4006d0:	e000      	b.n	4006d4 <osc_get_rate+0x5c>
	return 0;
  4006d2:	2300      	movs	r3, #0
}
  4006d4:	4618      	mov	r0, r3
  4006d6:	370c      	adds	r7, #12
  4006d8:	46bd      	mov	sp, r7
  4006da:	bc80      	pop	{r7}
  4006dc:	4770      	bx	lr
  4006de:	bf00      	nop
  4006e0:	003d0900 	.word	0x003d0900
  4006e4:	007a1200 	.word	0x007a1200
  4006e8:	00b71b00 	.word	0x00b71b00

004006ec <sysclk_get_main_hz>:
{
  4006ec:	b580      	push	{r7, lr}
  4006ee:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4006f0:	2006      	movs	r0, #6
  4006f2:	4b04      	ldr	r3, [pc, #16]	; (400704 <sysclk_get_main_hz+0x18>)
  4006f4:	4798      	blx	r3
  4006f6:	4602      	mov	r2, r0
  4006f8:	4613      	mov	r3, r2
  4006fa:	009b      	lsls	r3, r3, #2
  4006fc:	4413      	add	r3, r2
  4006fe:	009b      	lsls	r3, r3, #2
}
  400700:	4618      	mov	r0, r3
  400702:	bd80      	pop	{r7, pc}
  400704:	00400679 	.word	0x00400679

00400708 <sysclk_get_cpu_hz>:
{
  400708:	b580      	push	{r7, lr}
  40070a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40070c:	4b02      	ldr	r3, [pc, #8]	; (400718 <sysclk_get_cpu_hz+0x10>)
  40070e:	4798      	blx	r3
  400710:	4603      	mov	r3, r0
  400712:	085b      	lsrs	r3, r3, #1
}
  400714:	4618      	mov	r0, r3
  400716:	bd80      	pop	{r7, pc}
  400718:	004006ed 	.word	0x004006ed

0040071c <xmodem_receive>:
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void xmodem_receive(void)
{
  40071c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  400720:	b082      	sub	sp, #8
  400722:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
  400724:	2300      	movs	r3, #0
  400726:	713b      	strb	r3, [r7, #4]
    uint8_t error_number = 0u;
  400728:	2300      	movs	r3, #0
  40072a:	70fb      	strb	r3, [r7, #3]

    x_first_packet_received = false;
  40072c:	4b73      	ldr	r3, [pc, #460]	; (4008fc <xmodem_receive+0x1e0>)
  40072e:	2200      	movs	r2, #0
  400730:	701a      	strb	r2, [r3, #0]
    xmodem_packet_number = 1u;
  400732:	4b73      	ldr	r3, [pc, #460]	; (400900 <xmodem_receive+0x1e4>)
  400734:	2201      	movs	r2, #1
  400736:	701a      	strb	r2, [r3, #0]
    //xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;

    /* Loop until there isn't any error (or until we jump to the user application). */
    while (X_OK == status)
  400738:	e0d6      	b.n	4008e8 <xmodem_receive+0x1cc>
    {
        uint8_t header = 0x00u;
  40073a:	2300      	movs	r3, #0
  40073c:	70bb      	strb	r3, [r7, #2]

        /* Get the header from UART. */
        uart_status comm_status = uart_receive(&header, 1u);
  40073e:	1cbb      	adds	r3, r7, #2
  400740:	2101      	movs	r1, #1
  400742:	4618      	mov	r0, r3
  400744:	4b6f      	ldr	r3, [pc, #444]	; (400904 <xmodem_receive+0x1e8>)
  400746:	4798      	blx	r3
  400748:	4603      	mov	r3, r0
  40074a:	717b      	strb	r3, [r7, #5]

        /* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
        if ((UART_OK != comm_status) && (false == x_first_packet_received))
  40074c:	797b      	ldrb	r3, [r7, #5]
  40074e:	2b00      	cmp	r3, #0
  400750:	d03b      	beq.n	4007ca <xmodem_receive+0xae>
  400752:	4b6a      	ldr	r3, [pc, #424]	; (4008fc <xmodem_receive+0x1e0>)
  400754:	781b      	ldrb	r3, [r3, #0]
  400756:	2b00      	cmp	r3, #0
  400758:	d137      	bne.n	4007ca <xmodem_receive+0xae>
        {
            for(uint8_t i = 0; i < 5; i++)
  40075a:	2300      	movs	r3, #0
  40075c:	71fb      	strb	r3, [r7, #7]
  40075e:	e030      	b.n	4007c2 <xmodem_receive+0xa6>
            {
                (void)uart_transmit_ch(X_C);
  400760:	2043      	movs	r0, #67	; 0x43
  400762:	4b69      	ldr	r3, [pc, #420]	; (400908 <xmodem_receive+0x1ec>)
  400764:	4798      	blx	r3
                delay_ms(10);
  400766:	4b69      	ldr	r3, [pc, #420]	; (40090c <xmodem_receive+0x1f0>)
  400768:	4798      	blx	r3
  40076a:	4603      	mov	r3, r0
  40076c:	4619      	mov	r1, r3
  40076e:	f04f 0200 	mov.w	r2, #0
  400772:	460b      	mov	r3, r1
  400774:	4614      	mov	r4, r2
  400776:	00a6      	lsls	r6, r4, #2
  400778:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40077c:	009d      	lsls	r5, r3, #2
  40077e:	462b      	mov	r3, r5
  400780:	4634      	mov	r4, r6
  400782:	185b      	adds	r3, r3, r1
  400784:	eb44 0402 	adc.w	r4, r4, r2
  400788:	18db      	adds	r3, r3, r3
  40078a:	eb44 0404 	adc.w	r4, r4, r4
  40078e:	4619      	mov	r1, r3
  400790:	4622      	mov	r2, r4
  400792:	f243 63af 	movw	r3, #13999	; 0x36af
  400796:	f04f 0400 	mov.w	r4, #0
  40079a:	eb11 0b03 	adds.w	fp, r1, r3
  40079e:	eb42 0c04 	adc.w	ip, r2, r4
  4007a2:	4658      	mov	r0, fp
  4007a4:	4661      	mov	r1, ip
  4007a6:	4c5a      	ldr	r4, [pc, #360]	; (400910 <xmodem_receive+0x1f4>)
  4007a8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4007ac:	f04f 0300 	mov.w	r3, #0
  4007b0:	47a0      	blx	r4
  4007b2:	4603      	mov	r3, r0
  4007b4:	460c      	mov	r4, r1
  4007b6:	4618      	mov	r0, r3
  4007b8:	4b56      	ldr	r3, [pc, #344]	; (400914 <xmodem_receive+0x1f8>)
  4007ba:	4798      	blx	r3
            for(uint8_t i = 0; i < 5; i++)
  4007bc:	79fb      	ldrb	r3, [r7, #7]
  4007be:	3301      	adds	r3, #1
  4007c0:	71fb      	strb	r3, [r7, #7]
  4007c2:	79fb      	ldrb	r3, [r7, #7]
  4007c4:	2b04      	cmp	r3, #4
  4007c6:	d9cb      	bls.n	400760 <xmodem_receive+0x44>
  4007c8:	e00d      	b.n	4007e6 <xmodem_receive+0xca>
            }
        }
        /* Uart timeout or any other errors. */
        else if ((UART_OK != comm_status) && (true == x_first_packet_received))
  4007ca:	797b      	ldrb	r3, [r7, #5]
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d00a      	beq.n	4007e6 <xmodem_receive+0xca>
  4007d0:	4b4a      	ldr	r3, [pc, #296]	; (4008fc <xmodem_receive+0x1e0>)
  4007d2:	781b      	ldrb	r3, [r3, #0]
  4007d4:	2b01      	cmp	r3, #1
  4007d6:	d106      	bne.n	4007e6 <xmodem_receive+0xca>
        {
            status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  4007d8:	1cfb      	adds	r3, r7, #3
  4007da:	2103      	movs	r1, #3
  4007dc:	4618      	mov	r0, r3
  4007de:	4b4e      	ldr	r3, [pc, #312]	; (400918 <xmodem_receive+0x1fc>)
  4007e0:	4798      	blx	r3
  4007e2:	4603      	mov	r3, r0
  4007e4:	713b      	strb	r3, [r7, #4]
        {
            /* Do nothing. */
        }

        /* The header can be: SOH, STX, EOT and CAN. */
        switch(header)
  4007e6:	78bb      	ldrb	r3, [r7, #2]
  4007e8:	3b01      	subs	r3, #1
  4007ea:	2b17      	cmp	r3, #23
  4007ec:	d86e      	bhi.n	4008cc <xmodem_receive+0x1b0>
  4007ee:	a201      	add	r2, pc, #4	; (adr r2, 4007f4 <xmodem_receive+0xd8>)
  4007f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4007f4:	00400855 	.word	0x00400855
  4007f8:	00400855 	.word	0x00400855
  4007fc:	004008cd 	.word	0x004008cd
  400800:	004008a7 	.word	0x004008a7
  400804:	004008cd 	.word	0x004008cd
  400808:	004008cd 	.word	0x004008cd
  40080c:	004008cd 	.word	0x004008cd
  400810:	004008cd 	.word	0x004008cd
  400814:	004008cd 	.word	0x004008cd
  400818:	004008cd 	.word	0x004008cd
  40081c:	004008cd 	.word	0x004008cd
  400820:	004008cd 	.word	0x004008cd
  400824:	004008cd 	.word	0x004008cd
  400828:	004008cd 	.word	0x004008cd
  40082c:	004008cd 	.word	0x004008cd
  400830:	004008cd 	.word	0x004008cd
  400834:	004008cd 	.word	0x004008cd
  400838:	004008cd 	.word	0x004008cd
  40083c:	004008cd 	.word	0x004008cd
  400840:	004008cd 	.word	0x004008cd
  400844:	004008cd 	.word	0x004008cd
  400848:	004008cd 	.word	0x004008cd
  40084c:	004008cd 	.word	0x004008cd
  400850:	004008c1 	.word	0x004008c1
        {
            xmodem_status packet_status = X_ERROR;
            /* 128 or 1024 bytes of data. */
            case X_SOH:
            case X_STX:
                printf("X_STX\r\n");
  400854:	4831      	ldr	r0, [pc, #196]	; (40091c <xmodem_receive+0x200>)
  400856:	4b32      	ldr	r3, [pc, #200]	; (400920 <xmodem_receive+0x204>)
  400858:	4798      	blx	r3
                /* If the handling was successful, then send an ACK. */
                if(Uart_Packet_Received_Flag == 1)
  40085a:	4b32      	ldr	r3, [pc, #200]	; (400924 <xmodem_receive+0x208>)
  40085c:	781b      	ldrb	r3, [r3, #0]
  40085e:	2b01      	cmp	r3, #1
  400860:	d10c      	bne.n	40087c <xmodem_receive+0x160>
                {
                    packet_status = xmodem_handle_packet(header);
  400862:	78bb      	ldrb	r3, [r7, #2]
  400864:	4618      	mov	r0, r3
  400866:	4b30      	ldr	r3, [pc, #192]	; (400928 <xmodem_receive+0x20c>)
  400868:	4798      	blx	r3
  40086a:	4603      	mov	r3, r0
  40086c:	71bb      	strb	r3, [r7, #6]
                    if (X_OK == packet_status)
  40086e:	79bb      	ldrb	r3, [r7, #6]
  400870:	2b00      	cmp	r3, #0
  400872:	d136      	bne.n	4008e2 <xmodem_receive+0x1c6>
                    {
                        (void)uart_transmit_ch(X_ACK);
  400874:	2006      	movs	r0, #6
  400876:	4b24      	ldr	r3, [pc, #144]	; (400908 <xmodem_receive+0x1ec>)
  400878:	4798      	blx	r3
                /* Error while processing the packet, either send a NAK or do graceful abort. */
                else
                {
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
                }
            break;
  40087a:	e032      	b.n	4008e2 <xmodem_receive+0x1c6>
                else if (X_ERROR_FLASH == packet_status)
  40087c:	79bb      	ldrb	r3, [r7, #6]
  40087e:	2b08      	cmp	r3, #8
  400880:	d109      	bne.n	400896 <xmodem_receive+0x17a>
                    error_number = X_MAX_ERRORS;
  400882:	2303      	movs	r3, #3
  400884:	70fb      	strb	r3, [r7, #3]
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  400886:	1cfb      	adds	r3, r7, #3
  400888:	2103      	movs	r1, #3
  40088a:	4618      	mov	r0, r3
  40088c:	4b22      	ldr	r3, [pc, #136]	; (400918 <xmodem_receive+0x1fc>)
  40088e:	4798      	blx	r3
  400890:	4603      	mov	r3, r0
  400892:	713b      	strb	r3, [r7, #4]
            break;
  400894:	e025      	b.n	4008e2 <xmodem_receive+0x1c6>
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  400896:	1cfb      	adds	r3, r7, #3
  400898:	2103      	movs	r1, #3
  40089a:	4618      	mov	r0, r3
  40089c:	4b1e      	ldr	r3, [pc, #120]	; (400918 <xmodem_receive+0x1fc>)
  40089e:	4798      	blx	r3
  4008a0:	4603      	mov	r3, r0
  4008a2:	713b      	strb	r3, [r7, #4]
            break;
  4008a4:	e01d      	b.n	4008e2 <xmodem_receive+0x1c6>
            /* End of Transmission. */
            case X_EOT:
                printf("X_EOT\r\n");
  4008a6:	4821      	ldr	r0, [pc, #132]	; (40092c <xmodem_receive+0x210>)
  4008a8:	4b1d      	ldr	r3, [pc, #116]	; (400920 <xmodem_receive+0x204>)
  4008aa:	4798      	blx	r3
                /* ACK, feedback to user (as a text), then jump to user application. */
                (void)uart_transmit_ch(X_ACK);
  4008ac:	2006      	movs	r0, #6
  4008ae:	4b16      	ldr	r3, [pc, #88]	; (400908 <xmodem_receive+0x1ec>)
  4008b0:	4798      	blx	r3
                (void)uart_transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
  4008b2:	481f      	ldr	r0, [pc, #124]	; (400930 <xmodem_receive+0x214>)
  4008b4:	4b1f      	ldr	r3, [pc, #124]	; (400934 <xmodem_receive+0x218>)
  4008b6:	4798      	blx	r3
                (void)uart_transmit_str((uint8_t*)"Jumping to user application...\n\r");
  4008b8:	481f      	ldr	r0, [pc, #124]	; (400938 <xmodem_receive+0x21c>)
  4008ba:	4b1e      	ldr	r3, [pc, #120]	; (400934 <xmodem_receive+0x218>)
  4008bc:	4798      	blx	r3
                //flash_jump_to_app();
            break;
  4008be:	e013      	b.n	4008e8 <xmodem_receive+0x1cc>
            /* Abort from host. */
            case X_CAN:
                printf("X_CAN\r\n");
  4008c0:	481e      	ldr	r0, [pc, #120]	; (40093c <xmodem_receive+0x220>)
  4008c2:	4b17      	ldr	r3, [pc, #92]	; (400920 <xmodem_receive+0x204>)
  4008c4:	4798      	blx	r3
                status = X_ERROR;
  4008c6:	23ff      	movs	r3, #255	; 0xff
  4008c8:	713b      	strb	r3, [r7, #4]
            break;
  4008ca:	e00d      	b.n	4008e8 <xmodem_receive+0x1cc>
            default:
                /* Wrong header. */
                if (UART_OK == comm_status)
  4008cc:	797b      	ldrb	r3, [r7, #5]
  4008ce:	2b00      	cmp	r3, #0
  4008d0:	d109      	bne.n	4008e6 <xmodem_receive+0x1ca>
                {
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  4008d2:	1cfb      	adds	r3, r7, #3
  4008d4:	2103      	movs	r1, #3
  4008d6:	4618      	mov	r0, r3
  4008d8:	4b0f      	ldr	r3, [pc, #60]	; (400918 <xmodem_receive+0x1fc>)
  4008da:	4798      	blx	r3
  4008dc:	4603      	mov	r3, r0
  4008de:	713b      	strb	r3, [r7, #4]
                }
            break;
  4008e0:	e001      	b.n	4008e6 <xmodem_receive+0x1ca>
            break;
  4008e2:	bf00      	nop
  4008e4:	e000      	b.n	4008e8 <xmodem_receive+0x1cc>
            break;
  4008e6:	bf00      	nop
    while (X_OK == status)
  4008e8:	793b      	ldrb	r3, [r7, #4]
  4008ea:	b2db      	uxtb	r3, r3
  4008ec:	2b00      	cmp	r3, #0
  4008ee:	f43f af24 	beq.w	40073a <xmodem_receive+0x1e>
        }
    }
}
  4008f2:	bf00      	nop
  4008f4:	3708      	adds	r7, #8
  4008f6:	46bd      	mov	sp, r7
  4008f8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  4008fc:	200009e0 	.word	0x200009e0
  400900:	2000000a 	.word	0x2000000a
  400904:	004005b9 	.word	0x004005b9
  400908:	00400531 	.word	0x00400531
  40090c:	00400709 	.word	0x00400709
  400910:	00402431 	.word	0x00402431
  400914:	20000001 	.word	0x20000001
  400918:	00400b65 	.word	0x00400b65
  40091c:	004053cc 	.word	0x004053cc
  400920:	00402791 	.word	0x00402791
  400924:	20000a94 	.word	0x20000a94
  400928:	004009b5 	.word	0x004009b5
  40092c:	004053d4 	.word	0x004053d4
  400930:	004053dc 	.word	0x004053dc
  400934:	00400565 	.word	0x00400565
  400938:	004053f4 	.word	0x004053f4
  40093c:	00405418 	.word	0x00405418

00400940 <xmodem_calc_crc>:

static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
  400940:	b480      	push	{r7}
  400942:	b085      	sub	sp, #20
  400944:	af00      	add	r7, sp, #0
  400946:	6078      	str	r0, [r7, #4]
  400948:	460b      	mov	r3, r1
  40094a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
  40094c:	2300      	movs	r3, #0
  40094e:	81fb      	strh	r3, [r7, #14]
    while (length)
  400950:	e026      	b.n	4009a0 <xmodem_calc_crc+0x60>
    {
        length--;
  400952:	887b      	ldrh	r3, [r7, #2]
  400954:	3b01      	subs	r3, #1
  400956:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
  400958:	687b      	ldr	r3, [r7, #4]
  40095a:	1c5a      	adds	r2, r3, #1
  40095c:	607a      	str	r2, [r7, #4]
  40095e:	781b      	ldrb	r3, [r3, #0]
  400960:	021b      	lsls	r3, r3, #8
  400962:	b21a      	sxth	r2, r3
  400964:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  400968:	4053      	eors	r3, r2
  40096a:	b21b      	sxth	r3, r3
  40096c:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
  40096e:	2300      	movs	r3, #0
  400970:	737b      	strb	r3, [r7, #13]
  400972:	e012      	b.n	40099a <xmodem_calc_crc+0x5a>
        {
            if (crc & 0x8000u)
  400974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  400978:	2b00      	cmp	r3, #0
  40097a:	da08      	bge.n	40098e <xmodem_calc_crc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
  40097c:	89fb      	ldrh	r3, [r7, #14]
  40097e:	005b      	lsls	r3, r3, #1
  400980:	b29b      	uxth	r3, r3
  400982:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
  400986:	f083 0301 	eor.w	r3, r3, #1
  40098a:	81fb      	strh	r3, [r7, #14]
  40098c:	e002      	b.n	400994 <xmodem_calc_crc+0x54>
            }
            else
            {
                crc = crc << 1u;
  40098e:	89fb      	ldrh	r3, [r7, #14]
  400990:	005b      	lsls	r3, r3, #1
  400992:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
  400994:	7b7b      	ldrb	r3, [r7, #13]
  400996:	3301      	adds	r3, #1
  400998:	737b      	strb	r3, [r7, #13]
  40099a:	7b7b      	ldrb	r3, [r7, #13]
  40099c:	2b07      	cmp	r3, #7
  40099e:	d9e9      	bls.n	400974 <xmodem_calc_crc+0x34>
    while (length)
  4009a0:	887b      	ldrh	r3, [r7, #2]
  4009a2:	2b00      	cmp	r3, #0
  4009a4:	d1d5      	bne.n	400952 <xmodem_calc_crc+0x12>
            }
        }
    }
    return crc;
  4009a6:	89fb      	ldrh	r3, [r7, #14]
}
  4009a8:	4618      	mov	r0, r3
  4009aa:	3714      	adds	r7, #20
  4009ac:	46bd      	mov	sp, r7
  4009ae:	bc80      	pop	{r7}
  4009b0:	4770      	bx	lr
	...

004009b4 <xmodem_handle_packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header)
{
  4009b4:	b580      	push	{r7, lr}
  4009b6:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
  4009ba:	af00      	add	r7, sp, #0
  4009bc:	4602      	mov	r2, r0
  4009be:	1dfb      	adds	r3, r7, #7
  4009c0:	701a      	strb	r2, [r3, #0]
    xmodem_status status = X_OK;
  4009c2:	2300      	movs	r3, #0
  4009c4:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    uint16_t size = 0u;
  4009c8:	2300      	movs	r3, #0
  4009ca:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
    uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
    uint8_t received_packet_data[X_PACKET_1024_SIZE];
    uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

    /* Get the size of the data. */
    if (X_SOH == header)
  4009ce:	1dfb      	adds	r3, r7, #7
  4009d0:	781b      	ldrb	r3, [r3, #0]
  4009d2:	2b01      	cmp	r3, #1
  4009d4:	d103      	bne.n	4009de <xmodem_handle_packet+0x2a>
    {
        size = X_PACKET_128_SIZE;
  4009d6:	2380      	movs	r3, #128	; 0x80
  4009d8:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  4009dc:	e00b      	b.n	4009f6 <xmodem_handle_packet+0x42>
    }
    else if (X_STX == header)
  4009de:	1dfb      	adds	r3, r7, #7
  4009e0:	781b      	ldrb	r3, [r3, #0]
  4009e2:	2b02      	cmp	r3, #2
  4009e4:	d104      	bne.n	4009f0 <xmodem_handle_packet+0x3c>
    {
        size = X_PACKET_1024_SIZE;
  4009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4009ea:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  4009ee:	e002      	b.n	4009f6 <xmodem_handle_packet+0x42>
    }
    else
    {
        /* Wrong header type. This shoudn't be possible... */
        status |= X_ERROR;
  4009f0:	23ff      	movs	r3, #255	; 0xff
  4009f2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    uart_status comm_status = UART_OK;
  4009f6:	2300      	movs	r3, #0
  4009f8:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    /* Get the packet number, data and CRC from UART. */
    comm_status |= uart_receive(&received_packet_number[0u], X_PACKET_NUMBER_SIZE);
  4009fc:	f207 430c 	addw	r3, r7, #1036	; 0x40c
  400a00:	2102      	movs	r1, #2
  400a02:	4618      	mov	r0, r3
  400a04:	4b4e      	ldr	r3, [pc, #312]	; (400b40 <xmodem_handle_packet+0x18c>)
  400a06:	4798      	blx	r3
  400a08:	4603      	mov	r3, r0
  400a0a:	461a      	mov	r2, r3
  400a0c:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400a10:	4313      	orrs	r3, r2
  400a12:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    comm_status |= uart_receive(&received_packet_data[0u], size);
  400a16:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  400a1a:	f107 030c 	add.w	r3, r7, #12
  400a1e:	4611      	mov	r1, r2
  400a20:	4618      	mov	r0, r3
  400a22:	4b47      	ldr	r3, [pc, #284]	; (400b40 <xmodem_handle_packet+0x18c>)
  400a24:	4798      	blx	r3
  400a26:	4603      	mov	r3, r0
  400a28:	461a      	mov	r2, r3
  400a2a:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400a2e:	4313      	orrs	r3, r2
  400a30:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    comm_status |= uart_receive(&received_packet_crc[0u], X_PACKET_CRC_SIZE);
  400a34:	f107 0308 	add.w	r3, r7, #8
  400a38:	2102      	movs	r1, #2
  400a3a:	4618      	mov	r0, r3
  400a3c:	4b40      	ldr	r3, [pc, #256]	; (400b40 <xmodem_handle_packet+0x18c>)
  400a3e:	4798      	blx	r3
  400a40:	4603      	mov	r3, r0
  400a42:	461a      	mov	r2, r3
  400a44:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400a48:	4313      	orrs	r3, r2
  400a4a:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    /* Merge the two bytes of CRC. */
    uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
  400a4e:	f107 0308 	add.w	r3, r7, #8
  400a52:	781b      	ldrb	r3, [r3, #0]
  400a54:	021b      	lsls	r3, r3, #8
  400a56:	b21a      	sxth	r2, r3
  400a58:	f107 0308 	add.w	r3, r7, #8
  400a5c:	785b      	ldrb	r3, [r3, #1]
  400a5e:	b21b      	sxth	r3, r3
  400a60:	4313      	orrs	r3, r2
  400a62:	b21b      	sxth	r3, r3
  400a64:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
    /* We calculate it too. */
    uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
  400a68:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  400a6c:	f107 030c 	add.w	r3, r7, #12
  400a70:	4611      	mov	r1, r2
  400a72:	4618      	mov	r0, r3
  400a74:	4b33      	ldr	r3, [pc, #204]	; (400b44 <xmodem_handle_packet+0x190>)
  400a76:	4798      	blx	r3
  400a78:	4603      	mov	r3, r0
  400a7a:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    //Uart_Buffer_Length = 0;
    Uart_Packet_Received_Flag = 0;
  400a7e:	4b32      	ldr	r3, [pc, #200]	; (400b48 <xmodem_handle_packet+0x194>)
  400a80:	2200      	movs	r2, #0
  400a82:	701a      	strb	r2, [r3, #0]
    printf("packet num :%d\r\n",Uart_Buffer[1]);
  400a84:	4b31      	ldr	r3, [pc, #196]	; (400b4c <xmodem_handle_packet+0x198>)
  400a86:	785b      	ldrb	r3, [r3, #1]
  400a88:	4619      	mov	r1, r3
  400a8a:	4831      	ldr	r0, [pc, #196]	; (400b50 <xmodem_handle_packet+0x19c>)
  400a8c:	4b31      	ldr	r3, [pc, #196]	; (400b54 <xmodem_handle_packet+0x1a0>)
  400a8e:	4798      	blx	r3
    /* Communication error. */
    if (UART_OK != comm_status)
  400a90:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400a94:	2b00      	cmp	r3, #0
  400a96:	d005      	beq.n	400aa4 <xmodem_handle_packet+0xf0>
    {
        status |= X_ERROR_UART;
  400a98:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400a9c:	f043 0304 	orr.w	r3, r3, #4
  400aa0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    /* If it is the first packet, then erase the memory. */
    if ((X_OK == status) && (false == x_first_packet_received))
  400aa4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400aa8:	2b00      	cmp	r3, #0
  400aaa:	d106      	bne.n	400aba <xmodem_handle_packet+0x106>
  400aac:	4b2a      	ldr	r3, [pc, #168]	; (400b58 <xmodem_handle_packet+0x1a4>)
  400aae:	781b      	ldrb	r3, [r3, #0]
  400ab0:	2b00      	cmp	r3, #0
  400ab2:	d102      	bne.n	400aba <xmodem_handle_packet+0x106>
    {
        if (1)//(FLASH_OK == flash_erase(FLASH_APP_START_ADDRESS))
        {
            x_first_packet_received = true;
  400ab4:	4b28      	ldr	r3, [pc, #160]	; (400b58 <xmodem_handle_packet+0x1a4>)
  400ab6:	2201      	movs	r2, #1
  400ab8:	701a      	strb	r2, [r3, #0]
            status |= X_ERROR_FLASH;
        }
    }

    /* Error handling and flashing. */
    if (X_OK == status)
  400aba:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400abe:	2b00      	cmp	r3, #0
  400ac0:	d125      	bne.n	400b0e <xmodem_handle_packet+0x15a>
    {
        if (xmodem_packet_number != received_packet_number[0u])
  400ac2:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
  400ac6:	4b25      	ldr	r3, [pc, #148]	; (400b5c <xmodem_handle_packet+0x1a8>)
  400ac8:	781b      	ldrb	r3, [r3, #0]
  400aca:	429a      	cmp	r2, r3
  400acc:	d005      	beq.n	400ada <xmodem_handle_packet+0x126>
        {
            /* Packet number counter mismatch. */
            status |= X_ERROR_NUMBER;
  400ace:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400ad2:	f043 0302 	orr.w	r3, r3, #2
  400ad6:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
        if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
  400ada:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
  400ade:	461a      	mov	r2, r3
  400ae0:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
  400ae4:	4413      	add	r3, r2
  400ae6:	2bff      	cmp	r3, #255	; 0xff
  400ae8:	d005      	beq.n	400af6 <xmodem_handle_packet+0x142>
        {
            /* The sum of the packet number and packet number complement aren't 255. */
            /* The sum always has to be 255. */
            status |= X_ERROR_NUMBER;
  400aea:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400aee:	f043 0302 	orr.w	r3, r3, #2
  400af2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
        if (crc_calculated != crc_received)
  400af6:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
  400afa:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
  400afe:	429a      	cmp	r2, r3
  400b00:	d005      	beq.n	400b0e <xmodem_handle_packet+0x15a>
        {
            /* The calculated and received CRC are different. */
            status |= X_ERROR_CRC;
  400b02:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400b06:	f043 0301 	orr.w	r3, r3, #1
  400b0a:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
            /* Flashing error. */
            status |= X_ERROR_FLASH;
        }

    /* Raise the packet number and the address counters (if there weren't any errors). */
    if (X_OK == status)
  400b0e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400b12:	2b00      	cmp	r3, #0
  400b14:	d10c      	bne.n	400b30 <xmodem_handle_packet+0x17c>
    {
        xmodem_packet_number++;
  400b16:	4b11      	ldr	r3, [pc, #68]	; (400b5c <xmodem_handle_packet+0x1a8>)
  400b18:	781b      	ldrb	r3, [r3, #0]
  400b1a:	3301      	adds	r3, #1
  400b1c:	b2da      	uxtb	r2, r3
  400b1e:	4b0f      	ldr	r3, [pc, #60]	; (400b5c <xmodem_handle_packet+0x1a8>)
  400b20:	701a      	strb	r2, [r3, #0]
        xmodem_actual_flash_address += size;
  400b22:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  400b26:	4b0e      	ldr	r3, [pc, #56]	; (400b60 <xmodem_handle_packet+0x1ac>)
  400b28:	681b      	ldr	r3, [r3, #0]
  400b2a:	4413      	add	r3, r2
  400b2c:	4a0c      	ldr	r2, [pc, #48]	; (400b60 <xmodem_handle_packet+0x1ac>)
  400b2e:	6013      	str	r3, [r2, #0]
    }

    return status;
  400b30:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
  400b34:	4618      	mov	r0, r3
  400b36:	f507 6783 	add.w	r7, r7, #1048	; 0x418
  400b3a:	46bd      	mov	sp, r7
  400b3c:	bd80      	pop	{r7, pc}
  400b3e:	bf00      	nop
  400b40:	004005b9 	.word	0x004005b9
  400b44:	00400941 	.word	0x00400941
  400b48:	20000a94 	.word	0x20000a94
  400b4c:	20000a98 	.word	0x20000a98
  400b50:	00405420 	.word	0x00405420
  400b54:	00402791 	.word	0x00402791
  400b58:	200009e0 	.word	0x200009e0
  400b5c:	2000000a 	.word	0x2000000a
  400b60:	200009dc 	.word	0x200009dc

00400b64 <xmodem_error_handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number)
{
  400b64:	b580      	push	{r7, lr}
  400b66:	b084      	sub	sp, #16
  400b68:	af00      	add	r7, sp, #0
  400b6a:	6078      	str	r0, [r7, #4]
  400b6c:	460b      	mov	r3, r1
  400b6e:	70fb      	strb	r3, [r7, #3]
    xmodem_status status = X_OK;
  400b70:	2300      	movs	r3, #0
  400b72:	73fb      	strb	r3, [r7, #15]
    /* Raise the error counter. */
    (*error_number)++;
  400b74:	687b      	ldr	r3, [r7, #4]
  400b76:	781b      	ldrb	r3, [r3, #0]
  400b78:	3301      	adds	r3, #1
  400b7a:	b2da      	uxtb	r2, r3
  400b7c:	687b      	ldr	r3, [r7, #4]
  400b7e:	701a      	strb	r2, [r3, #0]
    /* If the counter reached the max value, then abort. */
    if ((*error_number) >= max_error_number)
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	781b      	ldrb	r3, [r3, #0]
  400b84:	78fa      	ldrb	r2, [r7, #3]
  400b86:	429a      	cmp	r2, r3
  400b88:	d808      	bhi.n	400b9c <xmodem_error_handler+0x38>
    {
        /* Graceful abort. */
        (void)uart_transmit_ch(X_CAN);
  400b8a:	2018      	movs	r0, #24
  400b8c:	4b08      	ldr	r3, [pc, #32]	; (400bb0 <xmodem_error_handler+0x4c>)
  400b8e:	4798      	blx	r3
        (void)uart_transmit_ch(X_CAN);
  400b90:	2018      	movs	r0, #24
  400b92:	4b07      	ldr	r3, [pc, #28]	; (400bb0 <xmodem_error_handler+0x4c>)
  400b94:	4798      	blx	r3
        status = X_ERROR;
  400b96:	23ff      	movs	r3, #255	; 0xff
  400b98:	73fb      	strb	r3, [r7, #15]
  400b9a:	e004      	b.n	400ba6 <xmodem_error_handler+0x42>
    }
    /* Otherwise send a NAK for a repeat. */
    else
    {
        (void)uart_transmit_ch(X_NAK);
  400b9c:	2015      	movs	r0, #21
  400b9e:	4b04      	ldr	r3, [pc, #16]	; (400bb0 <xmodem_error_handler+0x4c>)
  400ba0:	4798      	blx	r3
        status = X_OK;
  400ba2:	2300      	movs	r3, #0
  400ba4:	73fb      	strb	r3, [r7, #15]
    }
    return status;
  400ba6:	7bfb      	ldrb	r3, [r7, #15]
  400ba8:	4618      	mov	r0, r3
  400baa:	3710      	adds	r7, #16
  400bac:	46bd      	mov	sp, r7
  400bae:	bd80      	pop	{r7, pc}
  400bb0:	00400531 	.word	0x00400531

00400bb4 <osc_enable>:
{
  400bb4:	b580      	push	{r7, lr}
  400bb6:	b082      	sub	sp, #8
  400bb8:	af00      	add	r7, sp, #0
  400bba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400bbc:	687b      	ldr	r3, [r7, #4]
  400bbe:	2b07      	cmp	r3, #7
  400bc0:	d831      	bhi.n	400c26 <osc_enable+0x72>
  400bc2:	a201      	add	r2, pc, #4	; (adr r2, 400bc8 <osc_enable+0x14>)
  400bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400bc8:	00400c25 	.word	0x00400c25
  400bcc:	00400be9 	.word	0x00400be9
  400bd0:	00400bf1 	.word	0x00400bf1
  400bd4:	00400bf9 	.word	0x00400bf9
  400bd8:	00400c01 	.word	0x00400c01
  400bdc:	00400c09 	.word	0x00400c09
  400be0:	00400c11 	.word	0x00400c11
  400be4:	00400c1b 	.word	0x00400c1b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400be8:	2000      	movs	r0, #0
  400bea:	4b11      	ldr	r3, [pc, #68]	; (400c30 <osc_enable+0x7c>)
  400bec:	4798      	blx	r3
		break;
  400bee:	e01a      	b.n	400c26 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400bf0:	2001      	movs	r0, #1
  400bf2:	4b0f      	ldr	r3, [pc, #60]	; (400c30 <osc_enable+0x7c>)
  400bf4:	4798      	blx	r3
		break;
  400bf6:	e016      	b.n	400c26 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400bf8:	2000      	movs	r0, #0
  400bfa:	4b0e      	ldr	r3, [pc, #56]	; (400c34 <osc_enable+0x80>)
  400bfc:	4798      	blx	r3
		break;
  400bfe:	e012      	b.n	400c26 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400c00:	2010      	movs	r0, #16
  400c02:	4b0c      	ldr	r3, [pc, #48]	; (400c34 <osc_enable+0x80>)
  400c04:	4798      	blx	r3
		break;
  400c06:	e00e      	b.n	400c26 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400c08:	2020      	movs	r0, #32
  400c0a:	4b0a      	ldr	r3, [pc, #40]	; (400c34 <osc_enable+0x80>)
  400c0c:	4798      	blx	r3
		break;
  400c0e:	e00a      	b.n	400c26 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c10:	213e      	movs	r1, #62	; 0x3e
  400c12:	2000      	movs	r0, #0
  400c14:	4b08      	ldr	r3, [pc, #32]	; (400c38 <osc_enable+0x84>)
  400c16:	4798      	blx	r3
		break;
  400c18:	e005      	b.n	400c26 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400c1a:	213e      	movs	r1, #62	; 0x3e
  400c1c:	2001      	movs	r0, #1
  400c1e:	4b06      	ldr	r3, [pc, #24]	; (400c38 <osc_enable+0x84>)
  400c20:	4798      	blx	r3
		break;
  400c22:	e000      	b.n	400c26 <osc_enable+0x72>
		break;
  400c24:	bf00      	nop
}
  400c26:	bf00      	nop
  400c28:	3708      	adds	r7, #8
  400c2a:	46bd      	mov	sp, r7
  400c2c:	bd80      	pop	{r7, pc}
  400c2e:	bf00      	nop
  400c30:	004019d5 	.word	0x004019d5
  400c34:	00401a41 	.word	0x00401a41
  400c38:	00401ab1 	.word	0x00401ab1

00400c3c <osc_is_ready>:
{
  400c3c:	b580      	push	{r7, lr}
  400c3e:	b082      	sub	sp, #8
  400c40:	af00      	add	r7, sp, #0
  400c42:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c44:	687b      	ldr	r3, [r7, #4]
  400c46:	2b07      	cmp	r3, #7
  400c48:	d826      	bhi.n	400c98 <osc_is_ready+0x5c>
  400c4a:	a201      	add	r2, pc, #4	; (adr r2, 400c50 <osc_is_ready+0x14>)
  400c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c50:	00400c71 	.word	0x00400c71
  400c54:	00400c75 	.word	0x00400c75
  400c58:	00400c75 	.word	0x00400c75
  400c5c:	00400c87 	.word	0x00400c87
  400c60:	00400c87 	.word	0x00400c87
  400c64:	00400c87 	.word	0x00400c87
  400c68:	00400c87 	.word	0x00400c87
  400c6c:	00400c87 	.word	0x00400c87
		return 1;
  400c70:	2301      	movs	r3, #1
  400c72:	e012      	b.n	400c9a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  400c74:	4b0b      	ldr	r3, [pc, #44]	; (400ca4 <osc_is_ready+0x68>)
  400c76:	4798      	blx	r3
  400c78:	4603      	mov	r3, r0
  400c7a:	2b00      	cmp	r3, #0
  400c7c:	bf14      	ite	ne
  400c7e:	2301      	movne	r3, #1
  400c80:	2300      	moveq	r3, #0
  400c82:	b2db      	uxtb	r3, r3
  400c84:	e009      	b.n	400c9a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  400c86:	4b08      	ldr	r3, [pc, #32]	; (400ca8 <osc_is_ready+0x6c>)
  400c88:	4798      	blx	r3
  400c8a:	4603      	mov	r3, r0
  400c8c:	2b00      	cmp	r3, #0
  400c8e:	bf14      	ite	ne
  400c90:	2301      	movne	r3, #1
  400c92:	2300      	moveq	r3, #0
  400c94:	b2db      	uxtb	r3, r3
  400c96:	e000      	b.n	400c9a <osc_is_ready+0x5e>
	return 0;
  400c98:	2300      	movs	r3, #0
}
  400c9a:	4618      	mov	r0, r3
  400c9c:	3708      	adds	r7, #8
  400c9e:	46bd      	mov	sp, r7
  400ca0:	bd80      	pop	{r7, pc}
  400ca2:	bf00      	nop
  400ca4:	00401a0d 	.word	0x00401a0d
  400ca8:	00401b29 	.word	0x00401b29

00400cac <osc_get_rate>:
{
  400cac:	b480      	push	{r7}
  400cae:	b083      	sub	sp, #12
  400cb0:	af00      	add	r7, sp, #0
  400cb2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400cb4:	687b      	ldr	r3, [r7, #4]
  400cb6:	2b07      	cmp	r3, #7
  400cb8:	d825      	bhi.n	400d06 <osc_get_rate+0x5a>
  400cba:	a201      	add	r2, pc, #4	; (adr r2, 400cc0 <osc_get_rate+0x14>)
  400cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cc0:	00400ce1 	.word	0x00400ce1
  400cc4:	00400ce7 	.word	0x00400ce7
  400cc8:	00400ced 	.word	0x00400ced
  400ccc:	00400cf3 	.word	0x00400cf3
  400cd0:	00400cf7 	.word	0x00400cf7
  400cd4:	00400cfb 	.word	0x00400cfb
  400cd8:	00400cff 	.word	0x00400cff
  400cdc:	00400d03 	.word	0x00400d03
		return OSC_SLCK_32K_RC_HZ;
  400ce0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ce4:	e010      	b.n	400d08 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cea:	e00d      	b.n	400d08 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400cec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400cf0:	e00a      	b.n	400d08 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400cf2:	4b08      	ldr	r3, [pc, #32]	; (400d14 <osc_get_rate+0x68>)
  400cf4:	e008      	b.n	400d08 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400cf6:	4b08      	ldr	r3, [pc, #32]	; (400d18 <osc_get_rate+0x6c>)
  400cf8:	e006      	b.n	400d08 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400cfa:	4b08      	ldr	r3, [pc, #32]	; (400d1c <osc_get_rate+0x70>)
  400cfc:	e004      	b.n	400d08 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400cfe:	4b07      	ldr	r3, [pc, #28]	; (400d1c <osc_get_rate+0x70>)
  400d00:	e002      	b.n	400d08 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400d02:	4b06      	ldr	r3, [pc, #24]	; (400d1c <osc_get_rate+0x70>)
  400d04:	e000      	b.n	400d08 <osc_get_rate+0x5c>
	return 0;
  400d06:	2300      	movs	r3, #0
}
  400d08:	4618      	mov	r0, r3
  400d0a:	370c      	adds	r7, #12
  400d0c:	46bd      	mov	sp, r7
  400d0e:	bc80      	pop	{r7}
  400d10:	4770      	bx	lr
  400d12:	bf00      	nop
  400d14:	003d0900 	.word	0x003d0900
  400d18:	007a1200 	.word	0x007a1200
  400d1c:	00b71b00 	.word	0x00b71b00

00400d20 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400d20:	b580      	push	{r7, lr}
  400d22:	b082      	sub	sp, #8
  400d24:	af00      	add	r7, sp, #0
  400d26:	4603      	mov	r3, r0
  400d28:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400d2a:	bf00      	nop
  400d2c:	79fb      	ldrb	r3, [r7, #7]
  400d2e:	4618      	mov	r0, r3
  400d30:	4b05      	ldr	r3, [pc, #20]	; (400d48 <osc_wait_ready+0x28>)
  400d32:	4798      	blx	r3
  400d34:	4603      	mov	r3, r0
  400d36:	f083 0301 	eor.w	r3, r3, #1
  400d3a:	b2db      	uxtb	r3, r3
  400d3c:	2b00      	cmp	r3, #0
  400d3e:	d1f5      	bne.n	400d2c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400d40:	bf00      	nop
  400d42:	3708      	adds	r7, #8
  400d44:	46bd      	mov	sp, r7
  400d46:	bd80      	pop	{r7, pc}
  400d48:	00400c3d 	.word	0x00400c3d

00400d4c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	b086      	sub	sp, #24
  400d50:	af00      	add	r7, sp, #0
  400d52:	60f8      	str	r0, [r7, #12]
  400d54:	607a      	str	r2, [r7, #4]
  400d56:	603b      	str	r3, [r7, #0]
  400d58:	460b      	mov	r3, r1
  400d5a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400d5c:	7afb      	ldrb	r3, [r7, #11]
  400d5e:	4618      	mov	r0, r3
  400d60:	4b0d      	ldr	r3, [pc, #52]	; (400d98 <pll_config_init+0x4c>)
  400d62:	4798      	blx	r3
  400d64:	4602      	mov	r2, r0
  400d66:	687b      	ldr	r3, [r7, #4]
  400d68:	fbb2 f3f3 	udiv	r3, r2, r3
  400d6c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400d6e:	697b      	ldr	r3, [r7, #20]
  400d70:	683a      	ldr	r2, [r7, #0]
  400d72:	fb02 f303 	mul.w	r3, r2, r3
  400d76:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400d78:	683b      	ldr	r3, [r7, #0]
  400d7a:	3b01      	subs	r3, #1
  400d7c:	041a      	lsls	r2, r3, #16
  400d7e:	4b07      	ldr	r3, [pc, #28]	; (400d9c <pll_config_init+0x50>)
  400d80:	4013      	ands	r3, r2
  400d82:	687a      	ldr	r2, [r7, #4]
  400d84:	b2d2      	uxtb	r2, r2
  400d86:	4313      	orrs	r3, r2
  400d88:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400d8c:	68fb      	ldr	r3, [r7, #12]
  400d8e:	601a      	str	r2, [r3, #0]
}
  400d90:	bf00      	nop
  400d92:	3718      	adds	r7, #24
  400d94:	46bd      	mov	sp, r7
  400d96:	bd80      	pop	{r7, pc}
  400d98:	00400cad 	.word	0x00400cad
  400d9c:	07ff0000 	.word	0x07ff0000

00400da0 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400da0:	b580      	push	{r7, lr}
  400da2:	b082      	sub	sp, #8
  400da4:	af00      	add	r7, sp, #0
  400da6:	6078      	str	r0, [r7, #4]
  400da8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400daa:	683b      	ldr	r3, [r7, #0]
  400dac:	2b00      	cmp	r3, #0
  400dae:	d108      	bne.n	400dc2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400db0:	4b09      	ldr	r3, [pc, #36]	; (400dd8 <pll_enable+0x38>)
  400db2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400db4:	4a09      	ldr	r2, [pc, #36]	; (400ddc <pll_enable+0x3c>)
  400db6:	687b      	ldr	r3, [r7, #4]
  400db8:	681b      	ldr	r3, [r3, #0]
  400dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400dbe:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400dc0:	e005      	b.n	400dce <pll_enable+0x2e>
		pmc_disable_pllbck();
  400dc2:	4b07      	ldr	r3, [pc, #28]	; (400de0 <pll_enable+0x40>)
  400dc4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400dc6:	4a05      	ldr	r2, [pc, #20]	; (400ddc <pll_enable+0x3c>)
  400dc8:	687b      	ldr	r3, [r7, #4]
  400dca:	681b      	ldr	r3, [r3, #0]
  400dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400dce:	bf00      	nop
  400dd0:	3708      	adds	r7, #8
  400dd2:	46bd      	mov	sp, r7
  400dd4:	bd80      	pop	{r7, pc}
  400dd6:	bf00      	nop
  400dd8:	00401b41 	.word	0x00401b41
  400ddc:	400e0400 	.word	0x400e0400
  400de0:	00401b71 	.word	0x00401b71

00400de4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400de4:	b580      	push	{r7, lr}
  400de6:	b082      	sub	sp, #8
  400de8:	af00      	add	r7, sp, #0
  400dea:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400dec:	687b      	ldr	r3, [r7, #4]
  400dee:	2b00      	cmp	r3, #0
  400df0:	d103      	bne.n	400dfa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400df2:	4b05      	ldr	r3, [pc, #20]	; (400e08 <pll_is_locked+0x24>)
  400df4:	4798      	blx	r3
  400df6:	4603      	mov	r3, r0
  400df8:	e002      	b.n	400e00 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400dfa:	4b04      	ldr	r3, [pc, #16]	; (400e0c <pll_is_locked+0x28>)
  400dfc:	4798      	blx	r3
  400dfe:	4603      	mov	r3, r0
	}
}
  400e00:	4618      	mov	r0, r3
  400e02:	3708      	adds	r7, #8
  400e04:	46bd      	mov	sp, r7
  400e06:	bd80      	pop	{r7, pc}
  400e08:	00401b59 	.word	0x00401b59
  400e0c:	00401b89 	.word	0x00401b89

00400e10 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400e10:	b580      	push	{r7, lr}
  400e12:	b082      	sub	sp, #8
  400e14:	af00      	add	r7, sp, #0
  400e16:	4603      	mov	r3, r0
  400e18:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400e1a:	79fb      	ldrb	r3, [r7, #7]
  400e1c:	3b03      	subs	r3, #3
  400e1e:	2b04      	cmp	r3, #4
  400e20:	d808      	bhi.n	400e34 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400e22:	79fb      	ldrb	r3, [r7, #7]
  400e24:	4618      	mov	r0, r3
  400e26:	4b06      	ldr	r3, [pc, #24]	; (400e40 <pll_enable_source+0x30>)
  400e28:	4798      	blx	r3
		osc_wait_ready(e_src);
  400e2a:	79fb      	ldrb	r3, [r7, #7]
  400e2c:	4618      	mov	r0, r3
  400e2e:	4b05      	ldr	r3, [pc, #20]	; (400e44 <pll_enable_source+0x34>)
  400e30:	4798      	blx	r3
		break;
  400e32:	e000      	b.n	400e36 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400e34:	bf00      	nop
	}
}
  400e36:	bf00      	nop
  400e38:	3708      	adds	r7, #8
  400e3a:	46bd      	mov	sp, r7
  400e3c:	bd80      	pop	{r7, pc}
  400e3e:	bf00      	nop
  400e40:	00400bb5 	.word	0x00400bb5
  400e44:	00400d21 	.word	0x00400d21

00400e48 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400e48:	b580      	push	{r7, lr}
  400e4a:	b082      	sub	sp, #8
  400e4c:	af00      	add	r7, sp, #0
  400e4e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e50:	bf00      	nop
  400e52:	6878      	ldr	r0, [r7, #4]
  400e54:	4b04      	ldr	r3, [pc, #16]	; (400e68 <pll_wait_for_lock+0x20>)
  400e56:	4798      	blx	r3
  400e58:	4603      	mov	r3, r0
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	d0f9      	beq.n	400e52 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400e5e:	2300      	movs	r3, #0
}
  400e60:	4618      	mov	r0, r3
  400e62:	3708      	adds	r7, #8
  400e64:	46bd      	mov	sp, r7
  400e66:	bd80      	pop	{r7, pc}
  400e68:	00400de5 	.word	0x00400de5

00400e6c <sysclk_get_main_hz>:
{
  400e6c:	b580      	push	{r7, lr}
  400e6e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400e70:	2006      	movs	r0, #6
  400e72:	4b04      	ldr	r3, [pc, #16]	; (400e84 <sysclk_get_main_hz+0x18>)
  400e74:	4798      	blx	r3
  400e76:	4602      	mov	r2, r0
  400e78:	4613      	mov	r3, r2
  400e7a:	009b      	lsls	r3, r3, #2
  400e7c:	4413      	add	r3, r2
  400e7e:	009b      	lsls	r3, r3, #2
}
  400e80:	4618      	mov	r0, r3
  400e82:	bd80      	pop	{r7, pc}
  400e84:	00400cad 	.word	0x00400cad

00400e88 <sysclk_get_cpu_hz>:
{
  400e88:	b580      	push	{r7, lr}
  400e8a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400e8c:	4b02      	ldr	r3, [pc, #8]	; (400e98 <sysclk_get_cpu_hz+0x10>)
  400e8e:	4798      	blx	r3
  400e90:	4603      	mov	r3, r0
  400e92:	085b      	lsrs	r3, r3, #1
}
  400e94:	4618      	mov	r0, r3
  400e96:	bd80      	pop	{r7, pc}
  400e98:	00400e6d 	.word	0x00400e6d

00400e9c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e9c:	b590      	push	{r4, r7, lr}
  400e9e:	b083      	sub	sp, #12
  400ea0:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400ea2:	4811      	ldr	r0, [pc, #68]	; (400ee8 <sysclk_init+0x4c>)
  400ea4:	4b11      	ldr	r3, [pc, #68]	; (400eec <sysclk_init+0x50>)
  400ea6:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400ea8:	2006      	movs	r0, #6
  400eaa:	4b11      	ldr	r3, [pc, #68]	; (400ef0 <sysclk_init+0x54>)
  400eac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400eae:	1d38      	adds	r0, r7, #4
  400eb0:	2314      	movs	r3, #20
  400eb2:	2201      	movs	r2, #1
  400eb4:	2106      	movs	r1, #6
  400eb6:	4c0f      	ldr	r4, [pc, #60]	; (400ef4 <sysclk_init+0x58>)
  400eb8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400eba:	1d3b      	adds	r3, r7, #4
  400ebc:	2100      	movs	r1, #0
  400ebe:	4618      	mov	r0, r3
  400ec0:	4b0d      	ldr	r3, [pc, #52]	; (400ef8 <sysclk_init+0x5c>)
  400ec2:	4798      	blx	r3
		pll_wait_for_lock(0);
  400ec4:	2000      	movs	r0, #0
  400ec6:	4b0d      	ldr	r3, [pc, #52]	; (400efc <sysclk_init+0x60>)
  400ec8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400eca:	2010      	movs	r0, #16
  400ecc:	4b0c      	ldr	r3, [pc, #48]	; (400f00 <sysclk_init+0x64>)
  400ece:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400ed0:	4b0c      	ldr	r3, [pc, #48]	; (400f04 <sysclk_init+0x68>)
  400ed2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400ed4:	4b0c      	ldr	r3, [pc, #48]	; (400f08 <sysclk_init+0x6c>)
  400ed6:	4798      	blx	r3
  400ed8:	4603      	mov	r3, r0
  400eda:	4618      	mov	r0, r3
  400edc:	4b03      	ldr	r3, [pc, #12]	; (400eec <sysclk_init+0x50>)
  400ede:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400ee0:	bf00      	nop
  400ee2:	370c      	adds	r7, #12
  400ee4:	46bd      	mov	sp, r7
  400ee6:	bd90      	pop	{r4, r7, pc}
  400ee8:	07270e00 	.word	0x07270e00
  400eec:	00402261 	.word	0x00402261
  400ef0:	00400e11 	.word	0x00400e11
  400ef4:	00400d4d 	.word	0x00400d4d
  400ef8:	00400da1 	.word	0x00400da1
  400efc:	00400e49 	.word	0x00400e49
  400f00:	00401955 	.word	0x00401955
  400f04:	004020c9 	.word	0x004020c9
  400f08:	00400e89 	.word	0x00400e89

00400f0c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400f0c:	b580      	push	{r7, lr}
  400f0e:	b086      	sub	sp, #24
  400f10:	af00      	add	r7, sp, #0
  400f12:	60f8      	str	r0, [r7, #12]
  400f14:	60b9      	str	r1, [r7, #8]
  400f16:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400f18:	2300      	movs	r3, #0
  400f1a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400f1c:	68fb      	ldr	r3, [r7, #12]
  400f1e:	2b00      	cmp	r3, #0
  400f20:	d012      	beq.n	400f48 <_read+0x3c>
		return -1;
  400f22:	f04f 33ff 	mov.w	r3, #4294967295
  400f26:	e013      	b.n	400f50 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400f28:	4b0b      	ldr	r3, [pc, #44]	; (400f58 <_read+0x4c>)
  400f2a:	681b      	ldr	r3, [r3, #0]
  400f2c:	4a0b      	ldr	r2, [pc, #44]	; (400f5c <_read+0x50>)
  400f2e:	6812      	ldr	r2, [r2, #0]
  400f30:	68b9      	ldr	r1, [r7, #8]
  400f32:	4610      	mov	r0, r2
  400f34:	4798      	blx	r3
		ptr++;
  400f36:	68bb      	ldr	r3, [r7, #8]
  400f38:	3301      	adds	r3, #1
  400f3a:	60bb      	str	r3, [r7, #8]
		nChars++;
  400f3c:	697b      	ldr	r3, [r7, #20]
  400f3e:	3301      	adds	r3, #1
  400f40:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  400f42:	687b      	ldr	r3, [r7, #4]
  400f44:	3b01      	subs	r3, #1
  400f46:	607b      	str	r3, [r7, #4]
  400f48:	687b      	ldr	r3, [r7, #4]
  400f4a:	2b00      	cmp	r3, #0
  400f4c:	dcec      	bgt.n	400f28 <_read+0x1c>
	}
	return nChars;
  400f4e:	697b      	ldr	r3, [r7, #20]
}
  400f50:	4618      	mov	r0, r3
  400f52:	3718      	adds	r7, #24
  400f54:	46bd      	mov	sp, r7
  400f56:	bd80      	pop	{r7, pc}
  400f58:	20000ea0 	.word	0x20000ea0
  400f5c:	20000ea8 	.word	0x20000ea8

00400f60 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400f60:	b580      	push	{r7, lr}
  400f62:	b086      	sub	sp, #24
  400f64:	af00      	add	r7, sp, #0
  400f66:	60f8      	str	r0, [r7, #12]
  400f68:	60b9      	str	r1, [r7, #8]
  400f6a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400f6c:	2300      	movs	r3, #0
  400f6e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400f70:	68fb      	ldr	r3, [r7, #12]
  400f72:	2b01      	cmp	r3, #1
  400f74:	d01e      	beq.n	400fb4 <_write+0x54>
  400f76:	68fb      	ldr	r3, [r7, #12]
  400f78:	2b02      	cmp	r3, #2
  400f7a:	d01b      	beq.n	400fb4 <_write+0x54>
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	2b03      	cmp	r3, #3
  400f80:	d018      	beq.n	400fb4 <_write+0x54>
		return -1;
  400f82:	f04f 33ff 	mov.w	r3, #4294967295
  400f86:	e019      	b.n	400fbc <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400f88:	4b0e      	ldr	r3, [pc, #56]	; (400fc4 <_write+0x64>)
  400f8a:	681a      	ldr	r2, [r3, #0]
  400f8c:	4b0e      	ldr	r3, [pc, #56]	; (400fc8 <_write+0x68>)
  400f8e:	6818      	ldr	r0, [r3, #0]
  400f90:	68bb      	ldr	r3, [r7, #8]
  400f92:	1c59      	adds	r1, r3, #1
  400f94:	60b9      	str	r1, [r7, #8]
  400f96:	781b      	ldrb	r3, [r3, #0]
  400f98:	4619      	mov	r1, r3
  400f9a:	4790      	blx	r2
  400f9c:	4603      	mov	r3, r0
  400f9e:	2b00      	cmp	r3, #0
  400fa0:	da02      	bge.n	400fa8 <_write+0x48>
			return -1;
  400fa2:	f04f 33ff 	mov.w	r3, #4294967295
  400fa6:	e009      	b.n	400fbc <_write+0x5c>
		}
		++nChars;
  400fa8:	697b      	ldr	r3, [r7, #20]
  400faa:	3301      	adds	r3, #1
  400fac:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  400fae:	687b      	ldr	r3, [r7, #4]
  400fb0:	3b01      	subs	r3, #1
  400fb2:	607b      	str	r3, [r7, #4]
  400fb4:	687b      	ldr	r3, [r7, #4]
  400fb6:	2b00      	cmp	r3, #0
  400fb8:	d1e6      	bne.n	400f88 <_write+0x28>
	}
	return nChars;
  400fba:	697b      	ldr	r3, [r7, #20]
}
  400fbc:	4618      	mov	r0, r3
  400fbe:	3718      	adds	r7, #24
  400fc0:	46bd      	mov	sp, r7
  400fc2:	bd80      	pop	{r7, pc}
  400fc4:	20000ea4 	.word	0x20000ea4
  400fc8:	20000ea8 	.word	0x20000ea8

00400fcc <sysclk_enable_peripheral_clock>:
{
  400fcc:	b580      	push	{r7, lr}
  400fce:	b082      	sub	sp, #8
  400fd0:	af00      	add	r7, sp, #0
  400fd2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400fd4:	6878      	ldr	r0, [r7, #4]
  400fd6:	4b03      	ldr	r3, [pc, #12]	; (400fe4 <sysclk_enable_peripheral_clock+0x18>)
  400fd8:	4798      	blx	r3
}
  400fda:	bf00      	nop
  400fdc:	3708      	adds	r7, #8
  400fde:	46bd      	mov	sp, r7
  400fe0:	bd80      	pop	{r7, pc}
  400fe2:	bf00      	nop
  400fe4:	00401ba1 	.word	0x00401ba1

00400fe8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400fe8:	b580      	push	{r7, lr}
  400fea:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400fec:	200b      	movs	r0, #11
  400fee:	4b05      	ldr	r3, [pc, #20]	; (401004 <ioport_init+0x1c>)
  400ff0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400ff2:	200c      	movs	r0, #12
  400ff4:	4b03      	ldr	r3, [pc, #12]	; (401004 <ioport_init+0x1c>)
  400ff6:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400ff8:	200d      	movs	r0, #13
  400ffa:	4b02      	ldr	r3, [pc, #8]	; (401004 <ioport_init+0x1c>)
  400ffc:	4798      	blx	r3
	arch_ioport_init();
}
  400ffe:	bf00      	nop
  401000:	bd80      	pop	{r7, pc}
  401002:	bf00      	nop
  401004:	00400fcd 	.word	0x00400fcd

00401008 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  401008:	b480      	push	{r7}
  40100a:	b08d      	sub	sp, #52	; 0x34
  40100c:	af00      	add	r7, sp, #0
  40100e:	6078      	str	r0, [r7, #4]
  401010:	6039      	str	r1, [r7, #0]
  401012:	687b      	ldr	r3, [r7, #4]
  401014:	62fb      	str	r3, [r7, #44]	; 0x2c
  401016:	683b      	ldr	r3, [r7, #0]
  401018:	62bb      	str	r3, [r7, #40]	; 0x28
  40101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40101c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401020:	095a      	lsrs	r2, r3, #5
  401022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401024:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401026:	6a3b      	ldr	r3, [r7, #32]
  401028:	f003 031f 	and.w	r3, r3, #31
  40102c:	2101      	movs	r1, #1
  40102e:	fa01 f303 	lsl.w	r3, r1, r3
  401032:	61fa      	str	r2, [r7, #28]
  401034:	61bb      	str	r3, [r7, #24]
  401036:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401038:	617b      	str	r3, [r7, #20]
  40103a:	69fb      	ldr	r3, [r7, #28]
  40103c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40103e:	693b      	ldr	r3, [r7, #16]
  401040:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401044:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401048:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  40104a:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  40104c:	697b      	ldr	r3, [r7, #20]
  40104e:	f003 0308 	and.w	r3, r3, #8
  401052:	2b00      	cmp	r3, #0
  401054:	d003      	beq.n	40105e <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  401056:	68fb      	ldr	r3, [r7, #12]
  401058:	69ba      	ldr	r2, [r7, #24]
  40105a:	665a      	str	r2, [r3, #100]	; 0x64
  40105c:	e002      	b.n	401064 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  40105e:	68fb      	ldr	r3, [r7, #12]
  401060:	69ba      	ldr	r2, [r7, #24]
  401062:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  401064:	697b      	ldr	r3, [r7, #20]
  401066:	f003 0310 	and.w	r3, r3, #16
  40106a:	2b00      	cmp	r3, #0
  40106c:	d004      	beq.n	401078 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40106e:	68fb      	ldr	r3, [r7, #12]
  401070:	69ba      	ldr	r2, [r7, #24]
  401072:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401076:	e003      	b.n	401080 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  401078:	68fb      	ldr	r3, [r7, #12]
  40107a:	69ba      	ldr	r2, [r7, #24]
  40107c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401080:	697b      	ldr	r3, [r7, #20]
  401082:	f003 0320 	and.w	r3, r3, #32
  401086:	2b00      	cmp	r3, #0
  401088:	d003      	beq.n	401092 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40108a:	68fb      	ldr	r3, [r7, #12]
  40108c:	69ba      	ldr	r2, [r7, #24]
  40108e:	651a      	str	r2, [r3, #80]	; 0x50
  401090:	e002      	b.n	401098 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  401092:	68fb      	ldr	r3, [r7, #12]
  401094:	69ba      	ldr	r2, [r7, #24]
  401096:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401098:	697b      	ldr	r3, [r7, #20]
  40109a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40109e:	2b00      	cmp	r3, #0
  4010a0:	d003      	beq.n	4010aa <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4010a2:	68fb      	ldr	r3, [r7, #12]
  4010a4:	69ba      	ldr	r2, [r7, #24]
  4010a6:	621a      	str	r2, [r3, #32]
  4010a8:	e002      	b.n	4010b0 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  4010aa:	68fb      	ldr	r3, [r7, #12]
  4010ac:	69ba      	ldr	r2, [r7, #24]
  4010ae:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4010b0:	697b      	ldr	r3, [r7, #20]
  4010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010b6:	2b00      	cmp	r3, #0
  4010b8:	d004      	beq.n	4010c4 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4010ba:	68fb      	ldr	r3, [r7, #12]
  4010bc:	69ba      	ldr	r2, [r7, #24]
  4010be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4010c2:	e003      	b.n	4010cc <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4010c4:	68fb      	ldr	r3, [r7, #12]
  4010c6:	69ba      	ldr	r2, [r7, #24]
  4010c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4010cc:	697b      	ldr	r3, [r7, #20]
  4010ce:	f003 0301 	and.w	r3, r3, #1
  4010d2:	2b00      	cmp	r3, #0
  4010d4:	d006      	beq.n	4010e4 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  4010d6:	68fb      	ldr	r3, [r7, #12]
  4010d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010da:	69bb      	ldr	r3, [r7, #24]
  4010dc:	431a      	orrs	r2, r3
  4010de:	68fb      	ldr	r3, [r7, #12]
  4010e0:	671a      	str	r2, [r3, #112]	; 0x70
  4010e2:	e006      	b.n	4010f2 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4010e4:	68fb      	ldr	r3, [r7, #12]
  4010e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4010e8:	69bb      	ldr	r3, [r7, #24]
  4010ea:	43db      	mvns	r3, r3
  4010ec:	401a      	ands	r2, r3
  4010ee:	68fb      	ldr	r3, [r7, #12]
  4010f0:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4010f2:	697b      	ldr	r3, [r7, #20]
  4010f4:	f003 0302 	and.w	r3, r3, #2
  4010f8:	2b00      	cmp	r3, #0
  4010fa:	d006      	beq.n	40110a <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4010fc:	68fb      	ldr	r3, [r7, #12]
  4010fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401100:	69bb      	ldr	r3, [r7, #24]
  401102:	431a      	orrs	r2, r3
  401104:	68fb      	ldr	r3, [r7, #12]
  401106:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  401108:	e006      	b.n	401118 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40110a:	68fb      	ldr	r3, [r7, #12]
  40110c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40110e:	69bb      	ldr	r3, [r7, #24]
  401110:	43db      	mvns	r3, r3
  401112:	401a      	ands	r2, r3
  401114:	68fb      	ldr	r3, [r7, #12]
  401116:	675a      	str	r2, [r3, #116]	; 0x74
  401118:	bf00      	nop
  40111a:	3734      	adds	r7, #52	; 0x34
  40111c:	46bd      	mov	sp, r7
  40111e:	bc80      	pop	{r7}
  401120:	4770      	bx	lr

00401122 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401122:	b480      	push	{r7}
  401124:	b08d      	sub	sp, #52	; 0x34
  401126:	af00      	add	r7, sp, #0
  401128:	6078      	str	r0, [r7, #4]
  40112a:	460b      	mov	r3, r1
  40112c:	70fb      	strb	r3, [r7, #3]
  40112e:	687b      	ldr	r3, [r7, #4]
  401130:	62fb      	str	r3, [r7, #44]	; 0x2c
  401132:	78fb      	ldrb	r3, [r7, #3]
  401134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40113a:	627b      	str	r3, [r7, #36]	; 0x24
  40113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40113e:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401140:	6a3b      	ldr	r3, [r7, #32]
  401142:	095b      	lsrs	r3, r3, #5
  401144:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401146:	69fb      	ldr	r3, [r7, #28]
  401148:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40114c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401150:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401152:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401158:	2b01      	cmp	r3, #1
  40115a:	d109      	bne.n	401170 <ioport_set_pin_dir+0x4e>
  40115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40115e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401160:	697b      	ldr	r3, [r7, #20]
  401162:	f003 031f 	and.w	r3, r3, #31
  401166:	2201      	movs	r2, #1
  401168:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40116a:	69bb      	ldr	r3, [r7, #24]
  40116c:	611a      	str	r2, [r3, #16]
  40116e:	e00c      	b.n	40118a <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401170:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401174:	2b00      	cmp	r3, #0
  401176:	d108      	bne.n	40118a <ioport_set_pin_dir+0x68>
  401178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40117a:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40117c:	693b      	ldr	r3, [r7, #16]
  40117e:	f003 031f 	and.w	r3, r3, #31
  401182:	2201      	movs	r2, #1
  401184:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401186:	69bb      	ldr	r3, [r7, #24]
  401188:	615a      	str	r2, [r3, #20]
  40118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40118c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40118e:	68fb      	ldr	r3, [r7, #12]
  401190:	f003 031f 	and.w	r3, r3, #31
  401194:	2201      	movs	r2, #1
  401196:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401198:	69bb      	ldr	r3, [r7, #24]
  40119a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40119e:	bf00      	nop
  4011a0:	3734      	adds	r7, #52	; 0x34
  4011a2:	46bd      	mov	sp, r7
  4011a4:	bc80      	pop	{r7}
  4011a6:	4770      	bx	lr

004011a8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4011a8:	b480      	push	{r7}
  4011aa:	b08b      	sub	sp, #44	; 0x2c
  4011ac:	af00      	add	r7, sp, #0
  4011ae:	6078      	str	r0, [r7, #4]
  4011b0:	460b      	mov	r3, r1
  4011b2:	70fb      	strb	r3, [r7, #3]
  4011b4:	687b      	ldr	r3, [r7, #4]
  4011b6:	627b      	str	r3, [r7, #36]	; 0x24
  4011b8:	78fb      	ldrb	r3, [r7, #3]
  4011ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011c0:	61fb      	str	r3, [r7, #28]
  4011c2:	69fb      	ldr	r3, [r7, #28]
  4011c4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4011c6:	69bb      	ldr	r3, [r7, #24]
  4011c8:	095b      	lsrs	r3, r3, #5
  4011ca:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4011cc:	697b      	ldr	r3, [r7, #20]
  4011ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4011d2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4011d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4011d8:	613b      	str	r3, [r7, #16]

	if (level) {
  4011da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d009      	beq.n	4011f6 <ioport_set_pin_level+0x4e>
  4011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011e4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4011e6:	68fb      	ldr	r3, [r7, #12]
  4011e8:	f003 031f 	and.w	r3, r3, #31
  4011ec:	2201      	movs	r2, #1
  4011ee:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011f0:	693b      	ldr	r3, [r7, #16]
  4011f2:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4011f4:	e008      	b.n	401208 <ioport_set_pin_level+0x60>
  4011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011f8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4011fa:	68bb      	ldr	r3, [r7, #8]
  4011fc:	f003 031f 	and.w	r3, r3, #31
  401200:	2201      	movs	r2, #1
  401202:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401204:	693b      	ldr	r3, [r7, #16]
  401206:	635a      	str	r2, [r3, #52]	; 0x34
  401208:	bf00      	nop
  40120a:	372c      	adds	r7, #44	; 0x2c
  40120c:	46bd      	mov	sp, r7
  40120e:	bc80      	pop	{r7}
  401210:	4770      	bx	lr
	...

00401214 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401214:	b580      	push	{r7, lr}
  401216:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  401218:	4824      	ldr	r0, [pc, #144]	; (4012ac <board_init+0x98>)
  40121a:	4b25      	ldr	r3, [pc, #148]	; (4012b0 <board_init+0x9c>)
  40121c:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  40121e:	4b25      	ldr	r3, [pc, #148]	; (4012b4 <board_init+0xa0>)
  401220:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  401222:	2101      	movs	r1, #1
  401224:	2057      	movs	r0, #87	; 0x57
  401226:	4b24      	ldr	r3, [pc, #144]	; (4012b8 <board_init+0xa4>)
  401228:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  40122a:	2101      	movs	r1, #1
  40122c:	2057      	movs	r0, #87	; 0x57
  40122e:	4b23      	ldr	r3, [pc, #140]	; (4012bc <board_init+0xa8>)
  401230:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  401232:	2100      	movs	r1, #0
  401234:	2002      	movs	r0, #2
  401236:	4b21      	ldr	r3, [pc, #132]	; (4012bc <board_init+0xa8>)
  401238:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  40123a:	2108      	movs	r1, #8
  40123c:	2002      	movs	r0, #2
  40123e:	4b20      	ldr	r3, [pc, #128]	; (4012c0 <board_init+0xac>)
  401240:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  401242:	2101      	movs	r1, #1
  401244:	2054      	movs	r0, #84	; 0x54
  401246:	4b1c      	ldr	r3, [pc, #112]	; (4012b8 <board_init+0xa4>)
  401248:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  40124a:	2101      	movs	r1, #1
  40124c:	2054      	movs	r0, #84	; 0x54
  40124e:	4b1b      	ldr	r3, [pc, #108]	; (4012bc <board_init+0xa8>)
  401250:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  401252:	2101      	movs	r1, #1
  401254:	2010      	movs	r0, #16
  401256:	4b18      	ldr	r3, [pc, #96]	; (4012b8 <board_init+0xa4>)
  401258:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  40125a:	2101      	movs	r1, #1
  40125c:	2010      	movs	r0, #16
  40125e:	4b17      	ldr	r3, [pc, #92]	; (4012bc <board_init+0xa8>)
  401260:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  401262:	2101      	movs	r1, #1
  401264:	2056      	movs	r0, #86	; 0x56
  401266:	4b14      	ldr	r3, [pc, #80]	; (4012b8 <board_init+0xa4>)
  401268:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  40126a:	2101      	movs	r1, #1
  40126c:	2056      	movs	r0, #86	; 0x56
  40126e:	4b13      	ldr	r3, [pc, #76]	; (4012bc <board_init+0xa8>)
  401270:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401276:	210c      	movs	r1, #12
  401278:	4812      	ldr	r0, [pc, #72]	; (4012c4 <board_init+0xb0>)
  40127a:	4b13      	ldr	r3, [pc, #76]	; (4012c8 <board_init+0xb4>)
  40127c:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  40127e:	4913      	ldr	r1, [pc, #76]	; (4012cc <board_init+0xb8>)
  401280:	200c      	movs	r0, #12
  401282:	4b13      	ldr	r3, [pc, #76]	; (4012d0 <board_init+0xbc>)
  401284:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  401286:	4911      	ldr	r1, [pc, #68]	; (4012cc <board_init+0xb8>)
  401288:	200d      	movs	r0, #13
  40128a:	4b11      	ldr	r3, [pc, #68]	; (4012d0 <board_init+0xbc>)
  40128c:	4798      	blx	r3
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  40128e:	490f      	ldr	r1, [pc, #60]	; (4012cc <board_init+0xb8>)
  401290:	200e      	movs	r0, #14
  401292:	4b0f      	ldr	r3, [pc, #60]	; (4012d0 <board_init+0xbc>)
  401294:	4798      	blx	r3
	 * Depending on the application requirements, the default PIN may not be available.
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */
#ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  401296:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40129a:	200b      	movs	r0, #11
  40129c:	4b0c      	ldr	r3, [pc, #48]	; (4012d0 <board_init+0xbc>)
  40129e:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  4012a0:	2108      	movs	r1, #8
  4012a2:	2002      	movs	r0, #2
  4012a4:	4b06      	ldr	r3, [pc, #24]	; (4012c0 <board_init+0xac>)
  4012a6:	4798      	blx	r3

#endif



}
  4012a8:	bf00      	nop
  4012aa:	bd80      	pop	{r7, pc}
  4012ac:	400e1450 	.word	0x400e1450
  4012b0:	00401fdd 	.word	0x00401fdd
  4012b4:	00400fe9 	.word	0x00400fe9
  4012b8:	004011a9 	.word	0x004011a9
  4012bc:	00401123 	.word	0x00401123
  4012c0:	00401009 	.word	0x00401009
  4012c4:	400e1000 	.word	0x400e1000
  4012c8:	004016e9 	.word	0x004016e9
  4012cc:	08000001 	.word	0x08000001
  4012d0:	00401539 	.word	0x00401539

004012d4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4012d4:	b480      	push	{r7}
  4012d6:	b085      	sub	sp, #20
  4012d8:	af00      	add	r7, sp, #0
  4012da:	60f8      	str	r0, [r7, #12]
  4012dc:	60b9      	str	r1, [r7, #8]
  4012de:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	2b00      	cmp	r3, #0
  4012e4:	d003      	beq.n	4012ee <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4012e6:	68fb      	ldr	r3, [r7, #12]
  4012e8:	68ba      	ldr	r2, [r7, #8]
  4012ea:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4012ec:	e002      	b.n	4012f4 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4012ee:	68fb      	ldr	r3, [r7, #12]
  4012f0:	68ba      	ldr	r2, [r7, #8]
  4012f2:	661a      	str	r2, [r3, #96]	; 0x60
}
  4012f4:	bf00      	nop
  4012f6:	3714      	adds	r7, #20
  4012f8:	46bd      	mov	sp, r7
  4012fa:	bc80      	pop	{r7}
  4012fc:	4770      	bx	lr

004012fe <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4012fe:	b480      	push	{r7}
  401300:	b087      	sub	sp, #28
  401302:	af00      	add	r7, sp, #0
  401304:	60f8      	str	r0, [r7, #12]
  401306:	60b9      	str	r1, [r7, #8]
  401308:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40130a:	68fb      	ldr	r3, [r7, #12]
  40130c:	687a      	ldr	r2, [r7, #4]
  40130e:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401310:	68bb      	ldr	r3, [r7, #8]
  401312:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401316:	d04a      	beq.n	4013ae <pio_set_peripheral+0xb0>
  401318:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40131c:	d808      	bhi.n	401330 <pio_set_peripheral+0x32>
  40131e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401322:	d016      	beq.n	401352 <pio_set_peripheral+0x54>
  401324:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401328:	d02c      	beq.n	401384 <pio_set_peripheral+0x86>
  40132a:	2b00      	cmp	r3, #0
  40132c:	d069      	beq.n	401402 <pio_set_peripheral+0x104>
  40132e:	e064      	b.n	4013fa <pio_set_peripheral+0xfc>
  401330:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401334:	d065      	beq.n	401402 <pio_set_peripheral+0x104>
  401336:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40133a:	d803      	bhi.n	401344 <pio_set_peripheral+0x46>
  40133c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401340:	d04a      	beq.n	4013d8 <pio_set_peripheral+0xda>
  401342:	e05a      	b.n	4013fa <pio_set_peripheral+0xfc>
  401344:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401348:	d05b      	beq.n	401402 <pio_set_peripheral+0x104>
  40134a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40134e:	d058      	beq.n	401402 <pio_set_peripheral+0x104>
  401350:	e053      	b.n	4013fa <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401352:	68fb      	ldr	r3, [r7, #12]
  401354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401356:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401358:	68fb      	ldr	r3, [r7, #12]
  40135a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40135c:	687b      	ldr	r3, [r7, #4]
  40135e:	43d9      	mvns	r1, r3
  401360:	697b      	ldr	r3, [r7, #20]
  401362:	400b      	ands	r3, r1
  401364:	401a      	ands	r2, r3
  401366:	68fb      	ldr	r3, [r7, #12]
  401368:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40136a:	68fb      	ldr	r3, [r7, #12]
  40136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40136e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401370:	68fb      	ldr	r3, [r7, #12]
  401372:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401374:	687b      	ldr	r3, [r7, #4]
  401376:	43d9      	mvns	r1, r3
  401378:	697b      	ldr	r3, [r7, #20]
  40137a:	400b      	ands	r3, r1
  40137c:	401a      	ands	r2, r3
  40137e:	68fb      	ldr	r3, [r7, #12]
  401380:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401382:	e03a      	b.n	4013fa <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401384:	68fb      	ldr	r3, [r7, #12]
  401386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401388:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40138a:	687a      	ldr	r2, [r7, #4]
  40138c:	697b      	ldr	r3, [r7, #20]
  40138e:	431a      	orrs	r2, r3
  401390:	68fb      	ldr	r3, [r7, #12]
  401392:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401394:	68fb      	ldr	r3, [r7, #12]
  401396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401398:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40139a:	68fb      	ldr	r3, [r7, #12]
  40139c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40139e:	687b      	ldr	r3, [r7, #4]
  4013a0:	43d9      	mvns	r1, r3
  4013a2:	697b      	ldr	r3, [r7, #20]
  4013a4:	400b      	ands	r3, r1
  4013a6:	401a      	ands	r2, r3
  4013a8:	68fb      	ldr	r3, [r7, #12]
  4013aa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013ac:	e025      	b.n	4013fa <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013ae:	68fb      	ldr	r3, [r7, #12]
  4013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013b2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013b4:	68fb      	ldr	r3, [r7, #12]
  4013b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4013b8:	687b      	ldr	r3, [r7, #4]
  4013ba:	43d9      	mvns	r1, r3
  4013bc:	697b      	ldr	r3, [r7, #20]
  4013be:	400b      	ands	r3, r1
  4013c0:	401a      	ands	r2, r3
  4013c2:	68fb      	ldr	r3, [r7, #12]
  4013c4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013c6:	68fb      	ldr	r3, [r7, #12]
  4013c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4013ca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013cc:	687a      	ldr	r2, [r7, #4]
  4013ce:	697b      	ldr	r3, [r7, #20]
  4013d0:	431a      	orrs	r2, r3
  4013d2:	68fb      	ldr	r3, [r7, #12]
  4013d4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013d6:	e010      	b.n	4013fa <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013d8:	68fb      	ldr	r3, [r7, #12]
  4013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013dc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4013de:	687a      	ldr	r2, [r7, #4]
  4013e0:	697b      	ldr	r3, [r7, #20]
  4013e2:	431a      	orrs	r2, r3
  4013e4:	68fb      	ldr	r3, [r7, #12]
  4013e6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013e8:	68fb      	ldr	r3, [r7, #12]
  4013ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4013ec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013ee:	687a      	ldr	r2, [r7, #4]
  4013f0:	697b      	ldr	r3, [r7, #20]
  4013f2:	431a      	orrs	r2, r3
  4013f4:	68fb      	ldr	r3, [r7, #12]
  4013f6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013f8:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4013fa:	68fb      	ldr	r3, [r7, #12]
  4013fc:	687a      	ldr	r2, [r7, #4]
  4013fe:	605a      	str	r2, [r3, #4]
  401400:	e000      	b.n	401404 <pio_set_peripheral+0x106>
		return;
  401402:	bf00      	nop
}
  401404:	371c      	adds	r7, #28
  401406:	46bd      	mov	sp, r7
  401408:	bc80      	pop	{r7}
  40140a:	4770      	bx	lr

0040140c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40140c:	b580      	push	{r7, lr}
  40140e:	b084      	sub	sp, #16
  401410:	af00      	add	r7, sp, #0
  401412:	60f8      	str	r0, [r7, #12]
  401414:	60b9      	str	r1, [r7, #8]
  401416:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401418:	68b9      	ldr	r1, [r7, #8]
  40141a:	68f8      	ldr	r0, [r7, #12]
  40141c:	4b19      	ldr	r3, [pc, #100]	; (401484 <pio_set_input+0x78>)
  40141e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401420:	687b      	ldr	r3, [r7, #4]
  401422:	f003 0301 	and.w	r3, r3, #1
  401426:	461a      	mov	r2, r3
  401428:	68b9      	ldr	r1, [r7, #8]
  40142a:	68f8      	ldr	r0, [r7, #12]
  40142c:	4b16      	ldr	r3, [pc, #88]	; (401488 <pio_set_input+0x7c>)
  40142e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401430:	687b      	ldr	r3, [r7, #4]
  401432:	f003 030a 	and.w	r3, r3, #10
  401436:	2b00      	cmp	r3, #0
  401438:	d003      	beq.n	401442 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40143a:	68fb      	ldr	r3, [r7, #12]
  40143c:	68ba      	ldr	r2, [r7, #8]
  40143e:	621a      	str	r2, [r3, #32]
  401440:	e002      	b.n	401448 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401442:	68fb      	ldr	r3, [r7, #12]
  401444:	68ba      	ldr	r2, [r7, #8]
  401446:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401448:	687b      	ldr	r3, [r7, #4]
  40144a:	f003 0302 	and.w	r3, r3, #2
  40144e:	2b00      	cmp	r3, #0
  401450:	d004      	beq.n	40145c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401452:	68fb      	ldr	r3, [r7, #12]
  401454:	68ba      	ldr	r2, [r7, #8]
  401456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40145a:	e008      	b.n	40146e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40145c:	687b      	ldr	r3, [r7, #4]
  40145e:	f003 0308 	and.w	r3, r3, #8
  401462:	2b00      	cmp	r3, #0
  401464:	d003      	beq.n	40146e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401466:	68fb      	ldr	r3, [r7, #12]
  401468:	68ba      	ldr	r2, [r7, #8]
  40146a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40146e:	68fb      	ldr	r3, [r7, #12]
  401470:	68ba      	ldr	r2, [r7, #8]
  401472:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401474:	68fb      	ldr	r3, [r7, #12]
  401476:	68ba      	ldr	r2, [r7, #8]
  401478:	601a      	str	r2, [r3, #0]
}
  40147a:	bf00      	nop
  40147c:	3710      	adds	r7, #16
  40147e:	46bd      	mov	sp, r7
  401480:	bd80      	pop	{r7, pc}
  401482:	bf00      	nop
  401484:	004014f1 	.word	0x004014f1
  401488:	004012d5 	.word	0x004012d5

0040148c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40148c:	b580      	push	{r7, lr}
  40148e:	b084      	sub	sp, #16
  401490:	af00      	add	r7, sp, #0
  401492:	60f8      	str	r0, [r7, #12]
  401494:	60b9      	str	r1, [r7, #8]
  401496:	607a      	str	r2, [r7, #4]
  401498:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40149a:	68b9      	ldr	r1, [r7, #8]
  40149c:	68f8      	ldr	r0, [r7, #12]
  40149e:	4b12      	ldr	r3, [pc, #72]	; (4014e8 <pio_set_output+0x5c>)
  4014a0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4014a2:	69ba      	ldr	r2, [r7, #24]
  4014a4:	68b9      	ldr	r1, [r7, #8]
  4014a6:	68f8      	ldr	r0, [r7, #12]
  4014a8:	4b10      	ldr	r3, [pc, #64]	; (4014ec <pio_set_output+0x60>)
  4014aa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4014ac:	683b      	ldr	r3, [r7, #0]
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d003      	beq.n	4014ba <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4014b2:	68fb      	ldr	r3, [r7, #12]
  4014b4:	68ba      	ldr	r2, [r7, #8]
  4014b6:	651a      	str	r2, [r3, #80]	; 0x50
  4014b8:	e002      	b.n	4014c0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4014ba:	68fb      	ldr	r3, [r7, #12]
  4014bc:	68ba      	ldr	r2, [r7, #8]
  4014be:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	2b00      	cmp	r3, #0
  4014c4:	d003      	beq.n	4014ce <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4014c6:	68fb      	ldr	r3, [r7, #12]
  4014c8:	68ba      	ldr	r2, [r7, #8]
  4014ca:	631a      	str	r2, [r3, #48]	; 0x30
  4014cc:	e002      	b.n	4014d4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4014ce:	68fb      	ldr	r3, [r7, #12]
  4014d0:	68ba      	ldr	r2, [r7, #8]
  4014d2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4014d4:	68fb      	ldr	r3, [r7, #12]
  4014d6:	68ba      	ldr	r2, [r7, #8]
  4014d8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4014da:	68fb      	ldr	r3, [r7, #12]
  4014dc:	68ba      	ldr	r2, [r7, #8]
  4014de:	601a      	str	r2, [r3, #0]
}
  4014e0:	bf00      	nop
  4014e2:	3710      	adds	r7, #16
  4014e4:	46bd      	mov	sp, r7
  4014e6:	bd80      	pop	{r7, pc}
  4014e8:	004014f1 	.word	0x004014f1
  4014ec:	004012d5 	.word	0x004012d5

004014f0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4014f0:	b480      	push	{r7}
  4014f2:	b083      	sub	sp, #12
  4014f4:	af00      	add	r7, sp, #0
  4014f6:	6078      	str	r0, [r7, #4]
  4014f8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4014fa:	687b      	ldr	r3, [r7, #4]
  4014fc:	683a      	ldr	r2, [r7, #0]
  4014fe:	645a      	str	r2, [r3, #68]	; 0x44
}
  401500:	bf00      	nop
  401502:	370c      	adds	r7, #12
  401504:	46bd      	mov	sp, r7
  401506:	bc80      	pop	{r7}
  401508:	4770      	bx	lr

0040150a <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40150a:	b480      	push	{r7}
  40150c:	b083      	sub	sp, #12
  40150e:	af00      	add	r7, sp, #0
  401510:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401512:	687b      	ldr	r3, [r7, #4]
  401514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401516:	4618      	mov	r0, r3
  401518:	370c      	adds	r7, #12
  40151a:	46bd      	mov	sp, r7
  40151c:	bc80      	pop	{r7}
  40151e:	4770      	bx	lr

00401520 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401520:	b480      	push	{r7}
  401522:	b083      	sub	sp, #12
  401524:	af00      	add	r7, sp, #0
  401526:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401528:	687b      	ldr	r3, [r7, #4]
  40152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40152c:	4618      	mov	r0, r3
  40152e:	370c      	adds	r7, #12
  401530:	46bd      	mov	sp, r7
  401532:	bc80      	pop	{r7}
  401534:	4770      	bx	lr
	...

00401538 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401538:	b590      	push	{r4, r7, lr}
  40153a:	b087      	sub	sp, #28
  40153c:	af02      	add	r7, sp, #8
  40153e:	6078      	str	r0, [r7, #4]
  401540:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401542:	6878      	ldr	r0, [r7, #4]
  401544:	4b63      	ldr	r3, [pc, #396]	; (4016d4 <pio_configure_pin+0x19c>)
  401546:	4798      	blx	r3
  401548:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40154a:	683b      	ldr	r3, [r7, #0]
  40154c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401554:	d067      	beq.n	401626 <pio_configure_pin+0xee>
  401556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40155a:	d809      	bhi.n	401570 <pio_configure_pin+0x38>
  40155c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401560:	d02b      	beq.n	4015ba <pio_configure_pin+0x82>
  401562:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401566:	d043      	beq.n	4015f0 <pio_configure_pin+0xb8>
  401568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40156c:	d00a      	beq.n	401584 <pio_configure_pin+0x4c>
  40156e:	e0a9      	b.n	4016c4 <pio_configure_pin+0x18c>
  401570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401574:	d07e      	beq.n	401674 <pio_configure_pin+0x13c>
  401576:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40157a:	d07b      	beq.n	401674 <pio_configure_pin+0x13c>
  40157c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401580:	d06c      	beq.n	40165c <pio_configure_pin+0x124>
  401582:	e09f      	b.n	4016c4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401584:	687b      	ldr	r3, [r7, #4]
  401586:	f003 031f 	and.w	r3, r3, #31
  40158a:	2201      	movs	r2, #1
  40158c:	fa02 f303 	lsl.w	r3, r2, r3
  401590:	461a      	mov	r2, r3
  401592:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401596:	68f8      	ldr	r0, [r7, #12]
  401598:	4b4f      	ldr	r3, [pc, #316]	; (4016d8 <pio_configure_pin+0x1a0>)
  40159a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40159c:	687b      	ldr	r3, [r7, #4]
  40159e:	f003 031f 	and.w	r3, r3, #31
  4015a2:	2201      	movs	r2, #1
  4015a4:	fa02 f303 	lsl.w	r3, r2, r3
  4015a8:	4619      	mov	r1, r3
  4015aa:	683b      	ldr	r3, [r7, #0]
  4015ac:	f003 0301 	and.w	r3, r3, #1
  4015b0:	461a      	mov	r2, r3
  4015b2:	68f8      	ldr	r0, [r7, #12]
  4015b4:	4b49      	ldr	r3, [pc, #292]	; (4016dc <pio_configure_pin+0x1a4>)
  4015b6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4015b8:	e086      	b.n	4016c8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4015ba:	687b      	ldr	r3, [r7, #4]
  4015bc:	f003 031f 	and.w	r3, r3, #31
  4015c0:	2201      	movs	r2, #1
  4015c2:	fa02 f303 	lsl.w	r3, r2, r3
  4015c6:	461a      	mov	r2, r3
  4015c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4015cc:	68f8      	ldr	r0, [r7, #12]
  4015ce:	4b42      	ldr	r3, [pc, #264]	; (4016d8 <pio_configure_pin+0x1a0>)
  4015d0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4015d2:	687b      	ldr	r3, [r7, #4]
  4015d4:	f003 031f 	and.w	r3, r3, #31
  4015d8:	2201      	movs	r2, #1
  4015da:	fa02 f303 	lsl.w	r3, r2, r3
  4015de:	4619      	mov	r1, r3
  4015e0:	683b      	ldr	r3, [r7, #0]
  4015e2:	f003 0301 	and.w	r3, r3, #1
  4015e6:	461a      	mov	r2, r3
  4015e8:	68f8      	ldr	r0, [r7, #12]
  4015ea:	4b3c      	ldr	r3, [pc, #240]	; (4016dc <pio_configure_pin+0x1a4>)
  4015ec:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4015ee:	e06b      	b.n	4016c8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4015f0:	687b      	ldr	r3, [r7, #4]
  4015f2:	f003 031f 	and.w	r3, r3, #31
  4015f6:	2201      	movs	r2, #1
  4015f8:	fa02 f303 	lsl.w	r3, r2, r3
  4015fc:	461a      	mov	r2, r3
  4015fe:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401602:	68f8      	ldr	r0, [r7, #12]
  401604:	4b34      	ldr	r3, [pc, #208]	; (4016d8 <pio_configure_pin+0x1a0>)
  401606:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401608:	687b      	ldr	r3, [r7, #4]
  40160a:	f003 031f 	and.w	r3, r3, #31
  40160e:	2201      	movs	r2, #1
  401610:	fa02 f303 	lsl.w	r3, r2, r3
  401614:	4619      	mov	r1, r3
  401616:	683b      	ldr	r3, [r7, #0]
  401618:	f003 0301 	and.w	r3, r3, #1
  40161c:	461a      	mov	r2, r3
  40161e:	68f8      	ldr	r0, [r7, #12]
  401620:	4b2e      	ldr	r3, [pc, #184]	; (4016dc <pio_configure_pin+0x1a4>)
  401622:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401624:	e050      	b.n	4016c8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401626:	687b      	ldr	r3, [r7, #4]
  401628:	f003 031f 	and.w	r3, r3, #31
  40162c:	2201      	movs	r2, #1
  40162e:	fa02 f303 	lsl.w	r3, r2, r3
  401632:	461a      	mov	r2, r3
  401634:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401638:	68f8      	ldr	r0, [r7, #12]
  40163a:	4b27      	ldr	r3, [pc, #156]	; (4016d8 <pio_configure_pin+0x1a0>)
  40163c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40163e:	687b      	ldr	r3, [r7, #4]
  401640:	f003 031f 	and.w	r3, r3, #31
  401644:	2201      	movs	r2, #1
  401646:	fa02 f303 	lsl.w	r3, r2, r3
  40164a:	4619      	mov	r1, r3
  40164c:	683b      	ldr	r3, [r7, #0]
  40164e:	f003 0301 	and.w	r3, r3, #1
  401652:	461a      	mov	r2, r3
  401654:	68f8      	ldr	r0, [r7, #12]
  401656:	4b21      	ldr	r3, [pc, #132]	; (4016dc <pio_configure_pin+0x1a4>)
  401658:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40165a:	e035      	b.n	4016c8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40165c:	687b      	ldr	r3, [r7, #4]
  40165e:	f003 031f 	and.w	r3, r3, #31
  401662:	2201      	movs	r2, #1
  401664:	fa02 f303 	lsl.w	r3, r2, r3
  401668:	683a      	ldr	r2, [r7, #0]
  40166a:	4619      	mov	r1, r3
  40166c:	68f8      	ldr	r0, [r7, #12]
  40166e:	4b1c      	ldr	r3, [pc, #112]	; (4016e0 <pio_configure_pin+0x1a8>)
  401670:	4798      	blx	r3
		break;
  401672:	e029      	b.n	4016c8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401674:	687b      	ldr	r3, [r7, #4]
  401676:	f003 031f 	and.w	r3, r3, #31
  40167a:	2201      	movs	r2, #1
  40167c:	fa02 f303 	lsl.w	r3, r2, r3
  401680:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401682:	683b      	ldr	r3, [r7, #0]
  401684:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401688:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40168c:	bf0c      	ite	eq
  40168e:	2301      	moveq	r3, #1
  401690:	2300      	movne	r3, #0
  401692:	b2db      	uxtb	r3, r3
  401694:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401696:	683b      	ldr	r3, [r7, #0]
  401698:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40169c:	2b00      	cmp	r3, #0
  40169e:	bf14      	ite	ne
  4016a0:	2301      	movne	r3, #1
  4016a2:	2300      	moveq	r3, #0
  4016a4:	b2db      	uxtb	r3, r3
  4016a6:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4016a8:	683b      	ldr	r3, [r7, #0]
  4016aa:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4016ae:	2b00      	cmp	r3, #0
  4016b0:	bf14      	ite	ne
  4016b2:	2301      	movne	r3, #1
  4016b4:	2300      	moveq	r3, #0
  4016b6:	b2db      	uxtb	r3, r3
  4016b8:	9300      	str	r3, [sp, #0]
  4016ba:	4603      	mov	r3, r0
  4016bc:	68f8      	ldr	r0, [r7, #12]
  4016be:	4c09      	ldr	r4, [pc, #36]	; (4016e4 <pio_configure_pin+0x1ac>)
  4016c0:	47a0      	blx	r4
		break;
  4016c2:	e001      	b.n	4016c8 <pio_configure_pin+0x190>

	default:
		return 0;
  4016c4:	2300      	movs	r3, #0
  4016c6:	e000      	b.n	4016ca <pio_configure_pin+0x192>
	}

	return 1;
  4016c8:	2301      	movs	r3, #1
}
  4016ca:	4618      	mov	r0, r3
  4016cc:	3714      	adds	r7, #20
  4016ce:	46bd      	mov	sp, r7
  4016d0:	bd90      	pop	{r4, r7, pc}
  4016d2:	bf00      	nop
  4016d4:	00401815 	.word	0x00401815
  4016d8:	004012ff 	.word	0x004012ff
  4016dc:	004012d5 	.word	0x004012d5
  4016e0:	0040140d 	.word	0x0040140d
  4016e4:	0040148d 	.word	0x0040148d

004016e8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4016e8:	b590      	push	{r4, r7, lr}
  4016ea:	b087      	sub	sp, #28
  4016ec:	af02      	add	r7, sp, #8
  4016ee:	60f8      	str	r0, [r7, #12]
  4016f0:	60b9      	str	r1, [r7, #8]
  4016f2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4016fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016fe:	d043      	beq.n	401788 <pio_configure_pin_group+0xa0>
  401700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401704:	d809      	bhi.n	40171a <pio_configure_pin_group+0x32>
  401706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40170a:	d01f      	beq.n	40174c <pio_configure_pin_group+0x64>
  40170c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401710:	d02b      	beq.n	40176a <pio_configure_pin_group+0x82>
  401712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401716:	d00a      	beq.n	40172e <pio_configure_pin_group+0x46>
  401718:	e06d      	b.n	4017f6 <pio_configure_pin_group+0x10e>
  40171a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40171e:	d048      	beq.n	4017b2 <pio_configure_pin_group+0xca>
  401720:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401724:	d045      	beq.n	4017b2 <pio_configure_pin_group+0xca>
  401726:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40172a:	d03c      	beq.n	4017a6 <pio_configure_pin_group+0xbe>
  40172c:	e063      	b.n	4017f6 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40172e:	68ba      	ldr	r2, [r7, #8]
  401730:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401734:	68f8      	ldr	r0, [r7, #12]
  401736:	4b33      	ldr	r3, [pc, #204]	; (401804 <pio_configure_pin_group+0x11c>)
  401738:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40173a:	687b      	ldr	r3, [r7, #4]
  40173c:	f003 0301 	and.w	r3, r3, #1
  401740:	461a      	mov	r2, r3
  401742:	68b9      	ldr	r1, [r7, #8]
  401744:	68f8      	ldr	r0, [r7, #12]
  401746:	4b30      	ldr	r3, [pc, #192]	; (401808 <pio_configure_pin_group+0x120>)
  401748:	4798      	blx	r3
		break;
  40174a:	e056      	b.n	4017fa <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40174c:	68ba      	ldr	r2, [r7, #8]
  40174e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401752:	68f8      	ldr	r0, [r7, #12]
  401754:	4b2b      	ldr	r3, [pc, #172]	; (401804 <pio_configure_pin_group+0x11c>)
  401756:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401758:	687b      	ldr	r3, [r7, #4]
  40175a:	f003 0301 	and.w	r3, r3, #1
  40175e:	461a      	mov	r2, r3
  401760:	68b9      	ldr	r1, [r7, #8]
  401762:	68f8      	ldr	r0, [r7, #12]
  401764:	4b28      	ldr	r3, [pc, #160]	; (401808 <pio_configure_pin_group+0x120>)
  401766:	4798      	blx	r3
		break;
  401768:	e047      	b.n	4017fa <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40176a:	68ba      	ldr	r2, [r7, #8]
  40176c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401770:	68f8      	ldr	r0, [r7, #12]
  401772:	4b24      	ldr	r3, [pc, #144]	; (401804 <pio_configure_pin_group+0x11c>)
  401774:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401776:	687b      	ldr	r3, [r7, #4]
  401778:	f003 0301 	and.w	r3, r3, #1
  40177c:	461a      	mov	r2, r3
  40177e:	68b9      	ldr	r1, [r7, #8]
  401780:	68f8      	ldr	r0, [r7, #12]
  401782:	4b21      	ldr	r3, [pc, #132]	; (401808 <pio_configure_pin_group+0x120>)
  401784:	4798      	blx	r3
		break;
  401786:	e038      	b.n	4017fa <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401788:	68ba      	ldr	r2, [r7, #8]
  40178a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40178e:	68f8      	ldr	r0, [r7, #12]
  401790:	4b1c      	ldr	r3, [pc, #112]	; (401804 <pio_configure_pin_group+0x11c>)
  401792:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401794:	687b      	ldr	r3, [r7, #4]
  401796:	f003 0301 	and.w	r3, r3, #1
  40179a:	461a      	mov	r2, r3
  40179c:	68b9      	ldr	r1, [r7, #8]
  40179e:	68f8      	ldr	r0, [r7, #12]
  4017a0:	4b19      	ldr	r3, [pc, #100]	; (401808 <pio_configure_pin_group+0x120>)
  4017a2:	4798      	blx	r3
		break;
  4017a4:	e029      	b.n	4017fa <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4017a6:	687a      	ldr	r2, [r7, #4]
  4017a8:	68b9      	ldr	r1, [r7, #8]
  4017aa:	68f8      	ldr	r0, [r7, #12]
  4017ac:	4b17      	ldr	r3, [pc, #92]	; (40180c <pio_configure_pin_group+0x124>)
  4017ae:	4798      	blx	r3
		break;
  4017b0:	e023      	b.n	4017fa <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4017b2:	687b      	ldr	r3, [r7, #4]
  4017b4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  4017b8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4017bc:	bf0c      	ite	eq
  4017be:	2301      	moveq	r3, #1
  4017c0:	2300      	movne	r3, #0
  4017c2:	b2db      	uxtb	r3, r3
  4017c4:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4017c6:	687b      	ldr	r3, [r7, #4]
  4017c8:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
  4017cc:	2b00      	cmp	r3, #0
  4017ce:	bf14      	ite	ne
  4017d0:	2301      	movne	r3, #1
  4017d2:	2300      	moveq	r3, #0
  4017d4:	b2db      	uxtb	r3, r3
  4017d6:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4017d8:	687b      	ldr	r3, [r7, #4]
  4017da:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
  4017de:	2b00      	cmp	r3, #0
  4017e0:	bf14      	ite	ne
  4017e2:	2301      	movne	r3, #1
  4017e4:	2300      	moveq	r3, #0
  4017e6:	b2db      	uxtb	r3, r3
  4017e8:	9300      	str	r3, [sp, #0]
  4017ea:	460b      	mov	r3, r1
  4017ec:	68b9      	ldr	r1, [r7, #8]
  4017ee:	68f8      	ldr	r0, [r7, #12]
  4017f0:	4c07      	ldr	r4, [pc, #28]	; (401810 <pio_configure_pin_group+0x128>)
  4017f2:	47a0      	blx	r4
		break;
  4017f4:	e001      	b.n	4017fa <pio_configure_pin_group+0x112>

	default:
		return 0;
  4017f6:	2300      	movs	r3, #0
  4017f8:	e000      	b.n	4017fc <pio_configure_pin_group+0x114>
	}

	return 1;
  4017fa:	2301      	movs	r3, #1
}
  4017fc:	4618      	mov	r0, r3
  4017fe:	3714      	adds	r7, #20
  401800:	46bd      	mov	sp, r7
  401802:	bd90      	pop	{r4, r7, pc}
  401804:	004012ff 	.word	0x004012ff
  401808:	004012d5 	.word	0x004012d5
  40180c:	0040140d 	.word	0x0040140d
  401810:	0040148d 	.word	0x0040148d

00401814 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401814:	b480      	push	{r7}
  401816:	b085      	sub	sp, #20
  401818:	af00      	add	r7, sp, #0
  40181a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40181c:	687b      	ldr	r3, [r7, #4]
  40181e:	095b      	lsrs	r3, r3, #5
  401820:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401824:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401828:	025b      	lsls	r3, r3, #9
  40182a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40182c:	68fb      	ldr	r3, [r7, #12]
}
  40182e:	4618      	mov	r0, r3
  401830:	3714      	adds	r7, #20
  401832:	46bd      	mov	sp, r7
  401834:	bc80      	pop	{r7}
  401836:	4770      	bx	lr

00401838 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401838:	b580      	push	{r7, lr}
  40183a:	b084      	sub	sp, #16
  40183c:	af00      	add	r7, sp, #0
  40183e:	6078      	str	r0, [r7, #4]
  401840:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401842:	6878      	ldr	r0, [r7, #4]
  401844:	4b2c      	ldr	r3, [pc, #176]	; (4018f8 <pio_handler_process+0xc0>)
  401846:	4798      	blx	r3
  401848:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40184a:	6878      	ldr	r0, [r7, #4]
  40184c:	4b2b      	ldr	r3, [pc, #172]	; (4018fc <pio_handler_process+0xc4>)
  40184e:	4798      	blx	r3
  401850:	4602      	mov	r2, r0
  401852:	68fb      	ldr	r3, [r7, #12]
  401854:	4013      	ands	r3, r2
  401856:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401858:	68fb      	ldr	r3, [r7, #12]
  40185a:	2b00      	cmp	r3, #0
  40185c:	d03c      	beq.n	4018d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40185e:	2300      	movs	r3, #0
  401860:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401862:	e034      	b.n	4018ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401864:	4a26      	ldr	r2, [pc, #152]	; (401900 <pio_handler_process+0xc8>)
  401866:	68bb      	ldr	r3, [r7, #8]
  401868:	011b      	lsls	r3, r3, #4
  40186a:	4413      	add	r3, r2
  40186c:	681a      	ldr	r2, [r3, #0]
  40186e:	683b      	ldr	r3, [r7, #0]
  401870:	429a      	cmp	r2, r3
  401872:	d126      	bne.n	4018c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401874:	4a22      	ldr	r2, [pc, #136]	; (401900 <pio_handler_process+0xc8>)
  401876:	68bb      	ldr	r3, [r7, #8]
  401878:	011b      	lsls	r3, r3, #4
  40187a:	4413      	add	r3, r2
  40187c:	3304      	adds	r3, #4
  40187e:	681a      	ldr	r2, [r3, #0]
  401880:	68fb      	ldr	r3, [r7, #12]
  401882:	4013      	ands	r3, r2
  401884:	2b00      	cmp	r3, #0
  401886:	d01c      	beq.n	4018c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401888:	4a1d      	ldr	r2, [pc, #116]	; (401900 <pio_handler_process+0xc8>)
  40188a:	68bb      	ldr	r3, [r7, #8]
  40188c:	011b      	lsls	r3, r3, #4
  40188e:	4413      	add	r3, r2
  401890:	330c      	adds	r3, #12
  401892:	681b      	ldr	r3, [r3, #0]
  401894:	491a      	ldr	r1, [pc, #104]	; (401900 <pio_handler_process+0xc8>)
  401896:	68ba      	ldr	r2, [r7, #8]
  401898:	0112      	lsls	r2, r2, #4
  40189a:	440a      	add	r2, r1
  40189c:	6810      	ldr	r0, [r2, #0]
  40189e:	4918      	ldr	r1, [pc, #96]	; (401900 <pio_handler_process+0xc8>)
  4018a0:	68ba      	ldr	r2, [r7, #8]
  4018a2:	0112      	lsls	r2, r2, #4
  4018a4:	440a      	add	r2, r1
  4018a6:	3204      	adds	r2, #4
  4018a8:	6812      	ldr	r2, [r2, #0]
  4018aa:	4611      	mov	r1, r2
  4018ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4018ae:	4a14      	ldr	r2, [pc, #80]	; (401900 <pio_handler_process+0xc8>)
  4018b0:	68bb      	ldr	r3, [r7, #8]
  4018b2:	011b      	lsls	r3, r3, #4
  4018b4:	4413      	add	r3, r2
  4018b6:	3304      	adds	r3, #4
  4018b8:	681b      	ldr	r3, [r3, #0]
  4018ba:	43db      	mvns	r3, r3
  4018bc:	68fa      	ldr	r2, [r7, #12]
  4018be:	4013      	ands	r3, r2
  4018c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4018c2:	68bb      	ldr	r3, [r7, #8]
  4018c4:	3301      	adds	r3, #1
  4018c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4018c8:	68bb      	ldr	r3, [r7, #8]
  4018ca:	2b06      	cmp	r3, #6
  4018cc:	d803      	bhi.n	4018d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4018ce:	68fb      	ldr	r3, [r7, #12]
  4018d0:	2b00      	cmp	r3, #0
  4018d2:	d1c7      	bne.n	401864 <pio_handler_process+0x2c>
  4018d4:	e000      	b.n	4018d8 <pio_handler_process+0xa0>
				break;
  4018d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4018d8:	4b0a      	ldr	r3, [pc, #40]	; (401904 <pio_handler_process+0xcc>)
  4018da:	681b      	ldr	r3, [r3, #0]
  4018dc:	2b00      	cmp	r3, #0
  4018de:	d007      	beq.n	4018f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4018e0:	4b09      	ldr	r3, [pc, #36]	; (401908 <pio_handler_process+0xd0>)
  4018e2:	681b      	ldr	r3, [r3, #0]
  4018e4:	2b00      	cmp	r3, #0
  4018e6:	d003      	beq.n	4018f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4018e8:	4b07      	ldr	r3, [pc, #28]	; (401908 <pio_handler_process+0xd0>)
  4018ea:	681b      	ldr	r3, [r3, #0]
  4018ec:	6878      	ldr	r0, [r7, #4]
  4018ee:	4798      	blx	r3
		}
	}
#endif
}
  4018f0:	bf00      	nop
  4018f2:	3710      	adds	r7, #16
  4018f4:	46bd      	mov	sp, r7
  4018f6:	bd80      	pop	{r7, pc}
  4018f8:	0040150b 	.word	0x0040150b
  4018fc:	00401521 	.word	0x00401521
  401900:	200009e4 	.word	0x200009e4
  401904:	20000eac 	.word	0x20000eac
  401908:	20000a54 	.word	0x20000a54

0040190c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40190c:	b580      	push	{r7, lr}
  40190e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401910:	210b      	movs	r1, #11
  401912:	4802      	ldr	r0, [pc, #8]	; (40191c <PIOA_Handler+0x10>)
  401914:	4b02      	ldr	r3, [pc, #8]	; (401920 <PIOA_Handler+0x14>)
  401916:	4798      	blx	r3
}
  401918:	bf00      	nop
  40191a:	bd80      	pop	{r7, pc}
  40191c:	400e0e00 	.word	0x400e0e00
  401920:	00401839 	.word	0x00401839

00401924 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401924:	b580      	push	{r7, lr}
  401926:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401928:	210c      	movs	r1, #12
  40192a:	4802      	ldr	r0, [pc, #8]	; (401934 <PIOB_Handler+0x10>)
  40192c:	4b02      	ldr	r3, [pc, #8]	; (401938 <PIOB_Handler+0x14>)
  40192e:	4798      	blx	r3
}
  401930:	bf00      	nop
  401932:	bd80      	pop	{r7, pc}
  401934:	400e1000 	.word	0x400e1000
  401938:	00401839 	.word	0x00401839

0040193c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40193c:	b580      	push	{r7, lr}
  40193e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401940:	210d      	movs	r1, #13
  401942:	4802      	ldr	r0, [pc, #8]	; (40194c <PIOC_Handler+0x10>)
  401944:	4b02      	ldr	r3, [pc, #8]	; (401950 <PIOC_Handler+0x14>)
  401946:	4798      	blx	r3
}
  401948:	bf00      	nop
  40194a:	bd80      	pop	{r7, pc}
  40194c:	400e1200 	.word	0x400e1200
  401950:	00401839 	.word	0x00401839

00401954 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401954:	b480      	push	{r7}
  401956:	b085      	sub	sp, #20
  401958:	af00      	add	r7, sp, #0
  40195a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40195c:	491c      	ldr	r1, [pc, #112]	; (4019d0 <pmc_switch_mck_to_pllack+0x7c>)
  40195e:	4b1c      	ldr	r3, [pc, #112]	; (4019d0 <pmc_switch_mck_to_pllack+0x7c>)
  401960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401962:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401966:	687b      	ldr	r3, [r7, #4]
  401968:	4313      	orrs	r3, r2
  40196a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40196c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401970:	60fb      	str	r3, [r7, #12]
  401972:	e007      	b.n	401984 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401974:	68fb      	ldr	r3, [r7, #12]
  401976:	2b00      	cmp	r3, #0
  401978:	d101      	bne.n	40197e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40197a:	2301      	movs	r3, #1
  40197c:	e023      	b.n	4019c6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40197e:	68fb      	ldr	r3, [r7, #12]
  401980:	3b01      	subs	r3, #1
  401982:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401984:	4b12      	ldr	r3, [pc, #72]	; (4019d0 <pmc_switch_mck_to_pllack+0x7c>)
  401986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401988:	f003 0308 	and.w	r3, r3, #8
  40198c:	2b00      	cmp	r3, #0
  40198e:	d0f1      	beq.n	401974 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401990:	4a0f      	ldr	r2, [pc, #60]	; (4019d0 <pmc_switch_mck_to_pllack+0x7c>)
  401992:	4b0f      	ldr	r3, [pc, #60]	; (4019d0 <pmc_switch_mck_to_pllack+0x7c>)
  401994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401996:	f023 0303 	bic.w	r3, r3, #3
  40199a:	f043 0302 	orr.w	r3, r3, #2
  40199e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019a4:	60fb      	str	r3, [r7, #12]
  4019a6:	e007      	b.n	4019b8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019a8:	68fb      	ldr	r3, [r7, #12]
  4019aa:	2b00      	cmp	r3, #0
  4019ac:	d101      	bne.n	4019b2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4019ae:	2301      	movs	r3, #1
  4019b0:	e009      	b.n	4019c6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4019b2:	68fb      	ldr	r3, [r7, #12]
  4019b4:	3b01      	subs	r3, #1
  4019b6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019b8:	4b05      	ldr	r3, [pc, #20]	; (4019d0 <pmc_switch_mck_to_pllack+0x7c>)
  4019ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019bc:	f003 0308 	and.w	r3, r3, #8
  4019c0:	2b00      	cmp	r3, #0
  4019c2:	d0f1      	beq.n	4019a8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4019c4:	2300      	movs	r3, #0
}
  4019c6:	4618      	mov	r0, r3
  4019c8:	3714      	adds	r7, #20
  4019ca:	46bd      	mov	sp, r7
  4019cc:	bc80      	pop	{r7}
  4019ce:	4770      	bx	lr
  4019d0:	400e0400 	.word	0x400e0400

004019d4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4019d4:	b480      	push	{r7}
  4019d6:	b083      	sub	sp, #12
  4019d8:	af00      	add	r7, sp, #0
  4019da:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4019dc:	687b      	ldr	r3, [r7, #4]
  4019de:	2b01      	cmp	r3, #1
  4019e0:	d107      	bne.n	4019f2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4019e2:	4a08      	ldr	r2, [pc, #32]	; (401a04 <pmc_switch_sclk_to_32kxtal+0x30>)
  4019e4:	4b07      	ldr	r3, [pc, #28]	; (401a04 <pmc_switch_sclk_to_32kxtal+0x30>)
  4019e6:	689b      	ldr	r3, [r3, #8]
  4019e8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4019ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4019f0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4019f2:	4b04      	ldr	r3, [pc, #16]	; (401a04 <pmc_switch_sclk_to_32kxtal+0x30>)
  4019f4:	4a04      	ldr	r2, [pc, #16]	; (401a08 <pmc_switch_sclk_to_32kxtal+0x34>)
  4019f6:	601a      	str	r2, [r3, #0]
}
  4019f8:	bf00      	nop
  4019fa:	370c      	adds	r7, #12
  4019fc:	46bd      	mov	sp, r7
  4019fe:	bc80      	pop	{r7}
  401a00:	4770      	bx	lr
  401a02:	bf00      	nop
  401a04:	400e1410 	.word	0x400e1410
  401a08:	a5000008 	.word	0xa5000008

00401a0c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401a0c:	b480      	push	{r7}
  401a0e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401a10:	4b09      	ldr	r3, [pc, #36]	; (401a38 <pmc_osc_is_ready_32kxtal+0x2c>)
  401a12:	695b      	ldr	r3, [r3, #20]
  401a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401a18:	2b00      	cmp	r3, #0
  401a1a:	d007      	beq.n	401a2c <pmc_osc_is_ready_32kxtal+0x20>
  401a1c:	4b07      	ldr	r3, [pc, #28]	; (401a3c <pmc_osc_is_ready_32kxtal+0x30>)
  401a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a24:	2b00      	cmp	r3, #0
  401a26:	d001      	beq.n	401a2c <pmc_osc_is_ready_32kxtal+0x20>
  401a28:	2301      	movs	r3, #1
  401a2a:	e000      	b.n	401a2e <pmc_osc_is_ready_32kxtal+0x22>
  401a2c:	2300      	movs	r3, #0
}
  401a2e:	4618      	mov	r0, r3
  401a30:	46bd      	mov	sp, r7
  401a32:	bc80      	pop	{r7}
  401a34:	4770      	bx	lr
  401a36:	bf00      	nop
  401a38:	400e1410 	.word	0x400e1410
  401a3c:	400e0400 	.word	0x400e0400

00401a40 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401a40:	b480      	push	{r7}
  401a42:	b083      	sub	sp, #12
  401a44:	af00      	add	r7, sp, #0
  401a46:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401a48:	4a18      	ldr	r2, [pc, #96]	; (401aac <pmc_switch_mainck_to_fastrc+0x6c>)
  401a4a:	4b18      	ldr	r3, [pc, #96]	; (401aac <pmc_switch_mainck_to_fastrc+0x6c>)
  401a4c:	6a1b      	ldr	r3, [r3, #32]
  401a4e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401a52:	f043 0308 	orr.w	r3, r3, #8
  401a56:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401a58:	bf00      	nop
  401a5a:	4b14      	ldr	r3, [pc, #80]	; (401aac <pmc_switch_mainck_to_fastrc+0x6c>)
  401a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401a62:	2b00      	cmp	r3, #0
  401a64:	d0f9      	beq.n	401a5a <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401a66:	4911      	ldr	r1, [pc, #68]	; (401aac <pmc_switch_mainck_to_fastrc+0x6c>)
  401a68:	4b10      	ldr	r3, [pc, #64]	; (401aac <pmc_switch_mainck_to_fastrc+0x6c>)
  401a6a:	6a1b      	ldr	r3, [r3, #32]
  401a6c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401a74:	687a      	ldr	r2, [r7, #4]
  401a76:	4313      	orrs	r3, r2
  401a78:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401a7c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401a7e:	bf00      	nop
  401a80:	4b0a      	ldr	r3, [pc, #40]	; (401aac <pmc_switch_mainck_to_fastrc+0x6c>)
  401a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401a88:	2b00      	cmp	r3, #0
  401a8a:	d0f9      	beq.n	401a80 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401a8c:	4a07      	ldr	r2, [pc, #28]	; (401aac <pmc_switch_mainck_to_fastrc+0x6c>)
  401a8e:	4b07      	ldr	r3, [pc, #28]	; (401aac <pmc_switch_mainck_to_fastrc+0x6c>)
  401a90:	6a1b      	ldr	r3, [r3, #32]
  401a92:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401a9a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401a9e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401aa0:	bf00      	nop
  401aa2:	370c      	adds	r7, #12
  401aa4:	46bd      	mov	sp, r7
  401aa6:	bc80      	pop	{r7}
  401aa8:	4770      	bx	lr
  401aaa:	bf00      	nop
  401aac:	400e0400 	.word	0x400e0400

00401ab0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401ab0:	b480      	push	{r7}
  401ab2:	b083      	sub	sp, #12
  401ab4:	af00      	add	r7, sp, #0
  401ab6:	6078      	str	r0, [r7, #4]
  401ab8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401aba:	687b      	ldr	r3, [r7, #4]
  401abc:	2b00      	cmp	r3, #0
  401abe:	d008      	beq.n	401ad2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ac0:	4916      	ldr	r1, [pc, #88]	; (401b1c <pmc_switch_mainck_to_xtal+0x6c>)
  401ac2:	4b16      	ldr	r3, [pc, #88]	; (401b1c <pmc_switch_mainck_to_xtal+0x6c>)
  401ac4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401ac6:	4a16      	ldr	r2, [pc, #88]	; (401b20 <pmc_switch_mainck_to_xtal+0x70>)
  401ac8:	401a      	ands	r2, r3
  401aca:	4b16      	ldr	r3, [pc, #88]	; (401b24 <pmc_switch_mainck_to_xtal+0x74>)
  401acc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ace:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401ad0:	e01e      	b.n	401b10 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ad2:	4912      	ldr	r1, [pc, #72]	; (401b1c <pmc_switch_mainck_to_xtal+0x6c>)
  401ad4:	4b11      	ldr	r3, [pc, #68]	; (401b1c <pmc_switch_mainck_to_xtal+0x6c>)
  401ad6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ad8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401adc:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401ae0:	683a      	ldr	r2, [r7, #0]
  401ae2:	0212      	lsls	r2, r2, #8
  401ae4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ae6:	4313      	orrs	r3, r2
  401ae8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401aec:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401af0:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401af2:	bf00      	nop
  401af4:	4b09      	ldr	r3, [pc, #36]	; (401b1c <pmc_switch_mainck_to_xtal+0x6c>)
  401af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401af8:	f003 0301 	and.w	r3, r3, #1
  401afc:	2b00      	cmp	r3, #0
  401afe:	d0f9      	beq.n	401af4 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401b00:	4a06      	ldr	r2, [pc, #24]	; (401b1c <pmc_switch_mainck_to_xtal+0x6c>)
  401b02:	4b06      	ldr	r3, [pc, #24]	; (401b1c <pmc_switch_mainck_to_xtal+0x6c>)
  401b04:	6a1b      	ldr	r3, [r3, #32]
  401b06:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401b0e:	6213      	str	r3, [r2, #32]
}
  401b10:	bf00      	nop
  401b12:	370c      	adds	r7, #12
  401b14:	46bd      	mov	sp, r7
  401b16:	bc80      	pop	{r7}
  401b18:	4770      	bx	lr
  401b1a:	bf00      	nop
  401b1c:	400e0400 	.word	0x400e0400
  401b20:	fec8fffc 	.word	0xfec8fffc
  401b24:	01370002 	.word	0x01370002

00401b28 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401b28:	b480      	push	{r7}
  401b2a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401b2c:	4b03      	ldr	r3, [pc, #12]	; (401b3c <pmc_osc_is_ready_mainck+0x14>)
  401b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401b34:	4618      	mov	r0, r3
  401b36:	46bd      	mov	sp, r7
  401b38:	bc80      	pop	{r7}
  401b3a:	4770      	bx	lr
  401b3c:	400e0400 	.word	0x400e0400

00401b40 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401b40:	b480      	push	{r7}
  401b42:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401b44:	4b03      	ldr	r3, [pc, #12]	; (401b54 <pmc_disable_pllack+0x14>)
  401b46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401b4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401b4c:	bf00      	nop
  401b4e:	46bd      	mov	sp, r7
  401b50:	bc80      	pop	{r7}
  401b52:	4770      	bx	lr
  401b54:	400e0400 	.word	0x400e0400

00401b58 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401b58:	b480      	push	{r7}
  401b5a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401b5c:	4b03      	ldr	r3, [pc, #12]	; (401b6c <pmc_is_locked_pllack+0x14>)
  401b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b60:	f003 0302 	and.w	r3, r3, #2
}
  401b64:	4618      	mov	r0, r3
  401b66:	46bd      	mov	sp, r7
  401b68:	bc80      	pop	{r7}
  401b6a:	4770      	bx	lr
  401b6c:	400e0400 	.word	0x400e0400

00401b70 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401b70:	b480      	push	{r7}
  401b72:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401b74:	4b03      	ldr	r3, [pc, #12]	; (401b84 <pmc_disable_pllbck+0x14>)
  401b76:	2200      	movs	r2, #0
  401b78:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401b7a:	bf00      	nop
  401b7c:	46bd      	mov	sp, r7
  401b7e:	bc80      	pop	{r7}
  401b80:	4770      	bx	lr
  401b82:	bf00      	nop
  401b84:	400e0400 	.word	0x400e0400

00401b88 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401b88:	b480      	push	{r7}
  401b8a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401b8c:	4b03      	ldr	r3, [pc, #12]	; (401b9c <pmc_is_locked_pllbck+0x14>)
  401b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b90:	f003 0304 	and.w	r3, r3, #4
}
  401b94:	4618      	mov	r0, r3
  401b96:	46bd      	mov	sp, r7
  401b98:	bc80      	pop	{r7}
  401b9a:	4770      	bx	lr
  401b9c:	400e0400 	.word	0x400e0400

00401ba0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401ba0:	b480      	push	{r7}
  401ba2:	b083      	sub	sp, #12
  401ba4:	af00      	add	r7, sp, #0
  401ba6:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401ba8:	687b      	ldr	r3, [r7, #4]
  401baa:	2b22      	cmp	r3, #34	; 0x22
  401bac:	d901      	bls.n	401bb2 <pmc_enable_periph_clk+0x12>
		return 1;
  401bae:	2301      	movs	r3, #1
  401bb0:	e02f      	b.n	401c12 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401bb2:	687b      	ldr	r3, [r7, #4]
  401bb4:	2b1f      	cmp	r3, #31
  401bb6:	d813      	bhi.n	401be0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401bb8:	4b18      	ldr	r3, [pc, #96]	; (401c1c <pmc_enable_periph_clk+0x7c>)
  401bba:	699a      	ldr	r2, [r3, #24]
  401bbc:	2101      	movs	r1, #1
  401bbe:	687b      	ldr	r3, [r7, #4]
  401bc0:	fa01 f303 	lsl.w	r3, r1, r3
  401bc4:	401a      	ands	r2, r3
  401bc6:	2101      	movs	r1, #1
  401bc8:	687b      	ldr	r3, [r7, #4]
  401bca:	fa01 f303 	lsl.w	r3, r1, r3
  401bce:	429a      	cmp	r2, r3
  401bd0:	d01e      	beq.n	401c10 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401bd2:	4a12      	ldr	r2, [pc, #72]	; (401c1c <pmc_enable_periph_clk+0x7c>)
  401bd4:	2101      	movs	r1, #1
  401bd6:	687b      	ldr	r3, [r7, #4]
  401bd8:	fa01 f303 	lsl.w	r3, r1, r3
  401bdc:	6113      	str	r3, [r2, #16]
  401bde:	e017      	b.n	401c10 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401be0:	687b      	ldr	r3, [r7, #4]
  401be2:	3b20      	subs	r3, #32
  401be4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401be6:	4b0d      	ldr	r3, [pc, #52]	; (401c1c <pmc_enable_periph_clk+0x7c>)
  401be8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401bec:	2101      	movs	r1, #1
  401bee:	687b      	ldr	r3, [r7, #4]
  401bf0:	fa01 f303 	lsl.w	r3, r1, r3
  401bf4:	401a      	ands	r2, r3
  401bf6:	2101      	movs	r1, #1
  401bf8:	687b      	ldr	r3, [r7, #4]
  401bfa:	fa01 f303 	lsl.w	r3, r1, r3
  401bfe:	429a      	cmp	r2, r3
  401c00:	d006      	beq.n	401c10 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401c02:	4a06      	ldr	r2, [pc, #24]	; (401c1c <pmc_enable_periph_clk+0x7c>)
  401c04:	2101      	movs	r1, #1
  401c06:	687b      	ldr	r3, [r7, #4]
  401c08:	fa01 f303 	lsl.w	r3, r1, r3
  401c0c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401c10:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401c12:	4618      	mov	r0, r3
  401c14:	370c      	adds	r7, #12
  401c16:	46bd      	mov	sp, r7
  401c18:	bc80      	pop	{r7}
  401c1a:	4770      	bx	lr
  401c1c:	400e0400 	.word	0x400e0400

00401c20 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401c20:	b480      	push	{r7}
  401c22:	b085      	sub	sp, #20
  401c24:	af00      	add	r7, sp, #0
  401c26:	6078      	str	r0, [r7, #4]
  401c28:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401c2a:	2300      	movs	r3, #0
  401c2c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401c2e:	687b      	ldr	r3, [r7, #4]
  401c30:	22ac      	movs	r2, #172	; 0xac
  401c32:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401c34:	683b      	ldr	r3, [r7, #0]
  401c36:	681a      	ldr	r2, [r3, #0]
  401c38:	683b      	ldr	r3, [r7, #0]
  401c3a:	685b      	ldr	r3, [r3, #4]
  401c3c:	fbb2 f3f3 	udiv	r3, r2, r3
  401c40:	091b      	lsrs	r3, r3, #4
  401c42:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401c44:	68fb      	ldr	r3, [r7, #12]
  401c46:	2b00      	cmp	r3, #0
  401c48:	d003      	beq.n	401c52 <uart_init+0x32>
  401c4a:	68fb      	ldr	r3, [r7, #12]
  401c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401c50:	d301      	bcc.n	401c56 <uart_init+0x36>
		return 1;
  401c52:	2301      	movs	r3, #1
  401c54:	e00f      	b.n	401c76 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  401c56:	687b      	ldr	r3, [r7, #4]
  401c58:	68fa      	ldr	r2, [r7, #12]
  401c5a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401c5c:	683b      	ldr	r3, [r7, #0]
  401c5e:	689a      	ldr	r2, [r3, #8]
  401c60:	687b      	ldr	r3, [r7, #4]
  401c62:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401c64:	687b      	ldr	r3, [r7, #4]
  401c66:	f240 2202 	movw	r2, #514	; 0x202
  401c6a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401c6e:	687b      	ldr	r3, [r7, #4]
  401c70:	2250      	movs	r2, #80	; 0x50
  401c72:	601a      	str	r2, [r3, #0]

	return 0;
  401c74:	2300      	movs	r3, #0
}
  401c76:	4618      	mov	r0, r3
  401c78:	3714      	adds	r7, #20
  401c7a:	46bd      	mov	sp, r7
  401c7c:	bc80      	pop	{r7}
  401c7e:	4770      	bx	lr

00401c80 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401c80:	b480      	push	{r7}
  401c82:	b083      	sub	sp, #12
  401c84:	af00      	add	r7, sp, #0
  401c86:	6078      	str	r0, [r7, #4]
  401c88:	460b      	mov	r3, r1
  401c8a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401c8c:	687b      	ldr	r3, [r7, #4]
  401c8e:	695b      	ldr	r3, [r3, #20]
  401c90:	f003 0302 	and.w	r3, r3, #2
  401c94:	2b00      	cmp	r3, #0
  401c96:	d101      	bne.n	401c9c <uart_write+0x1c>
		return 1;
  401c98:	2301      	movs	r3, #1
  401c9a:	e003      	b.n	401ca4 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401c9c:	78fa      	ldrb	r2, [r7, #3]
  401c9e:	687b      	ldr	r3, [r7, #4]
  401ca0:	61da      	str	r2, [r3, #28]
	return 0;
  401ca2:	2300      	movs	r3, #0
}
  401ca4:	4618      	mov	r0, r3
  401ca6:	370c      	adds	r7, #12
  401ca8:	46bd      	mov	sp, r7
  401caa:	bc80      	pop	{r7}
  401cac:	4770      	bx	lr

00401cae <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401cae:	b480      	push	{r7}
  401cb0:	b083      	sub	sp, #12
  401cb2:	af00      	add	r7, sp, #0
  401cb4:	6078      	str	r0, [r7, #4]
  401cb6:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401cb8:	687b      	ldr	r3, [r7, #4]
  401cba:	695b      	ldr	r3, [r3, #20]
  401cbc:	f003 0301 	and.w	r3, r3, #1
  401cc0:	2b00      	cmp	r3, #0
  401cc2:	d101      	bne.n	401cc8 <uart_read+0x1a>
		return 1;
  401cc4:	2301      	movs	r3, #1
  401cc6:	e005      	b.n	401cd4 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401cc8:	687b      	ldr	r3, [r7, #4]
  401cca:	699b      	ldr	r3, [r3, #24]
  401ccc:	b2da      	uxtb	r2, r3
  401cce:	683b      	ldr	r3, [r7, #0]
  401cd0:	701a      	strb	r2, [r3, #0]
	return 0;
  401cd2:	2300      	movs	r3, #0
}
  401cd4:	4618      	mov	r0, r3
  401cd6:	370c      	adds	r7, #12
  401cd8:	46bd      	mov	sp, r7
  401cda:	bc80      	pop	{r7}
  401cdc:	4770      	bx	lr

00401cde <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401cde:	b480      	push	{r7}
  401ce0:	b089      	sub	sp, #36	; 0x24
  401ce2:	af00      	add	r7, sp, #0
  401ce4:	60f8      	str	r0, [r7, #12]
  401ce6:	60b9      	str	r1, [r7, #8]
  401ce8:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401cea:	68bb      	ldr	r3, [r7, #8]
  401cec:	011a      	lsls	r2, r3, #4
  401cee:	687b      	ldr	r3, [r7, #4]
  401cf0:	429a      	cmp	r2, r3
  401cf2:	d802      	bhi.n	401cfa <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401cf4:	2310      	movs	r3, #16
  401cf6:	61fb      	str	r3, [r7, #28]
  401cf8:	e001      	b.n	401cfe <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401cfa:	2308      	movs	r3, #8
  401cfc:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401cfe:	687b      	ldr	r3, [r7, #4]
  401d00:	00da      	lsls	r2, r3, #3
  401d02:	69fb      	ldr	r3, [r7, #28]
  401d04:	68b9      	ldr	r1, [r7, #8]
  401d06:	fb01 f303 	mul.w	r3, r1, r3
  401d0a:	085b      	lsrs	r3, r3, #1
  401d0c:	441a      	add	r2, r3
  401d0e:	69fb      	ldr	r3, [r7, #28]
  401d10:	68b9      	ldr	r1, [r7, #8]
  401d12:	fb01 f303 	mul.w	r3, r1, r3
  401d16:	fbb2 f3f3 	udiv	r3, r2, r3
  401d1a:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401d1c:	69bb      	ldr	r3, [r7, #24]
  401d1e:	08db      	lsrs	r3, r3, #3
  401d20:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401d22:	69bb      	ldr	r3, [r7, #24]
  401d24:	f003 0307 	and.w	r3, r3, #7
  401d28:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401d2a:	697b      	ldr	r3, [r7, #20]
  401d2c:	2b00      	cmp	r3, #0
  401d2e:	d003      	beq.n	401d38 <usart_set_async_baudrate+0x5a>
  401d30:	697b      	ldr	r3, [r7, #20]
  401d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401d36:	d301      	bcc.n	401d3c <usart_set_async_baudrate+0x5e>
		return 1;
  401d38:	2301      	movs	r3, #1
  401d3a:	e00f      	b.n	401d5c <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401d3c:	69fb      	ldr	r3, [r7, #28]
  401d3e:	2b08      	cmp	r3, #8
  401d40:	d105      	bne.n	401d4e <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401d42:	68fb      	ldr	r3, [r7, #12]
  401d44:	685b      	ldr	r3, [r3, #4]
  401d46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401d4a:	68fb      	ldr	r3, [r7, #12]
  401d4c:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401d4e:	693b      	ldr	r3, [r7, #16]
  401d50:	041a      	lsls	r2, r3, #16
  401d52:	697b      	ldr	r3, [r7, #20]
  401d54:	431a      	orrs	r2, r3
  401d56:	68fb      	ldr	r3, [r7, #12]
  401d58:	621a      	str	r2, [r3, #32]

	return 0;
  401d5a:	2300      	movs	r3, #0
}
  401d5c:	4618      	mov	r0, r3
  401d5e:	3724      	adds	r7, #36	; 0x24
  401d60:	46bd      	mov	sp, r7
  401d62:	bc80      	pop	{r7}
  401d64:	4770      	bx	lr
	...

00401d68 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401d68:	b580      	push	{r7, lr}
  401d6a:	b082      	sub	sp, #8
  401d6c:	af00      	add	r7, sp, #0
  401d6e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401d70:	6878      	ldr	r0, [r7, #4]
  401d72:	4b0f      	ldr	r3, [pc, #60]	; (401db0 <usart_reset+0x48>)
  401d74:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401d76:	687b      	ldr	r3, [r7, #4]
  401d78:	2200      	movs	r2, #0
  401d7a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401d7c:	687b      	ldr	r3, [r7, #4]
  401d7e:	2200      	movs	r2, #0
  401d80:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401d82:	687b      	ldr	r3, [r7, #4]
  401d84:	2200      	movs	r2, #0
  401d86:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401d88:	6878      	ldr	r0, [r7, #4]
  401d8a:	4b0a      	ldr	r3, [pc, #40]	; (401db4 <usart_reset+0x4c>)
  401d8c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401d8e:	6878      	ldr	r0, [r7, #4]
  401d90:	4b09      	ldr	r3, [pc, #36]	; (401db8 <usart_reset+0x50>)
  401d92:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401d94:	6878      	ldr	r0, [r7, #4]
  401d96:	4b09      	ldr	r3, [pc, #36]	; (401dbc <usart_reset+0x54>)
  401d98:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401d9a:	6878      	ldr	r0, [r7, #4]
  401d9c:	4b08      	ldr	r3, [pc, #32]	; (401dc0 <usart_reset+0x58>)
  401d9e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  401da0:	6878      	ldr	r0, [r7, #4]
  401da2:	4b08      	ldr	r3, [pc, #32]	; (401dc4 <usart_reset+0x5c>)
  401da4:	4798      	blx	r3
#endif
}
  401da6:	bf00      	nop
  401da8:	3708      	adds	r7, #8
  401daa:	46bd      	mov	sp, r7
  401dac:	bd80      	pop	{r7, pc}
  401dae:	bf00      	nop
  401db0:	00401fbd 	.word	0x00401fbd
  401db4:	00401e65 	.word	0x00401e65
  401db8:	00401e95 	.word	0x00401e95
  401dbc:	00401edd 	.word	0x00401edd
  401dc0:	00401f11 	.word	0x00401f11
  401dc4:	00401ef7 	.word	0x00401ef7

00401dc8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401dc8:	b580      	push	{r7, lr}
  401dca:	b084      	sub	sp, #16
  401dcc:	af00      	add	r7, sp, #0
  401dce:	60f8      	str	r0, [r7, #12]
  401dd0:	60b9      	str	r1, [r7, #8]
  401dd2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401dd4:	68f8      	ldr	r0, [r7, #12]
  401dd6:	4b1a      	ldr	r3, [pc, #104]	; (401e40 <usart_init_rs232+0x78>)
  401dd8:	4798      	blx	r3

	ul_reg_val = 0;
  401dda:	4b1a      	ldr	r3, [pc, #104]	; (401e44 <usart_init_rs232+0x7c>)
  401ddc:	2200      	movs	r2, #0
  401dde:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401de0:	68bb      	ldr	r3, [r7, #8]
  401de2:	2b00      	cmp	r3, #0
  401de4:	d009      	beq.n	401dfa <usart_init_rs232+0x32>
  401de6:	68bb      	ldr	r3, [r7, #8]
  401de8:	681b      	ldr	r3, [r3, #0]
  401dea:	687a      	ldr	r2, [r7, #4]
  401dec:	4619      	mov	r1, r3
  401dee:	68f8      	ldr	r0, [r7, #12]
  401df0:	4b15      	ldr	r3, [pc, #84]	; (401e48 <usart_init_rs232+0x80>)
  401df2:	4798      	blx	r3
  401df4:	4603      	mov	r3, r0
  401df6:	2b00      	cmp	r3, #0
  401df8:	d001      	beq.n	401dfe <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401dfa:	2301      	movs	r3, #1
  401dfc:	e01b      	b.n	401e36 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401dfe:	68bb      	ldr	r3, [r7, #8]
  401e00:	685a      	ldr	r2, [r3, #4]
  401e02:	68bb      	ldr	r3, [r7, #8]
  401e04:	689b      	ldr	r3, [r3, #8]
  401e06:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401e08:	68bb      	ldr	r3, [r7, #8]
  401e0a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401e0c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401e0e:	68bb      	ldr	r3, [r7, #8]
  401e10:	68db      	ldr	r3, [r3, #12]
  401e12:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401e14:	4b0b      	ldr	r3, [pc, #44]	; (401e44 <usart_init_rs232+0x7c>)
  401e16:	681b      	ldr	r3, [r3, #0]
  401e18:	4313      	orrs	r3, r2
  401e1a:	4a0a      	ldr	r2, [pc, #40]	; (401e44 <usart_init_rs232+0x7c>)
  401e1c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401e1e:	4b09      	ldr	r3, [pc, #36]	; (401e44 <usart_init_rs232+0x7c>)
  401e20:	681b      	ldr	r3, [r3, #0]
  401e22:	4a08      	ldr	r2, [pc, #32]	; (401e44 <usart_init_rs232+0x7c>)
  401e24:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401e26:	68fb      	ldr	r3, [r7, #12]
  401e28:	685a      	ldr	r2, [r3, #4]
  401e2a:	4b06      	ldr	r3, [pc, #24]	; (401e44 <usart_init_rs232+0x7c>)
  401e2c:	681b      	ldr	r3, [r3, #0]
  401e2e:	431a      	orrs	r2, r3
  401e30:	68fb      	ldr	r3, [r7, #12]
  401e32:	605a      	str	r2, [r3, #4]

	return 0;
  401e34:	2300      	movs	r3, #0
}
  401e36:	4618      	mov	r0, r3
  401e38:	3710      	adds	r7, #16
  401e3a:	46bd      	mov	sp, r7
  401e3c:	bd80      	pop	{r7, pc}
  401e3e:	bf00      	nop
  401e40:	00401d69 	.word	0x00401d69
  401e44:	20000a58 	.word	0x20000a58
  401e48:	00401cdf 	.word	0x00401cdf

00401e4c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401e4c:	b480      	push	{r7}
  401e4e:	b083      	sub	sp, #12
  401e50:	af00      	add	r7, sp, #0
  401e52:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401e54:	687b      	ldr	r3, [r7, #4]
  401e56:	2240      	movs	r2, #64	; 0x40
  401e58:	601a      	str	r2, [r3, #0]
}
  401e5a:	bf00      	nop
  401e5c:	370c      	adds	r7, #12
  401e5e:	46bd      	mov	sp, r7
  401e60:	bc80      	pop	{r7}
  401e62:	4770      	bx	lr

00401e64 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401e64:	b480      	push	{r7}
  401e66:	b083      	sub	sp, #12
  401e68:	af00      	add	r7, sp, #0
  401e6a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401e6c:	687b      	ldr	r3, [r7, #4]
  401e6e:	2288      	movs	r2, #136	; 0x88
  401e70:	601a      	str	r2, [r3, #0]
}
  401e72:	bf00      	nop
  401e74:	370c      	adds	r7, #12
  401e76:	46bd      	mov	sp, r7
  401e78:	bc80      	pop	{r7}
  401e7a:	4770      	bx	lr

00401e7c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401e7c:	b480      	push	{r7}
  401e7e:	b083      	sub	sp, #12
  401e80:	af00      	add	r7, sp, #0
  401e82:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401e84:	687b      	ldr	r3, [r7, #4]
  401e86:	2210      	movs	r2, #16
  401e88:	601a      	str	r2, [r3, #0]
}
  401e8a:	bf00      	nop
  401e8c:	370c      	adds	r7, #12
  401e8e:	46bd      	mov	sp, r7
  401e90:	bc80      	pop	{r7}
  401e92:	4770      	bx	lr

00401e94 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401e94:	b480      	push	{r7}
  401e96:	b083      	sub	sp, #12
  401e98:	af00      	add	r7, sp, #0
  401e9a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401e9c:	687b      	ldr	r3, [r7, #4]
  401e9e:	2224      	movs	r2, #36	; 0x24
  401ea0:	601a      	str	r2, [r3, #0]
}
  401ea2:	bf00      	nop
  401ea4:	370c      	adds	r7, #12
  401ea6:	46bd      	mov	sp, r7
  401ea8:	bc80      	pop	{r7}
  401eaa:	4770      	bx	lr

00401eac <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401eac:	b480      	push	{r7}
  401eae:	b083      	sub	sp, #12
  401eb0:	af00      	add	r7, sp, #0
  401eb2:	6078      	str	r0, [r7, #4]
  401eb4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  401eb6:	687b      	ldr	r3, [r7, #4]
  401eb8:	683a      	ldr	r2, [r7, #0]
  401eba:	609a      	str	r2, [r3, #8]
}
  401ebc:	bf00      	nop
  401ebe:	370c      	adds	r7, #12
  401ec0:	46bd      	mov	sp, r7
  401ec2:	bc80      	pop	{r7}
  401ec4:	4770      	bx	lr

00401ec6 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  401ec6:	b480      	push	{r7}
  401ec8:	b083      	sub	sp, #12
  401eca:	af00      	add	r7, sp, #0
  401ecc:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  401ece:	687b      	ldr	r3, [r7, #4]
  401ed0:	691b      	ldr	r3, [r3, #16]
}
  401ed2:	4618      	mov	r0, r3
  401ed4:	370c      	adds	r7, #12
  401ed6:	46bd      	mov	sp, r7
  401ed8:	bc80      	pop	{r7}
  401eda:	4770      	bx	lr

00401edc <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401edc:	b480      	push	{r7}
  401ede:	b083      	sub	sp, #12
  401ee0:	af00      	add	r7, sp, #0
  401ee2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401ee4:	687b      	ldr	r3, [r7, #4]
  401ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
  401eea:	601a      	str	r2, [r3, #0]
}
  401eec:	bf00      	nop
  401eee:	370c      	adds	r7, #12
  401ef0:	46bd      	mov	sp, r7
  401ef2:	bc80      	pop	{r7}
  401ef4:	4770      	bx	lr

00401ef6 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  401ef6:	b480      	push	{r7}
  401ef8:	b083      	sub	sp, #12
  401efa:	af00      	add	r7, sp, #0
  401efc:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  401efe:	687b      	ldr	r3, [r7, #4]
  401f00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401f04:	601a      	str	r2, [r3, #0]
}
  401f06:	bf00      	nop
  401f08:	370c      	adds	r7, #12
  401f0a:	46bd      	mov	sp, r7
  401f0c:	bc80      	pop	{r7}
  401f0e:	4770      	bx	lr

00401f10 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401f10:	b480      	push	{r7}
  401f12:	b083      	sub	sp, #12
  401f14:	af00      	add	r7, sp, #0
  401f16:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401f18:	687b      	ldr	r3, [r7, #4]
  401f1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401f1e:	601a      	str	r2, [r3, #0]
}
  401f20:	bf00      	nop
  401f22:	370c      	adds	r7, #12
  401f24:	46bd      	mov	sp, r7
  401f26:	bc80      	pop	{r7}
  401f28:	4770      	bx	lr

00401f2a <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401f2a:	b480      	push	{r7}
  401f2c:	b083      	sub	sp, #12
  401f2e:	af00      	add	r7, sp, #0
  401f30:	6078      	str	r0, [r7, #4]
  401f32:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401f34:	687b      	ldr	r3, [r7, #4]
  401f36:	695b      	ldr	r3, [r3, #20]
  401f38:	f003 0302 	and.w	r3, r3, #2
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d101      	bne.n	401f44 <usart_write+0x1a>
		return 1;
  401f40:	2301      	movs	r3, #1
  401f42:	e005      	b.n	401f50 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401f44:	683b      	ldr	r3, [r7, #0]
  401f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401f4a:	687b      	ldr	r3, [r7, #4]
  401f4c:	61da      	str	r2, [r3, #28]
	return 0;
  401f4e:	2300      	movs	r3, #0
}
  401f50:	4618      	mov	r0, r3
  401f52:	370c      	adds	r7, #12
  401f54:	46bd      	mov	sp, r7
  401f56:	bc80      	pop	{r7}
  401f58:	4770      	bx	lr

00401f5a <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401f5a:	b480      	push	{r7}
  401f5c:	b083      	sub	sp, #12
  401f5e:	af00      	add	r7, sp, #0
  401f60:	6078      	str	r0, [r7, #4]
  401f62:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f64:	687b      	ldr	r3, [r7, #4]
  401f66:	695b      	ldr	r3, [r3, #20]
  401f68:	f003 0301 	and.w	r3, r3, #1
  401f6c:	2b00      	cmp	r3, #0
  401f6e:	d101      	bne.n	401f74 <usart_read+0x1a>
		return 1;
  401f70:	2301      	movs	r3, #1
  401f72:	e006      	b.n	401f82 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401f74:	687b      	ldr	r3, [r7, #4]
  401f76:	699b      	ldr	r3, [r3, #24]
  401f78:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401f7c:	683b      	ldr	r3, [r7, #0]
  401f7e:	601a      	str	r2, [r3, #0]

	return 0;
  401f80:	2300      	movs	r3, #0
}
  401f82:	4618      	mov	r0, r3
  401f84:	370c      	adds	r7, #12
  401f86:	46bd      	mov	sp, r7
  401f88:	bc80      	pop	{r7}
  401f8a:	4770      	bx	lr

00401f8c <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  401f8c:	b480      	push	{r7}
  401f8e:	b083      	sub	sp, #12
  401f90:	af00      	add	r7, sp, #0
  401f92:	6078      	str	r0, [r7, #4]
  401f94:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f96:	bf00      	nop
  401f98:	687b      	ldr	r3, [r7, #4]
  401f9a:	695b      	ldr	r3, [r3, #20]
  401f9c:	f003 0301 	and.w	r3, r3, #1
  401fa0:	2b00      	cmp	r3, #0
  401fa2:	d0f9      	beq.n	401f98 <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401fa4:	687b      	ldr	r3, [r7, #4]
  401fa6:	699b      	ldr	r3, [r3, #24]
  401fa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401fac:	683b      	ldr	r3, [r7, #0]
  401fae:	601a      	str	r2, [r3, #0]

	return 0;
  401fb0:	2300      	movs	r3, #0
}
  401fb2:	4618      	mov	r0, r3
  401fb4:	370c      	adds	r7, #12
  401fb6:	46bd      	mov	sp, r7
  401fb8:	bc80      	pop	{r7}
  401fba:	4770      	bx	lr

00401fbc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401fbc:	b480      	push	{r7}
  401fbe:	b083      	sub	sp, #12
  401fc0:	af00      	add	r7, sp, #0
  401fc2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401fc4:	687b      	ldr	r3, [r7, #4]
  401fc6:	4a04      	ldr	r2, [pc, #16]	; (401fd8 <usart_disable_writeprotect+0x1c>)
  401fc8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401fcc:	bf00      	nop
  401fce:	370c      	adds	r7, #12
  401fd0:	46bd      	mov	sp, r7
  401fd2:	bc80      	pop	{r7}
  401fd4:	4770      	bx	lr
  401fd6:	bf00      	nop
  401fd8:	55534100 	.word	0x55534100

00401fdc <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401fdc:	b480      	push	{r7}
  401fde:	b083      	sub	sp, #12
  401fe0:	af00      	add	r7, sp, #0
  401fe2:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401fe4:	687b      	ldr	r3, [r7, #4]
  401fe6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401fea:	605a      	str	r2, [r3, #4]

}
  401fec:	bf00      	nop
  401fee:	370c      	adds	r7, #12
  401ff0:	46bd      	mov	sp, r7
  401ff2:	bc80      	pop	{r7}
  401ff4:	4770      	bx	lr
	...

00401ff8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401ff8:	b580      	push	{r7, lr}
  401ffa:	b084      	sub	sp, #16
  401ffc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401ffe:	4b27      	ldr	r3, [pc, #156]	; (40209c <Reset_Handler+0xa4>)
  402000:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402002:	4b27      	ldr	r3, [pc, #156]	; (4020a0 <Reset_Handler+0xa8>)
  402004:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  402006:	68fa      	ldr	r2, [r7, #12]
  402008:	68bb      	ldr	r3, [r7, #8]
  40200a:	429a      	cmp	r2, r3
  40200c:	d90d      	bls.n	40202a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40200e:	e007      	b.n	402020 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402010:	68bb      	ldr	r3, [r7, #8]
  402012:	1d1a      	adds	r2, r3, #4
  402014:	60ba      	str	r2, [r7, #8]
  402016:	68fa      	ldr	r2, [r7, #12]
  402018:	1d11      	adds	r1, r2, #4
  40201a:	60f9      	str	r1, [r7, #12]
  40201c:	6812      	ldr	r2, [r2, #0]
  40201e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402020:	68bb      	ldr	r3, [r7, #8]
  402022:	4a20      	ldr	r2, [pc, #128]	; (4020a4 <Reset_Handler+0xac>)
  402024:	4293      	cmp	r3, r2
  402026:	d3f3      	bcc.n	402010 <Reset_Handler+0x18>
  402028:	e020      	b.n	40206c <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  40202a:	68fa      	ldr	r2, [r7, #12]
  40202c:	68bb      	ldr	r3, [r7, #8]
  40202e:	429a      	cmp	r2, r3
  402030:	d21c      	bcs.n	40206c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402032:	4a1c      	ldr	r2, [pc, #112]	; (4020a4 <Reset_Handler+0xac>)
  402034:	4b1a      	ldr	r3, [pc, #104]	; (4020a0 <Reset_Handler+0xa8>)
  402036:	1ad3      	subs	r3, r2, r3
  402038:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40203a:	68fa      	ldr	r2, [r7, #12]
  40203c:	687b      	ldr	r3, [r7, #4]
  40203e:	4413      	add	r3, r2
  402040:	3b04      	subs	r3, #4
  402042:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402044:	68ba      	ldr	r2, [r7, #8]
  402046:	687b      	ldr	r3, [r7, #4]
  402048:	4413      	add	r3, r2
  40204a:	3b04      	subs	r3, #4
  40204c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40204e:	e00a      	b.n	402066 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402050:	68bb      	ldr	r3, [r7, #8]
  402052:	1f1a      	subs	r2, r3, #4
  402054:	60ba      	str	r2, [r7, #8]
  402056:	68fa      	ldr	r2, [r7, #12]
  402058:	1f11      	subs	r1, r2, #4
  40205a:	60f9      	str	r1, [r7, #12]
  40205c:	6812      	ldr	r2, [r2, #0]
  40205e:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402060:	687b      	ldr	r3, [r7, #4]
  402062:	3b04      	subs	r3, #4
  402064:	607b      	str	r3, [r7, #4]
  402066:	687b      	ldr	r3, [r7, #4]
  402068:	2b00      	cmp	r3, #0
  40206a:	d1f1      	bne.n	402050 <Reset_Handler+0x58>
		}
	}
	__NOP();
  40206c:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40206e:	4b0e      	ldr	r3, [pc, #56]	; (4020a8 <Reset_Handler+0xb0>)
  402070:	60bb      	str	r3, [r7, #8]
  402072:	e004      	b.n	40207e <Reset_Handler+0x86>
		*pDest++ = 0;
  402074:	68bb      	ldr	r3, [r7, #8]
  402076:	1d1a      	adds	r2, r3, #4
  402078:	60ba      	str	r2, [r7, #8]
  40207a:	2200      	movs	r2, #0
  40207c:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  40207e:	68bb      	ldr	r3, [r7, #8]
  402080:	4a0a      	ldr	r2, [pc, #40]	; (4020ac <Reset_Handler+0xb4>)
  402082:	4293      	cmp	r3, r2
  402084:	d3f6      	bcc.n	402074 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402086:	4b0a      	ldr	r3, [pc, #40]	; (4020b0 <Reset_Handler+0xb8>)
  402088:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40208a:	4a0a      	ldr	r2, [pc, #40]	; (4020b4 <Reset_Handler+0xbc>)
  40208c:	68fb      	ldr	r3, [r7, #12]
  40208e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402090:	4b09      	ldr	r3, [pc, #36]	; (4020b8 <Reset_Handler+0xc0>)
  402092:	4798      	blx	r3

	/* Branch to main function */
	main();
  402094:	4b09      	ldr	r3, [pc, #36]	; (4020bc <Reset_Handler+0xc4>)
  402096:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402098:	e7fe      	b.n	402098 <Reset_Handler+0xa0>
  40209a:	bf00      	nop
  40209c:	00405690 	.word	0x00405690
  4020a0:	20000000 	.word	0x20000000
  4020a4:	200009c0 	.word	0x200009c0
  4020a8:	200009c0 	.word	0x200009c0
  4020ac:	20000ed8 	.word	0x20000ed8
  4020b0:	00400000 	.word	0x00400000
  4020b4:	e000ed00 	.word	0xe000ed00
  4020b8:	00402741 	.word	0x00402741
  4020bc:	004023d9 	.word	0x004023d9

004020c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4020c0:	b480      	push	{r7}
  4020c2:	af00      	add	r7, sp, #0
	while (1) {
  4020c4:	e7fe      	b.n	4020c4 <Dummy_Handler+0x4>
	...

004020c8 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4020c8:	b480      	push	{r7}
  4020ca:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4020cc:	4b5d      	ldr	r3, [pc, #372]	; (402244 <SystemCoreClockUpdate+0x17c>)
  4020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020d0:	f003 0303 	and.w	r3, r3, #3
  4020d4:	2b03      	cmp	r3, #3
  4020d6:	f200 8096 	bhi.w	402206 <SystemCoreClockUpdate+0x13e>
  4020da:	a201      	add	r2, pc, #4	; (adr r2, 4020e0 <SystemCoreClockUpdate+0x18>)
  4020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4020e0:	004020f1 	.word	0x004020f1
  4020e4:	00402111 	.word	0x00402111
  4020e8:	0040215b 	.word	0x0040215b
  4020ec:	0040215b 	.word	0x0040215b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4020f0:	4b55      	ldr	r3, [pc, #340]	; (402248 <SystemCoreClockUpdate+0x180>)
  4020f2:	695b      	ldr	r3, [r3, #20]
  4020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4020f8:	2b00      	cmp	r3, #0
  4020fa:	d004      	beq.n	402106 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4020fc:	4b53      	ldr	r3, [pc, #332]	; (40224c <SystemCoreClockUpdate+0x184>)
  4020fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402102:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402104:	e080      	b.n	402208 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402106:	4b51      	ldr	r3, [pc, #324]	; (40224c <SystemCoreClockUpdate+0x184>)
  402108:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40210c:	601a      	str	r2, [r3, #0]
		break;
  40210e:	e07b      	b.n	402208 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402110:	4b4c      	ldr	r3, [pc, #304]	; (402244 <SystemCoreClockUpdate+0x17c>)
  402112:	6a1b      	ldr	r3, [r3, #32]
  402114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402118:	2b00      	cmp	r3, #0
  40211a:	d003      	beq.n	402124 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40211c:	4b4b      	ldr	r3, [pc, #300]	; (40224c <SystemCoreClockUpdate+0x184>)
  40211e:	4a4c      	ldr	r2, [pc, #304]	; (402250 <SystemCoreClockUpdate+0x188>)
  402120:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402122:	e071      	b.n	402208 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402124:	4b49      	ldr	r3, [pc, #292]	; (40224c <SystemCoreClockUpdate+0x184>)
  402126:	4a4b      	ldr	r2, [pc, #300]	; (402254 <SystemCoreClockUpdate+0x18c>)
  402128:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40212a:	4b46      	ldr	r3, [pc, #280]	; (402244 <SystemCoreClockUpdate+0x17c>)
  40212c:	6a1b      	ldr	r3, [r3, #32]
  40212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402132:	2b10      	cmp	r3, #16
  402134:	d008      	beq.n	402148 <SystemCoreClockUpdate+0x80>
  402136:	2b20      	cmp	r3, #32
  402138:	d00a      	beq.n	402150 <SystemCoreClockUpdate+0x88>
  40213a:	2b00      	cmp	r3, #0
  40213c:	d000      	beq.n	402140 <SystemCoreClockUpdate+0x78>
			break;
  40213e:	e00b      	b.n	402158 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402140:	4b42      	ldr	r3, [pc, #264]	; (40224c <SystemCoreClockUpdate+0x184>)
  402142:	4a44      	ldr	r2, [pc, #272]	; (402254 <SystemCoreClockUpdate+0x18c>)
  402144:	601a      	str	r2, [r3, #0]
			break;
  402146:	e007      	b.n	402158 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402148:	4b40      	ldr	r3, [pc, #256]	; (40224c <SystemCoreClockUpdate+0x184>)
  40214a:	4a43      	ldr	r2, [pc, #268]	; (402258 <SystemCoreClockUpdate+0x190>)
  40214c:	601a      	str	r2, [r3, #0]
			break;
  40214e:	e003      	b.n	402158 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402150:	4b3e      	ldr	r3, [pc, #248]	; (40224c <SystemCoreClockUpdate+0x184>)
  402152:	4a3f      	ldr	r2, [pc, #252]	; (402250 <SystemCoreClockUpdate+0x188>)
  402154:	601a      	str	r2, [r3, #0]
			break;
  402156:	bf00      	nop
		break;
  402158:	e056      	b.n	402208 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40215a:	4b3a      	ldr	r3, [pc, #232]	; (402244 <SystemCoreClockUpdate+0x17c>)
  40215c:	6a1b      	ldr	r3, [r3, #32]
  40215e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402162:	2b00      	cmp	r3, #0
  402164:	d003      	beq.n	40216e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402166:	4b39      	ldr	r3, [pc, #228]	; (40224c <SystemCoreClockUpdate+0x184>)
  402168:	4a39      	ldr	r2, [pc, #228]	; (402250 <SystemCoreClockUpdate+0x188>)
  40216a:	601a      	str	r2, [r3, #0]
  40216c:	e019      	b.n	4021a2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40216e:	4b37      	ldr	r3, [pc, #220]	; (40224c <SystemCoreClockUpdate+0x184>)
  402170:	4a38      	ldr	r2, [pc, #224]	; (402254 <SystemCoreClockUpdate+0x18c>)
  402172:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402174:	4b33      	ldr	r3, [pc, #204]	; (402244 <SystemCoreClockUpdate+0x17c>)
  402176:	6a1b      	ldr	r3, [r3, #32]
  402178:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40217c:	2b10      	cmp	r3, #16
  40217e:	d008      	beq.n	402192 <SystemCoreClockUpdate+0xca>
  402180:	2b20      	cmp	r3, #32
  402182:	d00a      	beq.n	40219a <SystemCoreClockUpdate+0xd2>
  402184:	2b00      	cmp	r3, #0
  402186:	d000      	beq.n	40218a <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402188:	e00b      	b.n	4021a2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40218a:	4b30      	ldr	r3, [pc, #192]	; (40224c <SystemCoreClockUpdate+0x184>)
  40218c:	4a31      	ldr	r2, [pc, #196]	; (402254 <SystemCoreClockUpdate+0x18c>)
  40218e:	601a      	str	r2, [r3, #0]
					break;
  402190:	e007      	b.n	4021a2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402192:	4b2e      	ldr	r3, [pc, #184]	; (40224c <SystemCoreClockUpdate+0x184>)
  402194:	4a30      	ldr	r2, [pc, #192]	; (402258 <SystemCoreClockUpdate+0x190>)
  402196:	601a      	str	r2, [r3, #0]
					break;
  402198:	e003      	b.n	4021a2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40219a:	4b2c      	ldr	r3, [pc, #176]	; (40224c <SystemCoreClockUpdate+0x184>)
  40219c:	4a2c      	ldr	r2, [pc, #176]	; (402250 <SystemCoreClockUpdate+0x188>)
  40219e:	601a      	str	r2, [r3, #0]
					break;
  4021a0:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4021a2:	4b28      	ldr	r3, [pc, #160]	; (402244 <SystemCoreClockUpdate+0x17c>)
  4021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021a6:	f003 0303 	and.w	r3, r3, #3
  4021aa:	2b02      	cmp	r3, #2
  4021ac:	d115      	bne.n	4021da <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4021ae:	4b25      	ldr	r3, [pc, #148]	; (402244 <SystemCoreClockUpdate+0x17c>)
  4021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4021b2:	0c1b      	lsrs	r3, r3, #16
  4021b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4021b8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4021ba:	4a24      	ldr	r2, [pc, #144]	; (40224c <SystemCoreClockUpdate+0x184>)
  4021bc:	6812      	ldr	r2, [r2, #0]
  4021be:	fb02 f303 	mul.w	r3, r2, r3
  4021c2:	4a22      	ldr	r2, [pc, #136]	; (40224c <SystemCoreClockUpdate+0x184>)
  4021c4:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4021c6:	4b1f      	ldr	r3, [pc, #124]	; (402244 <SystemCoreClockUpdate+0x17c>)
  4021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4021ca:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4021cc:	4a1f      	ldr	r2, [pc, #124]	; (40224c <SystemCoreClockUpdate+0x184>)
  4021ce:	6812      	ldr	r2, [r2, #0]
  4021d0:	fbb2 f3f3 	udiv	r3, r2, r3
  4021d4:	4a1d      	ldr	r2, [pc, #116]	; (40224c <SystemCoreClockUpdate+0x184>)
  4021d6:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4021d8:	e016      	b.n	402208 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4021da:	4b1a      	ldr	r3, [pc, #104]	; (402244 <SystemCoreClockUpdate+0x17c>)
  4021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4021de:	0c1b      	lsrs	r3, r3, #16
  4021e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4021e4:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4021e6:	4a19      	ldr	r2, [pc, #100]	; (40224c <SystemCoreClockUpdate+0x184>)
  4021e8:	6812      	ldr	r2, [r2, #0]
  4021ea:	fb02 f303 	mul.w	r3, r2, r3
  4021ee:	4a17      	ldr	r2, [pc, #92]	; (40224c <SystemCoreClockUpdate+0x184>)
  4021f0:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4021f2:	4b14      	ldr	r3, [pc, #80]	; (402244 <SystemCoreClockUpdate+0x17c>)
  4021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4021f6:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4021f8:	4a14      	ldr	r2, [pc, #80]	; (40224c <SystemCoreClockUpdate+0x184>)
  4021fa:	6812      	ldr	r2, [r2, #0]
  4021fc:	fbb2 f3f3 	udiv	r3, r2, r3
  402200:	4a12      	ldr	r2, [pc, #72]	; (40224c <SystemCoreClockUpdate+0x184>)
  402202:	6013      	str	r3, [r2, #0]
		break;
  402204:	e000      	b.n	402208 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  402206:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402208:	4b0e      	ldr	r3, [pc, #56]	; (402244 <SystemCoreClockUpdate+0x17c>)
  40220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40220c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402210:	2b70      	cmp	r3, #112	; 0x70
  402212:	d108      	bne.n	402226 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402214:	4b0d      	ldr	r3, [pc, #52]	; (40224c <SystemCoreClockUpdate+0x184>)
  402216:	681b      	ldr	r3, [r3, #0]
  402218:	4a10      	ldr	r2, [pc, #64]	; (40225c <SystemCoreClockUpdate+0x194>)
  40221a:	fba2 2303 	umull	r2, r3, r2, r3
  40221e:	085b      	lsrs	r3, r3, #1
  402220:	4a0a      	ldr	r2, [pc, #40]	; (40224c <SystemCoreClockUpdate+0x184>)
  402222:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402224:	e00a      	b.n	40223c <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402226:	4b07      	ldr	r3, [pc, #28]	; (402244 <SystemCoreClockUpdate+0x17c>)
  402228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40222a:	091b      	lsrs	r3, r3, #4
  40222c:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402230:	4a06      	ldr	r2, [pc, #24]	; (40224c <SystemCoreClockUpdate+0x184>)
  402232:	6812      	ldr	r2, [r2, #0]
  402234:	fa22 f303 	lsr.w	r3, r2, r3
  402238:	4a04      	ldr	r2, [pc, #16]	; (40224c <SystemCoreClockUpdate+0x184>)
  40223a:	6013      	str	r3, [r2, #0]
}
  40223c:	bf00      	nop
  40223e:	46bd      	mov	sp, r7
  402240:	bc80      	pop	{r7}
  402242:	4770      	bx	lr
  402244:	400e0400 	.word	0x400e0400
  402248:	400e1410 	.word	0x400e1410
  40224c:	2000000c 	.word	0x2000000c
  402250:	00b71b00 	.word	0x00b71b00
  402254:	003d0900 	.word	0x003d0900
  402258:	007a1200 	.word	0x007a1200
  40225c:	aaaaaaab 	.word	0xaaaaaaab

00402260 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402260:	b480      	push	{r7}
  402262:	b083      	sub	sp, #12
  402264:	af00      	add	r7, sp, #0
  402266:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402268:	687b      	ldr	r3, [r7, #4]
  40226a:	4a22      	ldr	r2, [pc, #136]	; (4022f4 <system_init_flash+0x94>)
  40226c:	4293      	cmp	r3, r2
  40226e:	d808      	bhi.n	402282 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402270:	4b21      	ldr	r3, [pc, #132]	; (4022f8 <system_init_flash+0x98>)
  402272:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402276:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402278:	4b20      	ldr	r3, [pc, #128]	; (4022fc <system_init_flash+0x9c>)
  40227a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40227e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402280:	e033      	b.n	4022ea <system_init_flash+0x8a>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402282:	687b      	ldr	r3, [r7, #4]
  402284:	4a1e      	ldr	r2, [pc, #120]	; (402300 <system_init_flash+0xa0>)
  402286:	4293      	cmp	r3, r2
  402288:	d806      	bhi.n	402298 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40228a:	4b1b      	ldr	r3, [pc, #108]	; (4022f8 <system_init_flash+0x98>)
  40228c:	4a1d      	ldr	r2, [pc, #116]	; (402304 <system_init_flash+0xa4>)
  40228e:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402290:	4b1a      	ldr	r3, [pc, #104]	; (4022fc <system_init_flash+0x9c>)
  402292:	4a1c      	ldr	r2, [pc, #112]	; (402304 <system_init_flash+0xa4>)
  402294:	601a      	str	r2, [r3, #0]
}
  402296:	e028      	b.n	4022ea <system_init_flash+0x8a>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402298:	687b      	ldr	r3, [r7, #4]
  40229a:	4a1b      	ldr	r2, [pc, #108]	; (402308 <system_init_flash+0xa8>)
  40229c:	4293      	cmp	r3, r2
  40229e:	d806      	bhi.n	4022ae <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4022a0:	4b15      	ldr	r3, [pc, #84]	; (4022f8 <system_init_flash+0x98>)
  4022a2:	4a1a      	ldr	r2, [pc, #104]	; (40230c <system_init_flash+0xac>)
  4022a4:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4022a6:	4b15      	ldr	r3, [pc, #84]	; (4022fc <system_init_flash+0x9c>)
  4022a8:	4a18      	ldr	r2, [pc, #96]	; (40230c <system_init_flash+0xac>)
  4022aa:	601a      	str	r2, [r3, #0]
}
  4022ac:	e01d      	b.n	4022ea <system_init_flash+0x8a>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4022ae:	687b      	ldr	r3, [r7, #4]
  4022b0:	4a17      	ldr	r2, [pc, #92]	; (402310 <system_init_flash+0xb0>)
  4022b2:	4293      	cmp	r3, r2
  4022b4:	d806      	bhi.n	4022c4 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4022b6:	4b10      	ldr	r3, [pc, #64]	; (4022f8 <system_init_flash+0x98>)
  4022b8:	4a16      	ldr	r2, [pc, #88]	; (402314 <system_init_flash+0xb4>)
  4022ba:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4022bc:	4b0f      	ldr	r3, [pc, #60]	; (4022fc <system_init_flash+0x9c>)
  4022be:	4a15      	ldr	r2, [pc, #84]	; (402314 <system_init_flash+0xb4>)
  4022c0:	601a      	str	r2, [r3, #0]
}
  4022c2:	e012      	b.n	4022ea <system_init_flash+0x8a>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4022c4:	687b      	ldr	r3, [r7, #4]
  4022c6:	4a14      	ldr	r2, [pc, #80]	; (402318 <system_init_flash+0xb8>)
  4022c8:	4293      	cmp	r3, r2
  4022ca:	d808      	bhi.n	4022de <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4022cc:	4b0a      	ldr	r3, [pc, #40]	; (4022f8 <system_init_flash+0x98>)
  4022ce:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4022d2:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4022d4:	4b09      	ldr	r3, [pc, #36]	; (4022fc <system_init_flash+0x9c>)
  4022d6:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4022da:	601a      	str	r2, [r3, #0]
}
  4022dc:	e005      	b.n	4022ea <system_init_flash+0x8a>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4022de:	4b06      	ldr	r3, [pc, #24]	; (4022f8 <system_init_flash+0x98>)
  4022e0:	4a0e      	ldr	r2, [pc, #56]	; (40231c <system_init_flash+0xbc>)
  4022e2:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4022e4:	4b05      	ldr	r3, [pc, #20]	; (4022fc <system_init_flash+0x9c>)
  4022e6:	4a0d      	ldr	r2, [pc, #52]	; (40231c <system_init_flash+0xbc>)
  4022e8:	601a      	str	r2, [r3, #0]
}
  4022ea:	bf00      	nop
  4022ec:	370c      	adds	r7, #12
  4022ee:	46bd      	mov	sp, r7
  4022f0:	bc80      	pop	{r7}
  4022f2:	4770      	bx	lr
  4022f4:	01312cff 	.word	0x01312cff
  4022f8:	400e0a00 	.word	0x400e0a00
  4022fc:	400e0c00 	.word	0x400e0c00
  402300:	026259ff 	.word	0x026259ff
  402304:	04000100 	.word	0x04000100
  402308:	039386ff 	.word	0x039386ff
  40230c:	04000200 	.word	0x04000200
  402310:	04c4b3ff 	.word	0x04c4b3ff
  402314:	04000300 	.word	0x04000300
  402318:	05f5e0ff 	.word	0x05f5e0ff
  40231c:	04000500 	.word	0x04000500

00402320 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402320:	b480      	push	{r7}
  402322:	b085      	sub	sp, #20
  402324:	af00      	add	r7, sp, #0
  402326:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402328:	4b10      	ldr	r3, [pc, #64]	; (40236c <_sbrk+0x4c>)
  40232a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  40232c:	4b10      	ldr	r3, [pc, #64]	; (402370 <_sbrk+0x50>)
  40232e:	681b      	ldr	r3, [r3, #0]
  402330:	2b00      	cmp	r3, #0
  402332:	d102      	bne.n	40233a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402334:	4b0e      	ldr	r3, [pc, #56]	; (402370 <_sbrk+0x50>)
  402336:	4a0f      	ldr	r2, [pc, #60]	; (402374 <_sbrk+0x54>)
  402338:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40233a:	4b0d      	ldr	r3, [pc, #52]	; (402370 <_sbrk+0x50>)
  40233c:	681b      	ldr	r3, [r3, #0]
  40233e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402340:	68ba      	ldr	r2, [r7, #8]
  402342:	687b      	ldr	r3, [r7, #4]
  402344:	441a      	add	r2, r3
  402346:	68fb      	ldr	r3, [r7, #12]
  402348:	429a      	cmp	r2, r3
  40234a:	dd02      	ble.n	402352 <_sbrk+0x32>
		return (caddr_t) -1;	
  40234c:	f04f 33ff 	mov.w	r3, #4294967295
  402350:	e006      	b.n	402360 <_sbrk+0x40>
	}

	heap += incr;
  402352:	4b07      	ldr	r3, [pc, #28]	; (402370 <_sbrk+0x50>)
  402354:	681a      	ldr	r2, [r3, #0]
  402356:	687b      	ldr	r3, [r7, #4]
  402358:	4413      	add	r3, r2
  40235a:	4a05      	ldr	r2, [pc, #20]	; (402370 <_sbrk+0x50>)
  40235c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40235e:	68bb      	ldr	r3, [r7, #8]
}
  402360:	4618      	mov	r0, r3
  402362:	3714      	adds	r7, #20
  402364:	46bd      	mov	sp, r7
  402366:	bc80      	pop	{r7}
  402368:	4770      	bx	lr
  40236a:	bf00      	nop
  40236c:	20027ffc 	.word	0x20027ffc
  402370:	20000a5c 	.word	0x20000a5c
  402374:	20003ed8 	.word	0x20003ed8

00402378 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402378:	b480      	push	{r7}
  40237a:	b083      	sub	sp, #12
  40237c:	af00      	add	r7, sp, #0
  40237e:	6078      	str	r0, [r7, #4]
	return -1;
  402380:	f04f 33ff 	mov.w	r3, #4294967295
}
  402384:	4618      	mov	r0, r3
  402386:	370c      	adds	r7, #12
  402388:	46bd      	mov	sp, r7
  40238a:	bc80      	pop	{r7}
  40238c:	4770      	bx	lr

0040238e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40238e:	b480      	push	{r7}
  402390:	b083      	sub	sp, #12
  402392:	af00      	add	r7, sp, #0
  402394:	6078      	str	r0, [r7, #4]
  402396:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402398:	683b      	ldr	r3, [r7, #0]
  40239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40239e:	605a      	str	r2, [r3, #4]

	return 0;
  4023a0:	2300      	movs	r3, #0
}
  4023a2:	4618      	mov	r0, r3
  4023a4:	370c      	adds	r7, #12
  4023a6:	46bd      	mov	sp, r7
  4023a8:	bc80      	pop	{r7}
  4023aa:	4770      	bx	lr

004023ac <_isatty>:

extern int _isatty(int file)
{
  4023ac:	b480      	push	{r7}
  4023ae:	b083      	sub	sp, #12
  4023b0:	af00      	add	r7, sp, #0
  4023b2:	6078      	str	r0, [r7, #4]
	return 1;
  4023b4:	2301      	movs	r3, #1
}
  4023b6:	4618      	mov	r0, r3
  4023b8:	370c      	adds	r7, #12
  4023ba:	46bd      	mov	sp, r7
  4023bc:	bc80      	pop	{r7}
  4023be:	4770      	bx	lr

004023c0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  4023c0:	b480      	push	{r7}
  4023c2:	b085      	sub	sp, #20
  4023c4:	af00      	add	r7, sp, #0
  4023c6:	60f8      	str	r0, [r7, #12]
  4023c8:	60b9      	str	r1, [r7, #8]
  4023ca:	607a      	str	r2, [r7, #4]
	return 0;
  4023cc:	2300      	movs	r3, #0
}
  4023ce:	4618      	mov	r0, r3
  4023d0:	3714      	adds	r7, #20
  4023d2:	46bd      	mov	sp, r7
  4023d4:	bc80      	pop	{r7}
  4023d6:	4770      	bx	lr

004023d8 <main>:
﻿#include "main.h"
#include "boot_uart.h"
#include "xmodem.h"

int main(void)
{
  4023d8:	b580      	push	{r7, lr}
  4023da:	af00      	add	r7, sp, #0
	/* Initialize the board. */
	sysclk_init();
  4023dc:	4b0b      	ldr	r3, [pc, #44]	; (40240c <main+0x34>)
  4023de:	4798      	blx	r3
	board_init();
  4023e0:	4b0b      	ldr	r3, [pc, #44]	; (402410 <main+0x38>)
  4023e2:	4798      	blx	r3

	/* Initialize the UART console. */
	Boot_Uart_Init();
  4023e4:	4b0b      	ldr	r3, [pc, #44]	; (402414 <main+0x3c>)
  4023e6:	4798      	blx	r3

	printf("========================================\r\n");
  4023e8:	480b      	ldr	r0, [pc, #44]	; (402418 <main+0x40>)
  4023ea:	4b0c      	ldr	r3, [pc, #48]	; (40241c <main+0x44>)
  4023ec:	4798      	blx	r3
	printf("=  ATSAM4S Firmware Update Bootloader  =\r\n");
  4023ee:	480c      	ldr	r0, [pc, #48]	; (402420 <main+0x48>)
  4023f0:	4b0a      	ldr	r3, [pc, #40]	; (40241c <main+0x44>)
  4023f2:	4798      	blx	r3
	printf("========================================\r\n");
  4023f4:	4808      	ldr	r0, [pc, #32]	; (402418 <main+0x40>)
  4023f6:	4b09      	ldr	r3, [pc, #36]	; (40241c <main+0x44>)
  4023f8:	4798      	blx	r3

	while(1)
	{
		printf("Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
  4023fa:	480a      	ldr	r0, [pc, #40]	; (402424 <main+0x4c>)
  4023fc:	4b07      	ldr	r3, [pc, #28]	; (40241c <main+0x44>)
  4023fe:	4798      	blx	r3
		xmodem_receive();
  402400:	4b09      	ldr	r3, [pc, #36]	; (402428 <main+0x50>)
  402402:	4798      	blx	r3
    	printf("\n\rFailed... Please try again.\n\r");
  402404:	4809      	ldr	r0, [pc, #36]	; (40242c <main+0x54>)
  402406:	4b05      	ldr	r3, [pc, #20]	; (40241c <main+0x44>)
  402408:	4798      	blx	r3
		printf("Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
  40240a:	e7f6      	b.n	4023fa <main+0x22>
  40240c:	00400e9d 	.word	0x00400e9d
  402410:	00401215 	.word	0x00401215
  402414:	004004e1 	.word	0x004004e1
  402418:	00405434 	.word	0x00405434
  40241c:	00402791 	.word	0x00402791
  402420:	00405460 	.word	0x00405460
  402424:	0040548c 	.word	0x0040548c
  402428:	0040071d 	.word	0x0040071d
  40242c:	004054dc 	.word	0x004054dc

00402430 <__aeabi_uldivmod>:
  402430:	b953      	cbnz	r3, 402448 <__aeabi_uldivmod+0x18>
  402432:	b94a      	cbnz	r2, 402448 <__aeabi_uldivmod+0x18>
  402434:	2900      	cmp	r1, #0
  402436:	bf08      	it	eq
  402438:	2800      	cmpeq	r0, #0
  40243a:	bf1c      	itt	ne
  40243c:	f04f 31ff 	movne.w	r1, #4294967295
  402440:	f04f 30ff 	movne.w	r0, #4294967295
  402444:	f000 b97a 	b.w	40273c <__aeabi_idiv0>
  402448:	f1ad 0c08 	sub.w	ip, sp, #8
  40244c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402450:	f000 f806 	bl	402460 <__udivmoddi4>
  402454:	f8dd e004 	ldr.w	lr, [sp, #4]
  402458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40245c:	b004      	add	sp, #16
  40245e:	4770      	bx	lr

00402460 <__udivmoddi4>:
  402460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402464:	468c      	mov	ip, r1
  402466:	460d      	mov	r5, r1
  402468:	4604      	mov	r4, r0
  40246a:	9e08      	ldr	r6, [sp, #32]
  40246c:	2b00      	cmp	r3, #0
  40246e:	d151      	bne.n	402514 <__udivmoddi4+0xb4>
  402470:	428a      	cmp	r2, r1
  402472:	4617      	mov	r7, r2
  402474:	d96d      	bls.n	402552 <__udivmoddi4+0xf2>
  402476:	fab2 fe82 	clz	lr, r2
  40247a:	f1be 0f00 	cmp.w	lr, #0
  40247e:	d00b      	beq.n	402498 <__udivmoddi4+0x38>
  402480:	f1ce 0c20 	rsb	ip, lr, #32
  402484:	fa01 f50e 	lsl.w	r5, r1, lr
  402488:	fa20 fc0c 	lsr.w	ip, r0, ip
  40248c:	fa02 f70e 	lsl.w	r7, r2, lr
  402490:	ea4c 0c05 	orr.w	ip, ip, r5
  402494:	fa00 f40e 	lsl.w	r4, r0, lr
  402498:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40249c:	0c25      	lsrs	r5, r4, #16
  40249e:	fbbc f8fa 	udiv	r8, ip, sl
  4024a2:	fa1f f987 	uxth.w	r9, r7
  4024a6:	fb0a cc18 	mls	ip, sl, r8, ip
  4024aa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4024ae:	fb08 f309 	mul.w	r3, r8, r9
  4024b2:	42ab      	cmp	r3, r5
  4024b4:	d90a      	bls.n	4024cc <__udivmoddi4+0x6c>
  4024b6:	19ed      	adds	r5, r5, r7
  4024b8:	f108 32ff 	add.w	r2, r8, #4294967295
  4024bc:	f080 8123 	bcs.w	402706 <__udivmoddi4+0x2a6>
  4024c0:	42ab      	cmp	r3, r5
  4024c2:	f240 8120 	bls.w	402706 <__udivmoddi4+0x2a6>
  4024c6:	f1a8 0802 	sub.w	r8, r8, #2
  4024ca:	443d      	add	r5, r7
  4024cc:	1aed      	subs	r5, r5, r3
  4024ce:	b2a4      	uxth	r4, r4
  4024d0:	fbb5 f0fa 	udiv	r0, r5, sl
  4024d4:	fb0a 5510 	mls	r5, sl, r0, r5
  4024d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4024dc:	fb00 f909 	mul.w	r9, r0, r9
  4024e0:	45a1      	cmp	r9, r4
  4024e2:	d909      	bls.n	4024f8 <__udivmoddi4+0x98>
  4024e4:	19e4      	adds	r4, r4, r7
  4024e6:	f100 33ff 	add.w	r3, r0, #4294967295
  4024ea:	f080 810a 	bcs.w	402702 <__udivmoddi4+0x2a2>
  4024ee:	45a1      	cmp	r9, r4
  4024f0:	f240 8107 	bls.w	402702 <__udivmoddi4+0x2a2>
  4024f4:	3802      	subs	r0, #2
  4024f6:	443c      	add	r4, r7
  4024f8:	eba4 0409 	sub.w	r4, r4, r9
  4024fc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402500:	2100      	movs	r1, #0
  402502:	2e00      	cmp	r6, #0
  402504:	d061      	beq.n	4025ca <__udivmoddi4+0x16a>
  402506:	fa24 f40e 	lsr.w	r4, r4, lr
  40250a:	2300      	movs	r3, #0
  40250c:	6034      	str	r4, [r6, #0]
  40250e:	6073      	str	r3, [r6, #4]
  402510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402514:	428b      	cmp	r3, r1
  402516:	d907      	bls.n	402528 <__udivmoddi4+0xc8>
  402518:	2e00      	cmp	r6, #0
  40251a:	d054      	beq.n	4025c6 <__udivmoddi4+0x166>
  40251c:	2100      	movs	r1, #0
  40251e:	e886 0021 	stmia.w	r6, {r0, r5}
  402522:	4608      	mov	r0, r1
  402524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402528:	fab3 f183 	clz	r1, r3
  40252c:	2900      	cmp	r1, #0
  40252e:	f040 808e 	bne.w	40264e <__udivmoddi4+0x1ee>
  402532:	42ab      	cmp	r3, r5
  402534:	d302      	bcc.n	40253c <__udivmoddi4+0xdc>
  402536:	4282      	cmp	r2, r0
  402538:	f200 80fa 	bhi.w	402730 <__udivmoddi4+0x2d0>
  40253c:	1a84      	subs	r4, r0, r2
  40253e:	eb65 0503 	sbc.w	r5, r5, r3
  402542:	2001      	movs	r0, #1
  402544:	46ac      	mov	ip, r5
  402546:	2e00      	cmp	r6, #0
  402548:	d03f      	beq.n	4025ca <__udivmoddi4+0x16a>
  40254a:	e886 1010 	stmia.w	r6, {r4, ip}
  40254e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402552:	b912      	cbnz	r2, 40255a <__udivmoddi4+0xfa>
  402554:	2701      	movs	r7, #1
  402556:	fbb7 f7f2 	udiv	r7, r7, r2
  40255a:	fab7 fe87 	clz	lr, r7
  40255e:	f1be 0f00 	cmp.w	lr, #0
  402562:	d134      	bne.n	4025ce <__udivmoddi4+0x16e>
  402564:	1beb      	subs	r3, r5, r7
  402566:	0c3a      	lsrs	r2, r7, #16
  402568:	fa1f fc87 	uxth.w	ip, r7
  40256c:	2101      	movs	r1, #1
  40256e:	fbb3 f8f2 	udiv	r8, r3, r2
  402572:	0c25      	lsrs	r5, r4, #16
  402574:	fb02 3318 	mls	r3, r2, r8, r3
  402578:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40257c:	fb0c f308 	mul.w	r3, ip, r8
  402580:	42ab      	cmp	r3, r5
  402582:	d907      	bls.n	402594 <__udivmoddi4+0x134>
  402584:	19ed      	adds	r5, r5, r7
  402586:	f108 30ff 	add.w	r0, r8, #4294967295
  40258a:	d202      	bcs.n	402592 <__udivmoddi4+0x132>
  40258c:	42ab      	cmp	r3, r5
  40258e:	f200 80d1 	bhi.w	402734 <__udivmoddi4+0x2d4>
  402592:	4680      	mov	r8, r0
  402594:	1aed      	subs	r5, r5, r3
  402596:	b2a3      	uxth	r3, r4
  402598:	fbb5 f0f2 	udiv	r0, r5, r2
  40259c:	fb02 5510 	mls	r5, r2, r0, r5
  4025a0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4025a4:	fb0c fc00 	mul.w	ip, ip, r0
  4025a8:	45a4      	cmp	ip, r4
  4025aa:	d907      	bls.n	4025bc <__udivmoddi4+0x15c>
  4025ac:	19e4      	adds	r4, r4, r7
  4025ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4025b2:	d202      	bcs.n	4025ba <__udivmoddi4+0x15a>
  4025b4:	45a4      	cmp	ip, r4
  4025b6:	f200 80b8 	bhi.w	40272a <__udivmoddi4+0x2ca>
  4025ba:	4618      	mov	r0, r3
  4025bc:	eba4 040c 	sub.w	r4, r4, ip
  4025c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4025c4:	e79d      	b.n	402502 <__udivmoddi4+0xa2>
  4025c6:	4631      	mov	r1, r6
  4025c8:	4630      	mov	r0, r6
  4025ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025ce:	f1ce 0420 	rsb	r4, lr, #32
  4025d2:	fa05 f30e 	lsl.w	r3, r5, lr
  4025d6:	fa07 f70e 	lsl.w	r7, r7, lr
  4025da:	fa20 f804 	lsr.w	r8, r0, r4
  4025de:	0c3a      	lsrs	r2, r7, #16
  4025e0:	fa25 f404 	lsr.w	r4, r5, r4
  4025e4:	ea48 0803 	orr.w	r8, r8, r3
  4025e8:	fbb4 f1f2 	udiv	r1, r4, r2
  4025ec:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4025f0:	fb02 4411 	mls	r4, r2, r1, r4
  4025f4:	fa1f fc87 	uxth.w	ip, r7
  4025f8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4025fc:	fb01 f30c 	mul.w	r3, r1, ip
  402600:	42ab      	cmp	r3, r5
  402602:	fa00 f40e 	lsl.w	r4, r0, lr
  402606:	d909      	bls.n	40261c <__udivmoddi4+0x1bc>
  402608:	19ed      	adds	r5, r5, r7
  40260a:	f101 30ff 	add.w	r0, r1, #4294967295
  40260e:	f080 808a 	bcs.w	402726 <__udivmoddi4+0x2c6>
  402612:	42ab      	cmp	r3, r5
  402614:	f240 8087 	bls.w	402726 <__udivmoddi4+0x2c6>
  402618:	3902      	subs	r1, #2
  40261a:	443d      	add	r5, r7
  40261c:	1aeb      	subs	r3, r5, r3
  40261e:	fa1f f588 	uxth.w	r5, r8
  402622:	fbb3 f0f2 	udiv	r0, r3, r2
  402626:	fb02 3310 	mls	r3, r2, r0, r3
  40262a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40262e:	fb00 f30c 	mul.w	r3, r0, ip
  402632:	42ab      	cmp	r3, r5
  402634:	d907      	bls.n	402646 <__udivmoddi4+0x1e6>
  402636:	19ed      	adds	r5, r5, r7
  402638:	f100 38ff 	add.w	r8, r0, #4294967295
  40263c:	d26f      	bcs.n	40271e <__udivmoddi4+0x2be>
  40263e:	42ab      	cmp	r3, r5
  402640:	d96d      	bls.n	40271e <__udivmoddi4+0x2be>
  402642:	3802      	subs	r0, #2
  402644:	443d      	add	r5, r7
  402646:	1aeb      	subs	r3, r5, r3
  402648:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40264c:	e78f      	b.n	40256e <__udivmoddi4+0x10e>
  40264e:	f1c1 0720 	rsb	r7, r1, #32
  402652:	fa22 f807 	lsr.w	r8, r2, r7
  402656:	408b      	lsls	r3, r1
  402658:	fa05 f401 	lsl.w	r4, r5, r1
  40265c:	ea48 0303 	orr.w	r3, r8, r3
  402660:	fa20 fe07 	lsr.w	lr, r0, r7
  402664:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402668:	40fd      	lsrs	r5, r7
  40266a:	ea4e 0e04 	orr.w	lr, lr, r4
  40266e:	fbb5 f9fc 	udiv	r9, r5, ip
  402672:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402676:	fb0c 5519 	mls	r5, ip, r9, r5
  40267a:	fa1f f883 	uxth.w	r8, r3
  40267e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402682:	fb09 f408 	mul.w	r4, r9, r8
  402686:	42ac      	cmp	r4, r5
  402688:	fa02 f201 	lsl.w	r2, r2, r1
  40268c:	fa00 fa01 	lsl.w	sl, r0, r1
  402690:	d908      	bls.n	4026a4 <__udivmoddi4+0x244>
  402692:	18ed      	adds	r5, r5, r3
  402694:	f109 30ff 	add.w	r0, r9, #4294967295
  402698:	d243      	bcs.n	402722 <__udivmoddi4+0x2c2>
  40269a:	42ac      	cmp	r4, r5
  40269c:	d941      	bls.n	402722 <__udivmoddi4+0x2c2>
  40269e:	f1a9 0902 	sub.w	r9, r9, #2
  4026a2:	441d      	add	r5, r3
  4026a4:	1b2d      	subs	r5, r5, r4
  4026a6:	fa1f fe8e 	uxth.w	lr, lr
  4026aa:	fbb5 f0fc 	udiv	r0, r5, ip
  4026ae:	fb0c 5510 	mls	r5, ip, r0, r5
  4026b2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4026b6:	fb00 f808 	mul.w	r8, r0, r8
  4026ba:	45a0      	cmp	r8, r4
  4026bc:	d907      	bls.n	4026ce <__udivmoddi4+0x26e>
  4026be:	18e4      	adds	r4, r4, r3
  4026c0:	f100 35ff 	add.w	r5, r0, #4294967295
  4026c4:	d229      	bcs.n	40271a <__udivmoddi4+0x2ba>
  4026c6:	45a0      	cmp	r8, r4
  4026c8:	d927      	bls.n	40271a <__udivmoddi4+0x2ba>
  4026ca:	3802      	subs	r0, #2
  4026cc:	441c      	add	r4, r3
  4026ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4026d2:	eba4 0408 	sub.w	r4, r4, r8
  4026d6:	fba0 8902 	umull	r8, r9, r0, r2
  4026da:	454c      	cmp	r4, r9
  4026dc:	46c6      	mov	lr, r8
  4026de:	464d      	mov	r5, r9
  4026e0:	d315      	bcc.n	40270e <__udivmoddi4+0x2ae>
  4026e2:	d012      	beq.n	40270a <__udivmoddi4+0x2aa>
  4026e4:	b156      	cbz	r6, 4026fc <__udivmoddi4+0x29c>
  4026e6:	ebba 030e 	subs.w	r3, sl, lr
  4026ea:	eb64 0405 	sbc.w	r4, r4, r5
  4026ee:	fa04 f707 	lsl.w	r7, r4, r7
  4026f2:	40cb      	lsrs	r3, r1
  4026f4:	431f      	orrs	r7, r3
  4026f6:	40cc      	lsrs	r4, r1
  4026f8:	6037      	str	r7, [r6, #0]
  4026fa:	6074      	str	r4, [r6, #4]
  4026fc:	2100      	movs	r1, #0
  4026fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402702:	4618      	mov	r0, r3
  402704:	e6f8      	b.n	4024f8 <__udivmoddi4+0x98>
  402706:	4690      	mov	r8, r2
  402708:	e6e0      	b.n	4024cc <__udivmoddi4+0x6c>
  40270a:	45c2      	cmp	sl, r8
  40270c:	d2ea      	bcs.n	4026e4 <__udivmoddi4+0x284>
  40270e:	ebb8 0e02 	subs.w	lr, r8, r2
  402712:	eb69 0503 	sbc.w	r5, r9, r3
  402716:	3801      	subs	r0, #1
  402718:	e7e4      	b.n	4026e4 <__udivmoddi4+0x284>
  40271a:	4628      	mov	r0, r5
  40271c:	e7d7      	b.n	4026ce <__udivmoddi4+0x26e>
  40271e:	4640      	mov	r0, r8
  402720:	e791      	b.n	402646 <__udivmoddi4+0x1e6>
  402722:	4681      	mov	r9, r0
  402724:	e7be      	b.n	4026a4 <__udivmoddi4+0x244>
  402726:	4601      	mov	r1, r0
  402728:	e778      	b.n	40261c <__udivmoddi4+0x1bc>
  40272a:	3802      	subs	r0, #2
  40272c:	443c      	add	r4, r7
  40272e:	e745      	b.n	4025bc <__udivmoddi4+0x15c>
  402730:	4608      	mov	r0, r1
  402732:	e708      	b.n	402546 <__udivmoddi4+0xe6>
  402734:	f1a8 0802 	sub.w	r8, r8, #2
  402738:	443d      	add	r5, r7
  40273a:	e72b      	b.n	402594 <__udivmoddi4+0x134>

0040273c <__aeabi_idiv0>:
  40273c:	4770      	bx	lr
  40273e:	bf00      	nop

00402740 <__libc_init_array>:
  402740:	b570      	push	{r4, r5, r6, lr}
  402742:	4e0f      	ldr	r6, [pc, #60]	; (402780 <__libc_init_array+0x40>)
  402744:	4d0f      	ldr	r5, [pc, #60]	; (402784 <__libc_init_array+0x44>)
  402746:	1b76      	subs	r6, r6, r5
  402748:	10b6      	asrs	r6, r6, #2
  40274a:	bf18      	it	ne
  40274c:	2400      	movne	r4, #0
  40274e:	d005      	beq.n	40275c <__libc_init_array+0x1c>
  402750:	3401      	adds	r4, #1
  402752:	f855 3b04 	ldr.w	r3, [r5], #4
  402756:	4798      	blx	r3
  402758:	42a6      	cmp	r6, r4
  40275a:	d1f9      	bne.n	402750 <__libc_init_array+0x10>
  40275c:	4e0a      	ldr	r6, [pc, #40]	; (402788 <__libc_init_array+0x48>)
  40275e:	4d0b      	ldr	r5, [pc, #44]	; (40278c <__libc_init_array+0x4c>)
  402760:	1b76      	subs	r6, r6, r5
  402762:	f002 ff7f 	bl	405664 <_init>
  402766:	10b6      	asrs	r6, r6, #2
  402768:	bf18      	it	ne
  40276a:	2400      	movne	r4, #0
  40276c:	d006      	beq.n	40277c <__libc_init_array+0x3c>
  40276e:	3401      	adds	r4, #1
  402770:	f855 3b04 	ldr.w	r3, [r5], #4
  402774:	4798      	blx	r3
  402776:	42a6      	cmp	r6, r4
  402778:	d1f9      	bne.n	40276e <__libc_init_array+0x2e>
  40277a:	bd70      	pop	{r4, r5, r6, pc}
  40277c:	bd70      	pop	{r4, r5, r6, pc}
  40277e:	bf00      	nop
  402780:	00405670 	.word	0x00405670
  402784:	00405670 	.word	0x00405670
  402788:	00405678 	.word	0x00405678
  40278c:	00405670 	.word	0x00405670

00402790 <iprintf>:
  402790:	b40f      	push	{r0, r1, r2, r3}
  402792:	b500      	push	{lr}
  402794:	4907      	ldr	r1, [pc, #28]	; (4027b4 <iprintf+0x24>)
  402796:	b083      	sub	sp, #12
  402798:	ab04      	add	r3, sp, #16
  40279a:	6808      	ldr	r0, [r1, #0]
  40279c:	f853 2b04 	ldr.w	r2, [r3], #4
  4027a0:	6881      	ldr	r1, [r0, #8]
  4027a2:	9301      	str	r3, [sp, #4]
  4027a4:	f000 fcba 	bl	40311c <_vfiprintf_r>
  4027a8:	b003      	add	sp, #12
  4027aa:	f85d eb04 	ldr.w	lr, [sp], #4
  4027ae:	b004      	add	sp, #16
  4027b0:	4770      	bx	lr
  4027b2:	bf00      	nop
  4027b4:	20000010 	.word	0x20000010

004027b8 <malloc>:
  4027b8:	4b02      	ldr	r3, [pc, #8]	; (4027c4 <malloc+0xc>)
  4027ba:	4601      	mov	r1, r0
  4027bc:	6818      	ldr	r0, [r3, #0]
  4027be:	f000 b803 	b.w	4027c8 <_malloc_r>
  4027c2:	bf00      	nop
  4027c4:	20000010 	.word	0x20000010

004027c8 <_malloc_r>:
  4027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027cc:	f101 060b 	add.w	r6, r1, #11
  4027d0:	2e16      	cmp	r6, #22
  4027d2:	b083      	sub	sp, #12
  4027d4:	4605      	mov	r5, r0
  4027d6:	f240 809e 	bls.w	402916 <_malloc_r+0x14e>
  4027da:	f036 0607 	bics.w	r6, r6, #7
  4027de:	f100 80bd 	bmi.w	40295c <_malloc_r+0x194>
  4027e2:	42b1      	cmp	r1, r6
  4027e4:	f200 80ba 	bhi.w	40295c <_malloc_r+0x194>
  4027e8:	f000 faec 	bl	402dc4 <__malloc_lock>
  4027ec:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4027f0:	f0c0 8293 	bcc.w	402d1a <_malloc_r+0x552>
  4027f4:	0a73      	lsrs	r3, r6, #9
  4027f6:	f000 80b8 	beq.w	40296a <_malloc_r+0x1a2>
  4027fa:	2b04      	cmp	r3, #4
  4027fc:	f200 8179 	bhi.w	402af2 <_malloc_r+0x32a>
  402800:	09b3      	lsrs	r3, r6, #6
  402802:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402806:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40280a:	00c3      	lsls	r3, r0, #3
  40280c:	4fbf      	ldr	r7, [pc, #764]	; (402b0c <_malloc_r+0x344>)
  40280e:	443b      	add	r3, r7
  402810:	f1a3 0108 	sub.w	r1, r3, #8
  402814:	685c      	ldr	r4, [r3, #4]
  402816:	42a1      	cmp	r1, r4
  402818:	d106      	bne.n	402828 <_malloc_r+0x60>
  40281a:	e00c      	b.n	402836 <_malloc_r+0x6e>
  40281c:	2a00      	cmp	r2, #0
  40281e:	f280 80aa 	bge.w	402976 <_malloc_r+0x1ae>
  402822:	68e4      	ldr	r4, [r4, #12]
  402824:	42a1      	cmp	r1, r4
  402826:	d006      	beq.n	402836 <_malloc_r+0x6e>
  402828:	6863      	ldr	r3, [r4, #4]
  40282a:	f023 0303 	bic.w	r3, r3, #3
  40282e:	1b9a      	subs	r2, r3, r6
  402830:	2a0f      	cmp	r2, #15
  402832:	ddf3      	ble.n	40281c <_malloc_r+0x54>
  402834:	4670      	mov	r0, lr
  402836:	693c      	ldr	r4, [r7, #16]
  402838:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402b20 <_malloc_r+0x358>
  40283c:	4574      	cmp	r4, lr
  40283e:	f000 81ab 	beq.w	402b98 <_malloc_r+0x3d0>
  402842:	6863      	ldr	r3, [r4, #4]
  402844:	f023 0303 	bic.w	r3, r3, #3
  402848:	1b9a      	subs	r2, r3, r6
  40284a:	2a0f      	cmp	r2, #15
  40284c:	f300 8190 	bgt.w	402b70 <_malloc_r+0x3a8>
  402850:	2a00      	cmp	r2, #0
  402852:	f8c7 e014 	str.w	lr, [r7, #20]
  402856:	f8c7 e010 	str.w	lr, [r7, #16]
  40285a:	f280 809d 	bge.w	402998 <_malloc_r+0x1d0>
  40285e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402862:	f080 8161 	bcs.w	402b28 <_malloc_r+0x360>
  402866:	08db      	lsrs	r3, r3, #3
  402868:	f103 0c01 	add.w	ip, r3, #1
  40286c:	1099      	asrs	r1, r3, #2
  40286e:	687a      	ldr	r2, [r7, #4]
  402870:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402874:	f8c4 8008 	str.w	r8, [r4, #8]
  402878:	2301      	movs	r3, #1
  40287a:	408b      	lsls	r3, r1
  40287c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402880:	4313      	orrs	r3, r2
  402882:	3908      	subs	r1, #8
  402884:	60e1      	str	r1, [r4, #12]
  402886:	607b      	str	r3, [r7, #4]
  402888:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40288c:	f8c8 400c 	str.w	r4, [r8, #12]
  402890:	1082      	asrs	r2, r0, #2
  402892:	2401      	movs	r4, #1
  402894:	4094      	lsls	r4, r2
  402896:	429c      	cmp	r4, r3
  402898:	f200 808b 	bhi.w	4029b2 <_malloc_r+0x1ea>
  40289c:	421c      	tst	r4, r3
  40289e:	d106      	bne.n	4028ae <_malloc_r+0xe6>
  4028a0:	f020 0003 	bic.w	r0, r0, #3
  4028a4:	0064      	lsls	r4, r4, #1
  4028a6:	421c      	tst	r4, r3
  4028a8:	f100 0004 	add.w	r0, r0, #4
  4028ac:	d0fa      	beq.n	4028a4 <_malloc_r+0xdc>
  4028ae:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4028b2:	46cc      	mov	ip, r9
  4028b4:	4680      	mov	r8, r0
  4028b6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4028ba:	459c      	cmp	ip, r3
  4028bc:	d107      	bne.n	4028ce <_malloc_r+0x106>
  4028be:	e16d      	b.n	402b9c <_malloc_r+0x3d4>
  4028c0:	2a00      	cmp	r2, #0
  4028c2:	f280 817b 	bge.w	402bbc <_malloc_r+0x3f4>
  4028c6:	68db      	ldr	r3, [r3, #12]
  4028c8:	459c      	cmp	ip, r3
  4028ca:	f000 8167 	beq.w	402b9c <_malloc_r+0x3d4>
  4028ce:	6859      	ldr	r1, [r3, #4]
  4028d0:	f021 0103 	bic.w	r1, r1, #3
  4028d4:	1b8a      	subs	r2, r1, r6
  4028d6:	2a0f      	cmp	r2, #15
  4028d8:	ddf2      	ble.n	4028c0 <_malloc_r+0xf8>
  4028da:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4028de:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4028e2:	9300      	str	r3, [sp, #0]
  4028e4:	199c      	adds	r4, r3, r6
  4028e6:	4628      	mov	r0, r5
  4028e8:	f046 0601 	orr.w	r6, r6, #1
  4028ec:	f042 0501 	orr.w	r5, r2, #1
  4028f0:	605e      	str	r6, [r3, #4]
  4028f2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4028f6:	f8cc 8008 	str.w	r8, [ip, #8]
  4028fa:	617c      	str	r4, [r7, #20]
  4028fc:	613c      	str	r4, [r7, #16]
  4028fe:	f8c4 e00c 	str.w	lr, [r4, #12]
  402902:	f8c4 e008 	str.w	lr, [r4, #8]
  402906:	6065      	str	r5, [r4, #4]
  402908:	505a      	str	r2, [r3, r1]
  40290a:	f000 fa61 	bl	402dd0 <__malloc_unlock>
  40290e:	9b00      	ldr	r3, [sp, #0]
  402910:	f103 0408 	add.w	r4, r3, #8
  402914:	e01e      	b.n	402954 <_malloc_r+0x18c>
  402916:	2910      	cmp	r1, #16
  402918:	d820      	bhi.n	40295c <_malloc_r+0x194>
  40291a:	f000 fa53 	bl	402dc4 <__malloc_lock>
  40291e:	2610      	movs	r6, #16
  402920:	2318      	movs	r3, #24
  402922:	2002      	movs	r0, #2
  402924:	4f79      	ldr	r7, [pc, #484]	; (402b0c <_malloc_r+0x344>)
  402926:	443b      	add	r3, r7
  402928:	f1a3 0208 	sub.w	r2, r3, #8
  40292c:	685c      	ldr	r4, [r3, #4]
  40292e:	4294      	cmp	r4, r2
  402930:	f000 813d 	beq.w	402bae <_malloc_r+0x3e6>
  402934:	6863      	ldr	r3, [r4, #4]
  402936:	68e1      	ldr	r1, [r4, #12]
  402938:	68a6      	ldr	r6, [r4, #8]
  40293a:	f023 0303 	bic.w	r3, r3, #3
  40293e:	4423      	add	r3, r4
  402940:	4628      	mov	r0, r5
  402942:	685a      	ldr	r2, [r3, #4]
  402944:	60f1      	str	r1, [r6, #12]
  402946:	f042 0201 	orr.w	r2, r2, #1
  40294a:	608e      	str	r6, [r1, #8]
  40294c:	605a      	str	r2, [r3, #4]
  40294e:	f000 fa3f 	bl	402dd0 <__malloc_unlock>
  402952:	3408      	adds	r4, #8
  402954:	4620      	mov	r0, r4
  402956:	b003      	add	sp, #12
  402958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40295c:	2400      	movs	r4, #0
  40295e:	230c      	movs	r3, #12
  402960:	4620      	mov	r0, r4
  402962:	602b      	str	r3, [r5, #0]
  402964:	b003      	add	sp, #12
  402966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40296a:	2040      	movs	r0, #64	; 0x40
  40296c:	f44f 7300 	mov.w	r3, #512	; 0x200
  402970:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402974:	e74a      	b.n	40280c <_malloc_r+0x44>
  402976:	4423      	add	r3, r4
  402978:	68e1      	ldr	r1, [r4, #12]
  40297a:	685a      	ldr	r2, [r3, #4]
  40297c:	68a6      	ldr	r6, [r4, #8]
  40297e:	f042 0201 	orr.w	r2, r2, #1
  402982:	60f1      	str	r1, [r6, #12]
  402984:	4628      	mov	r0, r5
  402986:	608e      	str	r6, [r1, #8]
  402988:	605a      	str	r2, [r3, #4]
  40298a:	f000 fa21 	bl	402dd0 <__malloc_unlock>
  40298e:	3408      	adds	r4, #8
  402990:	4620      	mov	r0, r4
  402992:	b003      	add	sp, #12
  402994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402998:	4423      	add	r3, r4
  40299a:	4628      	mov	r0, r5
  40299c:	685a      	ldr	r2, [r3, #4]
  40299e:	f042 0201 	orr.w	r2, r2, #1
  4029a2:	605a      	str	r2, [r3, #4]
  4029a4:	f000 fa14 	bl	402dd0 <__malloc_unlock>
  4029a8:	3408      	adds	r4, #8
  4029aa:	4620      	mov	r0, r4
  4029ac:	b003      	add	sp, #12
  4029ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029b2:	68bc      	ldr	r4, [r7, #8]
  4029b4:	6863      	ldr	r3, [r4, #4]
  4029b6:	f023 0803 	bic.w	r8, r3, #3
  4029ba:	45b0      	cmp	r8, r6
  4029bc:	d304      	bcc.n	4029c8 <_malloc_r+0x200>
  4029be:	eba8 0306 	sub.w	r3, r8, r6
  4029c2:	2b0f      	cmp	r3, #15
  4029c4:	f300 8085 	bgt.w	402ad2 <_malloc_r+0x30a>
  4029c8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402b24 <_malloc_r+0x35c>
  4029cc:	4b50      	ldr	r3, [pc, #320]	; (402b10 <_malloc_r+0x348>)
  4029ce:	f8d9 2000 	ldr.w	r2, [r9]
  4029d2:	681b      	ldr	r3, [r3, #0]
  4029d4:	3201      	adds	r2, #1
  4029d6:	4433      	add	r3, r6
  4029d8:	eb04 0a08 	add.w	sl, r4, r8
  4029dc:	f000 8155 	beq.w	402c8a <_malloc_r+0x4c2>
  4029e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4029e4:	330f      	adds	r3, #15
  4029e6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4029ea:	f02b 0b0f 	bic.w	fp, fp, #15
  4029ee:	4659      	mov	r1, fp
  4029f0:	4628      	mov	r0, r5
  4029f2:	f000 f9f3 	bl	402ddc <_sbrk_r>
  4029f6:	1c41      	adds	r1, r0, #1
  4029f8:	4602      	mov	r2, r0
  4029fa:	f000 80fc 	beq.w	402bf6 <_malloc_r+0x42e>
  4029fe:	4582      	cmp	sl, r0
  402a00:	f200 80f7 	bhi.w	402bf2 <_malloc_r+0x42a>
  402a04:	4b43      	ldr	r3, [pc, #268]	; (402b14 <_malloc_r+0x34c>)
  402a06:	6819      	ldr	r1, [r3, #0]
  402a08:	4459      	add	r1, fp
  402a0a:	6019      	str	r1, [r3, #0]
  402a0c:	f000 814d 	beq.w	402caa <_malloc_r+0x4e2>
  402a10:	f8d9 0000 	ldr.w	r0, [r9]
  402a14:	3001      	adds	r0, #1
  402a16:	bf1b      	ittet	ne
  402a18:	eba2 0a0a 	subne.w	sl, r2, sl
  402a1c:	4451      	addne	r1, sl
  402a1e:	f8c9 2000 	streq.w	r2, [r9]
  402a22:	6019      	strne	r1, [r3, #0]
  402a24:	f012 0107 	ands.w	r1, r2, #7
  402a28:	f000 8115 	beq.w	402c56 <_malloc_r+0x48e>
  402a2c:	f1c1 0008 	rsb	r0, r1, #8
  402a30:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402a34:	4402      	add	r2, r0
  402a36:	3108      	adds	r1, #8
  402a38:	eb02 090b 	add.w	r9, r2, fp
  402a3c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402a40:	eba1 0909 	sub.w	r9, r1, r9
  402a44:	4649      	mov	r1, r9
  402a46:	4628      	mov	r0, r5
  402a48:	9301      	str	r3, [sp, #4]
  402a4a:	9200      	str	r2, [sp, #0]
  402a4c:	f000 f9c6 	bl	402ddc <_sbrk_r>
  402a50:	1c43      	adds	r3, r0, #1
  402a52:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402a56:	f000 8143 	beq.w	402ce0 <_malloc_r+0x518>
  402a5a:	1a80      	subs	r0, r0, r2
  402a5c:	4448      	add	r0, r9
  402a5e:	f040 0001 	orr.w	r0, r0, #1
  402a62:	6819      	ldr	r1, [r3, #0]
  402a64:	60ba      	str	r2, [r7, #8]
  402a66:	4449      	add	r1, r9
  402a68:	42bc      	cmp	r4, r7
  402a6a:	6050      	str	r0, [r2, #4]
  402a6c:	6019      	str	r1, [r3, #0]
  402a6e:	d017      	beq.n	402aa0 <_malloc_r+0x2d8>
  402a70:	f1b8 0f0f 	cmp.w	r8, #15
  402a74:	f240 80fb 	bls.w	402c6e <_malloc_r+0x4a6>
  402a78:	6860      	ldr	r0, [r4, #4]
  402a7a:	f1a8 020c 	sub.w	r2, r8, #12
  402a7e:	f022 0207 	bic.w	r2, r2, #7
  402a82:	eb04 0e02 	add.w	lr, r4, r2
  402a86:	f000 0001 	and.w	r0, r0, #1
  402a8a:	f04f 0c05 	mov.w	ip, #5
  402a8e:	4310      	orrs	r0, r2
  402a90:	2a0f      	cmp	r2, #15
  402a92:	6060      	str	r0, [r4, #4]
  402a94:	f8ce c004 	str.w	ip, [lr, #4]
  402a98:	f8ce c008 	str.w	ip, [lr, #8]
  402a9c:	f200 8117 	bhi.w	402cce <_malloc_r+0x506>
  402aa0:	4b1d      	ldr	r3, [pc, #116]	; (402b18 <_malloc_r+0x350>)
  402aa2:	68bc      	ldr	r4, [r7, #8]
  402aa4:	681a      	ldr	r2, [r3, #0]
  402aa6:	4291      	cmp	r1, r2
  402aa8:	bf88      	it	hi
  402aaa:	6019      	strhi	r1, [r3, #0]
  402aac:	4b1b      	ldr	r3, [pc, #108]	; (402b1c <_malloc_r+0x354>)
  402aae:	681a      	ldr	r2, [r3, #0]
  402ab0:	4291      	cmp	r1, r2
  402ab2:	6862      	ldr	r2, [r4, #4]
  402ab4:	bf88      	it	hi
  402ab6:	6019      	strhi	r1, [r3, #0]
  402ab8:	f022 0203 	bic.w	r2, r2, #3
  402abc:	4296      	cmp	r6, r2
  402abe:	eba2 0306 	sub.w	r3, r2, r6
  402ac2:	d801      	bhi.n	402ac8 <_malloc_r+0x300>
  402ac4:	2b0f      	cmp	r3, #15
  402ac6:	dc04      	bgt.n	402ad2 <_malloc_r+0x30a>
  402ac8:	4628      	mov	r0, r5
  402aca:	f000 f981 	bl	402dd0 <__malloc_unlock>
  402ace:	2400      	movs	r4, #0
  402ad0:	e740      	b.n	402954 <_malloc_r+0x18c>
  402ad2:	19a2      	adds	r2, r4, r6
  402ad4:	f043 0301 	orr.w	r3, r3, #1
  402ad8:	f046 0601 	orr.w	r6, r6, #1
  402adc:	6066      	str	r6, [r4, #4]
  402ade:	4628      	mov	r0, r5
  402ae0:	60ba      	str	r2, [r7, #8]
  402ae2:	6053      	str	r3, [r2, #4]
  402ae4:	f000 f974 	bl	402dd0 <__malloc_unlock>
  402ae8:	3408      	adds	r4, #8
  402aea:	4620      	mov	r0, r4
  402aec:	b003      	add	sp, #12
  402aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402af2:	2b14      	cmp	r3, #20
  402af4:	d971      	bls.n	402bda <_malloc_r+0x412>
  402af6:	2b54      	cmp	r3, #84	; 0x54
  402af8:	f200 80a3 	bhi.w	402c42 <_malloc_r+0x47a>
  402afc:	0b33      	lsrs	r3, r6, #12
  402afe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402b02:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402b06:	00c3      	lsls	r3, r0, #3
  402b08:	e680      	b.n	40280c <_malloc_r+0x44>
  402b0a:	bf00      	nop
  402b0c:	20000440 	.word	0x20000440
  402b10:	20000a90 	.word	0x20000a90
  402b14:	20000a60 	.word	0x20000a60
  402b18:	20000a88 	.word	0x20000a88
  402b1c:	20000a8c 	.word	0x20000a8c
  402b20:	20000448 	.word	0x20000448
  402b24:	20000848 	.word	0x20000848
  402b28:	0a5a      	lsrs	r2, r3, #9
  402b2a:	2a04      	cmp	r2, #4
  402b2c:	d95b      	bls.n	402be6 <_malloc_r+0x41e>
  402b2e:	2a14      	cmp	r2, #20
  402b30:	f200 80ae 	bhi.w	402c90 <_malloc_r+0x4c8>
  402b34:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402b38:	00c9      	lsls	r1, r1, #3
  402b3a:	325b      	adds	r2, #91	; 0x5b
  402b3c:	eb07 0c01 	add.w	ip, r7, r1
  402b40:	5879      	ldr	r1, [r7, r1]
  402b42:	f1ac 0c08 	sub.w	ip, ip, #8
  402b46:	458c      	cmp	ip, r1
  402b48:	f000 8088 	beq.w	402c5c <_malloc_r+0x494>
  402b4c:	684a      	ldr	r2, [r1, #4]
  402b4e:	f022 0203 	bic.w	r2, r2, #3
  402b52:	4293      	cmp	r3, r2
  402b54:	d273      	bcs.n	402c3e <_malloc_r+0x476>
  402b56:	6889      	ldr	r1, [r1, #8]
  402b58:	458c      	cmp	ip, r1
  402b5a:	d1f7      	bne.n	402b4c <_malloc_r+0x384>
  402b5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402b60:	687b      	ldr	r3, [r7, #4]
  402b62:	60e2      	str	r2, [r4, #12]
  402b64:	f8c4 c008 	str.w	ip, [r4, #8]
  402b68:	6094      	str	r4, [r2, #8]
  402b6a:	f8cc 400c 	str.w	r4, [ip, #12]
  402b6e:	e68f      	b.n	402890 <_malloc_r+0xc8>
  402b70:	19a1      	adds	r1, r4, r6
  402b72:	f046 0c01 	orr.w	ip, r6, #1
  402b76:	f042 0601 	orr.w	r6, r2, #1
  402b7a:	f8c4 c004 	str.w	ip, [r4, #4]
  402b7e:	4628      	mov	r0, r5
  402b80:	6179      	str	r1, [r7, #20]
  402b82:	6139      	str	r1, [r7, #16]
  402b84:	f8c1 e00c 	str.w	lr, [r1, #12]
  402b88:	f8c1 e008 	str.w	lr, [r1, #8]
  402b8c:	604e      	str	r6, [r1, #4]
  402b8e:	50e2      	str	r2, [r4, r3]
  402b90:	f000 f91e 	bl	402dd0 <__malloc_unlock>
  402b94:	3408      	adds	r4, #8
  402b96:	e6dd      	b.n	402954 <_malloc_r+0x18c>
  402b98:	687b      	ldr	r3, [r7, #4]
  402b9a:	e679      	b.n	402890 <_malloc_r+0xc8>
  402b9c:	f108 0801 	add.w	r8, r8, #1
  402ba0:	f018 0f03 	tst.w	r8, #3
  402ba4:	f10c 0c08 	add.w	ip, ip, #8
  402ba8:	f47f ae85 	bne.w	4028b6 <_malloc_r+0xee>
  402bac:	e02d      	b.n	402c0a <_malloc_r+0x442>
  402bae:	68dc      	ldr	r4, [r3, #12]
  402bb0:	42a3      	cmp	r3, r4
  402bb2:	bf08      	it	eq
  402bb4:	3002      	addeq	r0, #2
  402bb6:	f43f ae3e 	beq.w	402836 <_malloc_r+0x6e>
  402bba:	e6bb      	b.n	402934 <_malloc_r+0x16c>
  402bbc:	4419      	add	r1, r3
  402bbe:	461c      	mov	r4, r3
  402bc0:	684a      	ldr	r2, [r1, #4]
  402bc2:	68db      	ldr	r3, [r3, #12]
  402bc4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402bc8:	f042 0201 	orr.w	r2, r2, #1
  402bcc:	604a      	str	r2, [r1, #4]
  402bce:	4628      	mov	r0, r5
  402bd0:	60f3      	str	r3, [r6, #12]
  402bd2:	609e      	str	r6, [r3, #8]
  402bd4:	f000 f8fc 	bl	402dd0 <__malloc_unlock>
  402bd8:	e6bc      	b.n	402954 <_malloc_r+0x18c>
  402bda:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402bde:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402be2:	00c3      	lsls	r3, r0, #3
  402be4:	e612      	b.n	40280c <_malloc_r+0x44>
  402be6:	099a      	lsrs	r2, r3, #6
  402be8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402bec:	00c9      	lsls	r1, r1, #3
  402bee:	3238      	adds	r2, #56	; 0x38
  402bf0:	e7a4      	b.n	402b3c <_malloc_r+0x374>
  402bf2:	42bc      	cmp	r4, r7
  402bf4:	d054      	beq.n	402ca0 <_malloc_r+0x4d8>
  402bf6:	68bc      	ldr	r4, [r7, #8]
  402bf8:	6862      	ldr	r2, [r4, #4]
  402bfa:	f022 0203 	bic.w	r2, r2, #3
  402bfe:	e75d      	b.n	402abc <_malloc_r+0x2f4>
  402c00:	f859 3908 	ldr.w	r3, [r9], #-8
  402c04:	4599      	cmp	r9, r3
  402c06:	f040 8086 	bne.w	402d16 <_malloc_r+0x54e>
  402c0a:	f010 0f03 	tst.w	r0, #3
  402c0e:	f100 30ff 	add.w	r0, r0, #4294967295
  402c12:	d1f5      	bne.n	402c00 <_malloc_r+0x438>
  402c14:	687b      	ldr	r3, [r7, #4]
  402c16:	ea23 0304 	bic.w	r3, r3, r4
  402c1a:	607b      	str	r3, [r7, #4]
  402c1c:	0064      	lsls	r4, r4, #1
  402c1e:	429c      	cmp	r4, r3
  402c20:	f63f aec7 	bhi.w	4029b2 <_malloc_r+0x1ea>
  402c24:	2c00      	cmp	r4, #0
  402c26:	f43f aec4 	beq.w	4029b2 <_malloc_r+0x1ea>
  402c2a:	421c      	tst	r4, r3
  402c2c:	4640      	mov	r0, r8
  402c2e:	f47f ae3e 	bne.w	4028ae <_malloc_r+0xe6>
  402c32:	0064      	lsls	r4, r4, #1
  402c34:	421c      	tst	r4, r3
  402c36:	f100 0004 	add.w	r0, r0, #4
  402c3a:	d0fa      	beq.n	402c32 <_malloc_r+0x46a>
  402c3c:	e637      	b.n	4028ae <_malloc_r+0xe6>
  402c3e:	468c      	mov	ip, r1
  402c40:	e78c      	b.n	402b5c <_malloc_r+0x394>
  402c42:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402c46:	d815      	bhi.n	402c74 <_malloc_r+0x4ac>
  402c48:	0bf3      	lsrs	r3, r6, #15
  402c4a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402c4e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402c52:	00c3      	lsls	r3, r0, #3
  402c54:	e5da      	b.n	40280c <_malloc_r+0x44>
  402c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402c5a:	e6ed      	b.n	402a38 <_malloc_r+0x270>
  402c5c:	687b      	ldr	r3, [r7, #4]
  402c5e:	1092      	asrs	r2, r2, #2
  402c60:	2101      	movs	r1, #1
  402c62:	fa01 f202 	lsl.w	r2, r1, r2
  402c66:	4313      	orrs	r3, r2
  402c68:	607b      	str	r3, [r7, #4]
  402c6a:	4662      	mov	r2, ip
  402c6c:	e779      	b.n	402b62 <_malloc_r+0x39a>
  402c6e:	2301      	movs	r3, #1
  402c70:	6053      	str	r3, [r2, #4]
  402c72:	e729      	b.n	402ac8 <_malloc_r+0x300>
  402c74:	f240 5254 	movw	r2, #1364	; 0x554
  402c78:	4293      	cmp	r3, r2
  402c7a:	d822      	bhi.n	402cc2 <_malloc_r+0x4fa>
  402c7c:	0cb3      	lsrs	r3, r6, #18
  402c7e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402c82:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402c86:	00c3      	lsls	r3, r0, #3
  402c88:	e5c0      	b.n	40280c <_malloc_r+0x44>
  402c8a:	f103 0b10 	add.w	fp, r3, #16
  402c8e:	e6ae      	b.n	4029ee <_malloc_r+0x226>
  402c90:	2a54      	cmp	r2, #84	; 0x54
  402c92:	d829      	bhi.n	402ce8 <_malloc_r+0x520>
  402c94:	0b1a      	lsrs	r2, r3, #12
  402c96:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402c9a:	00c9      	lsls	r1, r1, #3
  402c9c:	326e      	adds	r2, #110	; 0x6e
  402c9e:	e74d      	b.n	402b3c <_malloc_r+0x374>
  402ca0:	4b20      	ldr	r3, [pc, #128]	; (402d24 <_malloc_r+0x55c>)
  402ca2:	6819      	ldr	r1, [r3, #0]
  402ca4:	4459      	add	r1, fp
  402ca6:	6019      	str	r1, [r3, #0]
  402ca8:	e6b2      	b.n	402a10 <_malloc_r+0x248>
  402caa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402cae:	2800      	cmp	r0, #0
  402cb0:	f47f aeae 	bne.w	402a10 <_malloc_r+0x248>
  402cb4:	eb08 030b 	add.w	r3, r8, fp
  402cb8:	68ba      	ldr	r2, [r7, #8]
  402cba:	f043 0301 	orr.w	r3, r3, #1
  402cbe:	6053      	str	r3, [r2, #4]
  402cc0:	e6ee      	b.n	402aa0 <_malloc_r+0x2d8>
  402cc2:	207f      	movs	r0, #127	; 0x7f
  402cc4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402cc8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402ccc:	e59e      	b.n	40280c <_malloc_r+0x44>
  402cce:	f104 0108 	add.w	r1, r4, #8
  402cd2:	4628      	mov	r0, r5
  402cd4:	9300      	str	r3, [sp, #0]
  402cd6:	f001 fb3d 	bl	404354 <_free_r>
  402cda:	9b00      	ldr	r3, [sp, #0]
  402cdc:	6819      	ldr	r1, [r3, #0]
  402cde:	e6df      	b.n	402aa0 <_malloc_r+0x2d8>
  402ce0:	2001      	movs	r0, #1
  402ce2:	f04f 0900 	mov.w	r9, #0
  402ce6:	e6bc      	b.n	402a62 <_malloc_r+0x29a>
  402ce8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402cec:	d805      	bhi.n	402cfa <_malloc_r+0x532>
  402cee:	0bda      	lsrs	r2, r3, #15
  402cf0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402cf4:	00c9      	lsls	r1, r1, #3
  402cf6:	3277      	adds	r2, #119	; 0x77
  402cf8:	e720      	b.n	402b3c <_malloc_r+0x374>
  402cfa:	f240 5154 	movw	r1, #1364	; 0x554
  402cfe:	428a      	cmp	r2, r1
  402d00:	d805      	bhi.n	402d0e <_malloc_r+0x546>
  402d02:	0c9a      	lsrs	r2, r3, #18
  402d04:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402d08:	00c9      	lsls	r1, r1, #3
  402d0a:	327c      	adds	r2, #124	; 0x7c
  402d0c:	e716      	b.n	402b3c <_malloc_r+0x374>
  402d0e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402d12:	227e      	movs	r2, #126	; 0x7e
  402d14:	e712      	b.n	402b3c <_malloc_r+0x374>
  402d16:	687b      	ldr	r3, [r7, #4]
  402d18:	e780      	b.n	402c1c <_malloc_r+0x454>
  402d1a:	08f0      	lsrs	r0, r6, #3
  402d1c:	f106 0308 	add.w	r3, r6, #8
  402d20:	e600      	b.n	402924 <_malloc_r+0x15c>
  402d22:	bf00      	nop
  402d24:	20000a60 	.word	0x20000a60

00402d28 <memset>:
  402d28:	b470      	push	{r4, r5, r6}
  402d2a:	0786      	lsls	r6, r0, #30
  402d2c:	d046      	beq.n	402dbc <memset+0x94>
  402d2e:	1e54      	subs	r4, r2, #1
  402d30:	2a00      	cmp	r2, #0
  402d32:	d041      	beq.n	402db8 <memset+0x90>
  402d34:	b2ca      	uxtb	r2, r1
  402d36:	4603      	mov	r3, r0
  402d38:	e002      	b.n	402d40 <memset+0x18>
  402d3a:	f114 34ff 	adds.w	r4, r4, #4294967295
  402d3e:	d33b      	bcc.n	402db8 <memset+0x90>
  402d40:	f803 2b01 	strb.w	r2, [r3], #1
  402d44:	079d      	lsls	r5, r3, #30
  402d46:	d1f8      	bne.n	402d3a <memset+0x12>
  402d48:	2c03      	cmp	r4, #3
  402d4a:	d92e      	bls.n	402daa <memset+0x82>
  402d4c:	b2cd      	uxtb	r5, r1
  402d4e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402d52:	2c0f      	cmp	r4, #15
  402d54:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402d58:	d919      	bls.n	402d8e <memset+0x66>
  402d5a:	f103 0210 	add.w	r2, r3, #16
  402d5e:	4626      	mov	r6, r4
  402d60:	3e10      	subs	r6, #16
  402d62:	2e0f      	cmp	r6, #15
  402d64:	f842 5c10 	str.w	r5, [r2, #-16]
  402d68:	f842 5c0c 	str.w	r5, [r2, #-12]
  402d6c:	f842 5c08 	str.w	r5, [r2, #-8]
  402d70:	f842 5c04 	str.w	r5, [r2, #-4]
  402d74:	f102 0210 	add.w	r2, r2, #16
  402d78:	d8f2      	bhi.n	402d60 <memset+0x38>
  402d7a:	f1a4 0210 	sub.w	r2, r4, #16
  402d7e:	f022 020f 	bic.w	r2, r2, #15
  402d82:	f004 040f 	and.w	r4, r4, #15
  402d86:	3210      	adds	r2, #16
  402d88:	2c03      	cmp	r4, #3
  402d8a:	4413      	add	r3, r2
  402d8c:	d90d      	bls.n	402daa <memset+0x82>
  402d8e:	461e      	mov	r6, r3
  402d90:	4622      	mov	r2, r4
  402d92:	3a04      	subs	r2, #4
  402d94:	2a03      	cmp	r2, #3
  402d96:	f846 5b04 	str.w	r5, [r6], #4
  402d9a:	d8fa      	bhi.n	402d92 <memset+0x6a>
  402d9c:	1f22      	subs	r2, r4, #4
  402d9e:	f022 0203 	bic.w	r2, r2, #3
  402da2:	3204      	adds	r2, #4
  402da4:	4413      	add	r3, r2
  402da6:	f004 0403 	and.w	r4, r4, #3
  402daa:	b12c      	cbz	r4, 402db8 <memset+0x90>
  402dac:	b2c9      	uxtb	r1, r1
  402dae:	441c      	add	r4, r3
  402db0:	f803 1b01 	strb.w	r1, [r3], #1
  402db4:	429c      	cmp	r4, r3
  402db6:	d1fb      	bne.n	402db0 <memset+0x88>
  402db8:	bc70      	pop	{r4, r5, r6}
  402dba:	4770      	bx	lr
  402dbc:	4614      	mov	r4, r2
  402dbe:	4603      	mov	r3, r0
  402dc0:	e7c2      	b.n	402d48 <memset+0x20>
  402dc2:	bf00      	nop

00402dc4 <__malloc_lock>:
  402dc4:	4801      	ldr	r0, [pc, #4]	; (402dcc <__malloc_lock+0x8>)
  402dc6:	f001 bd5f 	b.w	404888 <__retarget_lock_acquire_recursive>
  402dca:	bf00      	nop
  402dcc:	20000ec0 	.word	0x20000ec0

00402dd0 <__malloc_unlock>:
  402dd0:	4801      	ldr	r0, [pc, #4]	; (402dd8 <__malloc_unlock+0x8>)
  402dd2:	f001 bd5b 	b.w	40488c <__retarget_lock_release_recursive>
  402dd6:	bf00      	nop
  402dd8:	20000ec0 	.word	0x20000ec0

00402ddc <_sbrk_r>:
  402ddc:	b538      	push	{r3, r4, r5, lr}
  402dde:	4c07      	ldr	r4, [pc, #28]	; (402dfc <_sbrk_r+0x20>)
  402de0:	2300      	movs	r3, #0
  402de2:	4605      	mov	r5, r0
  402de4:	4608      	mov	r0, r1
  402de6:	6023      	str	r3, [r4, #0]
  402de8:	f7ff fa9a 	bl	402320 <_sbrk>
  402dec:	1c43      	adds	r3, r0, #1
  402dee:	d000      	beq.n	402df2 <_sbrk_r+0x16>
  402df0:	bd38      	pop	{r3, r4, r5, pc}
  402df2:	6823      	ldr	r3, [r4, #0]
  402df4:	2b00      	cmp	r3, #0
  402df6:	d0fb      	beq.n	402df0 <_sbrk_r+0x14>
  402df8:	602b      	str	r3, [r5, #0]
  402dfa:	bd38      	pop	{r3, r4, r5, pc}
  402dfc:	20000ed4 	.word	0x20000ed4

00402e00 <setbuf>:
  402e00:	2900      	cmp	r1, #0
  402e02:	bf0c      	ite	eq
  402e04:	2202      	moveq	r2, #2
  402e06:	2200      	movne	r2, #0
  402e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402e0c:	f000 b800 	b.w	402e10 <setvbuf>

00402e10 <setvbuf>:
  402e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402e14:	4c61      	ldr	r4, [pc, #388]	; (402f9c <setvbuf+0x18c>)
  402e16:	6825      	ldr	r5, [r4, #0]
  402e18:	b083      	sub	sp, #12
  402e1a:	4604      	mov	r4, r0
  402e1c:	460f      	mov	r7, r1
  402e1e:	4690      	mov	r8, r2
  402e20:	461e      	mov	r6, r3
  402e22:	b115      	cbz	r5, 402e2a <setvbuf+0x1a>
  402e24:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402e26:	2b00      	cmp	r3, #0
  402e28:	d064      	beq.n	402ef4 <setvbuf+0xe4>
  402e2a:	f1b8 0f02 	cmp.w	r8, #2
  402e2e:	d006      	beq.n	402e3e <setvbuf+0x2e>
  402e30:	f1b8 0f01 	cmp.w	r8, #1
  402e34:	f200 809f 	bhi.w	402f76 <setvbuf+0x166>
  402e38:	2e00      	cmp	r6, #0
  402e3a:	f2c0 809c 	blt.w	402f76 <setvbuf+0x166>
  402e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402e40:	07d8      	lsls	r0, r3, #31
  402e42:	d534      	bpl.n	402eae <setvbuf+0x9e>
  402e44:	4621      	mov	r1, r4
  402e46:	4628      	mov	r0, r5
  402e48:	f001 f906 	bl	404058 <_fflush_r>
  402e4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402e4e:	b141      	cbz	r1, 402e62 <setvbuf+0x52>
  402e50:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402e54:	4299      	cmp	r1, r3
  402e56:	d002      	beq.n	402e5e <setvbuf+0x4e>
  402e58:	4628      	mov	r0, r5
  402e5a:	f001 fa7b 	bl	404354 <_free_r>
  402e5e:	2300      	movs	r3, #0
  402e60:	6323      	str	r3, [r4, #48]	; 0x30
  402e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e66:	2200      	movs	r2, #0
  402e68:	61a2      	str	r2, [r4, #24]
  402e6a:	6062      	str	r2, [r4, #4]
  402e6c:	061a      	lsls	r2, r3, #24
  402e6e:	d43a      	bmi.n	402ee6 <setvbuf+0xd6>
  402e70:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402e74:	f023 0303 	bic.w	r3, r3, #3
  402e78:	f1b8 0f02 	cmp.w	r8, #2
  402e7c:	81a3      	strh	r3, [r4, #12]
  402e7e:	d01d      	beq.n	402ebc <setvbuf+0xac>
  402e80:	ab01      	add	r3, sp, #4
  402e82:	466a      	mov	r2, sp
  402e84:	4621      	mov	r1, r4
  402e86:	4628      	mov	r0, r5
  402e88:	f001 fd02 	bl	404890 <__swhatbuf_r>
  402e8c:	89a3      	ldrh	r3, [r4, #12]
  402e8e:	4318      	orrs	r0, r3
  402e90:	81a0      	strh	r0, [r4, #12]
  402e92:	2e00      	cmp	r6, #0
  402e94:	d132      	bne.n	402efc <setvbuf+0xec>
  402e96:	9e00      	ldr	r6, [sp, #0]
  402e98:	4630      	mov	r0, r6
  402e9a:	f7ff fc8d 	bl	4027b8 <malloc>
  402e9e:	4607      	mov	r7, r0
  402ea0:	2800      	cmp	r0, #0
  402ea2:	d06b      	beq.n	402f7c <setvbuf+0x16c>
  402ea4:	89a3      	ldrh	r3, [r4, #12]
  402ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402eaa:	81a3      	strh	r3, [r4, #12]
  402eac:	e028      	b.n	402f00 <setvbuf+0xf0>
  402eae:	89a3      	ldrh	r3, [r4, #12]
  402eb0:	0599      	lsls	r1, r3, #22
  402eb2:	d4c7      	bmi.n	402e44 <setvbuf+0x34>
  402eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402eb6:	f001 fce7 	bl	404888 <__retarget_lock_acquire_recursive>
  402eba:	e7c3      	b.n	402e44 <setvbuf+0x34>
  402ebc:	2500      	movs	r5, #0
  402ebe:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402ec0:	2600      	movs	r6, #0
  402ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402ec6:	f043 0302 	orr.w	r3, r3, #2
  402eca:	2001      	movs	r0, #1
  402ecc:	60a6      	str	r6, [r4, #8]
  402ece:	07ce      	lsls	r6, r1, #31
  402ed0:	81a3      	strh	r3, [r4, #12]
  402ed2:	6022      	str	r2, [r4, #0]
  402ed4:	6122      	str	r2, [r4, #16]
  402ed6:	6160      	str	r0, [r4, #20]
  402ed8:	d401      	bmi.n	402ede <setvbuf+0xce>
  402eda:	0598      	lsls	r0, r3, #22
  402edc:	d53e      	bpl.n	402f5c <setvbuf+0x14c>
  402ede:	4628      	mov	r0, r5
  402ee0:	b003      	add	sp, #12
  402ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402ee6:	6921      	ldr	r1, [r4, #16]
  402ee8:	4628      	mov	r0, r5
  402eea:	f001 fa33 	bl	404354 <_free_r>
  402eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ef2:	e7bd      	b.n	402e70 <setvbuf+0x60>
  402ef4:	4628      	mov	r0, r5
  402ef6:	f001 f907 	bl	404108 <__sinit>
  402efa:	e796      	b.n	402e2a <setvbuf+0x1a>
  402efc:	2f00      	cmp	r7, #0
  402efe:	d0cb      	beq.n	402e98 <setvbuf+0x88>
  402f00:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402f02:	2b00      	cmp	r3, #0
  402f04:	d033      	beq.n	402f6e <setvbuf+0x15e>
  402f06:	9b00      	ldr	r3, [sp, #0]
  402f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402f0c:	6027      	str	r7, [r4, #0]
  402f0e:	429e      	cmp	r6, r3
  402f10:	bf1c      	itt	ne
  402f12:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402f16:	81a2      	strhne	r2, [r4, #12]
  402f18:	f1b8 0f01 	cmp.w	r8, #1
  402f1c:	bf04      	itt	eq
  402f1e:	f042 0201 	orreq.w	r2, r2, #1
  402f22:	81a2      	strheq	r2, [r4, #12]
  402f24:	b292      	uxth	r2, r2
  402f26:	f012 0308 	ands.w	r3, r2, #8
  402f2a:	6127      	str	r7, [r4, #16]
  402f2c:	6166      	str	r6, [r4, #20]
  402f2e:	d00e      	beq.n	402f4e <setvbuf+0x13e>
  402f30:	07d1      	lsls	r1, r2, #31
  402f32:	d51a      	bpl.n	402f6a <setvbuf+0x15a>
  402f34:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402f36:	4276      	negs	r6, r6
  402f38:	2300      	movs	r3, #0
  402f3a:	f015 0501 	ands.w	r5, r5, #1
  402f3e:	61a6      	str	r6, [r4, #24]
  402f40:	60a3      	str	r3, [r4, #8]
  402f42:	d009      	beq.n	402f58 <setvbuf+0x148>
  402f44:	2500      	movs	r5, #0
  402f46:	4628      	mov	r0, r5
  402f48:	b003      	add	sp, #12
  402f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402f4e:	60a3      	str	r3, [r4, #8]
  402f50:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402f52:	f015 0501 	ands.w	r5, r5, #1
  402f56:	d1f5      	bne.n	402f44 <setvbuf+0x134>
  402f58:	0593      	lsls	r3, r2, #22
  402f5a:	d4c0      	bmi.n	402ede <setvbuf+0xce>
  402f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402f5e:	f001 fc95 	bl	40488c <__retarget_lock_release_recursive>
  402f62:	4628      	mov	r0, r5
  402f64:	b003      	add	sp, #12
  402f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402f6a:	60a6      	str	r6, [r4, #8]
  402f6c:	e7f0      	b.n	402f50 <setvbuf+0x140>
  402f6e:	4628      	mov	r0, r5
  402f70:	f001 f8ca 	bl	404108 <__sinit>
  402f74:	e7c7      	b.n	402f06 <setvbuf+0xf6>
  402f76:	f04f 35ff 	mov.w	r5, #4294967295
  402f7a:	e7b0      	b.n	402ede <setvbuf+0xce>
  402f7c:	f8dd 9000 	ldr.w	r9, [sp]
  402f80:	45b1      	cmp	r9, r6
  402f82:	d004      	beq.n	402f8e <setvbuf+0x17e>
  402f84:	4648      	mov	r0, r9
  402f86:	f7ff fc17 	bl	4027b8 <malloc>
  402f8a:	4607      	mov	r7, r0
  402f8c:	b920      	cbnz	r0, 402f98 <setvbuf+0x188>
  402f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f92:	f04f 35ff 	mov.w	r5, #4294967295
  402f96:	e792      	b.n	402ebe <setvbuf+0xae>
  402f98:	464e      	mov	r6, r9
  402f9a:	e783      	b.n	402ea4 <setvbuf+0x94>
  402f9c:	20000010 	.word	0x20000010
	...

00402fc0 <strlen>:
  402fc0:	f890 f000 	pld	[r0]
  402fc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402fc8:	f020 0107 	bic.w	r1, r0, #7
  402fcc:	f06f 0c00 	mvn.w	ip, #0
  402fd0:	f010 0407 	ands.w	r4, r0, #7
  402fd4:	f891 f020 	pld	[r1, #32]
  402fd8:	f040 8049 	bne.w	40306e <strlen+0xae>
  402fdc:	f04f 0400 	mov.w	r4, #0
  402fe0:	f06f 0007 	mvn.w	r0, #7
  402fe4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402fe8:	f891 f040 	pld	[r1, #64]	; 0x40
  402fec:	f100 0008 	add.w	r0, r0, #8
  402ff0:	fa82 f24c 	uadd8	r2, r2, ip
  402ff4:	faa4 f28c 	sel	r2, r4, ip
  402ff8:	fa83 f34c 	uadd8	r3, r3, ip
  402ffc:	faa2 f38c 	sel	r3, r2, ip
  403000:	bb4b      	cbnz	r3, 403056 <strlen+0x96>
  403002:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403006:	fa82 f24c 	uadd8	r2, r2, ip
  40300a:	f100 0008 	add.w	r0, r0, #8
  40300e:	faa4 f28c 	sel	r2, r4, ip
  403012:	fa83 f34c 	uadd8	r3, r3, ip
  403016:	faa2 f38c 	sel	r3, r2, ip
  40301a:	b9e3      	cbnz	r3, 403056 <strlen+0x96>
  40301c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403020:	fa82 f24c 	uadd8	r2, r2, ip
  403024:	f100 0008 	add.w	r0, r0, #8
  403028:	faa4 f28c 	sel	r2, r4, ip
  40302c:	fa83 f34c 	uadd8	r3, r3, ip
  403030:	faa2 f38c 	sel	r3, r2, ip
  403034:	b97b      	cbnz	r3, 403056 <strlen+0x96>
  403036:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40303a:	f101 0120 	add.w	r1, r1, #32
  40303e:	fa82 f24c 	uadd8	r2, r2, ip
  403042:	f100 0008 	add.w	r0, r0, #8
  403046:	faa4 f28c 	sel	r2, r4, ip
  40304a:	fa83 f34c 	uadd8	r3, r3, ip
  40304e:	faa2 f38c 	sel	r3, r2, ip
  403052:	2b00      	cmp	r3, #0
  403054:	d0c6      	beq.n	402fe4 <strlen+0x24>
  403056:	2a00      	cmp	r2, #0
  403058:	bf04      	itt	eq
  40305a:	3004      	addeq	r0, #4
  40305c:	461a      	moveq	r2, r3
  40305e:	ba12      	rev	r2, r2
  403060:	fab2 f282 	clz	r2, r2
  403064:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403068:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40306c:	4770      	bx	lr
  40306e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403072:	f004 0503 	and.w	r5, r4, #3
  403076:	f1c4 0000 	rsb	r0, r4, #0
  40307a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40307e:	f014 0f04 	tst.w	r4, #4
  403082:	f891 f040 	pld	[r1, #64]	; 0x40
  403086:	fa0c f505 	lsl.w	r5, ip, r5
  40308a:	ea62 0205 	orn	r2, r2, r5
  40308e:	bf1c      	itt	ne
  403090:	ea63 0305 	ornne	r3, r3, r5
  403094:	4662      	movne	r2, ip
  403096:	f04f 0400 	mov.w	r4, #0
  40309a:	e7a9      	b.n	402ff0 <strlen+0x30>

0040309c <__sprint_r.part.0>:
  40309c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4030a2:	049c      	lsls	r4, r3, #18
  4030a4:	4693      	mov	fp, r2
  4030a6:	d52f      	bpl.n	403108 <__sprint_r.part.0+0x6c>
  4030a8:	6893      	ldr	r3, [r2, #8]
  4030aa:	6812      	ldr	r2, [r2, #0]
  4030ac:	b353      	cbz	r3, 403104 <__sprint_r.part.0+0x68>
  4030ae:	460e      	mov	r6, r1
  4030b0:	4607      	mov	r7, r0
  4030b2:	f102 0908 	add.w	r9, r2, #8
  4030b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4030ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4030be:	d017      	beq.n	4030f0 <__sprint_r.part.0+0x54>
  4030c0:	3d04      	subs	r5, #4
  4030c2:	2400      	movs	r4, #0
  4030c4:	e001      	b.n	4030ca <__sprint_r.part.0+0x2e>
  4030c6:	45a0      	cmp	r8, r4
  4030c8:	d010      	beq.n	4030ec <__sprint_r.part.0+0x50>
  4030ca:	4632      	mov	r2, r6
  4030cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4030d0:	4638      	mov	r0, r7
  4030d2:	f001 f8bb 	bl	40424c <_fputwc_r>
  4030d6:	1c43      	adds	r3, r0, #1
  4030d8:	f104 0401 	add.w	r4, r4, #1
  4030dc:	d1f3      	bne.n	4030c6 <__sprint_r.part.0+0x2a>
  4030de:	2300      	movs	r3, #0
  4030e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4030e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4030e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4030f0:	f02a 0a03 	bic.w	sl, sl, #3
  4030f4:	eba3 030a 	sub.w	r3, r3, sl
  4030f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4030fc:	f109 0908 	add.w	r9, r9, #8
  403100:	2b00      	cmp	r3, #0
  403102:	d1d8      	bne.n	4030b6 <__sprint_r.part.0+0x1a>
  403104:	2000      	movs	r0, #0
  403106:	e7ea      	b.n	4030de <__sprint_r.part.0+0x42>
  403108:	f001 fa0a 	bl	404520 <__sfvwrite_r>
  40310c:	2300      	movs	r3, #0
  40310e:	f8cb 3008 	str.w	r3, [fp, #8]
  403112:	f8cb 3004 	str.w	r3, [fp, #4]
  403116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40311a:	bf00      	nop

0040311c <_vfiprintf_r>:
  40311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403120:	b0ad      	sub	sp, #180	; 0xb4
  403122:	461d      	mov	r5, r3
  403124:	468b      	mov	fp, r1
  403126:	4690      	mov	r8, r2
  403128:	9307      	str	r3, [sp, #28]
  40312a:	9006      	str	r0, [sp, #24]
  40312c:	b118      	cbz	r0, 403136 <_vfiprintf_r+0x1a>
  40312e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403130:	2b00      	cmp	r3, #0
  403132:	f000 80f3 	beq.w	40331c <_vfiprintf_r+0x200>
  403136:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40313a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40313e:	07df      	lsls	r7, r3, #31
  403140:	b281      	uxth	r1, r0
  403142:	d402      	bmi.n	40314a <_vfiprintf_r+0x2e>
  403144:	058e      	lsls	r6, r1, #22
  403146:	f140 80fc 	bpl.w	403342 <_vfiprintf_r+0x226>
  40314a:	048c      	lsls	r4, r1, #18
  40314c:	d40a      	bmi.n	403164 <_vfiprintf_r+0x48>
  40314e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403152:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40315a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40315e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403162:	b289      	uxth	r1, r1
  403164:	0708      	lsls	r0, r1, #28
  403166:	f140 80b3 	bpl.w	4032d0 <_vfiprintf_r+0x1b4>
  40316a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40316e:	2b00      	cmp	r3, #0
  403170:	f000 80ae 	beq.w	4032d0 <_vfiprintf_r+0x1b4>
  403174:	f001 031a 	and.w	r3, r1, #26
  403178:	2b0a      	cmp	r3, #10
  40317a:	f000 80b5 	beq.w	4032e8 <_vfiprintf_r+0x1cc>
  40317e:	2300      	movs	r3, #0
  403180:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403184:	930b      	str	r3, [sp, #44]	; 0x2c
  403186:	9311      	str	r3, [sp, #68]	; 0x44
  403188:	9310      	str	r3, [sp, #64]	; 0x40
  40318a:	9303      	str	r3, [sp, #12]
  40318c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403190:	46ca      	mov	sl, r9
  403192:	f8cd b010 	str.w	fp, [sp, #16]
  403196:	f898 3000 	ldrb.w	r3, [r8]
  40319a:	4644      	mov	r4, r8
  40319c:	b1fb      	cbz	r3, 4031de <_vfiprintf_r+0xc2>
  40319e:	2b25      	cmp	r3, #37	; 0x25
  4031a0:	d102      	bne.n	4031a8 <_vfiprintf_r+0x8c>
  4031a2:	e01c      	b.n	4031de <_vfiprintf_r+0xc2>
  4031a4:	2b25      	cmp	r3, #37	; 0x25
  4031a6:	d003      	beq.n	4031b0 <_vfiprintf_r+0x94>
  4031a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4031ac:	2b00      	cmp	r3, #0
  4031ae:	d1f9      	bne.n	4031a4 <_vfiprintf_r+0x88>
  4031b0:	eba4 0508 	sub.w	r5, r4, r8
  4031b4:	b19d      	cbz	r5, 4031de <_vfiprintf_r+0xc2>
  4031b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4031b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4031ba:	f8ca 8000 	str.w	r8, [sl]
  4031be:	3301      	adds	r3, #1
  4031c0:	442a      	add	r2, r5
  4031c2:	2b07      	cmp	r3, #7
  4031c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4031c8:	9211      	str	r2, [sp, #68]	; 0x44
  4031ca:	9310      	str	r3, [sp, #64]	; 0x40
  4031cc:	dd7a      	ble.n	4032c4 <_vfiprintf_r+0x1a8>
  4031ce:	2a00      	cmp	r2, #0
  4031d0:	f040 84b0 	bne.w	403b34 <_vfiprintf_r+0xa18>
  4031d4:	9b03      	ldr	r3, [sp, #12]
  4031d6:	9210      	str	r2, [sp, #64]	; 0x40
  4031d8:	442b      	add	r3, r5
  4031da:	46ca      	mov	sl, r9
  4031dc:	9303      	str	r3, [sp, #12]
  4031de:	7823      	ldrb	r3, [r4, #0]
  4031e0:	2b00      	cmp	r3, #0
  4031e2:	f000 83e0 	beq.w	4039a6 <_vfiprintf_r+0x88a>
  4031e6:	2000      	movs	r0, #0
  4031e8:	f04f 0300 	mov.w	r3, #0
  4031ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4031f0:	f104 0801 	add.w	r8, r4, #1
  4031f4:	7862      	ldrb	r2, [r4, #1]
  4031f6:	4605      	mov	r5, r0
  4031f8:	4606      	mov	r6, r0
  4031fa:	4603      	mov	r3, r0
  4031fc:	f04f 34ff 	mov.w	r4, #4294967295
  403200:	f108 0801 	add.w	r8, r8, #1
  403204:	f1a2 0120 	sub.w	r1, r2, #32
  403208:	2958      	cmp	r1, #88	; 0x58
  40320a:	f200 82de 	bhi.w	4037ca <_vfiprintf_r+0x6ae>
  40320e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403212:	0221      	.short	0x0221
  403214:	02dc02dc 	.word	0x02dc02dc
  403218:	02dc0229 	.word	0x02dc0229
  40321c:	02dc02dc 	.word	0x02dc02dc
  403220:	02dc02dc 	.word	0x02dc02dc
  403224:	028902dc 	.word	0x028902dc
  403228:	02dc0295 	.word	0x02dc0295
  40322c:	02bd00a2 	.word	0x02bd00a2
  403230:	019f02dc 	.word	0x019f02dc
  403234:	01a401a4 	.word	0x01a401a4
  403238:	01a401a4 	.word	0x01a401a4
  40323c:	01a401a4 	.word	0x01a401a4
  403240:	01a401a4 	.word	0x01a401a4
  403244:	02dc01a4 	.word	0x02dc01a4
  403248:	02dc02dc 	.word	0x02dc02dc
  40324c:	02dc02dc 	.word	0x02dc02dc
  403250:	02dc02dc 	.word	0x02dc02dc
  403254:	02dc02dc 	.word	0x02dc02dc
  403258:	01b202dc 	.word	0x01b202dc
  40325c:	02dc02dc 	.word	0x02dc02dc
  403260:	02dc02dc 	.word	0x02dc02dc
  403264:	02dc02dc 	.word	0x02dc02dc
  403268:	02dc02dc 	.word	0x02dc02dc
  40326c:	02dc02dc 	.word	0x02dc02dc
  403270:	02dc0197 	.word	0x02dc0197
  403274:	02dc02dc 	.word	0x02dc02dc
  403278:	02dc02dc 	.word	0x02dc02dc
  40327c:	02dc019b 	.word	0x02dc019b
  403280:	025302dc 	.word	0x025302dc
  403284:	02dc02dc 	.word	0x02dc02dc
  403288:	02dc02dc 	.word	0x02dc02dc
  40328c:	02dc02dc 	.word	0x02dc02dc
  403290:	02dc02dc 	.word	0x02dc02dc
  403294:	02dc02dc 	.word	0x02dc02dc
  403298:	021b025a 	.word	0x021b025a
  40329c:	02dc02dc 	.word	0x02dc02dc
  4032a0:	026e02dc 	.word	0x026e02dc
  4032a4:	02dc021b 	.word	0x02dc021b
  4032a8:	027302dc 	.word	0x027302dc
  4032ac:	01f502dc 	.word	0x01f502dc
  4032b0:	02090182 	.word	0x02090182
  4032b4:	02dc02d7 	.word	0x02dc02d7
  4032b8:	02dc029a 	.word	0x02dc029a
  4032bc:	02dc00a7 	.word	0x02dc00a7
  4032c0:	022e02dc 	.word	0x022e02dc
  4032c4:	f10a 0a08 	add.w	sl, sl, #8
  4032c8:	9b03      	ldr	r3, [sp, #12]
  4032ca:	442b      	add	r3, r5
  4032cc:	9303      	str	r3, [sp, #12]
  4032ce:	e786      	b.n	4031de <_vfiprintf_r+0xc2>
  4032d0:	4659      	mov	r1, fp
  4032d2:	9806      	ldr	r0, [sp, #24]
  4032d4:	f000 fdac 	bl	403e30 <__swsetup_r>
  4032d8:	bb18      	cbnz	r0, 403322 <_vfiprintf_r+0x206>
  4032da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4032de:	f001 031a 	and.w	r3, r1, #26
  4032e2:	2b0a      	cmp	r3, #10
  4032e4:	f47f af4b 	bne.w	40317e <_vfiprintf_r+0x62>
  4032e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4032ec:	2b00      	cmp	r3, #0
  4032ee:	f6ff af46 	blt.w	40317e <_vfiprintf_r+0x62>
  4032f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4032f6:	07db      	lsls	r3, r3, #31
  4032f8:	d405      	bmi.n	403306 <_vfiprintf_r+0x1ea>
  4032fa:	058f      	lsls	r7, r1, #22
  4032fc:	d403      	bmi.n	403306 <_vfiprintf_r+0x1ea>
  4032fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403302:	f001 fac3 	bl	40488c <__retarget_lock_release_recursive>
  403306:	462b      	mov	r3, r5
  403308:	4642      	mov	r2, r8
  40330a:	4659      	mov	r1, fp
  40330c:	9806      	ldr	r0, [sp, #24]
  40330e:	f000 fd4d 	bl	403dac <__sbprintf>
  403312:	9003      	str	r0, [sp, #12]
  403314:	9803      	ldr	r0, [sp, #12]
  403316:	b02d      	add	sp, #180	; 0xb4
  403318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40331c:	f000 fef4 	bl	404108 <__sinit>
  403320:	e709      	b.n	403136 <_vfiprintf_r+0x1a>
  403322:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403326:	07d9      	lsls	r1, r3, #31
  403328:	d404      	bmi.n	403334 <_vfiprintf_r+0x218>
  40332a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40332e:	059a      	lsls	r2, r3, #22
  403330:	f140 84aa 	bpl.w	403c88 <_vfiprintf_r+0xb6c>
  403334:	f04f 33ff 	mov.w	r3, #4294967295
  403338:	9303      	str	r3, [sp, #12]
  40333a:	9803      	ldr	r0, [sp, #12]
  40333c:	b02d      	add	sp, #180	; 0xb4
  40333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403342:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403346:	f001 fa9f 	bl	404888 <__retarget_lock_acquire_recursive>
  40334a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40334e:	b281      	uxth	r1, r0
  403350:	e6fb      	b.n	40314a <_vfiprintf_r+0x2e>
  403352:	4276      	negs	r6, r6
  403354:	9207      	str	r2, [sp, #28]
  403356:	f043 0304 	orr.w	r3, r3, #4
  40335a:	f898 2000 	ldrb.w	r2, [r8]
  40335e:	e74f      	b.n	403200 <_vfiprintf_r+0xe4>
  403360:	9608      	str	r6, [sp, #32]
  403362:	069e      	lsls	r6, r3, #26
  403364:	f100 8450 	bmi.w	403c08 <_vfiprintf_r+0xaec>
  403368:	9907      	ldr	r1, [sp, #28]
  40336a:	06dd      	lsls	r5, r3, #27
  40336c:	460a      	mov	r2, r1
  40336e:	f100 83ef 	bmi.w	403b50 <_vfiprintf_r+0xa34>
  403372:	0658      	lsls	r0, r3, #25
  403374:	f140 83ec 	bpl.w	403b50 <_vfiprintf_r+0xa34>
  403378:	880e      	ldrh	r6, [r1, #0]
  40337a:	3104      	adds	r1, #4
  40337c:	2700      	movs	r7, #0
  40337e:	2201      	movs	r2, #1
  403380:	9107      	str	r1, [sp, #28]
  403382:	f04f 0100 	mov.w	r1, #0
  403386:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40338a:	2500      	movs	r5, #0
  40338c:	1c61      	adds	r1, r4, #1
  40338e:	f000 8116 	beq.w	4035be <_vfiprintf_r+0x4a2>
  403392:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403396:	9102      	str	r1, [sp, #8]
  403398:	ea56 0107 	orrs.w	r1, r6, r7
  40339c:	f040 8114 	bne.w	4035c8 <_vfiprintf_r+0x4ac>
  4033a0:	2c00      	cmp	r4, #0
  4033a2:	f040 835c 	bne.w	403a5e <_vfiprintf_r+0x942>
  4033a6:	2a00      	cmp	r2, #0
  4033a8:	f040 83b7 	bne.w	403b1a <_vfiprintf_r+0x9fe>
  4033ac:	f013 0301 	ands.w	r3, r3, #1
  4033b0:	9305      	str	r3, [sp, #20]
  4033b2:	f000 8457 	beq.w	403c64 <_vfiprintf_r+0xb48>
  4033b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4033ba:	2330      	movs	r3, #48	; 0x30
  4033bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4033c0:	9b05      	ldr	r3, [sp, #20]
  4033c2:	42a3      	cmp	r3, r4
  4033c4:	bfb8      	it	lt
  4033c6:	4623      	movlt	r3, r4
  4033c8:	9301      	str	r3, [sp, #4]
  4033ca:	b10d      	cbz	r5, 4033d0 <_vfiprintf_r+0x2b4>
  4033cc:	3301      	adds	r3, #1
  4033ce:	9301      	str	r3, [sp, #4]
  4033d0:	9b02      	ldr	r3, [sp, #8]
  4033d2:	f013 0302 	ands.w	r3, r3, #2
  4033d6:	9309      	str	r3, [sp, #36]	; 0x24
  4033d8:	d002      	beq.n	4033e0 <_vfiprintf_r+0x2c4>
  4033da:	9b01      	ldr	r3, [sp, #4]
  4033dc:	3302      	adds	r3, #2
  4033de:	9301      	str	r3, [sp, #4]
  4033e0:	9b02      	ldr	r3, [sp, #8]
  4033e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4033e6:	930a      	str	r3, [sp, #40]	; 0x28
  4033e8:	f040 8217 	bne.w	40381a <_vfiprintf_r+0x6fe>
  4033ec:	9b08      	ldr	r3, [sp, #32]
  4033ee:	9a01      	ldr	r2, [sp, #4]
  4033f0:	1a9d      	subs	r5, r3, r2
  4033f2:	2d00      	cmp	r5, #0
  4033f4:	f340 8211 	ble.w	40381a <_vfiprintf_r+0x6fe>
  4033f8:	2d10      	cmp	r5, #16
  4033fa:	f340 8490 	ble.w	403d1e <_vfiprintf_r+0xc02>
  4033fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403400:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403402:	4ec4      	ldr	r6, [pc, #784]	; (403714 <_vfiprintf_r+0x5f8>)
  403404:	46d6      	mov	lr, sl
  403406:	2710      	movs	r7, #16
  403408:	46a2      	mov	sl, r4
  40340a:	4619      	mov	r1, r3
  40340c:	9c06      	ldr	r4, [sp, #24]
  40340e:	e007      	b.n	403420 <_vfiprintf_r+0x304>
  403410:	f101 0c02 	add.w	ip, r1, #2
  403414:	f10e 0e08 	add.w	lr, lr, #8
  403418:	4601      	mov	r1, r0
  40341a:	3d10      	subs	r5, #16
  40341c:	2d10      	cmp	r5, #16
  40341e:	dd11      	ble.n	403444 <_vfiprintf_r+0x328>
  403420:	1c48      	adds	r0, r1, #1
  403422:	3210      	adds	r2, #16
  403424:	2807      	cmp	r0, #7
  403426:	9211      	str	r2, [sp, #68]	; 0x44
  403428:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40342c:	9010      	str	r0, [sp, #64]	; 0x40
  40342e:	ddef      	ble.n	403410 <_vfiprintf_r+0x2f4>
  403430:	2a00      	cmp	r2, #0
  403432:	f040 81e4 	bne.w	4037fe <_vfiprintf_r+0x6e2>
  403436:	3d10      	subs	r5, #16
  403438:	2d10      	cmp	r5, #16
  40343a:	4611      	mov	r1, r2
  40343c:	f04f 0c01 	mov.w	ip, #1
  403440:	46ce      	mov	lr, r9
  403442:	dced      	bgt.n	403420 <_vfiprintf_r+0x304>
  403444:	4654      	mov	r4, sl
  403446:	4661      	mov	r1, ip
  403448:	46f2      	mov	sl, lr
  40344a:	442a      	add	r2, r5
  40344c:	2907      	cmp	r1, #7
  40344e:	9211      	str	r2, [sp, #68]	; 0x44
  403450:	f8ca 6000 	str.w	r6, [sl]
  403454:	f8ca 5004 	str.w	r5, [sl, #4]
  403458:	9110      	str	r1, [sp, #64]	; 0x40
  40345a:	f300 82ec 	bgt.w	403a36 <_vfiprintf_r+0x91a>
  40345e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403462:	f10a 0a08 	add.w	sl, sl, #8
  403466:	1c48      	adds	r0, r1, #1
  403468:	2d00      	cmp	r5, #0
  40346a:	f040 81de 	bne.w	40382a <_vfiprintf_r+0x70e>
  40346e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403470:	2b00      	cmp	r3, #0
  403472:	f000 81f8 	beq.w	403866 <_vfiprintf_r+0x74a>
  403476:	3202      	adds	r2, #2
  403478:	a90e      	add	r1, sp, #56	; 0x38
  40347a:	2302      	movs	r3, #2
  40347c:	2807      	cmp	r0, #7
  40347e:	9211      	str	r2, [sp, #68]	; 0x44
  403480:	9010      	str	r0, [sp, #64]	; 0x40
  403482:	e88a 000a 	stmia.w	sl, {r1, r3}
  403486:	f340 81ea 	ble.w	40385e <_vfiprintf_r+0x742>
  40348a:	2a00      	cmp	r2, #0
  40348c:	f040 838c 	bne.w	403ba8 <_vfiprintf_r+0xa8c>
  403490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403492:	2b80      	cmp	r3, #128	; 0x80
  403494:	f04f 0001 	mov.w	r0, #1
  403498:	4611      	mov	r1, r2
  40349a:	46ca      	mov	sl, r9
  40349c:	f040 81e7 	bne.w	40386e <_vfiprintf_r+0x752>
  4034a0:	9b08      	ldr	r3, [sp, #32]
  4034a2:	9d01      	ldr	r5, [sp, #4]
  4034a4:	1b5e      	subs	r6, r3, r5
  4034a6:	2e00      	cmp	r6, #0
  4034a8:	f340 81e1 	ble.w	40386e <_vfiprintf_r+0x752>
  4034ac:	2e10      	cmp	r6, #16
  4034ae:	4d9a      	ldr	r5, [pc, #616]	; (403718 <_vfiprintf_r+0x5fc>)
  4034b0:	f340 8450 	ble.w	403d54 <_vfiprintf_r+0xc38>
  4034b4:	46d4      	mov	ip, sl
  4034b6:	2710      	movs	r7, #16
  4034b8:	46a2      	mov	sl, r4
  4034ba:	9c06      	ldr	r4, [sp, #24]
  4034bc:	e007      	b.n	4034ce <_vfiprintf_r+0x3b2>
  4034be:	f101 0e02 	add.w	lr, r1, #2
  4034c2:	f10c 0c08 	add.w	ip, ip, #8
  4034c6:	4601      	mov	r1, r0
  4034c8:	3e10      	subs	r6, #16
  4034ca:	2e10      	cmp	r6, #16
  4034cc:	dd11      	ble.n	4034f2 <_vfiprintf_r+0x3d6>
  4034ce:	1c48      	adds	r0, r1, #1
  4034d0:	3210      	adds	r2, #16
  4034d2:	2807      	cmp	r0, #7
  4034d4:	9211      	str	r2, [sp, #68]	; 0x44
  4034d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4034da:	9010      	str	r0, [sp, #64]	; 0x40
  4034dc:	ddef      	ble.n	4034be <_vfiprintf_r+0x3a2>
  4034de:	2a00      	cmp	r2, #0
  4034e0:	f040 829d 	bne.w	403a1e <_vfiprintf_r+0x902>
  4034e4:	3e10      	subs	r6, #16
  4034e6:	2e10      	cmp	r6, #16
  4034e8:	f04f 0e01 	mov.w	lr, #1
  4034ec:	4611      	mov	r1, r2
  4034ee:	46cc      	mov	ip, r9
  4034f0:	dced      	bgt.n	4034ce <_vfiprintf_r+0x3b2>
  4034f2:	4654      	mov	r4, sl
  4034f4:	46e2      	mov	sl, ip
  4034f6:	4432      	add	r2, r6
  4034f8:	f1be 0f07 	cmp.w	lr, #7
  4034fc:	9211      	str	r2, [sp, #68]	; 0x44
  4034fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  403502:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403506:	f300 8369 	bgt.w	403bdc <_vfiprintf_r+0xac0>
  40350a:	f10a 0a08 	add.w	sl, sl, #8
  40350e:	f10e 0001 	add.w	r0, lr, #1
  403512:	4671      	mov	r1, lr
  403514:	e1ab      	b.n	40386e <_vfiprintf_r+0x752>
  403516:	9608      	str	r6, [sp, #32]
  403518:	f013 0220 	ands.w	r2, r3, #32
  40351c:	f040 838c 	bne.w	403c38 <_vfiprintf_r+0xb1c>
  403520:	f013 0110 	ands.w	r1, r3, #16
  403524:	f040 831a 	bne.w	403b5c <_vfiprintf_r+0xa40>
  403528:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40352c:	f000 8316 	beq.w	403b5c <_vfiprintf_r+0xa40>
  403530:	9807      	ldr	r0, [sp, #28]
  403532:	460a      	mov	r2, r1
  403534:	4601      	mov	r1, r0
  403536:	3104      	adds	r1, #4
  403538:	8806      	ldrh	r6, [r0, #0]
  40353a:	9107      	str	r1, [sp, #28]
  40353c:	2700      	movs	r7, #0
  40353e:	e720      	b.n	403382 <_vfiprintf_r+0x266>
  403540:	9608      	str	r6, [sp, #32]
  403542:	f043 0310 	orr.w	r3, r3, #16
  403546:	e7e7      	b.n	403518 <_vfiprintf_r+0x3fc>
  403548:	9608      	str	r6, [sp, #32]
  40354a:	f043 0310 	orr.w	r3, r3, #16
  40354e:	e708      	b.n	403362 <_vfiprintf_r+0x246>
  403550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403554:	f898 2000 	ldrb.w	r2, [r8]
  403558:	e652      	b.n	403200 <_vfiprintf_r+0xe4>
  40355a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40355e:	2600      	movs	r6, #0
  403560:	f818 2b01 	ldrb.w	r2, [r8], #1
  403564:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403568:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40356c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403570:	2909      	cmp	r1, #9
  403572:	d9f5      	bls.n	403560 <_vfiprintf_r+0x444>
  403574:	e646      	b.n	403204 <_vfiprintf_r+0xe8>
  403576:	9608      	str	r6, [sp, #32]
  403578:	2800      	cmp	r0, #0
  40357a:	f040 8408 	bne.w	403d8e <_vfiprintf_r+0xc72>
  40357e:	f043 0310 	orr.w	r3, r3, #16
  403582:	069e      	lsls	r6, r3, #26
  403584:	f100 834c 	bmi.w	403c20 <_vfiprintf_r+0xb04>
  403588:	06dd      	lsls	r5, r3, #27
  40358a:	f100 82f3 	bmi.w	403b74 <_vfiprintf_r+0xa58>
  40358e:	0658      	lsls	r0, r3, #25
  403590:	f140 82f0 	bpl.w	403b74 <_vfiprintf_r+0xa58>
  403594:	9d07      	ldr	r5, [sp, #28]
  403596:	f9b5 6000 	ldrsh.w	r6, [r5]
  40359a:	462a      	mov	r2, r5
  40359c:	17f7      	asrs	r7, r6, #31
  40359e:	3204      	adds	r2, #4
  4035a0:	4630      	mov	r0, r6
  4035a2:	4639      	mov	r1, r7
  4035a4:	9207      	str	r2, [sp, #28]
  4035a6:	2800      	cmp	r0, #0
  4035a8:	f171 0200 	sbcs.w	r2, r1, #0
  4035ac:	f2c0 835d 	blt.w	403c6a <_vfiprintf_r+0xb4e>
  4035b0:	1c61      	adds	r1, r4, #1
  4035b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4035b6:	f04f 0201 	mov.w	r2, #1
  4035ba:	f47f aeea 	bne.w	403392 <_vfiprintf_r+0x276>
  4035be:	ea56 0107 	orrs.w	r1, r6, r7
  4035c2:	f000 824d 	beq.w	403a60 <_vfiprintf_r+0x944>
  4035c6:	9302      	str	r3, [sp, #8]
  4035c8:	2a01      	cmp	r2, #1
  4035ca:	f000 828c 	beq.w	403ae6 <_vfiprintf_r+0x9ca>
  4035ce:	2a02      	cmp	r2, #2
  4035d0:	f040 825c 	bne.w	403a8c <_vfiprintf_r+0x970>
  4035d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4035d6:	46cb      	mov	fp, r9
  4035d8:	0933      	lsrs	r3, r6, #4
  4035da:	f006 010f 	and.w	r1, r6, #15
  4035de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4035e2:	093a      	lsrs	r2, r7, #4
  4035e4:	461e      	mov	r6, r3
  4035e6:	4617      	mov	r7, r2
  4035e8:	5c43      	ldrb	r3, [r0, r1]
  4035ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4035ee:	ea56 0307 	orrs.w	r3, r6, r7
  4035f2:	d1f1      	bne.n	4035d8 <_vfiprintf_r+0x4bc>
  4035f4:	eba9 030b 	sub.w	r3, r9, fp
  4035f8:	9305      	str	r3, [sp, #20]
  4035fa:	e6e1      	b.n	4033c0 <_vfiprintf_r+0x2a4>
  4035fc:	2800      	cmp	r0, #0
  4035fe:	f040 83c0 	bne.w	403d82 <_vfiprintf_r+0xc66>
  403602:	0699      	lsls	r1, r3, #26
  403604:	f100 8367 	bmi.w	403cd6 <_vfiprintf_r+0xbba>
  403608:	06da      	lsls	r2, r3, #27
  40360a:	f100 80f1 	bmi.w	4037f0 <_vfiprintf_r+0x6d4>
  40360e:	065b      	lsls	r3, r3, #25
  403610:	f140 80ee 	bpl.w	4037f0 <_vfiprintf_r+0x6d4>
  403614:	9a07      	ldr	r2, [sp, #28]
  403616:	6813      	ldr	r3, [r2, #0]
  403618:	3204      	adds	r2, #4
  40361a:	9207      	str	r2, [sp, #28]
  40361c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403620:	801a      	strh	r2, [r3, #0]
  403622:	e5b8      	b.n	403196 <_vfiprintf_r+0x7a>
  403624:	9807      	ldr	r0, [sp, #28]
  403626:	4a3d      	ldr	r2, [pc, #244]	; (40371c <_vfiprintf_r+0x600>)
  403628:	9608      	str	r6, [sp, #32]
  40362a:	920b      	str	r2, [sp, #44]	; 0x2c
  40362c:	6806      	ldr	r6, [r0, #0]
  40362e:	2278      	movs	r2, #120	; 0x78
  403630:	2130      	movs	r1, #48	; 0x30
  403632:	3004      	adds	r0, #4
  403634:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403638:	f043 0302 	orr.w	r3, r3, #2
  40363c:	9007      	str	r0, [sp, #28]
  40363e:	2700      	movs	r7, #0
  403640:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403644:	2202      	movs	r2, #2
  403646:	e69c      	b.n	403382 <_vfiprintf_r+0x266>
  403648:	9608      	str	r6, [sp, #32]
  40364a:	2800      	cmp	r0, #0
  40364c:	d099      	beq.n	403582 <_vfiprintf_r+0x466>
  40364e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403652:	e796      	b.n	403582 <_vfiprintf_r+0x466>
  403654:	f898 2000 	ldrb.w	r2, [r8]
  403658:	2d00      	cmp	r5, #0
  40365a:	f47f add1 	bne.w	403200 <_vfiprintf_r+0xe4>
  40365e:	2001      	movs	r0, #1
  403660:	2520      	movs	r5, #32
  403662:	e5cd      	b.n	403200 <_vfiprintf_r+0xe4>
  403664:	f043 0301 	orr.w	r3, r3, #1
  403668:	f898 2000 	ldrb.w	r2, [r8]
  40366c:	e5c8      	b.n	403200 <_vfiprintf_r+0xe4>
  40366e:	9608      	str	r6, [sp, #32]
  403670:	2800      	cmp	r0, #0
  403672:	f040 8393 	bne.w	403d9c <_vfiprintf_r+0xc80>
  403676:	4929      	ldr	r1, [pc, #164]	; (40371c <_vfiprintf_r+0x600>)
  403678:	910b      	str	r1, [sp, #44]	; 0x2c
  40367a:	069f      	lsls	r7, r3, #26
  40367c:	f100 82e8 	bmi.w	403c50 <_vfiprintf_r+0xb34>
  403680:	9807      	ldr	r0, [sp, #28]
  403682:	06de      	lsls	r6, r3, #27
  403684:	4601      	mov	r1, r0
  403686:	f100 8270 	bmi.w	403b6a <_vfiprintf_r+0xa4e>
  40368a:	065d      	lsls	r5, r3, #25
  40368c:	f140 826d 	bpl.w	403b6a <_vfiprintf_r+0xa4e>
  403690:	3104      	adds	r1, #4
  403692:	8806      	ldrh	r6, [r0, #0]
  403694:	9107      	str	r1, [sp, #28]
  403696:	2700      	movs	r7, #0
  403698:	07d8      	lsls	r0, r3, #31
  40369a:	f140 8222 	bpl.w	403ae2 <_vfiprintf_r+0x9c6>
  40369e:	ea56 0107 	orrs.w	r1, r6, r7
  4036a2:	f000 821e 	beq.w	403ae2 <_vfiprintf_r+0x9c6>
  4036a6:	2130      	movs	r1, #48	; 0x30
  4036a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4036ac:	f043 0302 	orr.w	r3, r3, #2
  4036b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4036b4:	2202      	movs	r2, #2
  4036b6:	e664      	b.n	403382 <_vfiprintf_r+0x266>
  4036b8:	9608      	str	r6, [sp, #32]
  4036ba:	2800      	cmp	r0, #0
  4036bc:	f040 836b 	bne.w	403d96 <_vfiprintf_r+0xc7a>
  4036c0:	4917      	ldr	r1, [pc, #92]	; (403720 <_vfiprintf_r+0x604>)
  4036c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4036c4:	e7d9      	b.n	40367a <_vfiprintf_r+0x55e>
  4036c6:	9907      	ldr	r1, [sp, #28]
  4036c8:	9608      	str	r6, [sp, #32]
  4036ca:	680a      	ldr	r2, [r1, #0]
  4036cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4036d0:	f04f 0000 	mov.w	r0, #0
  4036d4:	460a      	mov	r2, r1
  4036d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4036da:	3204      	adds	r2, #4
  4036dc:	2001      	movs	r0, #1
  4036de:	9001      	str	r0, [sp, #4]
  4036e0:	9207      	str	r2, [sp, #28]
  4036e2:	9005      	str	r0, [sp, #20]
  4036e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4036e8:	9302      	str	r3, [sp, #8]
  4036ea:	2400      	movs	r4, #0
  4036ec:	e670      	b.n	4033d0 <_vfiprintf_r+0x2b4>
  4036ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4036f2:	f898 2000 	ldrb.w	r2, [r8]
  4036f6:	e583      	b.n	403200 <_vfiprintf_r+0xe4>
  4036f8:	f898 2000 	ldrb.w	r2, [r8]
  4036fc:	2a6c      	cmp	r2, #108	; 0x6c
  4036fe:	bf03      	ittte	eq
  403700:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403704:	f043 0320 	orreq.w	r3, r3, #32
  403708:	f108 0801 	addeq.w	r8, r8, #1
  40370c:	f043 0310 	orrne.w	r3, r3, #16
  403710:	e576      	b.n	403200 <_vfiprintf_r+0xe4>
  403712:	bf00      	nop
  403714:	00405530 	.word	0x00405530
  403718:	00405540 	.word	0x00405540
  40371c:	00405514 	.word	0x00405514
  403720:	00405500 	.word	0x00405500
  403724:	9907      	ldr	r1, [sp, #28]
  403726:	680e      	ldr	r6, [r1, #0]
  403728:	460a      	mov	r2, r1
  40372a:	2e00      	cmp	r6, #0
  40372c:	f102 0204 	add.w	r2, r2, #4
  403730:	f6ff ae0f 	blt.w	403352 <_vfiprintf_r+0x236>
  403734:	9207      	str	r2, [sp, #28]
  403736:	f898 2000 	ldrb.w	r2, [r8]
  40373a:	e561      	b.n	403200 <_vfiprintf_r+0xe4>
  40373c:	f898 2000 	ldrb.w	r2, [r8]
  403740:	2001      	movs	r0, #1
  403742:	252b      	movs	r5, #43	; 0x2b
  403744:	e55c      	b.n	403200 <_vfiprintf_r+0xe4>
  403746:	9907      	ldr	r1, [sp, #28]
  403748:	9608      	str	r6, [sp, #32]
  40374a:	f8d1 b000 	ldr.w	fp, [r1]
  40374e:	f04f 0200 	mov.w	r2, #0
  403752:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403756:	1d0e      	adds	r6, r1, #4
  403758:	f1bb 0f00 	cmp.w	fp, #0
  40375c:	f000 82e5 	beq.w	403d2a <_vfiprintf_r+0xc0e>
  403760:	1c67      	adds	r7, r4, #1
  403762:	f000 82c4 	beq.w	403cee <_vfiprintf_r+0xbd2>
  403766:	4622      	mov	r2, r4
  403768:	2100      	movs	r1, #0
  40376a:	4658      	mov	r0, fp
  40376c:	9301      	str	r3, [sp, #4]
  40376e:	f001 f91f 	bl	4049b0 <memchr>
  403772:	9b01      	ldr	r3, [sp, #4]
  403774:	2800      	cmp	r0, #0
  403776:	f000 82e5 	beq.w	403d44 <_vfiprintf_r+0xc28>
  40377a:	eba0 020b 	sub.w	r2, r0, fp
  40377e:	9205      	str	r2, [sp, #20]
  403780:	9607      	str	r6, [sp, #28]
  403782:	9302      	str	r3, [sp, #8]
  403784:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403788:	2400      	movs	r4, #0
  40378a:	e619      	b.n	4033c0 <_vfiprintf_r+0x2a4>
  40378c:	f898 2000 	ldrb.w	r2, [r8]
  403790:	2a2a      	cmp	r2, #42	; 0x2a
  403792:	f108 0701 	add.w	r7, r8, #1
  403796:	f000 82e9 	beq.w	403d6c <_vfiprintf_r+0xc50>
  40379a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40379e:	2909      	cmp	r1, #9
  4037a0:	46b8      	mov	r8, r7
  4037a2:	f04f 0400 	mov.w	r4, #0
  4037a6:	f63f ad2d 	bhi.w	403204 <_vfiprintf_r+0xe8>
  4037aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4037ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4037b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4037b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4037ba:	2909      	cmp	r1, #9
  4037bc:	d9f5      	bls.n	4037aa <_vfiprintf_r+0x68e>
  4037be:	e521      	b.n	403204 <_vfiprintf_r+0xe8>
  4037c0:	f043 0320 	orr.w	r3, r3, #32
  4037c4:	f898 2000 	ldrb.w	r2, [r8]
  4037c8:	e51a      	b.n	403200 <_vfiprintf_r+0xe4>
  4037ca:	9608      	str	r6, [sp, #32]
  4037cc:	2800      	cmp	r0, #0
  4037ce:	f040 82db 	bne.w	403d88 <_vfiprintf_r+0xc6c>
  4037d2:	2a00      	cmp	r2, #0
  4037d4:	f000 80e7 	beq.w	4039a6 <_vfiprintf_r+0x88a>
  4037d8:	2101      	movs	r1, #1
  4037da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4037de:	f04f 0200 	mov.w	r2, #0
  4037e2:	9101      	str	r1, [sp, #4]
  4037e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4037e8:	9105      	str	r1, [sp, #20]
  4037ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4037ee:	e77b      	b.n	4036e8 <_vfiprintf_r+0x5cc>
  4037f0:	9a07      	ldr	r2, [sp, #28]
  4037f2:	6813      	ldr	r3, [r2, #0]
  4037f4:	3204      	adds	r2, #4
  4037f6:	9207      	str	r2, [sp, #28]
  4037f8:	9a03      	ldr	r2, [sp, #12]
  4037fa:	601a      	str	r2, [r3, #0]
  4037fc:	e4cb      	b.n	403196 <_vfiprintf_r+0x7a>
  4037fe:	aa0f      	add	r2, sp, #60	; 0x3c
  403800:	9904      	ldr	r1, [sp, #16]
  403802:	4620      	mov	r0, r4
  403804:	f7ff fc4a 	bl	40309c <__sprint_r.part.0>
  403808:	2800      	cmp	r0, #0
  40380a:	f040 8139 	bne.w	403a80 <_vfiprintf_r+0x964>
  40380e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403810:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403812:	f101 0c01 	add.w	ip, r1, #1
  403816:	46ce      	mov	lr, r9
  403818:	e5ff      	b.n	40341a <_vfiprintf_r+0x2fe>
  40381a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40381c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40381e:	1c48      	adds	r0, r1, #1
  403820:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403824:	2d00      	cmp	r5, #0
  403826:	f43f ae22 	beq.w	40346e <_vfiprintf_r+0x352>
  40382a:	3201      	adds	r2, #1
  40382c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403830:	2101      	movs	r1, #1
  403832:	2807      	cmp	r0, #7
  403834:	9211      	str	r2, [sp, #68]	; 0x44
  403836:	9010      	str	r0, [sp, #64]	; 0x40
  403838:	f8ca 5000 	str.w	r5, [sl]
  40383c:	f8ca 1004 	str.w	r1, [sl, #4]
  403840:	f340 8108 	ble.w	403a54 <_vfiprintf_r+0x938>
  403844:	2a00      	cmp	r2, #0
  403846:	f040 81bc 	bne.w	403bc2 <_vfiprintf_r+0xaa6>
  40384a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40384c:	2b00      	cmp	r3, #0
  40384e:	f43f ae1f 	beq.w	403490 <_vfiprintf_r+0x374>
  403852:	ab0e      	add	r3, sp, #56	; 0x38
  403854:	2202      	movs	r2, #2
  403856:	4608      	mov	r0, r1
  403858:	931c      	str	r3, [sp, #112]	; 0x70
  40385a:	921d      	str	r2, [sp, #116]	; 0x74
  40385c:	46ca      	mov	sl, r9
  40385e:	4601      	mov	r1, r0
  403860:	f10a 0a08 	add.w	sl, sl, #8
  403864:	3001      	adds	r0, #1
  403866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403868:	2b80      	cmp	r3, #128	; 0x80
  40386a:	f43f ae19 	beq.w	4034a0 <_vfiprintf_r+0x384>
  40386e:	9b05      	ldr	r3, [sp, #20]
  403870:	1ae4      	subs	r4, r4, r3
  403872:	2c00      	cmp	r4, #0
  403874:	dd2e      	ble.n	4038d4 <_vfiprintf_r+0x7b8>
  403876:	2c10      	cmp	r4, #16
  403878:	4db3      	ldr	r5, [pc, #716]	; (403b48 <_vfiprintf_r+0xa2c>)
  40387a:	dd1e      	ble.n	4038ba <_vfiprintf_r+0x79e>
  40387c:	46d6      	mov	lr, sl
  40387e:	2610      	movs	r6, #16
  403880:	9f06      	ldr	r7, [sp, #24]
  403882:	f8dd a010 	ldr.w	sl, [sp, #16]
  403886:	e006      	b.n	403896 <_vfiprintf_r+0x77a>
  403888:	1c88      	adds	r0, r1, #2
  40388a:	f10e 0e08 	add.w	lr, lr, #8
  40388e:	4619      	mov	r1, r3
  403890:	3c10      	subs	r4, #16
  403892:	2c10      	cmp	r4, #16
  403894:	dd10      	ble.n	4038b8 <_vfiprintf_r+0x79c>
  403896:	1c4b      	adds	r3, r1, #1
  403898:	3210      	adds	r2, #16
  40389a:	2b07      	cmp	r3, #7
  40389c:	9211      	str	r2, [sp, #68]	; 0x44
  40389e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4038a2:	9310      	str	r3, [sp, #64]	; 0x40
  4038a4:	ddf0      	ble.n	403888 <_vfiprintf_r+0x76c>
  4038a6:	2a00      	cmp	r2, #0
  4038a8:	d165      	bne.n	403976 <_vfiprintf_r+0x85a>
  4038aa:	3c10      	subs	r4, #16
  4038ac:	2c10      	cmp	r4, #16
  4038ae:	f04f 0001 	mov.w	r0, #1
  4038b2:	4611      	mov	r1, r2
  4038b4:	46ce      	mov	lr, r9
  4038b6:	dcee      	bgt.n	403896 <_vfiprintf_r+0x77a>
  4038b8:	46f2      	mov	sl, lr
  4038ba:	4422      	add	r2, r4
  4038bc:	2807      	cmp	r0, #7
  4038be:	9211      	str	r2, [sp, #68]	; 0x44
  4038c0:	f8ca 5000 	str.w	r5, [sl]
  4038c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4038c8:	9010      	str	r0, [sp, #64]	; 0x40
  4038ca:	f300 8085 	bgt.w	4039d8 <_vfiprintf_r+0x8bc>
  4038ce:	f10a 0a08 	add.w	sl, sl, #8
  4038d2:	3001      	adds	r0, #1
  4038d4:	9905      	ldr	r1, [sp, #20]
  4038d6:	f8ca b000 	str.w	fp, [sl]
  4038da:	440a      	add	r2, r1
  4038dc:	2807      	cmp	r0, #7
  4038de:	9211      	str	r2, [sp, #68]	; 0x44
  4038e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4038e4:	9010      	str	r0, [sp, #64]	; 0x40
  4038e6:	f340 8082 	ble.w	4039ee <_vfiprintf_r+0x8d2>
  4038ea:	2a00      	cmp	r2, #0
  4038ec:	f040 8118 	bne.w	403b20 <_vfiprintf_r+0xa04>
  4038f0:	9b02      	ldr	r3, [sp, #8]
  4038f2:	9210      	str	r2, [sp, #64]	; 0x40
  4038f4:	0758      	lsls	r0, r3, #29
  4038f6:	d535      	bpl.n	403964 <_vfiprintf_r+0x848>
  4038f8:	9b08      	ldr	r3, [sp, #32]
  4038fa:	9901      	ldr	r1, [sp, #4]
  4038fc:	1a5c      	subs	r4, r3, r1
  4038fe:	2c00      	cmp	r4, #0
  403900:	f340 80e7 	ble.w	403ad2 <_vfiprintf_r+0x9b6>
  403904:	46ca      	mov	sl, r9
  403906:	2c10      	cmp	r4, #16
  403908:	f340 8218 	ble.w	403d3c <_vfiprintf_r+0xc20>
  40390c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40390e:	4e8f      	ldr	r6, [pc, #572]	; (403b4c <_vfiprintf_r+0xa30>)
  403910:	9f06      	ldr	r7, [sp, #24]
  403912:	f8dd b010 	ldr.w	fp, [sp, #16]
  403916:	2510      	movs	r5, #16
  403918:	e006      	b.n	403928 <_vfiprintf_r+0x80c>
  40391a:	1c88      	adds	r0, r1, #2
  40391c:	f10a 0a08 	add.w	sl, sl, #8
  403920:	4619      	mov	r1, r3
  403922:	3c10      	subs	r4, #16
  403924:	2c10      	cmp	r4, #16
  403926:	dd11      	ble.n	40394c <_vfiprintf_r+0x830>
  403928:	1c4b      	adds	r3, r1, #1
  40392a:	3210      	adds	r2, #16
  40392c:	2b07      	cmp	r3, #7
  40392e:	9211      	str	r2, [sp, #68]	; 0x44
  403930:	f8ca 6000 	str.w	r6, [sl]
  403934:	f8ca 5004 	str.w	r5, [sl, #4]
  403938:	9310      	str	r3, [sp, #64]	; 0x40
  40393a:	ddee      	ble.n	40391a <_vfiprintf_r+0x7fe>
  40393c:	bb42      	cbnz	r2, 403990 <_vfiprintf_r+0x874>
  40393e:	3c10      	subs	r4, #16
  403940:	2c10      	cmp	r4, #16
  403942:	f04f 0001 	mov.w	r0, #1
  403946:	4611      	mov	r1, r2
  403948:	46ca      	mov	sl, r9
  40394a:	dced      	bgt.n	403928 <_vfiprintf_r+0x80c>
  40394c:	4422      	add	r2, r4
  40394e:	2807      	cmp	r0, #7
  403950:	9211      	str	r2, [sp, #68]	; 0x44
  403952:	f8ca 6000 	str.w	r6, [sl]
  403956:	f8ca 4004 	str.w	r4, [sl, #4]
  40395a:	9010      	str	r0, [sp, #64]	; 0x40
  40395c:	dd51      	ble.n	403a02 <_vfiprintf_r+0x8e6>
  40395e:	2a00      	cmp	r2, #0
  403960:	f040 819b 	bne.w	403c9a <_vfiprintf_r+0xb7e>
  403964:	9b03      	ldr	r3, [sp, #12]
  403966:	9a08      	ldr	r2, [sp, #32]
  403968:	9901      	ldr	r1, [sp, #4]
  40396a:	428a      	cmp	r2, r1
  40396c:	bfac      	ite	ge
  40396e:	189b      	addge	r3, r3, r2
  403970:	185b      	addlt	r3, r3, r1
  403972:	9303      	str	r3, [sp, #12]
  403974:	e04e      	b.n	403a14 <_vfiprintf_r+0x8f8>
  403976:	aa0f      	add	r2, sp, #60	; 0x3c
  403978:	4651      	mov	r1, sl
  40397a:	4638      	mov	r0, r7
  40397c:	f7ff fb8e 	bl	40309c <__sprint_r.part.0>
  403980:	2800      	cmp	r0, #0
  403982:	f040 813f 	bne.w	403c04 <_vfiprintf_r+0xae8>
  403986:	9910      	ldr	r1, [sp, #64]	; 0x40
  403988:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40398a:	1c48      	adds	r0, r1, #1
  40398c:	46ce      	mov	lr, r9
  40398e:	e77f      	b.n	403890 <_vfiprintf_r+0x774>
  403990:	aa0f      	add	r2, sp, #60	; 0x3c
  403992:	4659      	mov	r1, fp
  403994:	4638      	mov	r0, r7
  403996:	f7ff fb81 	bl	40309c <__sprint_r.part.0>
  40399a:	b960      	cbnz	r0, 4039b6 <_vfiprintf_r+0x89a>
  40399c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40399e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4039a0:	1c48      	adds	r0, r1, #1
  4039a2:	46ca      	mov	sl, r9
  4039a4:	e7bd      	b.n	403922 <_vfiprintf_r+0x806>
  4039a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4039a8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4039ac:	2b00      	cmp	r3, #0
  4039ae:	f040 81d4 	bne.w	403d5a <_vfiprintf_r+0xc3e>
  4039b2:	2300      	movs	r3, #0
  4039b4:	9310      	str	r3, [sp, #64]	; 0x40
  4039b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4039ba:	f013 0f01 	tst.w	r3, #1
  4039be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4039c2:	d102      	bne.n	4039ca <_vfiprintf_r+0x8ae>
  4039c4:	059a      	lsls	r2, r3, #22
  4039c6:	f140 80de 	bpl.w	403b86 <_vfiprintf_r+0xa6a>
  4039ca:	065b      	lsls	r3, r3, #25
  4039cc:	f53f acb2 	bmi.w	403334 <_vfiprintf_r+0x218>
  4039d0:	9803      	ldr	r0, [sp, #12]
  4039d2:	b02d      	add	sp, #180	; 0xb4
  4039d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039d8:	2a00      	cmp	r2, #0
  4039da:	f040 8106 	bne.w	403bea <_vfiprintf_r+0xace>
  4039de:	9a05      	ldr	r2, [sp, #20]
  4039e0:	921d      	str	r2, [sp, #116]	; 0x74
  4039e2:	2301      	movs	r3, #1
  4039e4:	9211      	str	r2, [sp, #68]	; 0x44
  4039e6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4039ea:	9310      	str	r3, [sp, #64]	; 0x40
  4039ec:	46ca      	mov	sl, r9
  4039ee:	f10a 0a08 	add.w	sl, sl, #8
  4039f2:	9b02      	ldr	r3, [sp, #8]
  4039f4:	0759      	lsls	r1, r3, #29
  4039f6:	d504      	bpl.n	403a02 <_vfiprintf_r+0x8e6>
  4039f8:	9b08      	ldr	r3, [sp, #32]
  4039fa:	9901      	ldr	r1, [sp, #4]
  4039fc:	1a5c      	subs	r4, r3, r1
  4039fe:	2c00      	cmp	r4, #0
  403a00:	dc81      	bgt.n	403906 <_vfiprintf_r+0x7ea>
  403a02:	9b03      	ldr	r3, [sp, #12]
  403a04:	9908      	ldr	r1, [sp, #32]
  403a06:	9801      	ldr	r0, [sp, #4]
  403a08:	4281      	cmp	r1, r0
  403a0a:	bfac      	ite	ge
  403a0c:	185b      	addge	r3, r3, r1
  403a0e:	181b      	addlt	r3, r3, r0
  403a10:	9303      	str	r3, [sp, #12]
  403a12:	bb72      	cbnz	r2, 403a72 <_vfiprintf_r+0x956>
  403a14:	2300      	movs	r3, #0
  403a16:	9310      	str	r3, [sp, #64]	; 0x40
  403a18:	46ca      	mov	sl, r9
  403a1a:	f7ff bbbc 	b.w	403196 <_vfiprintf_r+0x7a>
  403a1e:	aa0f      	add	r2, sp, #60	; 0x3c
  403a20:	9904      	ldr	r1, [sp, #16]
  403a22:	4620      	mov	r0, r4
  403a24:	f7ff fb3a 	bl	40309c <__sprint_r.part.0>
  403a28:	bb50      	cbnz	r0, 403a80 <_vfiprintf_r+0x964>
  403a2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  403a2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403a2e:	f101 0e01 	add.w	lr, r1, #1
  403a32:	46cc      	mov	ip, r9
  403a34:	e548      	b.n	4034c8 <_vfiprintf_r+0x3ac>
  403a36:	2a00      	cmp	r2, #0
  403a38:	f040 8140 	bne.w	403cbc <_vfiprintf_r+0xba0>
  403a3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403a40:	2900      	cmp	r1, #0
  403a42:	f000 811b 	beq.w	403c7c <_vfiprintf_r+0xb60>
  403a46:	2201      	movs	r2, #1
  403a48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  403a4c:	4610      	mov	r0, r2
  403a4e:	921d      	str	r2, [sp, #116]	; 0x74
  403a50:	911c      	str	r1, [sp, #112]	; 0x70
  403a52:	46ca      	mov	sl, r9
  403a54:	4601      	mov	r1, r0
  403a56:	f10a 0a08 	add.w	sl, sl, #8
  403a5a:	3001      	adds	r0, #1
  403a5c:	e507      	b.n	40346e <_vfiprintf_r+0x352>
  403a5e:	9b02      	ldr	r3, [sp, #8]
  403a60:	2a01      	cmp	r2, #1
  403a62:	f000 8098 	beq.w	403b96 <_vfiprintf_r+0xa7a>
  403a66:	2a02      	cmp	r2, #2
  403a68:	d10d      	bne.n	403a86 <_vfiprintf_r+0x96a>
  403a6a:	9302      	str	r3, [sp, #8]
  403a6c:	2600      	movs	r6, #0
  403a6e:	2700      	movs	r7, #0
  403a70:	e5b0      	b.n	4035d4 <_vfiprintf_r+0x4b8>
  403a72:	aa0f      	add	r2, sp, #60	; 0x3c
  403a74:	9904      	ldr	r1, [sp, #16]
  403a76:	9806      	ldr	r0, [sp, #24]
  403a78:	f7ff fb10 	bl	40309c <__sprint_r.part.0>
  403a7c:	2800      	cmp	r0, #0
  403a7e:	d0c9      	beq.n	403a14 <_vfiprintf_r+0x8f8>
  403a80:	f8dd b010 	ldr.w	fp, [sp, #16]
  403a84:	e797      	b.n	4039b6 <_vfiprintf_r+0x89a>
  403a86:	9302      	str	r3, [sp, #8]
  403a88:	2600      	movs	r6, #0
  403a8a:	2700      	movs	r7, #0
  403a8c:	4649      	mov	r1, r9
  403a8e:	e000      	b.n	403a92 <_vfiprintf_r+0x976>
  403a90:	4659      	mov	r1, fp
  403a92:	08f2      	lsrs	r2, r6, #3
  403a94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403a98:	08f8      	lsrs	r0, r7, #3
  403a9a:	f006 0307 	and.w	r3, r6, #7
  403a9e:	4607      	mov	r7, r0
  403aa0:	4616      	mov	r6, r2
  403aa2:	3330      	adds	r3, #48	; 0x30
  403aa4:	ea56 0207 	orrs.w	r2, r6, r7
  403aa8:	f801 3c01 	strb.w	r3, [r1, #-1]
  403aac:	f101 3bff 	add.w	fp, r1, #4294967295
  403ab0:	d1ee      	bne.n	403a90 <_vfiprintf_r+0x974>
  403ab2:	9a02      	ldr	r2, [sp, #8]
  403ab4:	07d6      	lsls	r6, r2, #31
  403ab6:	f57f ad9d 	bpl.w	4035f4 <_vfiprintf_r+0x4d8>
  403aba:	2b30      	cmp	r3, #48	; 0x30
  403abc:	f43f ad9a 	beq.w	4035f4 <_vfiprintf_r+0x4d8>
  403ac0:	3902      	subs	r1, #2
  403ac2:	2330      	movs	r3, #48	; 0x30
  403ac4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403ac8:	eba9 0301 	sub.w	r3, r9, r1
  403acc:	9305      	str	r3, [sp, #20]
  403ace:	468b      	mov	fp, r1
  403ad0:	e476      	b.n	4033c0 <_vfiprintf_r+0x2a4>
  403ad2:	9b03      	ldr	r3, [sp, #12]
  403ad4:	9a08      	ldr	r2, [sp, #32]
  403ad6:	428a      	cmp	r2, r1
  403ad8:	bfac      	ite	ge
  403ada:	189b      	addge	r3, r3, r2
  403adc:	185b      	addlt	r3, r3, r1
  403ade:	9303      	str	r3, [sp, #12]
  403ae0:	e798      	b.n	403a14 <_vfiprintf_r+0x8f8>
  403ae2:	2202      	movs	r2, #2
  403ae4:	e44d      	b.n	403382 <_vfiprintf_r+0x266>
  403ae6:	2f00      	cmp	r7, #0
  403ae8:	bf08      	it	eq
  403aea:	2e0a      	cmpeq	r6, #10
  403aec:	d352      	bcc.n	403b94 <_vfiprintf_r+0xa78>
  403aee:	46cb      	mov	fp, r9
  403af0:	4630      	mov	r0, r6
  403af2:	4639      	mov	r1, r7
  403af4:	220a      	movs	r2, #10
  403af6:	2300      	movs	r3, #0
  403af8:	f7fe fc9a 	bl	402430 <__aeabi_uldivmod>
  403afc:	3230      	adds	r2, #48	; 0x30
  403afe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403b02:	4630      	mov	r0, r6
  403b04:	4639      	mov	r1, r7
  403b06:	2300      	movs	r3, #0
  403b08:	220a      	movs	r2, #10
  403b0a:	f7fe fc91 	bl	402430 <__aeabi_uldivmod>
  403b0e:	4606      	mov	r6, r0
  403b10:	460f      	mov	r7, r1
  403b12:	ea56 0307 	orrs.w	r3, r6, r7
  403b16:	d1eb      	bne.n	403af0 <_vfiprintf_r+0x9d4>
  403b18:	e56c      	b.n	4035f4 <_vfiprintf_r+0x4d8>
  403b1a:	9405      	str	r4, [sp, #20]
  403b1c:	46cb      	mov	fp, r9
  403b1e:	e44f      	b.n	4033c0 <_vfiprintf_r+0x2a4>
  403b20:	aa0f      	add	r2, sp, #60	; 0x3c
  403b22:	9904      	ldr	r1, [sp, #16]
  403b24:	9806      	ldr	r0, [sp, #24]
  403b26:	f7ff fab9 	bl	40309c <__sprint_r.part.0>
  403b2a:	2800      	cmp	r0, #0
  403b2c:	d1a8      	bne.n	403a80 <_vfiprintf_r+0x964>
  403b2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b30:	46ca      	mov	sl, r9
  403b32:	e75e      	b.n	4039f2 <_vfiprintf_r+0x8d6>
  403b34:	aa0f      	add	r2, sp, #60	; 0x3c
  403b36:	9904      	ldr	r1, [sp, #16]
  403b38:	9806      	ldr	r0, [sp, #24]
  403b3a:	f7ff faaf 	bl	40309c <__sprint_r.part.0>
  403b3e:	2800      	cmp	r0, #0
  403b40:	d19e      	bne.n	403a80 <_vfiprintf_r+0x964>
  403b42:	46ca      	mov	sl, r9
  403b44:	f7ff bbc0 	b.w	4032c8 <_vfiprintf_r+0x1ac>
  403b48:	00405540 	.word	0x00405540
  403b4c:	00405530 	.word	0x00405530
  403b50:	3104      	adds	r1, #4
  403b52:	6816      	ldr	r6, [r2, #0]
  403b54:	9107      	str	r1, [sp, #28]
  403b56:	2201      	movs	r2, #1
  403b58:	2700      	movs	r7, #0
  403b5a:	e412      	b.n	403382 <_vfiprintf_r+0x266>
  403b5c:	9807      	ldr	r0, [sp, #28]
  403b5e:	4601      	mov	r1, r0
  403b60:	3104      	adds	r1, #4
  403b62:	6806      	ldr	r6, [r0, #0]
  403b64:	9107      	str	r1, [sp, #28]
  403b66:	2700      	movs	r7, #0
  403b68:	e40b      	b.n	403382 <_vfiprintf_r+0x266>
  403b6a:	680e      	ldr	r6, [r1, #0]
  403b6c:	3104      	adds	r1, #4
  403b6e:	9107      	str	r1, [sp, #28]
  403b70:	2700      	movs	r7, #0
  403b72:	e591      	b.n	403698 <_vfiprintf_r+0x57c>
  403b74:	9907      	ldr	r1, [sp, #28]
  403b76:	680e      	ldr	r6, [r1, #0]
  403b78:	460a      	mov	r2, r1
  403b7a:	17f7      	asrs	r7, r6, #31
  403b7c:	3204      	adds	r2, #4
  403b7e:	9207      	str	r2, [sp, #28]
  403b80:	4630      	mov	r0, r6
  403b82:	4639      	mov	r1, r7
  403b84:	e50f      	b.n	4035a6 <_vfiprintf_r+0x48a>
  403b86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403b8a:	f000 fe7f 	bl	40488c <__retarget_lock_release_recursive>
  403b8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403b92:	e71a      	b.n	4039ca <_vfiprintf_r+0x8ae>
  403b94:	9b02      	ldr	r3, [sp, #8]
  403b96:	9302      	str	r3, [sp, #8]
  403b98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403b9c:	3630      	adds	r6, #48	; 0x30
  403b9e:	2301      	movs	r3, #1
  403ba0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  403ba4:	9305      	str	r3, [sp, #20]
  403ba6:	e40b      	b.n	4033c0 <_vfiprintf_r+0x2a4>
  403ba8:	aa0f      	add	r2, sp, #60	; 0x3c
  403baa:	9904      	ldr	r1, [sp, #16]
  403bac:	9806      	ldr	r0, [sp, #24]
  403bae:	f7ff fa75 	bl	40309c <__sprint_r.part.0>
  403bb2:	2800      	cmp	r0, #0
  403bb4:	f47f af64 	bne.w	403a80 <_vfiprintf_r+0x964>
  403bb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  403bba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403bbc:	1c48      	adds	r0, r1, #1
  403bbe:	46ca      	mov	sl, r9
  403bc0:	e651      	b.n	403866 <_vfiprintf_r+0x74a>
  403bc2:	aa0f      	add	r2, sp, #60	; 0x3c
  403bc4:	9904      	ldr	r1, [sp, #16]
  403bc6:	9806      	ldr	r0, [sp, #24]
  403bc8:	f7ff fa68 	bl	40309c <__sprint_r.part.0>
  403bcc:	2800      	cmp	r0, #0
  403bce:	f47f af57 	bne.w	403a80 <_vfiprintf_r+0x964>
  403bd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  403bd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403bd6:	1c48      	adds	r0, r1, #1
  403bd8:	46ca      	mov	sl, r9
  403bda:	e448      	b.n	40346e <_vfiprintf_r+0x352>
  403bdc:	2a00      	cmp	r2, #0
  403bde:	f040 8091 	bne.w	403d04 <_vfiprintf_r+0xbe8>
  403be2:	2001      	movs	r0, #1
  403be4:	4611      	mov	r1, r2
  403be6:	46ca      	mov	sl, r9
  403be8:	e641      	b.n	40386e <_vfiprintf_r+0x752>
  403bea:	aa0f      	add	r2, sp, #60	; 0x3c
  403bec:	9904      	ldr	r1, [sp, #16]
  403bee:	9806      	ldr	r0, [sp, #24]
  403bf0:	f7ff fa54 	bl	40309c <__sprint_r.part.0>
  403bf4:	2800      	cmp	r0, #0
  403bf6:	f47f af43 	bne.w	403a80 <_vfiprintf_r+0x964>
  403bfa:	9810      	ldr	r0, [sp, #64]	; 0x40
  403bfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403bfe:	3001      	adds	r0, #1
  403c00:	46ca      	mov	sl, r9
  403c02:	e667      	b.n	4038d4 <_vfiprintf_r+0x7b8>
  403c04:	46d3      	mov	fp, sl
  403c06:	e6d6      	b.n	4039b6 <_vfiprintf_r+0x89a>
  403c08:	9e07      	ldr	r6, [sp, #28]
  403c0a:	3607      	adds	r6, #7
  403c0c:	f026 0207 	bic.w	r2, r6, #7
  403c10:	f102 0108 	add.w	r1, r2, #8
  403c14:	e9d2 6700 	ldrd	r6, r7, [r2]
  403c18:	9107      	str	r1, [sp, #28]
  403c1a:	2201      	movs	r2, #1
  403c1c:	f7ff bbb1 	b.w	403382 <_vfiprintf_r+0x266>
  403c20:	9e07      	ldr	r6, [sp, #28]
  403c22:	3607      	adds	r6, #7
  403c24:	f026 0607 	bic.w	r6, r6, #7
  403c28:	e9d6 0100 	ldrd	r0, r1, [r6]
  403c2c:	f106 0208 	add.w	r2, r6, #8
  403c30:	9207      	str	r2, [sp, #28]
  403c32:	4606      	mov	r6, r0
  403c34:	460f      	mov	r7, r1
  403c36:	e4b6      	b.n	4035a6 <_vfiprintf_r+0x48a>
  403c38:	9e07      	ldr	r6, [sp, #28]
  403c3a:	3607      	adds	r6, #7
  403c3c:	f026 0207 	bic.w	r2, r6, #7
  403c40:	f102 0108 	add.w	r1, r2, #8
  403c44:	e9d2 6700 	ldrd	r6, r7, [r2]
  403c48:	9107      	str	r1, [sp, #28]
  403c4a:	2200      	movs	r2, #0
  403c4c:	f7ff bb99 	b.w	403382 <_vfiprintf_r+0x266>
  403c50:	9e07      	ldr	r6, [sp, #28]
  403c52:	3607      	adds	r6, #7
  403c54:	f026 0107 	bic.w	r1, r6, #7
  403c58:	f101 0008 	add.w	r0, r1, #8
  403c5c:	9007      	str	r0, [sp, #28]
  403c5e:	e9d1 6700 	ldrd	r6, r7, [r1]
  403c62:	e519      	b.n	403698 <_vfiprintf_r+0x57c>
  403c64:	46cb      	mov	fp, r9
  403c66:	f7ff bbab 	b.w	4033c0 <_vfiprintf_r+0x2a4>
  403c6a:	252d      	movs	r5, #45	; 0x2d
  403c6c:	4276      	negs	r6, r6
  403c6e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403c72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403c76:	2201      	movs	r2, #1
  403c78:	f7ff bb88 	b.w	40338c <_vfiprintf_r+0x270>
  403c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c7e:	b9b3      	cbnz	r3, 403cae <_vfiprintf_r+0xb92>
  403c80:	4611      	mov	r1, r2
  403c82:	2001      	movs	r0, #1
  403c84:	46ca      	mov	sl, r9
  403c86:	e5f2      	b.n	40386e <_vfiprintf_r+0x752>
  403c88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403c8c:	f000 fdfe 	bl	40488c <__retarget_lock_release_recursive>
  403c90:	f04f 33ff 	mov.w	r3, #4294967295
  403c94:	9303      	str	r3, [sp, #12]
  403c96:	f7ff bb50 	b.w	40333a <_vfiprintf_r+0x21e>
  403c9a:	aa0f      	add	r2, sp, #60	; 0x3c
  403c9c:	9904      	ldr	r1, [sp, #16]
  403c9e:	9806      	ldr	r0, [sp, #24]
  403ca0:	f7ff f9fc 	bl	40309c <__sprint_r.part.0>
  403ca4:	2800      	cmp	r0, #0
  403ca6:	f47f aeeb 	bne.w	403a80 <_vfiprintf_r+0x964>
  403caa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403cac:	e6a9      	b.n	403a02 <_vfiprintf_r+0x8e6>
  403cae:	ab0e      	add	r3, sp, #56	; 0x38
  403cb0:	2202      	movs	r2, #2
  403cb2:	931c      	str	r3, [sp, #112]	; 0x70
  403cb4:	921d      	str	r2, [sp, #116]	; 0x74
  403cb6:	2001      	movs	r0, #1
  403cb8:	46ca      	mov	sl, r9
  403cba:	e5d0      	b.n	40385e <_vfiprintf_r+0x742>
  403cbc:	aa0f      	add	r2, sp, #60	; 0x3c
  403cbe:	9904      	ldr	r1, [sp, #16]
  403cc0:	9806      	ldr	r0, [sp, #24]
  403cc2:	f7ff f9eb 	bl	40309c <__sprint_r.part.0>
  403cc6:	2800      	cmp	r0, #0
  403cc8:	f47f aeda 	bne.w	403a80 <_vfiprintf_r+0x964>
  403ccc:	9910      	ldr	r1, [sp, #64]	; 0x40
  403cce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403cd0:	1c48      	adds	r0, r1, #1
  403cd2:	46ca      	mov	sl, r9
  403cd4:	e5a4      	b.n	403820 <_vfiprintf_r+0x704>
  403cd6:	9a07      	ldr	r2, [sp, #28]
  403cd8:	9903      	ldr	r1, [sp, #12]
  403cda:	6813      	ldr	r3, [r2, #0]
  403cdc:	17cd      	asrs	r5, r1, #31
  403cde:	4608      	mov	r0, r1
  403ce0:	3204      	adds	r2, #4
  403ce2:	4629      	mov	r1, r5
  403ce4:	9207      	str	r2, [sp, #28]
  403ce6:	e9c3 0100 	strd	r0, r1, [r3]
  403cea:	f7ff ba54 	b.w	403196 <_vfiprintf_r+0x7a>
  403cee:	4658      	mov	r0, fp
  403cf0:	9607      	str	r6, [sp, #28]
  403cf2:	9302      	str	r3, [sp, #8]
  403cf4:	f7ff f964 	bl	402fc0 <strlen>
  403cf8:	2400      	movs	r4, #0
  403cfa:	9005      	str	r0, [sp, #20]
  403cfc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403d00:	f7ff bb5e 	b.w	4033c0 <_vfiprintf_r+0x2a4>
  403d04:	aa0f      	add	r2, sp, #60	; 0x3c
  403d06:	9904      	ldr	r1, [sp, #16]
  403d08:	9806      	ldr	r0, [sp, #24]
  403d0a:	f7ff f9c7 	bl	40309c <__sprint_r.part.0>
  403d0e:	2800      	cmp	r0, #0
  403d10:	f47f aeb6 	bne.w	403a80 <_vfiprintf_r+0x964>
  403d14:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d18:	1c48      	adds	r0, r1, #1
  403d1a:	46ca      	mov	sl, r9
  403d1c:	e5a7      	b.n	40386e <_vfiprintf_r+0x752>
  403d1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d22:	4e20      	ldr	r6, [pc, #128]	; (403da4 <_vfiprintf_r+0xc88>)
  403d24:	3101      	adds	r1, #1
  403d26:	f7ff bb90 	b.w	40344a <_vfiprintf_r+0x32e>
  403d2a:	2c06      	cmp	r4, #6
  403d2c:	bf28      	it	cs
  403d2e:	2406      	movcs	r4, #6
  403d30:	9405      	str	r4, [sp, #20]
  403d32:	9607      	str	r6, [sp, #28]
  403d34:	9401      	str	r4, [sp, #4]
  403d36:	f8df b070 	ldr.w	fp, [pc, #112]	; 403da8 <_vfiprintf_r+0xc8c>
  403d3a:	e4d5      	b.n	4036e8 <_vfiprintf_r+0x5cc>
  403d3c:	9810      	ldr	r0, [sp, #64]	; 0x40
  403d3e:	4e19      	ldr	r6, [pc, #100]	; (403da4 <_vfiprintf_r+0xc88>)
  403d40:	3001      	adds	r0, #1
  403d42:	e603      	b.n	40394c <_vfiprintf_r+0x830>
  403d44:	9405      	str	r4, [sp, #20]
  403d46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403d4a:	9607      	str	r6, [sp, #28]
  403d4c:	9302      	str	r3, [sp, #8]
  403d4e:	4604      	mov	r4, r0
  403d50:	f7ff bb36 	b.w	4033c0 <_vfiprintf_r+0x2a4>
  403d54:	4686      	mov	lr, r0
  403d56:	f7ff bbce 	b.w	4034f6 <_vfiprintf_r+0x3da>
  403d5a:	9806      	ldr	r0, [sp, #24]
  403d5c:	aa0f      	add	r2, sp, #60	; 0x3c
  403d5e:	4659      	mov	r1, fp
  403d60:	f7ff f99c 	bl	40309c <__sprint_r.part.0>
  403d64:	2800      	cmp	r0, #0
  403d66:	f43f ae24 	beq.w	4039b2 <_vfiprintf_r+0x896>
  403d6a:	e624      	b.n	4039b6 <_vfiprintf_r+0x89a>
  403d6c:	9907      	ldr	r1, [sp, #28]
  403d6e:	f898 2001 	ldrb.w	r2, [r8, #1]
  403d72:	680c      	ldr	r4, [r1, #0]
  403d74:	3104      	adds	r1, #4
  403d76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  403d7a:	46b8      	mov	r8, r7
  403d7c:	9107      	str	r1, [sp, #28]
  403d7e:	f7ff ba3f 	b.w	403200 <_vfiprintf_r+0xe4>
  403d82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d86:	e43c      	b.n	403602 <_vfiprintf_r+0x4e6>
  403d88:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d8c:	e521      	b.n	4037d2 <_vfiprintf_r+0x6b6>
  403d8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d92:	f7ff bbf4 	b.w	40357e <_vfiprintf_r+0x462>
  403d96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d9a:	e491      	b.n	4036c0 <_vfiprintf_r+0x5a4>
  403d9c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403da0:	e469      	b.n	403676 <_vfiprintf_r+0x55a>
  403da2:	bf00      	nop
  403da4:	00405530 	.word	0x00405530
  403da8:	00405528 	.word	0x00405528

00403dac <__sbprintf>:
  403dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403db0:	460c      	mov	r4, r1
  403db2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403db6:	8989      	ldrh	r1, [r1, #12]
  403db8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403dba:	89e5      	ldrh	r5, [r4, #14]
  403dbc:	9619      	str	r6, [sp, #100]	; 0x64
  403dbe:	f021 0102 	bic.w	r1, r1, #2
  403dc2:	4606      	mov	r6, r0
  403dc4:	69e0      	ldr	r0, [r4, #28]
  403dc6:	f8ad 100c 	strh.w	r1, [sp, #12]
  403dca:	4617      	mov	r7, r2
  403dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403dd2:	f8ad 500e 	strh.w	r5, [sp, #14]
  403dd6:	4698      	mov	r8, r3
  403dd8:	ad1a      	add	r5, sp, #104	; 0x68
  403dda:	2300      	movs	r3, #0
  403ddc:	9007      	str	r0, [sp, #28]
  403dde:	a816      	add	r0, sp, #88	; 0x58
  403de0:	9209      	str	r2, [sp, #36]	; 0x24
  403de2:	9306      	str	r3, [sp, #24]
  403de4:	9500      	str	r5, [sp, #0]
  403de6:	9504      	str	r5, [sp, #16]
  403de8:	9102      	str	r1, [sp, #8]
  403dea:	9105      	str	r1, [sp, #20]
  403dec:	f000 fd48 	bl	404880 <__retarget_lock_init_recursive>
  403df0:	4643      	mov	r3, r8
  403df2:	463a      	mov	r2, r7
  403df4:	4669      	mov	r1, sp
  403df6:	4630      	mov	r0, r6
  403df8:	f7ff f990 	bl	40311c <_vfiprintf_r>
  403dfc:	1e05      	subs	r5, r0, #0
  403dfe:	db07      	blt.n	403e10 <__sbprintf+0x64>
  403e00:	4630      	mov	r0, r6
  403e02:	4669      	mov	r1, sp
  403e04:	f000 f928 	bl	404058 <_fflush_r>
  403e08:	2800      	cmp	r0, #0
  403e0a:	bf18      	it	ne
  403e0c:	f04f 35ff 	movne.w	r5, #4294967295
  403e10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403e14:	065b      	lsls	r3, r3, #25
  403e16:	d503      	bpl.n	403e20 <__sbprintf+0x74>
  403e18:	89a3      	ldrh	r3, [r4, #12]
  403e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e1e:	81a3      	strh	r3, [r4, #12]
  403e20:	9816      	ldr	r0, [sp, #88]	; 0x58
  403e22:	f000 fd2f 	bl	404884 <__retarget_lock_close_recursive>
  403e26:	4628      	mov	r0, r5
  403e28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403e30 <__swsetup_r>:
  403e30:	b538      	push	{r3, r4, r5, lr}
  403e32:	4b30      	ldr	r3, [pc, #192]	; (403ef4 <__swsetup_r+0xc4>)
  403e34:	681b      	ldr	r3, [r3, #0]
  403e36:	4605      	mov	r5, r0
  403e38:	460c      	mov	r4, r1
  403e3a:	b113      	cbz	r3, 403e42 <__swsetup_r+0x12>
  403e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403e3e:	2a00      	cmp	r2, #0
  403e40:	d038      	beq.n	403eb4 <__swsetup_r+0x84>
  403e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403e46:	b293      	uxth	r3, r2
  403e48:	0718      	lsls	r0, r3, #28
  403e4a:	d50c      	bpl.n	403e66 <__swsetup_r+0x36>
  403e4c:	6920      	ldr	r0, [r4, #16]
  403e4e:	b1a8      	cbz	r0, 403e7c <__swsetup_r+0x4c>
  403e50:	f013 0201 	ands.w	r2, r3, #1
  403e54:	d01e      	beq.n	403e94 <__swsetup_r+0x64>
  403e56:	6963      	ldr	r3, [r4, #20]
  403e58:	2200      	movs	r2, #0
  403e5a:	425b      	negs	r3, r3
  403e5c:	61a3      	str	r3, [r4, #24]
  403e5e:	60a2      	str	r2, [r4, #8]
  403e60:	b1f0      	cbz	r0, 403ea0 <__swsetup_r+0x70>
  403e62:	2000      	movs	r0, #0
  403e64:	bd38      	pop	{r3, r4, r5, pc}
  403e66:	06d9      	lsls	r1, r3, #27
  403e68:	d53c      	bpl.n	403ee4 <__swsetup_r+0xb4>
  403e6a:	0758      	lsls	r0, r3, #29
  403e6c:	d426      	bmi.n	403ebc <__swsetup_r+0x8c>
  403e6e:	6920      	ldr	r0, [r4, #16]
  403e70:	f042 0308 	orr.w	r3, r2, #8
  403e74:	81a3      	strh	r3, [r4, #12]
  403e76:	b29b      	uxth	r3, r3
  403e78:	2800      	cmp	r0, #0
  403e7a:	d1e9      	bne.n	403e50 <__swsetup_r+0x20>
  403e7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403e80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403e84:	d0e4      	beq.n	403e50 <__swsetup_r+0x20>
  403e86:	4628      	mov	r0, r5
  403e88:	4621      	mov	r1, r4
  403e8a:	f000 fd2f 	bl	4048ec <__smakebuf_r>
  403e8e:	89a3      	ldrh	r3, [r4, #12]
  403e90:	6920      	ldr	r0, [r4, #16]
  403e92:	e7dd      	b.n	403e50 <__swsetup_r+0x20>
  403e94:	0799      	lsls	r1, r3, #30
  403e96:	bf58      	it	pl
  403e98:	6962      	ldrpl	r2, [r4, #20]
  403e9a:	60a2      	str	r2, [r4, #8]
  403e9c:	2800      	cmp	r0, #0
  403e9e:	d1e0      	bne.n	403e62 <__swsetup_r+0x32>
  403ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403ea4:	061a      	lsls	r2, r3, #24
  403ea6:	d5dd      	bpl.n	403e64 <__swsetup_r+0x34>
  403ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403eac:	81a3      	strh	r3, [r4, #12]
  403eae:	f04f 30ff 	mov.w	r0, #4294967295
  403eb2:	bd38      	pop	{r3, r4, r5, pc}
  403eb4:	4618      	mov	r0, r3
  403eb6:	f000 f927 	bl	404108 <__sinit>
  403eba:	e7c2      	b.n	403e42 <__swsetup_r+0x12>
  403ebc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403ebe:	b151      	cbz	r1, 403ed6 <__swsetup_r+0xa6>
  403ec0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403ec4:	4299      	cmp	r1, r3
  403ec6:	d004      	beq.n	403ed2 <__swsetup_r+0xa2>
  403ec8:	4628      	mov	r0, r5
  403eca:	f000 fa43 	bl	404354 <_free_r>
  403ece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403ed2:	2300      	movs	r3, #0
  403ed4:	6323      	str	r3, [r4, #48]	; 0x30
  403ed6:	2300      	movs	r3, #0
  403ed8:	6920      	ldr	r0, [r4, #16]
  403eda:	6063      	str	r3, [r4, #4]
  403edc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403ee0:	6020      	str	r0, [r4, #0]
  403ee2:	e7c5      	b.n	403e70 <__swsetup_r+0x40>
  403ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403ee8:	2309      	movs	r3, #9
  403eea:	602b      	str	r3, [r5, #0]
  403eec:	f04f 30ff 	mov.w	r0, #4294967295
  403ef0:	81a2      	strh	r2, [r4, #12]
  403ef2:	bd38      	pop	{r3, r4, r5, pc}
  403ef4:	20000010 	.word	0x20000010

00403ef8 <register_fini>:
  403ef8:	4b02      	ldr	r3, [pc, #8]	; (403f04 <register_fini+0xc>)
  403efa:	b113      	cbz	r3, 403f02 <register_fini+0xa>
  403efc:	4802      	ldr	r0, [pc, #8]	; (403f08 <register_fini+0x10>)
  403efe:	f000 b805 	b.w	403f0c <atexit>
  403f02:	4770      	bx	lr
  403f04:	00000000 	.word	0x00000000
  403f08:	00404179 	.word	0x00404179

00403f0c <atexit>:
  403f0c:	2300      	movs	r3, #0
  403f0e:	4601      	mov	r1, r0
  403f10:	461a      	mov	r2, r3
  403f12:	4618      	mov	r0, r3
  403f14:	f001 b92a 	b.w	40516c <__register_exitproc>

00403f18 <__sflush_r>:
  403f18:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403f1c:	b29a      	uxth	r2, r3
  403f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f22:	460d      	mov	r5, r1
  403f24:	0711      	lsls	r1, r2, #28
  403f26:	4680      	mov	r8, r0
  403f28:	d43a      	bmi.n	403fa0 <__sflush_r+0x88>
  403f2a:	686a      	ldr	r2, [r5, #4]
  403f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403f30:	2a00      	cmp	r2, #0
  403f32:	81ab      	strh	r3, [r5, #12]
  403f34:	dd6f      	ble.n	404016 <__sflush_r+0xfe>
  403f36:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403f38:	2c00      	cmp	r4, #0
  403f3a:	d049      	beq.n	403fd0 <__sflush_r+0xb8>
  403f3c:	2200      	movs	r2, #0
  403f3e:	b29b      	uxth	r3, r3
  403f40:	f8d8 6000 	ldr.w	r6, [r8]
  403f44:	f8c8 2000 	str.w	r2, [r8]
  403f48:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403f4c:	d067      	beq.n	40401e <__sflush_r+0x106>
  403f4e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403f50:	075f      	lsls	r7, r3, #29
  403f52:	d505      	bpl.n	403f60 <__sflush_r+0x48>
  403f54:	6869      	ldr	r1, [r5, #4]
  403f56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403f58:	1a52      	subs	r2, r2, r1
  403f5a:	b10b      	cbz	r3, 403f60 <__sflush_r+0x48>
  403f5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403f5e:	1ad2      	subs	r2, r2, r3
  403f60:	2300      	movs	r3, #0
  403f62:	69e9      	ldr	r1, [r5, #28]
  403f64:	4640      	mov	r0, r8
  403f66:	47a0      	blx	r4
  403f68:	1c44      	adds	r4, r0, #1
  403f6a:	d03c      	beq.n	403fe6 <__sflush_r+0xce>
  403f6c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403f70:	692a      	ldr	r2, [r5, #16]
  403f72:	602a      	str	r2, [r5, #0]
  403f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403f78:	2200      	movs	r2, #0
  403f7a:	81ab      	strh	r3, [r5, #12]
  403f7c:	04db      	lsls	r3, r3, #19
  403f7e:	606a      	str	r2, [r5, #4]
  403f80:	d447      	bmi.n	404012 <__sflush_r+0xfa>
  403f82:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403f84:	f8c8 6000 	str.w	r6, [r8]
  403f88:	b311      	cbz	r1, 403fd0 <__sflush_r+0xb8>
  403f8a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403f8e:	4299      	cmp	r1, r3
  403f90:	d002      	beq.n	403f98 <__sflush_r+0x80>
  403f92:	4640      	mov	r0, r8
  403f94:	f000 f9de 	bl	404354 <_free_r>
  403f98:	2000      	movs	r0, #0
  403f9a:	6328      	str	r0, [r5, #48]	; 0x30
  403f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fa0:	692e      	ldr	r6, [r5, #16]
  403fa2:	b1ae      	cbz	r6, 403fd0 <__sflush_r+0xb8>
  403fa4:	682c      	ldr	r4, [r5, #0]
  403fa6:	602e      	str	r6, [r5, #0]
  403fa8:	0791      	lsls	r1, r2, #30
  403faa:	bf0c      	ite	eq
  403fac:	696b      	ldreq	r3, [r5, #20]
  403fae:	2300      	movne	r3, #0
  403fb0:	1ba4      	subs	r4, r4, r6
  403fb2:	60ab      	str	r3, [r5, #8]
  403fb4:	e00a      	b.n	403fcc <__sflush_r+0xb4>
  403fb6:	4623      	mov	r3, r4
  403fb8:	4632      	mov	r2, r6
  403fba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403fbc:	69e9      	ldr	r1, [r5, #28]
  403fbe:	4640      	mov	r0, r8
  403fc0:	47b8      	blx	r7
  403fc2:	2800      	cmp	r0, #0
  403fc4:	eba4 0400 	sub.w	r4, r4, r0
  403fc8:	4406      	add	r6, r0
  403fca:	dd04      	ble.n	403fd6 <__sflush_r+0xbe>
  403fcc:	2c00      	cmp	r4, #0
  403fce:	dcf2      	bgt.n	403fb6 <__sflush_r+0x9e>
  403fd0:	2000      	movs	r0, #0
  403fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fd6:	89ab      	ldrh	r3, [r5, #12]
  403fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403fdc:	81ab      	strh	r3, [r5, #12]
  403fde:	f04f 30ff 	mov.w	r0, #4294967295
  403fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fe6:	f8d8 4000 	ldr.w	r4, [r8]
  403fea:	2c1d      	cmp	r4, #29
  403fec:	d8f3      	bhi.n	403fd6 <__sflush_r+0xbe>
  403fee:	4b19      	ldr	r3, [pc, #100]	; (404054 <__sflush_r+0x13c>)
  403ff0:	40e3      	lsrs	r3, r4
  403ff2:	43db      	mvns	r3, r3
  403ff4:	f013 0301 	ands.w	r3, r3, #1
  403ff8:	d1ed      	bne.n	403fd6 <__sflush_r+0xbe>
  403ffa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403ffe:	606b      	str	r3, [r5, #4]
  404000:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404004:	6929      	ldr	r1, [r5, #16]
  404006:	81ab      	strh	r3, [r5, #12]
  404008:	04da      	lsls	r2, r3, #19
  40400a:	6029      	str	r1, [r5, #0]
  40400c:	d5b9      	bpl.n	403f82 <__sflush_r+0x6a>
  40400e:	2c00      	cmp	r4, #0
  404010:	d1b7      	bne.n	403f82 <__sflush_r+0x6a>
  404012:	6528      	str	r0, [r5, #80]	; 0x50
  404014:	e7b5      	b.n	403f82 <__sflush_r+0x6a>
  404016:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404018:	2a00      	cmp	r2, #0
  40401a:	dc8c      	bgt.n	403f36 <__sflush_r+0x1e>
  40401c:	e7d8      	b.n	403fd0 <__sflush_r+0xb8>
  40401e:	2301      	movs	r3, #1
  404020:	69e9      	ldr	r1, [r5, #28]
  404022:	4640      	mov	r0, r8
  404024:	47a0      	blx	r4
  404026:	1c43      	adds	r3, r0, #1
  404028:	4602      	mov	r2, r0
  40402a:	d002      	beq.n	404032 <__sflush_r+0x11a>
  40402c:	89ab      	ldrh	r3, [r5, #12]
  40402e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404030:	e78e      	b.n	403f50 <__sflush_r+0x38>
  404032:	f8d8 3000 	ldr.w	r3, [r8]
  404036:	2b00      	cmp	r3, #0
  404038:	d0f8      	beq.n	40402c <__sflush_r+0x114>
  40403a:	2b1d      	cmp	r3, #29
  40403c:	d001      	beq.n	404042 <__sflush_r+0x12a>
  40403e:	2b16      	cmp	r3, #22
  404040:	d102      	bne.n	404048 <__sflush_r+0x130>
  404042:	f8c8 6000 	str.w	r6, [r8]
  404046:	e7c3      	b.n	403fd0 <__sflush_r+0xb8>
  404048:	89ab      	ldrh	r3, [r5, #12]
  40404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40404e:	81ab      	strh	r3, [r5, #12]
  404050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404054:	20400001 	.word	0x20400001

00404058 <_fflush_r>:
  404058:	b538      	push	{r3, r4, r5, lr}
  40405a:	460d      	mov	r5, r1
  40405c:	4604      	mov	r4, r0
  40405e:	b108      	cbz	r0, 404064 <_fflush_r+0xc>
  404060:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404062:	b1bb      	cbz	r3, 404094 <_fflush_r+0x3c>
  404064:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404068:	b188      	cbz	r0, 40408e <_fflush_r+0x36>
  40406a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40406c:	07db      	lsls	r3, r3, #31
  40406e:	d401      	bmi.n	404074 <_fflush_r+0x1c>
  404070:	0581      	lsls	r1, r0, #22
  404072:	d517      	bpl.n	4040a4 <_fflush_r+0x4c>
  404074:	4620      	mov	r0, r4
  404076:	4629      	mov	r1, r5
  404078:	f7ff ff4e 	bl	403f18 <__sflush_r>
  40407c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40407e:	07da      	lsls	r2, r3, #31
  404080:	4604      	mov	r4, r0
  404082:	d402      	bmi.n	40408a <_fflush_r+0x32>
  404084:	89ab      	ldrh	r3, [r5, #12]
  404086:	059b      	lsls	r3, r3, #22
  404088:	d507      	bpl.n	40409a <_fflush_r+0x42>
  40408a:	4620      	mov	r0, r4
  40408c:	bd38      	pop	{r3, r4, r5, pc}
  40408e:	4604      	mov	r4, r0
  404090:	4620      	mov	r0, r4
  404092:	bd38      	pop	{r3, r4, r5, pc}
  404094:	f000 f838 	bl	404108 <__sinit>
  404098:	e7e4      	b.n	404064 <_fflush_r+0xc>
  40409a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40409c:	f000 fbf6 	bl	40488c <__retarget_lock_release_recursive>
  4040a0:	4620      	mov	r0, r4
  4040a2:	bd38      	pop	{r3, r4, r5, pc}
  4040a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4040a6:	f000 fbef 	bl	404888 <__retarget_lock_acquire_recursive>
  4040aa:	e7e3      	b.n	404074 <_fflush_r+0x1c>

004040ac <_cleanup_r>:
  4040ac:	4901      	ldr	r1, [pc, #4]	; (4040b4 <_cleanup_r+0x8>)
  4040ae:	f000 bbaf 	b.w	404810 <_fwalk_reent>
  4040b2:	bf00      	nop
  4040b4:	00405255 	.word	0x00405255

004040b8 <std.isra.0>:
  4040b8:	b510      	push	{r4, lr}
  4040ba:	2300      	movs	r3, #0
  4040bc:	4604      	mov	r4, r0
  4040be:	8181      	strh	r1, [r0, #12]
  4040c0:	81c2      	strh	r2, [r0, #14]
  4040c2:	6003      	str	r3, [r0, #0]
  4040c4:	6043      	str	r3, [r0, #4]
  4040c6:	6083      	str	r3, [r0, #8]
  4040c8:	6643      	str	r3, [r0, #100]	; 0x64
  4040ca:	6103      	str	r3, [r0, #16]
  4040cc:	6143      	str	r3, [r0, #20]
  4040ce:	6183      	str	r3, [r0, #24]
  4040d0:	4619      	mov	r1, r3
  4040d2:	2208      	movs	r2, #8
  4040d4:	305c      	adds	r0, #92	; 0x5c
  4040d6:	f7fe fe27 	bl	402d28 <memset>
  4040da:	4807      	ldr	r0, [pc, #28]	; (4040f8 <std.isra.0+0x40>)
  4040dc:	4907      	ldr	r1, [pc, #28]	; (4040fc <std.isra.0+0x44>)
  4040de:	4a08      	ldr	r2, [pc, #32]	; (404100 <std.isra.0+0x48>)
  4040e0:	4b08      	ldr	r3, [pc, #32]	; (404104 <std.isra.0+0x4c>)
  4040e2:	6220      	str	r0, [r4, #32]
  4040e4:	61e4      	str	r4, [r4, #28]
  4040e6:	6261      	str	r1, [r4, #36]	; 0x24
  4040e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4040ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4040ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4040f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4040f4:	f000 bbc4 	b.w	404880 <__retarget_lock_init_recursive>
  4040f8:	00404f99 	.word	0x00404f99
  4040fc:	00404fbd 	.word	0x00404fbd
  404100:	00404ff9 	.word	0x00404ff9
  404104:	00405019 	.word	0x00405019

00404108 <__sinit>:
  404108:	b510      	push	{r4, lr}
  40410a:	4604      	mov	r4, r0
  40410c:	4812      	ldr	r0, [pc, #72]	; (404158 <__sinit+0x50>)
  40410e:	f000 fbbb 	bl	404888 <__retarget_lock_acquire_recursive>
  404112:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404114:	b9d2      	cbnz	r2, 40414c <__sinit+0x44>
  404116:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40411a:	4810      	ldr	r0, [pc, #64]	; (40415c <__sinit+0x54>)
  40411c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404120:	2103      	movs	r1, #3
  404122:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404126:	63e0      	str	r0, [r4, #60]	; 0x3c
  404128:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40412c:	6860      	ldr	r0, [r4, #4]
  40412e:	2104      	movs	r1, #4
  404130:	f7ff ffc2 	bl	4040b8 <std.isra.0>
  404134:	2201      	movs	r2, #1
  404136:	2109      	movs	r1, #9
  404138:	68a0      	ldr	r0, [r4, #8]
  40413a:	f7ff ffbd 	bl	4040b8 <std.isra.0>
  40413e:	2202      	movs	r2, #2
  404140:	2112      	movs	r1, #18
  404142:	68e0      	ldr	r0, [r4, #12]
  404144:	f7ff ffb8 	bl	4040b8 <std.isra.0>
  404148:	2301      	movs	r3, #1
  40414a:	63a3      	str	r3, [r4, #56]	; 0x38
  40414c:	4802      	ldr	r0, [pc, #8]	; (404158 <__sinit+0x50>)
  40414e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404152:	f000 bb9b 	b.w	40488c <__retarget_lock_release_recursive>
  404156:	bf00      	nop
  404158:	20000ebc 	.word	0x20000ebc
  40415c:	004040ad 	.word	0x004040ad

00404160 <__sfp_lock_acquire>:
  404160:	4801      	ldr	r0, [pc, #4]	; (404168 <__sfp_lock_acquire+0x8>)
  404162:	f000 bb91 	b.w	404888 <__retarget_lock_acquire_recursive>
  404166:	bf00      	nop
  404168:	20000ed0 	.word	0x20000ed0

0040416c <__sfp_lock_release>:
  40416c:	4801      	ldr	r0, [pc, #4]	; (404174 <__sfp_lock_release+0x8>)
  40416e:	f000 bb8d 	b.w	40488c <__retarget_lock_release_recursive>
  404172:	bf00      	nop
  404174:	20000ed0 	.word	0x20000ed0

00404178 <__libc_fini_array>:
  404178:	b538      	push	{r3, r4, r5, lr}
  40417a:	4c0a      	ldr	r4, [pc, #40]	; (4041a4 <__libc_fini_array+0x2c>)
  40417c:	4d0a      	ldr	r5, [pc, #40]	; (4041a8 <__libc_fini_array+0x30>)
  40417e:	1b64      	subs	r4, r4, r5
  404180:	10a4      	asrs	r4, r4, #2
  404182:	d00a      	beq.n	40419a <__libc_fini_array+0x22>
  404184:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404188:	3b01      	subs	r3, #1
  40418a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40418e:	3c01      	subs	r4, #1
  404190:	f855 3904 	ldr.w	r3, [r5], #-4
  404194:	4798      	blx	r3
  404196:	2c00      	cmp	r4, #0
  404198:	d1f9      	bne.n	40418e <__libc_fini_array+0x16>
  40419a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40419e:	f001 ba6b 	b.w	405678 <_fini>
  4041a2:	bf00      	nop
  4041a4:	00405688 	.word	0x00405688
  4041a8:	00405684 	.word	0x00405684

004041ac <__fputwc>:
  4041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4041b0:	b082      	sub	sp, #8
  4041b2:	4680      	mov	r8, r0
  4041b4:	4689      	mov	r9, r1
  4041b6:	4614      	mov	r4, r2
  4041b8:	f000 fb54 	bl	404864 <__locale_mb_cur_max>
  4041bc:	2801      	cmp	r0, #1
  4041be:	d036      	beq.n	40422e <__fputwc+0x82>
  4041c0:	464a      	mov	r2, r9
  4041c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4041c6:	a901      	add	r1, sp, #4
  4041c8:	4640      	mov	r0, r8
  4041ca:	f000 ff81 	bl	4050d0 <_wcrtomb_r>
  4041ce:	1c42      	adds	r2, r0, #1
  4041d0:	4606      	mov	r6, r0
  4041d2:	d025      	beq.n	404220 <__fputwc+0x74>
  4041d4:	b3a8      	cbz	r0, 404242 <__fputwc+0x96>
  4041d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4041da:	2500      	movs	r5, #0
  4041dc:	f10d 0a04 	add.w	sl, sp, #4
  4041e0:	e009      	b.n	4041f6 <__fputwc+0x4a>
  4041e2:	6823      	ldr	r3, [r4, #0]
  4041e4:	1c5a      	adds	r2, r3, #1
  4041e6:	6022      	str	r2, [r4, #0]
  4041e8:	f883 e000 	strb.w	lr, [r3]
  4041ec:	3501      	adds	r5, #1
  4041ee:	42b5      	cmp	r5, r6
  4041f0:	d227      	bcs.n	404242 <__fputwc+0x96>
  4041f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4041f6:	68a3      	ldr	r3, [r4, #8]
  4041f8:	3b01      	subs	r3, #1
  4041fa:	2b00      	cmp	r3, #0
  4041fc:	60a3      	str	r3, [r4, #8]
  4041fe:	daf0      	bge.n	4041e2 <__fputwc+0x36>
  404200:	69a7      	ldr	r7, [r4, #24]
  404202:	42bb      	cmp	r3, r7
  404204:	4671      	mov	r1, lr
  404206:	4622      	mov	r2, r4
  404208:	4640      	mov	r0, r8
  40420a:	db02      	blt.n	404212 <__fputwc+0x66>
  40420c:	f1be 0f0a 	cmp.w	lr, #10
  404210:	d1e7      	bne.n	4041e2 <__fputwc+0x36>
  404212:	f000 ff05 	bl	405020 <__swbuf_r>
  404216:	1c43      	adds	r3, r0, #1
  404218:	d1e8      	bne.n	4041ec <__fputwc+0x40>
  40421a:	b002      	add	sp, #8
  40421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404220:	89a3      	ldrh	r3, [r4, #12]
  404222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404226:	81a3      	strh	r3, [r4, #12]
  404228:	b002      	add	sp, #8
  40422a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40422e:	f109 33ff 	add.w	r3, r9, #4294967295
  404232:	2bfe      	cmp	r3, #254	; 0xfe
  404234:	d8c4      	bhi.n	4041c0 <__fputwc+0x14>
  404236:	fa5f fe89 	uxtb.w	lr, r9
  40423a:	4606      	mov	r6, r0
  40423c:	f88d e004 	strb.w	lr, [sp, #4]
  404240:	e7cb      	b.n	4041da <__fputwc+0x2e>
  404242:	4648      	mov	r0, r9
  404244:	b002      	add	sp, #8
  404246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40424a:	bf00      	nop

0040424c <_fputwc_r>:
  40424c:	b530      	push	{r4, r5, lr}
  40424e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404250:	f013 0f01 	tst.w	r3, #1
  404254:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404258:	4614      	mov	r4, r2
  40425a:	b083      	sub	sp, #12
  40425c:	4605      	mov	r5, r0
  40425e:	b29a      	uxth	r2, r3
  404260:	d101      	bne.n	404266 <_fputwc_r+0x1a>
  404262:	0590      	lsls	r0, r2, #22
  404264:	d51c      	bpl.n	4042a0 <_fputwc_r+0x54>
  404266:	0490      	lsls	r0, r2, #18
  404268:	d406      	bmi.n	404278 <_fputwc_r+0x2c>
  40426a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40426c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404274:	81a3      	strh	r3, [r4, #12]
  404276:	6662      	str	r2, [r4, #100]	; 0x64
  404278:	4628      	mov	r0, r5
  40427a:	4622      	mov	r2, r4
  40427c:	f7ff ff96 	bl	4041ac <__fputwc>
  404280:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404282:	07da      	lsls	r2, r3, #31
  404284:	4605      	mov	r5, r0
  404286:	d402      	bmi.n	40428e <_fputwc_r+0x42>
  404288:	89a3      	ldrh	r3, [r4, #12]
  40428a:	059b      	lsls	r3, r3, #22
  40428c:	d502      	bpl.n	404294 <_fputwc_r+0x48>
  40428e:	4628      	mov	r0, r5
  404290:	b003      	add	sp, #12
  404292:	bd30      	pop	{r4, r5, pc}
  404294:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404296:	f000 faf9 	bl	40488c <__retarget_lock_release_recursive>
  40429a:	4628      	mov	r0, r5
  40429c:	b003      	add	sp, #12
  40429e:	bd30      	pop	{r4, r5, pc}
  4042a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4042a2:	9101      	str	r1, [sp, #4]
  4042a4:	f000 faf0 	bl	404888 <__retarget_lock_acquire_recursive>
  4042a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042ac:	9901      	ldr	r1, [sp, #4]
  4042ae:	b29a      	uxth	r2, r3
  4042b0:	e7d9      	b.n	404266 <_fputwc_r+0x1a>
  4042b2:	bf00      	nop

004042b4 <_malloc_trim_r>:
  4042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4042b6:	4f24      	ldr	r7, [pc, #144]	; (404348 <_malloc_trim_r+0x94>)
  4042b8:	460c      	mov	r4, r1
  4042ba:	4606      	mov	r6, r0
  4042bc:	f7fe fd82 	bl	402dc4 <__malloc_lock>
  4042c0:	68bb      	ldr	r3, [r7, #8]
  4042c2:	685d      	ldr	r5, [r3, #4]
  4042c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4042c8:	310f      	adds	r1, #15
  4042ca:	f025 0503 	bic.w	r5, r5, #3
  4042ce:	4429      	add	r1, r5
  4042d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4042d4:	f021 010f 	bic.w	r1, r1, #15
  4042d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4042dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4042e0:	db07      	blt.n	4042f2 <_malloc_trim_r+0x3e>
  4042e2:	2100      	movs	r1, #0
  4042e4:	4630      	mov	r0, r6
  4042e6:	f7fe fd79 	bl	402ddc <_sbrk_r>
  4042ea:	68bb      	ldr	r3, [r7, #8]
  4042ec:	442b      	add	r3, r5
  4042ee:	4298      	cmp	r0, r3
  4042f0:	d004      	beq.n	4042fc <_malloc_trim_r+0x48>
  4042f2:	4630      	mov	r0, r6
  4042f4:	f7fe fd6c 	bl	402dd0 <__malloc_unlock>
  4042f8:	2000      	movs	r0, #0
  4042fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042fc:	4261      	negs	r1, r4
  4042fe:	4630      	mov	r0, r6
  404300:	f7fe fd6c 	bl	402ddc <_sbrk_r>
  404304:	3001      	adds	r0, #1
  404306:	d00d      	beq.n	404324 <_malloc_trim_r+0x70>
  404308:	4b10      	ldr	r3, [pc, #64]	; (40434c <_malloc_trim_r+0x98>)
  40430a:	68ba      	ldr	r2, [r7, #8]
  40430c:	6819      	ldr	r1, [r3, #0]
  40430e:	1b2d      	subs	r5, r5, r4
  404310:	f045 0501 	orr.w	r5, r5, #1
  404314:	4630      	mov	r0, r6
  404316:	1b09      	subs	r1, r1, r4
  404318:	6055      	str	r5, [r2, #4]
  40431a:	6019      	str	r1, [r3, #0]
  40431c:	f7fe fd58 	bl	402dd0 <__malloc_unlock>
  404320:	2001      	movs	r0, #1
  404322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404324:	2100      	movs	r1, #0
  404326:	4630      	mov	r0, r6
  404328:	f7fe fd58 	bl	402ddc <_sbrk_r>
  40432c:	68ba      	ldr	r2, [r7, #8]
  40432e:	1a83      	subs	r3, r0, r2
  404330:	2b0f      	cmp	r3, #15
  404332:	ddde      	ble.n	4042f2 <_malloc_trim_r+0x3e>
  404334:	4c06      	ldr	r4, [pc, #24]	; (404350 <_malloc_trim_r+0x9c>)
  404336:	4905      	ldr	r1, [pc, #20]	; (40434c <_malloc_trim_r+0x98>)
  404338:	6824      	ldr	r4, [r4, #0]
  40433a:	f043 0301 	orr.w	r3, r3, #1
  40433e:	1b00      	subs	r0, r0, r4
  404340:	6053      	str	r3, [r2, #4]
  404342:	6008      	str	r0, [r1, #0]
  404344:	e7d5      	b.n	4042f2 <_malloc_trim_r+0x3e>
  404346:	bf00      	nop
  404348:	20000440 	.word	0x20000440
  40434c:	20000a60 	.word	0x20000a60
  404350:	20000848 	.word	0x20000848

00404354 <_free_r>:
  404354:	2900      	cmp	r1, #0
  404356:	d044      	beq.n	4043e2 <_free_r+0x8e>
  404358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40435c:	460d      	mov	r5, r1
  40435e:	4680      	mov	r8, r0
  404360:	f7fe fd30 	bl	402dc4 <__malloc_lock>
  404364:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404368:	4969      	ldr	r1, [pc, #420]	; (404510 <_free_r+0x1bc>)
  40436a:	f027 0301 	bic.w	r3, r7, #1
  40436e:	f1a5 0408 	sub.w	r4, r5, #8
  404372:	18e2      	adds	r2, r4, r3
  404374:	688e      	ldr	r6, [r1, #8]
  404376:	6850      	ldr	r0, [r2, #4]
  404378:	42b2      	cmp	r2, r6
  40437a:	f020 0003 	bic.w	r0, r0, #3
  40437e:	d05e      	beq.n	40443e <_free_r+0xea>
  404380:	07fe      	lsls	r6, r7, #31
  404382:	6050      	str	r0, [r2, #4]
  404384:	d40b      	bmi.n	40439e <_free_r+0x4a>
  404386:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40438a:	1be4      	subs	r4, r4, r7
  40438c:	f101 0e08 	add.w	lr, r1, #8
  404390:	68a5      	ldr	r5, [r4, #8]
  404392:	4575      	cmp	r5, lr
  404394:	443b      	add	r3, r7
  404396:	d06d      	beq.n	404474 <_free_r+0x120>
  404398:	68e7      	ldr	r7, [r4, #12]
  40439a:	60ef      	str	r7, [r5, #12]
  40439c:	60bd      	str	r5, [r7, #8]
  40439e:	1815      	adds	r5, r2, r0
  4043a0:	686d      	ldr	r5, [r5, #4]
  4043a2:	07ed      	lsls	r5, r5, #31
  4043a4:	d53e      	bpl.n	404424 <_free_r+0xd0>
  4043a6:	f043 0201 	orr.w	r2, r3, #1
  4043aa:	6062      	str	r2, [r4, #4]
  4043ac:	50e3      	str	r3, [r4, r3]
  4043ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4043b2:	d217      	bcs.n	4043e4 <_free_r+0x90>
  4043b4:	08db      	lsrs	r3, r3, #3
  4043b6:	1c58      	adds	r0, r3, #1
  4043b8:	109a      	asrs	r2, r3, #2
  4043ba:	684d      	ldr	r5, [r1, #4]
  4043bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4043c0:	60a7      	str	r7, [r4, #8]
  4043c2:	2301      	movs	r3, #1
  4043c4:	4093      	lsls	r3, r2
  4043c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4043ca:	432b      	orrs	r3, r5
  4043cc:	3a08      	subs	r2, #8
  4043ce:	60e2      	str	r2, [r4, #12]
  4043d0:	604b      	str	r3, [r1, #4]
  4043d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4043d6:	60fc      	str	r4, [r7, #12]
  4043d8:	4640      	mov	r0, r8
  4043da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4043de:	f7fe bcf7 	b.w	402dd0 <__malloc_unlock>
  4043e2:	4770      	bx	lr
  4043e4:	0a5a      	lsrs	r2, r3, #9
  4043e6:	2a04      	cmp	r2, #4
  4043e8:	d852      	bhi.n	404490 <_free_r+0x13c>
  4043ea:	099a      	lsrs	r2, r3, #6
  4043ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4043f0:	00ff      	lsls	r7, r7, #3
  4043f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4043f6:	19c8      	adds	r0, r1, r7
  4043f8:	59ca      	ldr	r2, [r1, r7]
  4043fa:	3808      	subs	r0, #8
  4043fc:	4290      	cmp	r0, r2
  4043fe:	d04f      	beq.n	4044a0 <_free_r+0x14c>
  404400:	6851      	ldr	r1, [r2, #4]
  404402:	f021 0103 	bic.w	r1, r1, #3
  404406:	428b      	cmp	r3, r1
  404408:	d232      	bcs.n	404470 <_free_r+0x11c>
  40440a:	6892      	ldr	r2, [r2, #8]
  40440c:	4290      	cmp	r0, r2
  40440e:	d1f7      	bne.n	404400 <_free_r+0xac>
  404410:	68c3      	ldr	r3, [r0, #12]
  404412:	60a0      	str	r0, [r4, #8]
  404414:	60e3      	str	r3, [r4, #12]
  404416:	609c      	str	r4, [r3, #8]
  404418:	60c4      	str	r4, [r0, #12]
  40441a:	4640      	mov	r0, r8
  40441c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404420:	f7fe bcd6 	b.w	402dd0 <__malloc_unlock>
  404424:	6895      	ldr	r5, [r2, #8]
  404426:	4f3b      	ldr	r7, [pc, #236]	; (404514 <_free_r+0x1c0>)
  404428:	42bd      	cmp	r5, r7
  40442a:	4403      	add	r3, r0
  40442c:	d040      	beq.n	4044b0 <_free_r+0x15c>
  40442e:	68d0      	ldr	r0, [r2, #12]
  404430:	60e8      	str	r0, [r5, #12]
  404432:	f043 0201 	orr.w	r2, r3, #1
  404436:	6085      	str	r5, [r0, #8]
  404438:	6062      	str	r2, [r4, #4]
  40443a:	50e3      	str	r3, [r4, r3]
  40443c:	e7b7      	b.n	4043ae <_free_r+0x5a>
  40443e:	07ff      	lsls	r7, r7, #31
  404440:	4403      	add	r3, r0
  404442:	d407      	bmi.n	404454 <_free_r+0x100>
  404444:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404448:	1aa4      	subs	r4, r4, r2
  40444a:	4413      	add	r3, r2
  40444c:	68a0      	ldr	r0, [r4, #8]
  40444e:	68e2      	ldr	r2, [r4, #12]
  404450:	60c2      	str	r2, [r0, #12]
  404452:	6090      	str	r0, [r2, #8]
  404454:	4a30      	ldr	r2, [pc, #192]	; (404518 <_free_r+0x1c4>)
  404456:	6812      	ldr	r2, [r2, #0]
  404458:	f043 0001 	orr.w	r0, r3, #1
  40445c:	4293      	cmp	r3, r2
  40445e:	6060      	str	r0, [r4, #4]
  404460:	608c      	str	r4, [r1, #8]
  404462:	d3b9      	bcc.n	4043d8 <_free_r+0x84>
  404464:	4b2d      	ldr	r3, [pc, #180]	; (40451c <_free_r+0x1c8>)
  404466:	4640      	mov	r0, r8
  404468:	6819      	ldr	r1, [r3, #0]
  40446a:	f7ff ff23 	bl	4042b4 <_malloc_trim_r>
  40446e:	e7b3      	b.n	4043d8 <_free_r+0x84>
  404470:	4610      	mov	r0, r2
  404472:	e7cd      	b.n	404410 <_free_r+0xbc>
  404474:	1811      	adds	r1, r2, r0
  404476:	6849      	ldr	r1, [r1, #4]
  404478:	07c9      	lsls	r1, r1, #31
  40447a:	d444      	bmi.n	404506 <_free_r+0x1b2>
  40447c:	6891      	ldr	r1, [r2, #8]
  40447e:	68d2      	ldr	r2, [r2, #12]
  404480:	60ca      	str	r2, [r1, #12]
  404482:	4403      	add	r3, r0
  404484:	f043 0001 	orr.w	r0, r3, #1
  404488:	6091      	str	r1, [r2, #8]
  40448a:	6060      	str	r0, [r4, #4]
  40448c:	50e3      	str	r3, [r4, r3]
  40448e:	e7a3      	b.n	4043d8 <_free_r+0x84>
  404490:	2a14      	cmp	r2, #20
  404492:	d816      	bhi.n	4044c2 <_free_r+0x16e>
  404494:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404498:	00ff      	lsls	r7, r7, #3
  40449a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40449e:	e7aa      	b.n	4043f6 <_free_r+0xa2>
  4044a0:	10aa      	asrs	r2, r5, #2
  4044a2:	2301      	movs	r3, #1
  4044a4:	684d      	ldr	r5, [r1, #4]
  4044a6:	4093      	lsls	r3, r2
  4044a8:	432b      	orrs	r3, r5
  4044aa:	604b      	str	r3, [r1, #4]
  4044ac:	4603      	mov	r3, r0
  4044ae:	e7b0      	b.n	404412 <_free_r+0xbe>
  4044b0:	f043 0201 	orr.w	r2, r3, #1
  4044b4:	614c      	str	r4, [r1, #20]
  4044b6:	610c      	str	r4, [r1, #16]
  4044b8:	60e5      	str	r5, [r4, #12]
  4044ba:	60a5      	str	r5, [r4, #8]
  4044bc:	6062      	str	r2, [r4, #4]
  4044be:	50e3      	str	r3, [r4, r3]
  4044c0:	e78a      	b.n	4043d8 <_free_r+0x84>
  4044c2:	2a54      	cmp	r2, #84	; 0x54
  4044c4:	d806      	bhi.n	4044d4 <_free_r+0x180>
  4044c6:	0b1a      	lsrs	r2, r3, #12
  4044c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4044cc:	00ff      	lsls	r7, r7, #3
  4044ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4044d2:	e790      	b.n	4043f6 <_free_r+0xa2>
  4044d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4044d8:	d806      	bhi.n	4044e8 <_free_r+0x194>
  4044da:	0bda      	lsrs	r2, r3, #15
  4044dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4044e0:	00ff      	lsls	r7, r7, #3
  4044e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4044e6:	e786      	b.n	4043f6 <_free_r+0xa2>
  4044e8:	f240 5054 	movw	r0, #1364	; 0x554
  4044ec:	4282      	cmp	r2, r0
  4044ee:	d806      	bhi.n	4044fe <_free_r+0x1aa>
  4044f0:	0c9a      	lsrs	r2, r3, #18
  4044f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4044f6:	00ff      	lsls	r7, r7, #3
  4044f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4044fc:	e77b      	b.n	4043f6 <_free_r+0xa2>
  4044fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404502:	257e      	movs	r5, #126	; 0x7e
  404504:	e777      	b.n	4043f6 <_free_r+0xa2>
  404506:	f043 0101 	orr.w	r1, r3, #1
  40450a:	6061      	str	r1, [r4, #4]
  40450c:	6013      	str	r3, [r2, #0]
  40450e:	e763      	b.n	4043d8 <_free_r+0x84>
  404510:	20000440 	.word	0x20000440
  404514:	20000448 	.word	0x20000448
  404518:	2000084c 	.word	0x2000084c
  40451c:	20000a90 	.word	0x20000a90

00404520 <__sfvwrite_r>:
  404520:	6893      	ldr	r3, [r2, #8]
  404522:	2b00      	cmp	r3, #0
  404524:	d073      	beq.n	40460e <__sfvwrite_r+0xee>
  404526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40452a:	898b      	ldrh	r3, [r1, #12]
  40452c:	b083      	sub	sp, #12
  40452e:	460c      	mov	r4, r1
  404530:	0719      	lsls	r1, r3, #28
  404532:	9000      	str	r0, [sp, #0]
  404534:	4616      	mov	r6, r2
  404536:	d526      	bpl.n	404586 <__sfvwrite_r+0x66>
  404538:	6922      	ldr	r2, [r4, #16]
  40453a:	b322      	cbz	r2, 404586 <__sfvwrite_r+0x66>
  40453c:	f013 0002 	ands.w	r0, r3, #2
  404540:	6835      	ldr	r5, [r6, #0]
  404542:	d02c      	beq.n	40459e <__sfvwrite_r+0x7e>
  404544:	f04f 0900 	mov.w	r9, #0
  404548:	4fb0      	ldr	r7, [pc, #704]	; (40480c <__sfvwrite_r+0x2ec>)
  40454a:	46c8      	mov	r8, r9
  40454c:	46b2      	mov	sl, r6
  40454e:	45b8      	cmp	r8, r7
  404550:	4643      	mov	r3, r8
  404552:	464a      	mov	r2, r9
  404554:	bf28      	it	cs
  404556:	463b      	movcs	r3, r7
  404558:	9800      	ldr	r0, [sp, #0]
  40455a:	f1b8 0f00 	cmp.w	r8, #0
  40455e:	d050      	beq.n	404602 <__sfvwrite_r+0xe2>
  404560:	69e1      	ldr	r1, [r4, #28]
  404562:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404564:	47b0      	blx	r6
  404566:	2800      	cmp	r0, #0
  404568:	dd58      	ble.n	40461c <__sfvwrite_r+0xfc>
  40456a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40456e:	1a1b      	subs	r3, r3, r0
  404570:	4481      	add	r9, r0
  404572:	eba8 0800 	sub.w	r8, r8, r0
  404576:	f8ca 3008 	str.w	r3, [sl, #8]
  40457a:	2b00      	cmp	r3, #0
  40457c:	d1e7      	bne.n	40454e <__sfvwrite_r+0x2e>
  40457e:	2000      	movs	r0, #0
  404580:	b003      	add	sp, #12
  404582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404586:	4621      	mov	r1, r4
  404588:	9800      	ldr	r0, [sp, #0]
  40458a:	f7ff fc51 	bl	403e30 <__swsetup_r>
  40458e:	2800      	cmp	r0, #0
  404590:	f040 8133 	bne.w	4047fa <__sfvwrite_r+0x2da>
  404594:	89a3      	ldrh	r3, [r4, #12]
  404596:	6835      	ldr	r5, [r6, #0]
  404598:	f013 0002 	ands.w	r0, r3, #2
  40459c:	d1d2      	bne.n	404544 <__sfvwrite_r+0x24>
  40459e:	f013 0901 	ands.w	r9, r3, #1
  4045a2:	d145      	bne.n	404630 <__sfvwrite_r+0x110>
  4045a4:	464f      	mov	r7, r9
  4045a6:	9601      	str	r6, [sp, #4]
  4045a8:	b337      	cbz	r7, 4045f8 <__sfvwrite_r+0xd8>
  4045aa:	059a      	lsls	r2, r3, #22
  4045ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4045b0:	f140 8083 	bpl.w	4046ba <__sfvwrite_r+0x19a>
  4045b4:	4547      	cmp	r7, r8
  4045b6:	46c3      	mov	fp, r8
  4045b8:	f0c0 80ab 	bcc.w	404712 <__sfvwrite_r+0x1f2>
  4045bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4045c0:	f040 80ac 	bne.w	40471c <__sfvwrite_r+0x1fc>
  4045c4:	6820      	ldr	r0, [r4, #0]
  4045c6:	46ba      	mov	sl, r7
  4045c8:	465a      	mov	r2, fp
  4045ca:	4649      	mov	r1, r9
  4045cc:	f000 fada 	bl	404b84 <memmove>
  4045d0:	68a2      	ldr	r2, [r4, #8]
  4045d2:	6823      	ldr	r3, [r4, #0]
  4045d4:	eba2 0208 	sub.w	r2, r2, r8
  4045d8:	445b      	add	r3, fp
  4045da:	60a2      	str	r2, [r4, #8]
  4045dc:	6023      	str	r3, [r4, #0]
  4045de:	9a01      	ldr	r2, [sp, #4]
  4045e0:	6893      	ldr	r3, [r2, #8]
  4045e2:	eba3 030a 	sub.w	r3, r3, sl
  4045e6:	44d1      	add	r9, sl
  4045e8:	eba7 070a 	sub.w	r7, r7, sl
  4045ec:	6093      	str	r3, [r2, #8]
  4045ee:	2b00      	cmp	r3, #0
  4045f0:	d0c5      	beq.n	40457e <__sfvwrite_r+0x5e>
  4045f2:	89a3      	ldrh	r3, [r4, #12]
  4045f4:	2f00      	cmp	r7, #0
  4045f6:	d1d8      	bne.n	4045aa <__sfvwrite_r+0x8a>
  4045f8:	f8d5 9000 	ldr.w	r9, [r5]
  4045fc:	686f      	ldr	r7, [r5, #4]
  4045fe:	3508      	adds	r5, #8
  404600:	e7d2      	b.n	4045a8 <__sfvwrite_r+0x88>
  404602:	f8d5 9000 	ldr.w	r9, [r5]
  404606:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40460a:	3508      	adds	r5, #8
  40460c:	e79f      	b.n	40454e <__sfvwrite_r+0x2e>
  40460e:	2000      	movs	r0, #0
  404610:	4770      	bx	lr
  404612:	4621      	mov	r1, r4
  404614:	9800      	ldr	r0, [sp, #0]
  404616:	f7ff fd1f 	bl	404058 <_fflush_r>
  40461a:	b370      	cbz	r0, 40467a <__sfvwrite_r+0x15a>
  40461c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404624:	f04f 30ff 	mov.w	r0, #4294967295
  404628:	81a3      	strh	r3, [r4, #12]
  40462a:	b003      	add	sp, #12
  40462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404630:	4681      	mov	r9, r0
  404632:	4633      	mov	r3, r6
  404634:	464e      	mov	r6, r9
  404636:	46a8      	mov	r8, r5
  404638:	469a      	mov	sl, r3
  40463a:	464d      	mov	r5, r9
  40463c:	b34e      	cbz	r6, 404692 <__sfvwrite_r+0x172>
  40463e:	b380      	cbz	r0, 4046a2 <__sfvwrite_r+0x182>
  404640:	6820      	ldr	r0, [r4, #0]
  404642:	6923      	ldr	r3, [r4, #16]
  404644:	6962      	ldr	r2, [r4, #20]
  404646:	45b1      	cmp	r9, r6
  404648:	46cb      	mov	fp, r9
  40464a:	bf28      	it	cs
  40464c:	46b3      	movcs	fp, r6
  40464e:	4298      	cmp	r0, r3
  404650:	465f      	mov	r7, fp
  404652:	d904      	bls.n	40465e <__sfvwrite_r+0x13e>
  404654:	68a3      	ldr	r3, [r4, #8]
  404656:	4413      	add	r3, r2
  404658:	459b      	cmp	fp, r3
  40465a:	f300 80a6 	bgt.w	4047aa <__sfvwrite_r+0x28a>
  40465e:	4593      	cmp	fp, r2
  404660:	db4b      	blt.n	4046fa <__sfvwrite_r+0x1da>
  404662:	4613      	mov	r3, r2
  404664:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404666:	69e1      	ldr	r1, [r4, #28]
  404668:	9800      	ldr	r0, [sp, #0]
  40466a:	462a      	mov	r2, r5
  40466c:	47b8      	blx	r7
  40466e:	1e07      	subs	r7, r0, #0
  404670:	ddd4      	ble.n	40461c <__sfvwrite_r+0xfc>
  404672:	ebb9 0907 	subs.w	r9, r9, r7
  404676:	d0cc      	beq.n	404612 <__sfvwrite_r+0xf2>
  404678:	2001      	movs	r0, #1
  40467a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40467e:	1bdb      	subs	r3, r3, r7
  404680:	443d      	add	r5, r7
  404682:	1bf6      	subs	r6, r6, r7
  404684:	f8ca 3008 	str.w	r3, [sl, #8]
  404688:	2b00      	cmp	r3, #0
  40468a:	f43f af78 	beq.w	40457e <__sfvwrite_r+0x5e>
  40468e:	2e00      	cmp	r6, #0
  404690:	d1d5      	bne.n	40463e <__sfvwrite_r+0x11e>
  404692:	f108 0308 	add.w	r3, r8, #8
  404696:	e913 0060 	ldmdb	r3, {r5, r6}
  40469a:	4698      	mov	r8, r3
  40469c:	3308      	adds	r3, #8
  40469e:	2e00      	cmp	r6, #0
  4046a0:	d0f9      	beq.n	404696 <__sfvwrite_r+0x176>
  4046a2:	4632      	mov	r2, r6
  4046a4:	210a      	movs	r1, #10
  4046a6:	4628      	mov	r0, r5
  4046a8:	f000 f982 	bl	4049b0 <memchr>
  4046ac:	2800      	cmp	r0, #0
  4046ae:	f000 80a1 	beq.w	4047f4 <__sfvwrite_r+0x2d4>
  4046b2:	3001      	adds	r0, #1
  4046b4:	eba0 0905 	sub.w	r9, r0, r5
  4046b8:	e7c2      	b.n	404640 <__sfvwrite_r+0x120>
  4046ba:	6820      	ldr	r0, [r4, #0]
  4046bc:	6923      	ldr	r3, [r4, #16]
  4046be:	4298      	cmp	r0, r3
  4046c0:	d802      	bhi.n	4046c8 <__sfvwrite_r+0x1a8>
  4046c2:	6963      	ldr	r3, [r4, #20]
  4046c4:	429f      	cmp	r7, r3
  4046c6:	d25d      	bcs.n	404784 <__sfvwrite_r+0x264>
  4046c8:	45b8      	cmp	r8, r7
  4046ca:	bf28      	it	cs
  4046cc:	46b8      	movcs	r8, r7
  4046ce:	4642      	mov	r2, r8
  4046d0:	4649      	mov	r1, r9
  4046d2:	f000 fa57 	bl	404b84 <memmove>
  4046d6:	68a3      	ldr	r3, [r4, #8]
  4046d8:	6822      	ldr	r2, [r4, #0]
  4046da:	eba3 0308 	sub.w	r3, r3, r8
  4046de:	4442      	add	r2, r8
  4046e0:	60a3      	str	r3, [r4, #8]
  4046e2:	6022      	str	r2, [r4, #0]
  4046e4:	b10b      	cbz	r3, 4046ea <__sfvwrite_r+0x1ca>
  4046e6:	46c2      	mov	sl, r8
  4046e8:	e779      	b.n	4045de <__sfvwrite_r+0xbe>
  4046ea:	4621      	mov	r1, r4
  4046ec:	9800      	ldr	r0, [sp, #0]
  4046ee:	f7ff fcb3 	bl	404058 <_fflush_r>
  4046f2:	2800      	cmp	r0, #0
  4046f4:	d192      	bne.n	40461c <__sfvwrite_r+0xfc>
  4046f6:	46c2      	mov	sl, r8
  4046f8:	e771      	b.n	4045de <__sfvwrite_r+0xbe>
  4046fa:	465a      	mov	r2, fp
  4046fc:	4629      	mov	r1, r5
  4046fe:	f000 fa41 	bl	404b84 <memmove>
  404702:	68a2      	ldr	r2, [r4, #8]
  404704:	6823      	ldr	r3, [r4, #0]
  404706:	eba2 020b 	sub.w	r2, r2, fp
  40470a:	445b      	add	r3, fp
  40470c:	60a2      	str	r2, [r4, #8]
  40470e:	6023      	str	r3, [r4, #0]
  404710:	e7af      	b.n	404672 <__sfvwrite_r+0x152>
  404712:	6820      	ldr	r0, [r4, #0]
  404714:	46b8      	mov	r8, r7
  404716:	46ba      	mov	sl, r7
  404718:	46bb      	mov	fp, r7
  40471a:	e755      	b.n	4045c8 <__sfvwrite_r+0xa8>
  40471c:	6962      	ldr	r2, [r4, #20]
  40471e:	6820      	ldr	r0, [r4, #0]
  404720:	6921      	ldr	r1, [r4, #16]
  404722:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404726:	eba0 0a01 	sub.w	sl, r0, r1
  40472a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40472e:	f10a 0001 	add.w	r0, sl, #1
  404732:	ea4f 0868 	mov.w	r8, r8, asr #1
  404736:	4438      	add	r0, r7
  404738:	4540      	cmp	r0, r8
  40473a:	4642      	mov	r2, r8
  40473c:	bf84      	itt	hi
  40473e:	4680      	movhi	r8, r0
  404740:	4642      	movhi	r2, r8
  404742:	055b      	lsls	r3, r3, #21
  404744:	d544      	bpl.n	4047d0 <__sfvwrite_r+0x2b0>
  404746:	4611      	mov	r1, r2
  404748:	9800      	ldr	r0, [sp, #0]
  40474a:	f7fe f83d 	bl	4027c8 <_malloc_r>
  40474e:	4683      	mov	fp, r0
  404750:	2800      	cmp	r0, #0
  404752:	d055      	beq.n	404800 <__sfvwrite_r+0x2e0>
  404754:	4652      	mov	r2, sl
  404756:	6921      	ldr	r1, [r4, #16]
  404758:	f000 f97a 	bl	404a50 <memcpy>
  40475c:	89a3      	ldrh	r3, [r4, #12]
  40475e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404766:	81a3      	strh	r3, [r4, #12]
  404768:	eb0b 000a 	add.w	r0, fp, sl
  40476c:	eba8 030a 	sub.w	r3, r8, sl
  404770:	f8c4 b010 	str.w	fp, [r4, #16]
  404774:	f8c4 8014 	str.w	r8, [r4, #20]
  404778:	6020      	str	r0, [r4, #0]
  40477a:	60a3      	str	r3, [r4, #8]
  40477c:	46b8      	mov	r8, r7
  40477e:	46ba      	mov	sl, r7
  404780:	46bb      	mov	fp, r7
  404782:	e721      	b.n	4045c8 <__sfvwrite_r+0xa8>
  404784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404788:	42b9      	cmp	r1, r7
  40478a:	bf28      	it	cs
  40478c:	4639      	movcs	r1, r7
  40478e:	464a      	mov	r2, r9
  404790:	fb91 f1f3 	sdiv	r1, r1, r3
  404794:	9800      	ldr	r0, [sp, #0]
  404796:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404798:	fb03 f301 	mul.w	r3, r3, r1
  40479c:	69e1      	ldr	r1, [r4, #28]
  40479e:	47b0      	blx	r6
  4047a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4047a4:	f73f af1b 	bgt.w	4045de <__sfvwrite_r+0xbe>
  4047a8:	e738      	b.n	40461c <__sfvwrite_r+0xfc>
  4047aa:	461a      	mov	r2, r3
  4047ac:	4629      	mov	r1, r5
  4047ae:	9301      	str	r3, [sp, #4]
  4047b0:	f000 f9e8 	bl	404b84 <memmove>
  4047b4:	6822      	ldr	r2, [r4, #0]
  4047b6:	9b01      	ldr	r3, [sp, #4]
  4047b8:	9800      	ldr	r0, [sp, #0]
  4047ba:	441a      	add	r2, r3
  4047bc:	6022      	str	r2, [r4, #0]
  4047be:	4621      	mov	r1, r4
  4047c0:	f7ff fc4a 	bl	404058 <_fflush_r>
  4047c4:	9b01      	ldr	r3, [sp, #4]
  4047c6:	2800      	cmp	r0, #0
  4047c8:	f47f af28 	bne.w	40461c <__sfvwrite_r+0xfc>
  4047cc:	461f      	mov	r7, r3
  4047ce:	e750      	b.n	404672 <__sfvwrite_r+0x152>
  4047d0:	9800      	ldr	r0, [sp, #0]
  4047d2:	f000 fa3b 	bl	404c4c <_realloc_r>
  4047d6:	4683      	mov	fp, r0
  4047d8:	2800      	cmp	r0, #0
  4047da:	d1c5      	bne.n	404768 <__sfvwrite_r+0x248>
  4047dc:	9d00      	ldr	r5, [sp, #0]
  4047de:	6921      	ldr	r1, [r4, #16]
  4047e0:	4628      	mov	r0, r5
  4047e2:	f7ff fdb7 	bl	404354 <_free_r>
  4047e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ea:	220c      	movs	r2, #12
  4047ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4047f0:	602a      	str	r2, [r5, #0]
  4047f2:	e715      	b.n	404620 <__sfvwrite_r+0x100>
  4047f4:	f106 0901 	add.w	r9, r6, #1
  4047f8:	e722      	b.n	404640 <__sfvwrite_r+0x120>
  4047fa:	f04f 30ff 	mov.w	r0, #4294967295
  4047fe:	e6bf      	b.n	404580 <__sfvwrite_r+0x60>
  404800:	9a00      	ldr	r2, [sp, #0]
  404802:	230c      	movs	r3, #12
  404804:	6013      	str	r3, [r2, #0]
  404806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40480a:	e709      	b.n	404620 <__sfvwrite_r+0x100>
  40480c:	7ffffc00 	.word	0x7ffffc00

00404810 <_fwalk_reent>:
  404810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404814:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404818:	d01f      	beq.n	40485a <_fwalk_reent+0x4a>
  40481a:	4688      	mov	r8, r1
  40481c:	4606      	mov	r6, r0
  40481e:	f04f 0900 	mov.w	r9, #0
  404822:	687d      	ldr	r5, [r7, #4]
  404824:	68bc      	ldr	r4, [r7, #8]
  404826:	3d01      	subs	r5, #1
  404828:	d411      	bmi.n	40484e <_fwalk_reent+0x3e>
  40482a:	89a3      	ldrh	r3, [r4, #12]
  40482c:	2b01      	cmp	r3, #1
  40482e:	f105 35ff 	add.w	r5, r5, #4294967295
  404832:	d908      	bls.n	404846 <_fwalk_reent+0x36>
  404834:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404838:	3301      	adds	r3, #1
  40483a:	4621      	mov	r1, r4
  40483c:	4630      	mov	r0, r6
  40483e:	d002      	beq.n	404846 <_fwalk_reent+0x36>
  404840:	47c0      	blx	r8
  404842:	ea49 0900 	orr.w	r9, r9, r0
  404846:	1c6b      	adds	r3, r5, #1
  404848:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40484c:	d1ed      	bne.n	40482a <_fwalk_reent+0x1a>
  40484e:	683f      	ldr	r7, [r7, #0]
  404850:	2f00      	cmp	r7, #0
  404852:	d1e6      	bne.n	404822 <_fwalk_reent+0x12>
  404854:	4648      	mov	r0, r9
  404856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40485a:	46b9      	mov	r9, r7
  40485c:	4648      	mov	r0, r9
  40485e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404862:	bf00      	nop

00404864 <__locale_mb_cur_max>:
  404864:	4b04      	ldr	r3, [pc, #16]	; (404878 <__locale_mb_cur_max+0x14>)
  404866:	4a05      	ldr	r2, [pc, #20]	; (40487c <__locale_mb_cur_max+0x18>)
  404868:	681b      	ldr	r3, [r3, #0]
  40486a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40486c:	2b00      	cmp	r3, #0
  40486e:	bf08      	it	eq
  404870:	4613      	moveq	r3, r2
  404872:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404876:	4770      	bx	lr
  404878:	20000010 	.word	0x20000010
  40487c:	20000854 	.word	0x20000854

00404880 <__retarget_lock_init_recursive>:
  404880:	4770      	bx	lr
  404882:	bf00      	nop

00404884 <__retarget_lock_close_recursive>:
  404884:	4770      	bx	lr
  404886:	bf00      	nop

00404888 <__retarget_lock_acquire_recursive>:
  404888:	4770      	bx	lr
  40488a:	bf00      	nop

0040488c <__retarget_lock_release_recursive>:
  40488c:	4770      	bx	lr
  40488e:	bf00      	nop

00404890 <__swhatbuf_r>:
  404890:	b570      	push	{r4, r5, r6, lr}
  404892:	460c      	mov	r4, r1
  404894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404898:	2900      	cmp	r1, #0
  40489a:	b090      	sub	sp, #64	; 0x40
  40489c:	4615      	mov	r5, r2
  40489e:	461e      	mov	r6, r3
  4048a0:	db14      	blt.n	4048cc <__swhatbuf_r+0x3c>
  4048a2:	aa01      	add	r2, sp, #4
  4048a4:	f000 fd38 	bl	405318 <_fstat_r>
  4048a8:	2800      	cmp	r0, #0
  4048aa:	db0f      	blt.n	4048cc <__swhatbuf_r+0x3c>
  4048ac:	9a02      	ldr	r2, [sp, #8]
  4048ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4048b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4048b6:	fab2 f282 	clz	r2, r2
  4048ba:	0952      	lsrs	r2, r2, #5
  4048bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4048c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4048c4:	6032      	str	r2, [r6, #0]
  4048c6:	602b      	str	r3, [r5, #0]
  4048c8:	b010      	add	sp, #64	; 0x40
  4048ca:	bd70      	pop	{r4, r5, r6, pc}
  4048cc:	89a2      	ldrh	r2, [r4, #12]
  4048ce:	2300      	movs	r3, #0
  4048d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4048d4:	6033      	str	r3, [r6, #0]
  4048d6:	d004      	beq.n	4048e2 <__swhatbuf_r+0x52>
  4048d8:	2240      	movs	r2, #64	; 0x40
  4048da:	4618      	mov	r0, r3
  4048dc:	602a      	str	r2, [r5, #0]
  4048de:	b010      	add	sp, #64	; 0x40
  4048e0:	bd70      	pop	{r4, r5, r6, pc}
  4048e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4048e6:	602b      	str	r3, [r5, #0]
  4048e8:	b010      	add	sp, #64	; 0x40
  4048ea:	bd70      	pop	{r4, r5, r6, pc}

004048ec <__smakebuf_r>:
  4048ec:	898a      	ldrh	r2, [r1, #12]
  4048ee:	0792      	lsls	r2, r2, #30
  4048f0:	460b      	mov	r3, r1
  4048f2:	d506      	bpl.n	404902 <__smakebuf_r+0x16>
  4048f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4048f8:	2101      	movs	r1, #1
  4048fa:	601a      	str	r2, [r3, #0]
  4048fc:	611a      	str	r2, [r3, #16]
  4048fe:	6159      	str	r1, [r3, #20]
  404900:	4770      	bx	lr
  404902:	b5f0      	push	{r4, r5, r6, r7, lr}
  404904:	b083      	sub	sp, #12
  404906:	ab01      	add	r3, sp, #4
  404908:	466a      	mov	r2, sp
  40490a:	460c      	mov	r4, r1
  40490c:	4606      	mov	r6, r0
  40490e:	f7ff ffbf 	bl	404890 <__swhatbuf_r>
  404912:	9900      	ldr	r1, [sp, #0]
  404914:	4605      	mov	r5, r0
  404916:	4630      	mov	r0, r6
  404918:	f7fd ff56 	bl	4027c8 <_malloc_r>
  40491c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404920:	b1d8      	cbz	r0, 40495a <__smakebuf_r+0x6e>
  404922:	9a01      	ldr	r2, [sp, #4]
  404924:	4f15      	ldr	r7, [pc, #84]	; (40497c <__smakebuf_r+0x90>)
  404926:	9900      	ldr	r1, [sp, #0]
  404928:	63f7      	str	r7, [r6, #60]	; 0x3c
  40492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40492e:	81a3      	strh	r3, [r4, #12]
  404930:	6020      	str	r0, [r4, #0]
  404932:	6120      	str	r0, [r4, #16]
  404934:	6161      	str	r1, [r4, #20]
  404936:	b91a      	cbnz	r2, 404940 <__smakebuf_r+0x54>
  404938:	432b      	orrs	r3, r5
  40493a:	81a3      	strh	r3, [r4, #12]
  40493c:	b003      	add	sp, #12
  40493e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404940:	4630      	mov	r0, r6
  404942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404946:	f000 fcfb 	bl	405340 <_isatty_r>
  40494a:	b1a0      	cbz	r0, 404976 <__smakebuf_r+0x8a>
  40494c:	89a3      	ldrh	r3, [r4, #12]
  40494e:	f023 0303 	bic.w	r3, r3, #3
  404952:	f043 0301 	orr.w	r3, r3, #1
  404956:	b21b      	sxth	r3, r3
  404958:	e7ee      	b.n	404938 <__smakebuf_r+0x4c>
  40495a:	059a      	lsls	r2, r3, #22
  40495c:	d4ee      	bmi.n	40493c <__smakebuf_r+0x50>
  40495e:	f023 0303 	bic.w	r3, r3, #3
  404962:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404966:	f043 0302 	orr.w	r3, r3, #2
  40496a:	2101      	movs	r1, #1
  40496c:	81a3      	strh	r3, [r4, #12]
  40496e:	6022      	str	r2, [r4, #0]
  404970:	6122      	str	r2, [r4, #16]
  404972:	6161      	str	r1, [r4, #20]
  404974:	e7e2      	b.n	40493c <__smakebuf_r+0x50>
  404976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40497a:	e7dd      	b.n	404938 <__smakebuf_r+0x4c>
  40497c:	004040ad 	.word	0x004040ad

00404980 <__ascii_mbtowc>:
  404980:	b082      	sub	sp, #8
  404982:	b149      	cbz	r1, 404998 <__ascii_mbtowc+0x18>
  404984:	b15a      	cbz	r2, 40499e <__ascii_mbtowc+0x1e>
  404986:	b16b      	cbz	r3, 4049a4 <__ascii_mbtowc+0x24>
  404988:	7813      	ldrb	r3, [r2, #0]
  40498a:	600b      	str	r3, [r1, #0]
  40498c:	7812      	ldrb	r2, [r2, #0]
  40498e:	1c10      	adds	r0, r2, #0
  404990:	bf18      	it	ne
  404992:	2001      	movne	r0, #1
  404994:	b002      	add	sp, #8
  404996:	4770      	bx	lr
  404998:	a901      	add	r1, sp, #4
  40499a:	2a00      	cmp	r2, #0
  40499c:	d1f3      	bne.n	404986 <__ascii_mbtowc+0x6>
  40499e:	4610      	mov	r0, r2
  4049a0:	b002      	add	sp, #8
  4049a2:	4770      	bx	lr
  4049a4:	f06f 0001 	mvn.w	r0, #1
  4049a8:	e7f4      	b.n	404994 <__ascii_mbtowc+0x14>
  4049aa:	bf00      	nop
  4049ac:	0000      	movs	r0, r0
	...

004049b0 <memchr>:
  4049b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4049b4:	2a10      	cmp	r2, #16
  4049b6:	db2b      	blt.n	404a10 <memchr+0x60>
  4049b8:	f010 0f07 	tst.w	r0, #7
  4049bc:	d008      	beq.n	4049d0 <memchr+0x20>
  4049be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4049c2:	3a01      	subs	r2, #1
  4049c4:	428b      	cmp	r3, r1
  4049c6:	d02d      	beq.n	404a24 <memchr+0x74>
  4049c8:	f010 0f07 	tst.w	r0, #7
  4049cc:	b342      	cbz	r2, 404a20 <memchr+0x70>
  4049ce:	d1f6      	bne.n	4049be <memchr+0xe>
  4049d0:	b4f0      	push	{r4, r5, r6, r7}
  4049d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4049d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4049da:	f022 0407 	bic.w	r4, r2, #7
  4049de:	f07f 0700 	mvns.w	r7, #0
  4049e2:	2300      	movs	r3, #0
  4049e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4049e8:	3c08      	subs	r4, #8
  4049ea:	ea85 0501 	eor.w	r5, r5, r1
  4049ee:	ea86 0601 	eor.w	r6, r6, r1
  4049f2:	fa85 f547 	uadd8	r5, r5, r7
  4049f6:	faa3 f587 	sel	r5, r3, r7
  4049fa:	fa86 f647 	uadd8	r6, r6, r7
  4049fe:	faa5 f687 	sel	r6, r5, r7
  404a02:	b98e      	cbnz	r6, 404a28 <memchr+0x78>
  404a04:	d1ee      	bne.n	4049e4 <memchr+0x34>
  404a06:	bcf0      	pop	{r4, r5, r6, r7}
  404a08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404a0c:	f002 0207 	and.w	r2, r2, #7
  404a10:	b132      	cbz	r2, 404a20 <memchr+0x70>
  404a12:	f810 3b01 	ldrb.w	r3, [r0], #1
  404a16:	3a01      	subs	r2, #1
  404a18:	ea83 0301 	eor.w	r3, r3, r1
  404a1c:	b113      	cbz	r3, 404a24 <memchr+0x74>
  404a1e:	d1f8      	bne.n	404a12 <memchr+0x62>
  404a20:	2000      	movs	r0, #0
  404a22:	4770      	bx	lr
  404a24:	3801      	subs	r0, #1
  404a26:	4770      	bx	lr
  404a28:	2d00      	cmp	r5, #0
  404a2a:	bf06      	itte	eq
  404a2c:	4635      	moveq	r5, r6
  404a2e:	3803      	subeq	r0, #3
  404a30:	3807      	subne	r0, #7
  404a32:	f015 0f01 	tst.w	r5, #1
  404a36:	d107      	bne.n	404a48 <memchr+0x98>
  404a38:	3001      	adds	r0, #1
  404a3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404a3e:	bf02      	ittt	eq
  404a40:	3001      	addeq	r0, #1
  404a42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404a46:	3001      	addeq	r0, #1
  404a48:	bcf0      	pop	{r4, r5, r6, r7}
  404a4a:	3801      	subs	r0, #1
  404a4c:	4770      	bx	lr
  404a4e:	bf00      	nop

00404a50 <memcpy>:
  404a50:	4684      	mov	ip, r0
  404a52:	ea41 0300 	orr.w	r3, r1, r0
  404a56:	f013 0303 	ands.w	r3, r3, #3
  404a5a:	d16d      	bne.n	404b38 <memcpy+0xe8>
  404a5c:	3a40      	subs	r2, #64	; 0x40
  404a5e:	d341      	bcc.n	404ae4 <memcpy+0x94>
  404a60:	f851 3b04 	ldr.w	r3, [r1], #4
  404a64:	f840 3b04 	str.w	r3, [r0], #4
  404a68:	f851 3b04 	ldr.w	r3, [r1], #4
  404a6c:	f840 3b04 	str.w	r3, [r0], #4
  404a70:	f851 3b04 	ldr.w	r3, [r1], #4
  404a74:	f840 3b04 	str.w	r3, [r0], #4
  404a78:	f851 3b04 	ldr.w	r3, [r1], #4
  404a7c:	f840 3b04 	str.w	r3, [r0], #4
  404a80:	f851 3b04 	ldr.w	r3, [r1], #4
  404a84:	f840 3b04 	str.w	r3, [r0], #4
  404a88:	f851 3b04 	ldr.w	r3, [r1], #4
  404a8c:	f840 3b04 	str.w	r3, [r0], #4
  404a90:	f851 3b04 	ldr.w	r3, [r1], #4
  404a94:	f840 3b04 	str.w	r3, [r0], #4
  404a98:	f851 3b04 	ldr.w	r3, [r1], #4
  404a9c:	f840 3b04 	str.w	r3, [r0], #4
  404aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404aa4:	f840 3b04 	str.w	r3, [r0], #4
  404aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  404aac:	f840 3b04 	str.w	r3, [r0], #4
  404ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ab4:	f840 3b04 	str.w	r3, [r0], #4
  404ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  404abc:	f840 3b04 	str.w	r3, [r0], #4
  404ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ac4:	f840 3b04 	str.w	r3, [r0], #4
  404ac8:	f851 3b04 	ldr.w	r3, [r1], #4
  404acc:	f840 3b04 	str.w	r3, [r0], #4
  404ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ad4:	f840 3b04 	str.w	r3, [r0], #4
  404ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  404adc:	f840 3b04 	str.w	r3, [r0], #4
  404ae0:	3a40      	subs	r2, #64	; 0x40
  404ae2:	d2bd      	bcs.n	404a60 <memcpy+0x10>
  404ae4:	3230      	adds	r2, #48	; 0x30
  404ae6:	d311      	bcc.n	404b0c <memcpy+0xbc>
  404ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  404aec:	f840 3b04 	str.w	r3, [r0], #4
  404af0:	f851 3b04 	ldr.w	r3, [r1], #4
  404af4:	f840 3b04 	str.w	r3, [r0], #4
  404af8:	f851 3b04 	ldr.w	r3, [r1], #4
  404afc:	f840 3b04 	str.w	r3, [r0], #4
  404b00:	f851 3b04 	ldr.w	r3, [r1], #4
  404b04:	f840 3b04 	str.w	r3, [r0], #4
  404b08:	3a10      	subs	r2, #16
  404b0a:	d2ed      	bcs.n	404ae8 <memcpy+0x98>
  404b0c:	320c      	adds	r2, #12
  404b0e:	d305      	bcc.n	404b1c <memcpy+0xcc>
  404b10:	f851 3b04 	ldr.w	r3, [r1], #4
  404b14:	f840 3b04 	str.w	r3, [r0], #4
  404b18:	3a04      	subs	r2, #4
  404b1a:	d2f9      	bcs.n	404b10 <memcpy+0xc0>
  404b1c:	3204      	adds	r2, #4
  404b1e:	d008      	beq.n	404b32 <memcpy+0xe2>
  404b20:	07d2      	lsls	r2, r2, #31
  404b22:	bf1c      	itt	ne
  404b24:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404b28:	f800 3b01 	strbne.w	r3, [r0], #1
  404b2c:	d301      	bcc.n	404b32 <memcpy+0xe2>
  404b2e:	880b      	ldrh	r3, [r1, #0]
  404b30:	8003      	strh	r3, [r0, #0]
  404b32:	4660      	mov	r0, ip
  404b34:	4770      	bx	lr
  404b36:	bf00      	nop
  404b38:	2a08      	cmp	r2, #8
  404b3a:	d313      	bcc.n	404b64 <memcpy+0x114>
  404b3c:	078b      	lsls	r3, r1, #30
  404b3e:	d08d      	beq.n	404a5c <memcpy+0xc>
  404b40:	f010 0303 	ands.w	r3, r0, #3
  404b44:	d08a      	beq.n	404a5c <memcpy+0xc>
  404b46:	f1c3 0304 	rsb	r3, r3, #4
  404b4a:	1ad2      	subs	r2, r2, r3
  404b4c:	07db      	lsls	r3, r3, #31
  404b4e:	bf1c      	itt	ne
  404b50:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404b54:	f800 3b01 	strbne.w	r3, [r0], #1
  404b58:	d380      	bcc.n	404a5c <memcpy+0xc>
  404b5a:	f831 3b02 	ldrh.w	r3, [r1], #2
  404b5e:	f820 3b02 	strh.w	r3, [r0], #2
  404b62:	e77b      	b.n	404a5c <memcpy+0xc>
  404b64:	3a04      	subs	r2, #4
  404b66:	d3d9      	bcc.n	404b1c <memcpy+0xcc>
  404b68:	3a01      	subs	r2, #1
  404b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404b6e:	f800 3b01 	strb.w	r3, [r0], #1
  404b72:	d2f9      	bcs.n	404b68 <memcpy+0x118>
  404b74:	780b      	ldrb	r3, [r1, #0]
  404b76:	7003      	strb	r3, [r0, #0]
  404b78:	784b      	ldrb	r3, [r1, #1]
  404b7a:	7043      	strb	r3, [r0, #1]
  404b7c:	788b      	ldrb	r3, [r1, #2]
  404b7e:	7083      	strb	r3, [r0, #2]
  404b80:	4660      	mov	r0, ip
  404b82:	4770      	bx	lr

00404b84 <memmove>:
  404b84:	4288      	cmp	r0, r1
  404b86:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b88:	d90d      	bls.n	404ba6 <memmove+0x22>
  404b8a:	188b      	adds	r3, r1, r2
  404b8c:	4298      	cmp	r0, r3
  404b8e:	d20a      	bcs.n	404ba6 <memmove+0x22>
  404b90:	1884      	adds	r4, r0, r2
  404b92:	2a00      	cmp	r2, #0
  404b94:	d051      	beq.n	404c3a <memmove+0xb6>
  404b96:	4622      	mov	r2, r4
  404b98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404b9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404ba0:	4299      	cmp	r1, r3
  404ba2:	d1f9      	bne.n	404b98 <memmove+0x14>
  404ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404ba6:	2a0f      	cmp	r2, #15
  404ba8:	d948      	bls.n	404c3c <memmove+0xb8>
  404baa:	ea41 0300 	orr.w	r3, r1, r0
  404bae:	079b      	lsls	r3, r3, #30
  404bb0:	d146      	bne.n	404c40 <memmove+0xbc>
  404bb2:	f100 0410 	add.w	r4, r0, #16
  404bb6:	f101 0310 	add.w	r3, r1, #16
  404bba:	4615      	mov	r5, r2
  404bbc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404bc0:	f844 6c10 	str.w	r6, [r4, #-16]
  404bc4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404bc8:	f844 6c0c 	str.w	r6, [r4, #-12]
  404bcc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404bd0:	f844 6c08 	str.w	r6, [r4, #-8]
  404bd4:	3d10      	subs	r5, #16
  404bd6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404bda:	f844 6c04 	str.w	r6, [r4, #-4]
  404bde:	2d0f      	cmp	r5, #15
  404be0:	f103 0310 	add.w	r3, r3, #16
  404be4:	f104 0410 	add.w	r4, r4, #16
  404be8:	d8e8      	bhi.n	404bbc <memmove+0x38>
  404bea:	f1a2 0310 	sub.w	r3, r2, #16
  404bee:	f023 030f 	bic.w	r3, r3, #15
  404bf2:	f002 0e0f 	and.w	lr, r2, #15
  404bf6:	3310      	adds	r3, #16
  404bf8:	f1be 0f03 	cmp.w	lr, #3
  404bfc:	4419      	add	r1, r3
  404bfe:	4403      	add	r3, r0
  404c00:	d921      	bls.n	404c46 <memmove+0xc2>
  404c02:	1f1e      	subs	r6, r3, #4
  404c04:	460d      	mov	r5, r1
  404c06:	4674      	mov	r4, lr
  404c08:	3c04      	subs	r4, #4
  404c0a:	f855 7b04 	ldr.w	r7, [r5], #4
  404c0e:	f846 7f04 	str.w	r7, [r6, #4]!
  404c12:	2c03      	cmp	r4, #3
  404c14:	d8f8      	bhi.n	404c08 <memmove+0x84>
  404c16:	f1ae 0404 	sub.w	r4, lr, #4
  404c1a:	f024 0403 	bic.w	r4, r4, #3
  404c1e:	3404      	adds	r4, #4
  404c20:	4421      	add	r1, r4
  404c22:	4423      	add	r3, r4
  404c24:	f002 0203 	and.w	r2, r2, #3
  404c28:	b162      	cbz	r2, 404c44 <memmove+0xc0>
  404c2a:	3b01      	subs	r3, #1
  404c2c:	440a      	add	r2, r1
  404c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404c32:	f803 4f01 	strb.w	r4, [r3, #1]!
  404c36:	428a      	cmp	r2, r1
  404c38:	d1f9      	bne.n	404c2e <memmove+0xaa>
  404c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c3c:	4603      	mov	r3, r0
  404c3e:	e7f3      	b.n	404c28 <memmove+0xa4>
  404c40:	4603      	mov	r3, r0
  404c42:	e7f2      	b.n	404c2a <memmove+0xa6>
  404c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c46:	4672      	mov	r2, lr
  404c48:	e7ee      	b.n	404c28 <memmove+0xa4>
  404c4a:	bf00      	nop

00404c4c <_realloc_r>:
  404c4c:	2900      	cmp	r1, #0
  404c4e:	f000 8095 	beq.w	404d7c <_realloc_r+0x130>
  404c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c56:	460d      	mov	r5, r1
  404c58:	4616      	mov	r6, r2
  404c5a:	b083      	sub	sp, #12
  404c5c:	4680      	mov	r8, r0
  404c5e:	f106 070b 	add.w	r7, r6, #11
  404c62:	f7fe f8af 	bl	402dc4 <__malloc_lock>
  404c66:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404c6a:	2f16      	cmp	r7, #22
  404c6c:	f02e 0403 	bic.w	r4, lr, #3
  404c70:	f1a5 0908 	sub.w	r9, r5, #8
  404c74:	d83c      	bhi.n	404cf0 <_realloc_r+0xa4>
  404c76:	2210      	movs	r2, #16
  404c78:	4617      	mov	r7, r2
  404c7a:	42be      	cmp	r6, r7
  404c7c:	d83d      	bhi.n	404cfa <_realloc_r+0xae>
  404c7e:	4294      	cmp	r4, r2
  404c80:	da43      	bge.n	404d0a <_realloc_r+0xbe>
  404c82:	4bc4      	ldr	r3, [pc, #784]	; (404f94 <_realloc_r+0x348>)
  404c84:	6899      	ldr	r1, [r3, #8]
  404c86:	eb09 0004 	add.w	r0, r9, r4
  404c8a:	4288      	cmp	r0, r1
  404c8c:	f000 80b4 	beq.w	404df8 <_realloc_r+0x1ac>
  404c90:	6843      	ldr	r3, [r0, #4]
  404c92:	f023 0101 	bic.w	r1, r3, #1
  404c96:	4401      	add	r1, r0
  404c98:	6849      	ldr	r1, [r1, #4]
  404c9a:	07c9      	lsls	r1, r1, #31
  404c9c:	d54c      	bpl.n	404d38 <_realloc_r+0xec>
  404c9e:	f01e 0f01 	tst.w	lr, #1
  404ca2:	f000 809b 	beq.w	404ddc <_realloc_r+0x190>
  404ca6:	4631      	mov	r1, r6
  404ca8:	4640      	mov	r0, r8
  404caa:	f7fd fd8d 	bl	4027c8 <_malloc_r>
  404cae:	4606      	mov	r6, r0
  404cb0:	2800      	cmp	r0, #0
  404cb2:	d03a      	beq.n	404d2a <_realloc_r+0xde>
  404cb4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404cb8:	f023 0301 	bic.w	r3, r3, #1
  404cbc:	444b      	add	r3, r9
  404cbe:	f1a0 0208 	sub.w	r2, r0, #8
  404cc2:	429a      	cmp	r2, r3
  404cc4:	f000 8121 	beq.w	404f0a <_realloc_r+0x2be>
  404cc8:	1f22      	subs	r2, r4, #4
  404cca:	2a24      	cmp	r2, #36	; 0x24
  404ccc:	f200 8107 	bhi.w	404ede <_realloc_r+0x292>
  404cd0:	2a13      	cmp	r2, #19
  404cd2:	f200 80db 	bhi.w	404e8c <_realloc_r+0x240>
  404cd6:	4603      	mov	r3, r0
  404cd8:	462a      	mov	r2, r5
  404cda:	6811      	ldr	r1, [r2, #0]
  404cdc:	6019      	str	r1, [r3, #0]
  404cde:	6851      	ldr	r1, [r2, #4]
  404ce0:	6059      	str	r1, [r3, #4]
  404ce2:	6892      	ldr	r2, [r2, #8]
  404ce4:	609a      	str	r2, [r3, #8]
  404ce6:	4629      	mov	r1, r5
  404ce8:	4640      	mov	r0, r8
  404cea:	f7ff fb33 	bl	404354 <_free_r>
  404cee:	e01c      	b.n	404d2a <_realloc_r+0xde>
  404cf0:	f027 0707 	bic.w	r7, r7, #7
  404cf4:	2f00      	cmp	r7, #0
  404cf6:	463a      	mov	r2, r7
  404cf8:	dabf      	bge.n	404c7a <_realloc_r+0x2e>
  404cfa:	2600      	movs	r6, #0
  404cfc:	230c      	movs	r3, #12
  404cfe:	4630      	mov	r0, r6
  404d00:	f8c8 3000 	str.w	r3, [r8]
  404d04:	b003      	add	sp, #12
  404d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d0a:	462e      	mov	r6, r5
  404d0c:	1be3      	subs	r3, r4, r7
  404d0e:	2b0f      	cmp	r3, #15
  404d10:	d81e      	bhi.n	404d50 <_realloc_r+0x104>
  404d12:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404d16:	f003 0301 	and.w	r3, r3, #1
  404d1a:	4323      	orrs	r3, r4
  404d1c:	444c      	add	r4, r9
  404d1e:	f8c9 3004 	str.w	r3, [r9, #4]
  404d22:	6863      	ldr	r3, [r4, #4]
  404d24:	f043 0301 	orr.w	r3, r3, #1
  404d28:	6063      	str	r3, [r4, #4]
  404d2a:	4640      	mov	r0, r8
  404d2c:	f7fe f850 	bl	402dd0 <__malloc_unlock>
  404d30:	4630      	mov	r0, r6
  404d32:	b003      	add	sp, #12
  404d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d38:	f023 0303 	bic.w	r3, r3, #3
  404d3c:	18e1      	adds	r1, r4, r3
  404d3e:	4291      	cmp	r1, r2
  404d40:	db1f      	blt.n	404d82 <_realloc_r+0x136>
  404d42:	68c3      	ldr	r3, [r0, #12]
  404d44:	6882      	ldr	r2, [r0, #8]
  404d46:	462e      	mov	r6, r5
  404d48:	60d3      	str	r3, [r2, #12]
  404d4a:	460c      	mov	r4, r1
  404d4c:	609a      	str	r2, [r3, #8]
  404d4e:	e7dd      	b.n	404d0c <_realloc_r+0xc0>
  404d50:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404d54:	eb09 0107 	add.w	r1, r9, r7
  404d58:	f002 0201 	and.w	r2, r2, #1
  404d5c:	444c      	add	r4, r9
  404d5e:	f043 0301 	orr.w	r3, r3, #1
  404d62:	4317      	orrs	r7, r2
  404d64:	f8c9 7004 	str.w	r7, [r9, #4]
  404d68:	604b      	str	r3, [r1, #4]
  404d6a:	6863      	ldr	r3, [r4, #4]
  404d6c:	f043 0301 	orr.w	r3, r3, #1
  404d70:	3108      	adds	r1, #8
  404d72:	6063      	str	r3, [r4, #4]
  404d74:	4640      	mov	r0, r8
  404d76:	f7ff faed 	bl	404354 <_free_r>
  404d7a:	e7d6      	b.n	404d2a <_realloc_r+0xde>
  404d7c:	4611      	mov	r1, r2
  404d7e:	f7fd bd23 	b.w	4027c8 <_malloc_r>
  404d82:	f01e 0f01 	tst.w	lr, #1
  404d86:	d18e      	bne.n	404ca6 <_realloc_r+0x5a>
  404d88:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404d8c:	eba9 0a01 	sub.w	sl, r9, r1
  404d90:	f8da 1004 	ldr.w	r1, [sl, #4]
  404d94:	f021 0103 	bic.w	r1, r1, #3
  404d98:	440b      	add	r3, r1
  404d9a:	4423      	add	r3, r4
  404d9c:	4293      	cmp	r3, r2
  404d9e:	db25      	blt.n	404dec <_realloc_r+0x1a0>
  404da0:	68c2      	ldr	r2, [r0, #12]
  404da2:	6881      	ldr	r1, [r0, #8]
  404da4:	4656      	mov	r6, sl
  404da6:	60ca      	str	r2, [r1, #12]
  404da8:	6091      	str	r1, [r2, #8]
  404daa:	f8da 100c 	ldr.w	r1, [sl, #12]
  404dae:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404db2:	1f22      	subs	r2, r4, #4
  404db4:	2a24      	cmp	r2, #36	; 0x24
  404db6:	60c1      	str	r1, [r0, #12]
  404db8:	6088      	str	r0, [r1, #8]
  404dba:	f200 8094 	bhi.w	404ee6 <_realloc_r+0x29a>
  404dbe:	2a13      	cmp	r2, #19
  404dc0:	d96f      	bls.n	404ea2 <_realloc_r+0x256>
  404dc2:	6829      	ldr	r1, [r5, #0]
  404dc4:	f8ca 1008 	str.w	r1, [sl, #8]
  404dc8:	6869      	ldr	r1, [r5, #4]
  404dca:	f8ca 100c 	str.w	r1, [sl, #12]
  404dce:	2a1b      	cmp	r2, #27
  404dd0:	f200 80a2 	bhi.w	404f18 <_realloc_r+0x2cc>
  404dd4:	3508      	adds	r5, #8
  404dd6:	f10a 0210 	add.w	r2, sl, #16
  404dda:	e063      	b.n	404ea4 <_realloc_r+0x258>
  404ddc:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404de0:	eba9 0a03 	sub.w	sl, r9, r3
  404de4:	f8da 1004 	ldr.w	r1, [sl, #4]
  404de8:	f021 0103 	bic.w	r1, r1, #3
  404dec:	1863      	adds	r3, r4, r1
  404dee:	4293      	cmp	r3, r2
  404df0:	f6ff af59 	blt.w	404ca6 <_realloc_r+0x5a>
  404df4:	4656      	mov	r6, sl
  404df6:	e7d8      	b.n	404daa <_realloc_r+0x15e>
  404df8:	6841      	ldr	r1, [r0, #4]
  404dfa:	f021 0b03 	bic.w	fp, r1, #3
  404dfe:	44a3      	add	fp, r4
  404e00:	f107 0010 	add.w	r0, r7, #16
  404e04:	4583      	cmp	fp, r0
  404e06:	da56      	bge.n	404eb6 <_realloc_r+0x26a>
  404e08:	f01e 0f01 	tst.w	lr, #1
  404e0c:	f47f af4b 	bne.w	404ca6 <_realloc_r+0x5a>
  404e10:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404e14:	eba9 0a01 	sub.w	sl, r9, r1
  404e18:	f8da 1004 	ldr.w	r1, [sl, #4]
  404e1c:	f021 0103 	bic.w	r1, r1, #3
  404e20:	448b      	add	fp, r1
  404e22:	4558      	cmp	r0, fp
  404e24:	dce2      	bgt.n	404dec <_realloc_r+0x1a0>
  404e26:	4656      	mov	r6, sl
  404e28:	f8da 100c 	ldr.w	r1, [sl, #12]
  404e2c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404e30:	1f22      	subs	r2, r4, #4
  404e32:	2a24      	cmp	r2, #36	; 0x24
  404e34:	60c1      	str	r1, [r0, #12]
  404e36:	6088      	str	r0, [r1, #8]
  404e38:	f200 808f 	bhi.w	404f5a <_realloc_r+0x30e>
  404e3c:	2a13      	cmp	r2, #19
  404e3e:	f240 808a 	bls.w	404f56 <_realloc_r+0x30a>
  404e42:	6829      	ldr	r1, [r5, #0]
  404e44:	f8ca 1008 	str.w	r1, [sl, #8]
  404e48:	6869      	ldr	r1, [r5, #4]
  404e4a:	f8ca 100c 	str.w	r1, [sl, #12]
  404e4e:	2a1b      	cmp	r2, #27
  404e50:	f200 808a 	bhi.w	404f68 <_realloc_r+0x31c>
  404e54:	3508      	adds	r5, #8
  404e56:	f10a 0210 	add.w	r2, sl, #16
  404e5a:	6829      	ldr	r1, [r5, #0]
  404e5c:	6011      	str	r1, [r2, #0]
  404e5e:	6869      	ldr	r1, [r5, #4]
  404e60:	6051      	str	r1, [r2, #4]
  404e62:	68a9      	ldr	r1, [r5, #8]
  404e64:	6091      	str	r1, [r2, #8]
  404e66:	eb0a 0107 	add.w	r1, sl, r7
  404e6a:	ebab 0207 	sub.w	r2, fp, r7
  404e6e:	f042 0201 	orr.w	r2, r2, #1
  404e72:	6099      	str	r1, [r3, #8]
  404e74:	604a      	str	r2, [r1, #4]
  404e76:	f8da 3004 	ldr.w	r3, [sl, #4]
  404e7a:	f003 0301 	and.w	r3, r3, #1
  404e7e:	431f      	orrs	r7, r3
  404e80:	4640      	mov	r0, r8
  404e82:	f8ca 7004 	str.w	r7, [sl, #4]
  404e86:	f7fd ffa3 	bl	402dd0 <__malloc_unlock>
  404e8a:	e751      	b.n	404d30 <_realloc_r+0xe4>
  404e8c:	682b      	ldr	r3, [r5, #0]
  404e8e:	6003      	str	r3, [r0, #0]
  404e90:	686b      	ldr	r3, [r5, #4]
  404e92:	6043      	str	r3, [r0, #4]
  404e94:	2a1b      	cmp	r2, #27
  404e96:	d82d      	bhi.n	404ef4 <_realloc_r+0x2a8>
  404e98:	f100 0308 	add.w	r3, r0, #8
  404e9c:	f105 0208 	add.w	r2, r5, #8
  404ea0:	e71b      	b.n	404cda <_realloc_r+0x8e>
  404ea2:	4632      	mov	r2, r6
  404ea4:	6829      	ldr	r1, [r5, #0]
  404ea6:	6011      	str	r1, [r2, #0]
  404ea8:	6869      	ldr	r1, [r5, #4]
  404eaa:	6051      	str	r1, [r2, #4]
  404eac:	68a9      	ldr	r1, [r5, #8]
  404eae:	6091      	str	r1, [r2, #8]
  404eb0:	461c      	mov	r4, r3
  404eb2:	46d1      	mov	r9, sl
  404eb4:	e72a      	b.n	404d0c <_realloc_r+0xc0>
  404eb6:	eb09 0107 	add.w	r1, r9, r7
  404eba:	ebab 0b07 	sub.w	fp, fp, r7
  404ebe:	f04b 0201 	orr.w	r2, fp, #1
  404ec2:	6099      	str	r1, [r3, #8]
  404ec4:	604a      	str	r2, [r1, #4]
  404ec6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404eca:	f003 0301 	and.w	r3, r3, #1
  404ece:	431f      	orrs	r7, r3
  404ed0:	4640      	mov	r0, r8
  404ed2:	f845 7c04 	str.w	r7, [r5, #-4]
  404ed6:	f7fd ff7b 	bl	402dd0 <__malloc_unlock>
  404eda:	462e      	mov	r6, r5
  404edc:	e728      	b.n	404d30 <_realloc_r+0xe4>
  404ede:	4629      	mov	r1, r5
  404ee0:	f7ff fe50 	bl	404b84 <memmove>
  404ee4:	e6ff      	b.n	404ce6 <_realloc_r+0x9a>
  404ee6:	4629      	mov	r1, r5
  404ee8:	4630      	mov	r0, r6
  404eea:	461c      	mov	r4, r3
  404eec:	46d1      	mov	r9, sl
  404eee:	f7ff fe49 	bl	404b84 <memmove>
  404ef2:	e70b      	b.n	404d0c <_realloc_r+0xc0>
  404ef4:	68ab      	ldr	r3, [r5, #8]
  404ef6:	6083      	str	r3, [r0, #8]
  404ef8:	68eb      	ldr	r3, [r5, #12]
  404efa:	60c3      	str	r3, [r0, #12]
  404efc:	2a24      	cmp	r2, #36	; 0x24
  404efe:	d017      	beq.n	404f30 <_realloc_r+0x2e4>
  404f00:	f100 0310 	add.w	r3, r0, #16
  404f04:	f105 0210 	add.w	r2, r5, #16
  404f08:	e6e7      	b.n	404cda <_realloc_r+0x8e>
  404f0a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404f0e:	f023 0303 	bic.w	r3, r3, #3
  404f12:	441c      	add	r4, r3
  404f14:	462e      	mov	r6, r5
  404f16:	e6f9      	b.n	404d0c <_realloc_r+0xc0>
  404f18:	68a9      	ldr	r1, [r5, #8]
  404f1a:	f8ca 1010 	str.w	r1, [sl, #16]
  404f1e:	68e9      	ldr	r1, [r5, #12]
  404f20:	f8ca 1014 	str.w	r1, [sl, #20]
  404f24:	2a24      	cmp	r2, #36	; 0x24
  404f26:	d00c      	beq.n	404f42 <_realloc_r+0x2f6>
  404f28:	3510      	adds	r5, #16
  404f2a:	f10a 0218 	add.w	r2, sl, #24
  404f2e:	e7b9      	b.n	404ea4 <_realloc_r+0x258>
  404f30:	692b      	ldr	r3, [r5, #16]
  404f32:	6103      	str	r3, [r0, #16]
  404f34:	696b      	ldr	r3, [r5, #20]
  404f36:	6143      	str	r3, [r0, #20]
  404f38:	f105 0218 	add.w	r2, r5, #24
  404f3c:	f100 0318 	add.w	r3, r0, #24
  404f40:	e6cb      	b.n	404cda <_realloc_r+0x8e>
  404f42:	692a      	ldr	r2, [r5, #16]
  404f44:	f8ca 2018 	str.w	r2, [sl, #24]
  404f48:	696a      	ldr	r2, [r5, #20]
  404f4a:	f8ca 201c 	str.w	r2, [sl, #28]
  404f4e:	3518      	adds	r5, #24
  404f50:	f10a 0220 	add.w	r2, sl, #32
  404f54:	e7a6      	b.n	404ea4 <_realloc_r+0x258>
  404f56:	4632      	mov	r2, r6
  404f58:	e77f      	b.n	404e5a <_realloc_r+0x20e>
  404f5a:	4629      	mov	r1, r5
  404f5c:	4630      	mov	r0, r6
  404f5e:	9301      	str	r3, [sp, #4]
  404f60:	f7ff fe10 	bl	404b84 <memmove>
  404f64:	9b01      	ldr	r3, [sp, #4]
  404f66:	e77e      	b.n	404e66 <_realloc_r+0x21a>
  404f68:	68a9      	ldr	r1, [r5, #8]
  404f6a:	f8ca 1010 	str.w	r1, [sl, #16]
  404f6e:	68e9      	ldr	r1, [r5, #12]
  404f70:	f8ca 1014 	str.w	r1, [sl, #20]
  404f74:	2a24      	cmp	r2, #36	; 0x24
  404f76:	d003      	beq.n	404f80 <_realloc_r+0x334>
  404f78:	3510      	adds	r5, #16
  404f7a:	f10a 0218 	add.w	r2, sl, #24
  404f7e:	e76c      	b.n	404e5a <_realloc_r+0x20e>
  404f80:	692a      	ldr	r2, [r5, #16]
  404f82:	f8ca 2018 	str.w	r2, [sl, #24]
  404f86:	696a      	ldr	r2, [r5, #20]
  404f88:	f8ca 201c 	str.w	r2, [sl, #28]
  404f8c:	3518      	adds	r5, #24
  404f8e:	f10a 0220 	add.w	r2, sl, #32
  404f92:	e762      	b.n	404e5a <_realloc_r+0x20e>
  404f94:	20000440 	.word	0x20000440

00404f98 <__sread>:
  404f98:	b510      	push	{r4, lr}
  404f9a:	460c      	mov	r4, r1
  404f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fa0:	f000 f9f6 	bl	405390 <_read_r>
  404fa4:	2800      	cmp	r0, #0
  404fa6:	db03      	blt.n	404fb0 <__sread+0x18>
  404fa8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404faa:	4403      	add	r3, r0
  404fac:	6523      	str	r3, [r4, #80]	; 0x50
  404fae:	bd10      	pop	{r4, pc}
  404fb0:	89a3      	ldrh	r3, [r4, #12]
  404fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404fb6:	81a3      	strh	r3, [r4, #12]
  404fb8:	bd10      	pop	{r4, pc}
  404fba:	bf00      	nop

00404fbc <__swrite>:
  404fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fc0:	4616      	mov	r6, r2
  404fc2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404fc6:	461f      	mov	r7, r3
  404fc8:	05d3      	lsls	r3, r2, #23
  404fca:	460c      	mov	r4, r1
  404fcc:	4605      	mov	r5, r0
  404fce:	d507      	bpl.n	404fe0 <__swrite+0x24>
  404fd0:	2200      	movs	r2, #0
  404fd2:	2302      	movs	r3, #2
  404fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fd8:	f000 f9c4 	bl	405364 <_lseek_r>
  404fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404fe4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404fe8:	81a2      	strh	r2, [r4, #12]
  404fea:	463b      	mov	r3, r7
  404fec:	4632      	mov	r2, r6
  404fee:	4628      	mov	r0, r5
  404ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404ff4:	f000 b8a4 	b.w	405140 <_write_r>

00404ff8 <__sseek>:
  404ff8:	b510      	push	{r4, lr}
  404ffa:	460c      	mov	r4, r1
  404ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405000:	f000 f9b0 	bl	405364 <_lseek_r>
  405004:	89a3      	ldrh	r3, [r4, #12]
  405006:	1c42      	adds	r2, r0, #1
  405008:	bf0e      	itee	eq
  40500a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40500e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405012:	6520      	strne	r0, [r4, #80]	; 0x50
  405014:	81a3      	strh	r3, [r4, #12]
  405016:	bd10      	pop	{r4, pc}

00405018 <__sclose>:
  405018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40501c:	f000 b908 	b.w	405230 <_close_r>

00405020 <__swbuf_r>:
  405020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405022:	460d      	mov	r5, r1
  405024:	4614      	mov	r4, r2
  405026:	4606      	mov	r6, r0
  405028:	b110      	cbz	r0, 405030 <__swbuf_r+0x10>
  40502a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40502c:	2b00      	cmp	r3, #0
  40502e:	d04b      	beq.n	4050c8 <__swbuf_r+0xa8>
  405030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405034:	69a3      	ldr	r3, [r4, #24]
  405036:	60a3      	str	r3, [r4, #8]
  405038:	b291      	uxth	r1, r2
  40503a:	0708      	lsls	r0, r1, #28
  40503c:	d539      	bpl.n	4050b2 <__swbuf_r+0x92>
  40503e:	6923      	ldr	r3, [r4, #16]
  405040:	2b00      	cmp	r3, #0
  405042:	d036      	beq.n	4050b2 <__swbuf_r+0x92>
  405044:	b2ed      	uxtb	r5, r5
  405046:	0489      	lsls	r1, r1, #18
  405048:	462f      	mov	r7, r5
  40504a:	d515      	bpl.n	405078 <__swbuf_r+0x58>
  40504c:	6822      	ldr	r2, [r4, #0]
  40504e:	6961      	ldr	r1, [r4, #20]
  405050:	1ad3      	subs	r3, r2, r3
  405052:	428b      	cmp	r3, r1
  405054:	da1c      	bge.n	405090 <__swbuf_r+0x70>
  405056:	3301      	adds	r3, #1
  405058:	68a1      	ldr	r1, [r4, #8]
  40505a:	1c50      	adds	r0, r2, #1
  40505c:	3901      	subs	r1, #1
  40505e:	60a1      	str	r1, [r4, #8]
  405060:	6020      	str	r0, [r4, #0]
  405062:	7015      	strb	r5, [r2, #0]
  405064:	6962      	ldr	r2, [r4, #20]
  405066:	429a      	cmp	r2, r3
  405068:	d01a      	beq.n	4050a0 <__swbuf_r+0x80>
  40506a:	89a3      	ldrh	r3, [r4, #12]
  40506c:	07db      	lsls	r3, r3, #31
  40506e:	d501      	bpl.n	405074 <__swbuf_r+0x54>
  405070:	2d0a      	cmp	r5, #10
  405072:	d015      	beq.n	4050a0 <__swbuf_r+0x80>
  405074:	4638      	mov	r0, r7
  405076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405078:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40507a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40507e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405082:	81a2      	strh	r2, [r4, #12]
  405084:	6822      	ldr	r2, [r4, #0]
  405086:	6661      	str	r1, [r4, #100]	; 0x64
  405088:	6961      	ldr	r1, [r4, #20]
  40508a:	1ad3      	subs	r3, r2, r3
  40508c:	428b      	cmp	r3, r1
  40508e:	dbe2      	blt.n	405056 <__swbuf_r+0x36>
  405090:	4621      	mov	r1, r4
  405092:	4630      	mov	r0, r6
  405094:	f7fe ffe0 	bl	404058 <_fflush_r>
  405098:	b940      	cbnz	r0, 4050ac <__swbuf_r+0x8c>
  40509a:	6822      	ldr	r2, [r4, #0]
  40509c:	2301      	movs	r3, #1
  40509e:	e7db      	b.n	405058 <__swbuf_r+0x38>
  4050a0:	4621      	mov	r1, r4
  4050a2:	4630      	mov	r0, r6
  4050a4:	f7fe ffd8 	bl	404058 <_fflush_r>
  4050a8:	2800      	cmp	r0, #0
  4050aa:	d0e3      	beq.n	405074 <__swbuf_r+0x54>
  4050ac:	f04f 37ff 	mov.w	r7, #4294967295
  4050b0:	e7e0      	b.n	405074 <__swbuf_r+0x54>
  4050b2:	4621      	mov	r1, r4
  4050b4:	4630      	mov	r0, r6
  4050b6:	f7fe febb 	bl	403e30 <__swsetup_r>
  4050ba:	2800      	cmp	r0, #0
  4050bc:	d1f6      	bne.n	4050ac <__swbuf_r+0x8c>
  4050be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4050c2:	6923      	ldr	r3, [r4, #16]
  4050c4:	b291      	uxth	r1, r2
  4050c6:	e7bd      	b.n	405044 <__swbuf_r+0x24>
  4050c8:	f7ff f81e 	bl	404108 <__sinit>
  4050cc:	e7b0      	b.n	405030 <__swbuf_r+0x10>
  4050ce:	bf00      	nop

004050d0 <_wcrtomb_r>:
  4050d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4050d2:	4606      	mov	r6, r0
  4050d4:	b085      	sub	sp, #20
  4050d6:	461f      	mov	r7, r3
  4050d8:	b189      	cbz	r1, 4050fe <_wcrtomb_r+0x2e>
  4050da:	4c10      	ldr	r4, [pc, #64]	; (40511c <_wcrtomb_r+0x4c>)
  4050dc:	4d10      	ldr	r5, [pc, #64]	; (405120 <_wcrtomb_r+0x50>)
  4050de:	6824      	ldr	r4, [r4, #0]
  4050e0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4050e2:	2c00      	cmp	r4, #0
  4050e4:	bf08      	it	eq
  4050e6:	462c      	moveq	r4, r5
  4050e8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4050ec:	47a0      	blx	r4
  4050ee:	1c43      	adds	r3, r0, #1
  4050f0:	d103      	bne.n	4050fa <_wcrtomb_r+0x2a>
  4050f2:	2200      	movs	r2, #0
  4050f4:	238a      	movs	r3, #138	; 0x8a
  4050f6:	603a      	str	r2, [r7, #0]
  4050f8:	6033      	str	r3, [r6, #0]
  4050fa:	b005      	add	sp, #20
  4050fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050fe:	460c      	mov	r4, r1
  405100:	4906      	ldr	r1, [pc, #24]	; (40511c <_wcrtomb_r+0x4c>)
  405102:	4a07      	ldr	r2, [pc, #28]	; (405120 <_wcrtomb_r+0x50>)
  405104:	6809      	ldr	r1, [r1, #0]
  405106:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405108:	2900      	cmp	r1, #0
  40510a:	bf08      	it	eq
  40510c:	4611      	moveq	r1, r2
  40510e:	4622      	mov	r2, r4
  405110:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  405114:	a901      	add	r1, sp, #4
  405116:	47a0      	blx	r4
  405118:	e7e9      	b.n	4050ee <_wcrtomb_r+0x1e>
  40511a:	bf00      	nop
  40511c:	20000010 	.word	0x20000010
  405120:	20000854 	.word	0x20000854

00405124 <__ascii_wctomb>:
  405124:	b121      	cbz	r1, 405130 <__ascii_wctomb+0xc>
  405126:	2aff      	cmp	r2, #255	; 0xff
  405128:	d804      	bhi.n	405134 <__ascii_wctomb+0x10>
  40512a:	700a      	strb	r2, [r1, #0]
  40512c:	2001      	movs	r0, #1
  40512e:	4770      	bx	lr
  405130:	4608      	mov	r0, r1
  405132:	4770      	bx	lr
  405134:	238a      	movs	r3, #138	; 0x8a
  405136:	6003      	str	r3, [r0, #0]
  405138:	f04f 30ff 	mov.w	r0, #4294967295
  40513c:	4770      	bx	lr
  40513e:	bf00      	nop

00405140 <_write_r>:
  405140:	b570      	push	{r4, r5, r6, lr}
  405142:	460d      	mov	r5, r1
  405144:	4c08      	ldr	r4, [pc, #32]	; (405168 <_write_r+0x28>)
  405146:	4611      	mov	r1, r2
  405148:	4606      	mov	r6, r0
  40514a:	461a      	mov	r2, r3
  40514c:	4628      	mov	r0, r5
  40514e:	2300      	movs	r3, #0
  405150:	6023      	str	r3, [r4, #0]
  405152:	f7fb ff05 	bl	400f60 <_write>
  405156:	1c43      	adds	r3, r0, #1
  405158:	d000      	beq.n	40515c <_write_r+0x1c>
  40515a:	bd70      	pop	{r4, r5, r6, pc}
  40515c:	6823      	ldr	r3, [r4, #0]
  40515e:	2b00      	cmp	r3, #0
  405160:	d0fb      	beq.n	40515a <_write_r+0x1a>
  405162:	6033      	str	r3, [r6, #0]
  405164:	bd70      	pop	{r4, r5, r6, pc}
  405166:	bf00      	nop
  405168:	20000ed4 	.word	0x20000ed4

0040516c <__register_exitproc>:
  40516c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405170:	4d2c      	ldr	r5, [pc, #176]	; (405224 <__register_exitproc+0xb8>)
  405172:	4606      	mov	r6, r0
  405174:	6828      	ldr	r0, [r5, #0]
  405176:	4698      	mov	r8, r3
  405178:	460f      	mov	r7, r1
  40517a:	4691      	mov	r9, r2
  40517c:	f7ff fb84 	bl	404888 <__retarget_lock_acquire_recursive>
  405180:	4b29      	ldr	r3, [pc, #164]	; (405228 <__register_exitproc+0xbc>)
  405182:	681c      	ldr	r4, [r3, #0]
  405184:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405188:	2b00      	cmp	r3, #0
  40518a:	d03e      	beq.n	40520a <__register_exitproc+0x9e>
  40518c:	685a      	ldr	r2, [r3, #4]
  40518e:	2a1f      	cmp	r2, #31
  405190:	dc1c      	bgt.n	4051cc <__register_exitproc+0x60>
  405192:	f102 0e01 	add.w	lr, r2, #1
  405196:	b176      	cbz	r6, 4051b6 <__register_exitproc+0x4a>
  405198:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40519c:	2401      	movs	r4, #1
  40519e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4051a2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4051a6:	4094      	lsls	r4, r2
  4051a8:	4320      	orrs	r0, r4
  4051aa:	2e02      	cmp	r6, #2
  4051ac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4051b0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4051b4:	d023      	beq.n	4051fe <__register_exitproc+0x92>
  4051b6:	3202      	adds	r2, #2
  4051b8:	f8c3 e004 	str.w	lr, [r3, #4]
  4051bc:	6828      	ldr	r0, [r5, #0]
  4051be:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4051c2:	f7ff fb63 	bl	40488c <__retarget_lock_release_recursive>
  4051c6:	2000      	movs	r0, #0
  4051c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4051cc:	4b17      	ldr	r3, [pc, #92]	; (40522c <__register_exitproc+0xc0>)
  4051ce:	b30b      	cbz	r3, 405214 <__register_exitproc+0xa8>
  4051d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4051d4:	f7fd faf0 	bl	4027b8 <malloc>
  4051d8:	4603      	mov	r3, r0
  4051da:	b1d8      	cbz	r0, 405214 <__register_exitproc+0xa8>
  4051dc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4051e0:	6002      	str	r2, [r0, #0]
  4051e2:	2100      	movs	r1, #0
  4051e4:	6041      	str	r1, [r0, #4]
  4051e6:	460a      	mov	r2, r1
  4051e8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4051ec:	f04f 0e01 	mov.w	lr, #1
  4051f0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4051f4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4051f8:	2e00      	cmp	r6, #0
  4051fa:	d0dc      	beq.n	4051b6 <__register_exitproc+0x4a>
  4051fc:	e7cc      	b.n	405198 <__register_exitproc+0x2c>
  4051fe:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405202:	430c      	orrs	r4, r1
  405204:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405208:	e7d5      	b.n	4051b6 <__register_exitproc+0x4a>
  40520a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40520e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405212:	e7bb      	b.n	40518c <__register_exitproc+0x20>
  405214:	6828      	ldr	r0, [r5, #0]
  405216:	f7ff fb39 	bl	40488c <__retarget_lock_release_recursive>
  40521a:	f04f 30ff 	mov.w	r0, #4294967295
  40521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405222:	bf00      	nop
  405224:	20000850 	.word	0x20000850
  405228:	004054fc 	.word	0x004054fc
  40522c:	004027b9 	.word	0x004027b9

00405230 <_close_r>:
  405230:	b538      	push	{r3, r4, r5, lr}
  405232:	4c07      	ldr	r4, [pc, #28]	; (405250 <_close_r+0x20>)
  405234:	2300      	movs	r3, #0
  405236:	4605      	mov	r5, r0
  405238:	4608      	mov	r0, r1
  40523a:	6023      	str	r3, [r4, #0]
  40523c:	f7fd f89c 	bl	402378 <_close>
  405240:	1c43      	adds	r3, r0, #1
  405242:	d000      	beq.n	405246 <_close_r+0x16>
  405244:	bd38      	pop	{r3, r4, r5, pc}
  405246:	6823      	ldr	r3, [r4, #0]
  405248:	2b00      	cmp	r3, #0
  40524a:	d0fb      	beq.n	405244 <_close_r+0x14>
  40524c:	602b      	str	r3, [r5, #0]
  40524e:	bd38      	pop	{r3, r4, r5, pc}
  405250:	20000ed4 	.word	0x20000ed4

00405254 <_fclose_r>:
  405254:	b570      	push	{r4, r5, r6, lr}
  405256:	b159      	cbz	r1, 405270 <_fclose_r+0x1c>
  405258:	4605      	mov	r5, r0
  40525a:	460c      	mov	r4, r1
  40525c:	b110      	cbz	r0, 405264 <_fclose_r+0x10>
  40525e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405260:	2b00      	cmp	r3, #0
  405262:	d03c      	beq.n	4052de <_fclose_r+0x8a>
  405264:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405266:	07d8      	lsls	r0, r3, #31
  405268:	d505      	bpl.n	405276 <_fclose_r+0x22>
  40526a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40526e:	b92b      	cbnz	r3, 40527c <_fclose_r+0x28>
  405270:	2600      	movs	r6, #0
  405272:	4630      	mov	r0, r6
  405274:	bd70      	pop	{r4, r5, r6, pc}
  405276:	89a3      	ldrh	r3, [r4, #12]
  405278:	0599      	lsls	r1, r3, #22
  40527a:	d53c      	bpl.n	4052f6 <_fclose_r+0xa2>
  40527c:	4621      	mov	r1, r4
  40527e:	4628      	mov	r0, r5
  405280:	f7fe fe4a 	bl	403f18 <__sflush_r>
  405284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405286:	4606      	mov	r6, r0
  405288:	b133      	cbz	r3, 405298 <_fclose_r+0x44>
  40528a:	69e1      	ldr	r1, [r4, #28]
  40528c:	4628      	mov	r0, r5
  40528e:	4798      	blx	r3
  405290:	2800      	cmp	r0, #0
  405292:	bfb8      	it	lt
  405294:	f04f 36ff 	movlt.w	r6, #4294967295
  405298:	89a3      	ldrh	r3, [r4, #12]
  40529a:	061a      	lsls	r2, r3, #24
  40529c:	d422      	bmi.n	4052e4 <_fclose_r+0x90>
  40529e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4052a0:	b141      	cbz	r1, 4052b4 <_fclose_r+0x60>
  4052a2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4052a6:	4299      	cmp	r1, r3
  4052a8:	d002      	beq.n	4052b0 <_fclose_r+0x5c>
  4052aa:	4628      	mov	r0, r5
  4052ac:	f7ff f852 	bl	404354 <_free_r>
  4052b0:	2300      	movs	r3, #0
  4052b2:	6323      	str	r3, [r4, #48]	; 0x30
  4052b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4052b6:	b121      	cbz	r1, 4052c2 <_fclose_r+0x6e>
  4052b8:	4628      	mov	r0, r5
  4052ba:	f7ff f84b 	bl	404354 <_free_r>
  4052be:	2300      	movs	r3, #0
  4052c0:	6463      	str	r3, [r4, #68]	; 0x44
  4052c2:	f7fe ff4d 	bl	404160 <__sfp_lock_acquire>
  4052c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4052c8:	2200      	movs	r2, #0
  4052ca:	07db      	lsls	r3, r3, #31
  4052cc:	81a2      	strh	r2, [r4, #12]
  4052ce:	d50e      	bpl.n	4052ee <_fclose_r+0x9a>
  4052d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052d2:	f7ff fad7 	bl	404884 <__retarget_lock_close_recursive>
  4052d6:	f7fe ff49 	bl	40416c <__sfp_lock_release>
  4052da:	4630      	mov	r0, r6
  4052dc:	bd70      	pop	{r4, r5, r6, pc}
  4052de:	f7fe ff13 	bl	404108 <__sinit>
  4052e2:	e7bf      	b.n	405264 <_fclose_r+0x10>
  4052e4:	6921      	ldr	r1, [r4, #16]
  4052e6:	4628      	mov	r0, r5
  4052e8:	f7ff f834 	bl	404354 <_free_r>
  4052ec:	e7d7      	b.n	40529e <_fclose_r+0x4a>
  4052ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052f0:	f7ff facc 	bl	40488c <__retarget_lock_release_recursive>
  4052f4:	e7ec      	b.n	4052d0 <_fclose_r+0x7c>
  4052f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052f8:	f7ff fac6 	bl	404888 <__retarget_lock_acquire_recursive>
  4052fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405300:	2b00      	cmp	r3, #0
  405302:	d1bb      	bne.n	40527c <_fclose_r+0x28>
  405304:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405306:	f016 0601 	ands.w	r6, r6, #1
  40530a:	d1b1      	bne.n	405270 <_fclose_r+0x1c>
  40530c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40530e:	f7ff fabd 	bl	40488c <__retarget_lock_release_recursive>
  405312:	4630      	mov	r0, r6
  405314:	bd70      	pop	{r4, r5, r6, pc}
  405316:	bf00      	nop

00405318 <_fstat_r>:
  405318:	b538      	push	{r3, r4, r5, lr}
  40531a:	460b      	mov	r3, r1
  40531c:	4c07      	ldr	r4, [pc, #28]	; (40533c <_fstat_r+0x24>)
  40531e:	4605      	mov	r5, r0
  405320:	4611      	mov	r1, r2
  405322:	4618      	mov	r0, r3
  405324:	2300      	movs	r3, #0
  405326:	6023      	str	r3, [r4, #0]
  405328:	f7fd f831 	bl	40238e <_fstat>
  40532c:	1c43      	adds	r3, r0, #1
  40532e:	d000      	beq.n	405332 <_fstat_r+0x1a>
  405330:	bd38      	pop	{r3, r4, r5, pc}
  405332:	6823      	ldr	r3, [r4, #0]
  405334:	2b00      	cmp	r3, #0
  405336:	d0fb      	beq.n	405330 <_fstat_r+0x18>
  405338:	602b      	str	r3, [r5, #0]
  40533a:	bd38      	pop	{r3, r4, r5, pc}
  40533c:	20000ed4 	.word	0x20000ed4

00405340 <_isatty_r>:
  405340:	b538      	push	{r3, r4, r5, lr}
  405342:	4c07      	ldr	r4, [pc, #28]	; (405360 <_isatty_r+0x20>)
  405344:	2300      	movs	r3, #0
  405346:	4605      	mov	r5, r0
  405348:	4608      	mov	r0, r1
  40534a:	6023      	str	r3, [r4, #0]
  40534c:	f7fd f82e 	bl	4023ac <_isatty>
  405350:	1c43      	adds	r3, r0, #1
  405352:	d000      	beq.n	405356 <_isatty_r+0x16>
  405354:	bd38      	pop	{r3, r4, r5, pc}
  405356:	6823      	ldr	r3, [r4, #0]
  405358:	2b00      	cmp	r3, #0
  40535a:	d0fb      	beq.n	405354 <_isatty_r+0x14>
  40535c:	602b      	str	r3, [r5, #0]
  40535e:	bd38      	pop	{r3, r4, r5, pc}
  405360:	20000ed4 	.word	0x20000ed4

00405364 <_lseek_r>:
  405364:	b570      	push	{r4, r5, r6, lr}
  405366:	460d      	mov	r5, r1
  405368:	4c08      	ldr	r4, [pc, #32]	; (40538c <_lseek_r+0x28>)
  40536a:	4611      	mov	r1, r2
  40536c:	4606      	mov	r6, r0
  40536e:	461a      	mov	r2, r3
  405370:	4628      	mov	r0, r5
  405372:	2300      	movs	r3, #0
  405374:	6023      	str	r3, [r4, #0]
  405376:	f7fd f823 	bl	4023c0 <_lseek>
  40537a:	1c43      	adds	r3, r0, #1
  40537c:	d000      	beq.n	405380 <_lseek_r+0x1c>
  40537e:	bd70      	pop	{r4, r5, r6, pc}
  405380:	6823      	ldr	r3, [r4, #0]
  405382:	2b00      	cmp	r3, #0
  405384:	d0fb      	beq.n	40537e <_lseek_r+0x1a>
  405386:	6033      	str	r3, [r6, #0]
  405388:	bd70      	pop	{r4, r5, r6, pc}
  40538a:	bf00      	nop
  40538c:	20000ed4 	.word	0x20000ed4

00405390 <_read_r>:
  405390:	b570      	push	{r4, r5, r6, lr}
  405392:	460d      	mov	r5, r1
  405394:	4c08      	ldr	r4, [pc, #32]	; (4053b8 <_read_r+0x28>)
  405396:	4611      	mov	r1, r2
  405398:	4606      	mov	r6, r0
  40539a:	461a      	mov	r2, r3
  40539c:	4628      	mov	r0, r5
  40539e:	2300      	movs	r3, #0
  4053a0:	6023      	str	r3, [r4, #0]
  4053a2:	f7fb fdb3 	bl	400f0c <_read>
  4053a6:	1c43      	adds	r3, r0, #1
  4053a8:	d000      	beq.n	4053ac <_read_r+0x1c>
  4053aa:	bd70      	pop	{r4, r5, r6, pc}
  4053ac:	6823      	ldr	r3, [r4, #0]
  4053ae:	2b00      	cmp	r3, #0
  4053b0:	d0fb      	beq.n	4053aa <_read_r+0x1a>
  4053b2:	6033      	str	r3, [r6, #0]
  4053b4:	bd70      	pop	{r4, r5, r6, pc}
  4053b6:	bf00      	nop
  4053b8:	20000ed4 	.word	0x20000ed4
  4053bc:	00038400 	.word	0x00038400
  4053c0:	000000c0 	.word	0x000000c0
  4053c4:	00000800 	.word	0x00000800
  4053c8:	00000000 	.word	0x00000000
  4053cc:	54535f58 	.word	0x54535f58
  4053d0:	000a0d58 	.word	0x000a0d58
  4053d4:	4f455f58 	.word	0x4f455f58
  4053d8:	000a0d54 	.word	0x000a0d54
  4053dc:	69460d0a 	.word	0x69460d0a
  4053e0:	61776d72 	.word	0x61776d72
  4053e4:	75206572 	.word	0x75206572
  4053e8:	74616470 	.word	0x74616470
  4053ec:	0a216465 	.word	0x0a216465
  4053f0:	0000000d 	.word	0x0000000d
  4053f4:	706d754a 	.word	0x706d754a
  4053f8:	20676e69 	.word	0x20676e69
  4053fc:	75206f74 	.word	0x75206f74
  405400:	20726573 	.word	0x20726573
  405404:	6c707061 	.word	0x6c707061
  405408:	74616369 	.word	0x74616369
  40540c:	2e6e6f69 	.word	0x2e6e6f69
  405410:	0d0a2e2e 	.word	0x0d0a2e2e
  405414:	00000000 	.word	0x00000000
  405418:	41435f58 	.word	0x41435f58
  40541c:	000a0d4e 	.word	0x000a0d4e
  405420:	6b636170 	.word	0x6b636170
  405424:	6e207465 	.word	0x6e207465
  405428:	3a206d75 	.word	0x3a206d75
  40542c:	0a0d6425 	.word	0x0a0d6425
  405430:	00000000 	.word	0x00000000
  405434:	3d3d3d3d 	.word	0x3d3d3d3d
  405438:	3d3d3d3d 	.word	0x3d3d3d3d
  40543c:	3d3d3d3d 	.word	0x3d3d3d3d
  405440:	3d3d3d3d 	.word	0x3d3d3d3d
  405444:	3d3d3d3d 	.word	0x3d3d3d3d
  405448:	3d3d3d3d 	.word	0x3d3d3d3d
  40544c:	3d3d3d3d 	.word	0x3d3d3d3d
  405450:	3d3d3d3d 	.word	0x3d3d3d3d
  405454:	3d3d3d3d 	.word	0x3d3d3d3d
  405458:	3d3d3d3d 	.word	0x3d3d3d3d
  40545c:	00000a0d 	.word	0x00000a0d
  405460:	4120203d 	.word	0x4120203d
  405464:	4d415354 	.word	0x4d415354
  405468:	46205334 	.word	0x46205334
  40546c:	776d7269 	.word	0x776d7269
  405470:	20657261 	.word	0x20657261
  405474:	61647055 	.word	0x61647055
  405478:	42206574 	.word	0x42206574
  40547c:	6c746f6f 	.word	0x6c746f6f
  405480:	6564616f 	.word	0x6564616f
  405484:	3d202072 	.word	0x3d202072
  405488:	00000a0d 	.word	0x00000a0d
  40548c:	61656c50 	.word	0x61656c50
  405490:	73206573 	.word	0x73206573
  405494:	20646e65 	.word	0x20646e65
  405498:	656e2061 	.word	0x656e2061
  40549c:	69622077 	.word	0x69622077
  4054a0:	7972616e 	.word	0x7972616e
  4054a4:	6c696620 	.word	0x6c696620
  4054a8:	69772065 	.word	0x69772065
  4054ac:	58206874 	.word	0x58206874
  4054b0:	65646f6d 	.word	0x65646f6d
  4054b4:	7270206d 	.word	0x7270206d
  4054b8:	636f746f 	.word	0x636f746f
  4054bc:	74206c6f 	.word	0x74206c6f
  4054c0:	7075206f 	.word	0x7075206f
  4054c4:	65746164 	.word	0x65746164
  4054c8:	65687420 	.word	0x65687420
  4054cc:	72696620 	.word	0x72696620
  4054d0:	7261776d 	.word	0x7261776d
  4054d4:	0d0a2e65 	.word	0x0d0a2e65
  4054d8:	00000000 	.word	0x00000000
  4054dc:	61460d0a 	.word	0x61460d0a
  4054e0:	64656c69 	.word	0x64656c69
  4054e4:	202e2e2e 	.word	0x202e2e2e
  4054e8:	61656c50 	.word	0x61656c50
  4054ec:	74206573 	.word	0x74206573
  4054f0:	61207972 	.word	0x61207972
  4054f4:	6e696167 	.word	0x6e696167
  4054f8:	000d0a2e 	.word	0x000d0a2e

004054fc <_global_impure_ptr>:
  4054fc:	20000018 33323130 37363534 42413938     ... 0123456789AB
  40550c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40551c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40552c:	0000296c                                l)..

00405530 <blanks.7217>:
  405530:	20202020 20202020 20202020 20202020                     

00405540 <zeroes.7218>:
  405540:	30303030 30303030 30303030 30303030     0000000000000000
  405550:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405560 <_ctype_>:
  405560:	20202000 20202020 28282020 20282828     .         ((((( 
  405570:	20202020 20202020 20202020 20202020                     
  405580:	10108820 10101010 10101010 10101010      ...............
  405590:	04040410 04040404 10040404 10101010     ................
  4055a0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4055b0:	01010101 01010101 01010101 10101010     ................
  4055c0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4055d0:	02020202 02020202 02020202 10101010     ................
  4055e0:	00000020 00000000 00000000 00000000      ...............
	...

00405664 <_init>:
  405664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405666:	bf00      	nop
  405668:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40566a:	bc08      	pop	{r3}
  40566c:	469e      	mov	lr, r3
  40566e:	4770      	bx	lr

00405670 <__init_array_start>:
  405670:	00403ef9 	.word	0x00403ef9

00405674 <__frame_dummy_init_array_entry>:
  405674:	004000f1                                ..@.

00405678 <_fini>:
  405678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40567a:	bf00      	nop
  40567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40567e:	bc08      	pop	{r3}
  405680:	469e      	mov	lr, r3
  405682:	4770      	bx	lr

00405684 <__fini_array_start>:
  405684:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <xmodem_packet_number>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__malloc_av_>:
	...
20000448:	0440 2000 0440 2000 0448 2000 0448 2000     @.. @.. H.. H.. 
20000458:	0450 2000 0450 2000 0458 2000 0458 2000     P.. P.. X.. X.. 
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 

20000848 <__malloc_sbrk_base>:
20000848:	ffff ffff                                   ....

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__atexit_recursive_mutex>:
20000850:	0eb0 2000                                   ... 

20000854 <__global_locale>:
20000854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	5125 0040 4981 0040 0000 0000 5560 0040     %Q@..I@.....`U@.
20000944:	555c 0040 5510 0040 5510 0040 5510 0040     \U@..U@..U@..U@.
20000954:	5510 0040 5510 0040 5510 0040 5510 0040     .U@..U@..U@..U@.
20000964:	5510 0040 5510 0040 ffff ffff ffff ffff     .U@..U@.........
20000974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

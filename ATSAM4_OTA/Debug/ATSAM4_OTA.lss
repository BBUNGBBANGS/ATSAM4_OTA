
ATSAM4_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e98  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00403e98  00403e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000854  20000000  00403ea0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002518  20000854  004046f4  00020854  2**2
                  ALLOC
  4 .stack        00003004  20002d6c  00406c0c  00020854  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002087e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001217e  00000000  00000000  000208d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027a3  00000000  00000000  00032a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005f3c  00000000  00000000  000351f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a98  00000000  00000000  0003b134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009d0  00000000  00000000  0003bbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015122  00000000  00000000  0003c59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d5ae  00000000  00000000  000516be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055ed4  00000000  00000000  0005ec6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003430  00000000  00000000  000b4b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 5d 00 20 4d 21 40 00 15 22 40 00 15 22 40 00     p]. M!@.."@.."@.
  400010:	15 22 40 00 15 22 40 00 15 22 40 00 00 00 00 00     ."@.."@.."@.....
	...
  40002c:	15 22 40 00 15 22 40 00 00 00 00 00 15 22 40 00     ."@.."@......"@.
  40003c:	15 22 40 00 15 22 40 00 15 22 40 00 15 22 40 00     ."@.."@.."@.."@.
  40004c:	15 22 40 00 15 22 40 00 15 22 40 00 15 22 40 00     ."@.."@.."@.."@.
  40005c:	15 22 40 00 15 22 40 00 1d 07 40 00 00 00 00 00     ."@.."@...@.....
  40006c:	61 1a 40 00 79 1a 40 00 91 1a 40 00 15 22 40 00     a.@.y.@...@.."@.
  40007c:	15 22 40 00 00 00 00 00 00 00 00 00 15 22 40 00     ."@.........."@.
  40008c:	15 22 40 00 15 22 40 00 15 22 40 00 15 22 40 00     ."@.."@.."@.."@.
  40009c:	15 22 40 00 15 22 40 00 15 22 40 00 15 22 40 00     ."@.."@.."@.."@.
  4000ac:	15 22 40 00 15 22 40 00 15 22 40 00 15 22 40 00     ."@.."@.."@.."@.
  4000bc:	15 22 40 00 15 22 40 00 15 22 40 00 15 22 40 00     ."@.."@.."@.."@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000854 	.word	0x20000854
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403ea0 	.word	0x00403ea0

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00403ea0 	.word	0x00403ea0
  40012c:	20000858 	.word	0x20000858
  400130:	00403ea0 	.word	0x00403ea0
  400134:	00000000 	.word	0x00000000

00400138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400138:	b480      	push	{r7}
  40013a:	b083      	sub	sp, #12
  40013c:	af00      	add	r7, sp, #0
  40013e:	4603      	mov	r3, r0
  400140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400142:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400146:	2b00      	cmp	r3, #0
  400148:	db0b      	blt.n	400162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40014a:	4908      	ldr	r1, [pc, #32]	; (40016c <__NVIC_EnableIRQ+0x34>)
  40014c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400150:	095b      	lsrs	r3, r3, #5
  400152:	79fa      	ldrb	r2, [r7, #7]
  400154:	f002 021f 	and.w	r2, r2, #31
  400158:	2001      	movs	r0, #1
  40015a:	fa00 f202 	lsl.w	r2, r0, r2
  40015e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400162:	bf00      	nop
  400164:	370c      	adds	r7, #12
  400166:	46bd      	mov	sp, r7
  400168:	bc80      	pop	{r7}
  40016a:	4770      	bx	lr
  40016c:	e000e100 	.word	0xe000e100

00400170 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400178:	687b      	ldr	r3, [r7, #4]
  40017a:	2b07      	cmp	r3, #7
  40017c:	d825      	bhi.n	4001ca <osc_get_rate+0x5a>
  40017e:	a201      	add	r2, pc, #4	; (adr r2, 400184 <osc_get_rate+0x14>)
  400180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400184:	004001a5 	.word	0x004001a5
  400188:	004001ab 	.word	0x004001ab
  40018c:	004001b1 	.word	0x004001b1
  400190:	004001b7 	.word	0x004001b7
  400194:	004001bb 	.word	0x004001bb
  400198:	004001bf 	.word	0x004001bf
  40019c:	004001c3 	.word	0x004001c3
  4001a0:	004001c7 	.word	0x004001c7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4001a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4001a8:	e010      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4001aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001ae:	e00d      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4001b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001b4:	e00a      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4001b6:	4b08      	ldr	r3, [pc, #32]	; (4001d8 <osc_get_rate+0x68>)
  4001b8:	e008      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4001ba:	4b08      	ldr	r3, [pc, #32]	; (4001dc <osc_get_rate+0x6c>)
  4001bc:	e006      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4001be:	4b08      	ldr	r3, [pc, #32]	; (4001e0 <osc_get_rate+0x70>)
  4001c0:	e004      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4001c2:	4b07      	ldr	r3, [pc, #28]	; (4001e0 <osc_get_rate+0x70>)
  4001c4:	e002      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4001c6:	4b06      	ldr	r3, [pc, #24]	; (4001e0 <osc_get_rate+0x70>)
  4001c8:	e000      	b.n	4001cc <osc_get_rate+0x5c>
	}

	return 0;
  4001ca:	2300      	movs	r3, #0
}
  4001cc:	4618      	mov	r0, r3
  4001ce:	370c      	adds	r7, #12
  4001d0:	46bd      	mov	sp, r7
  4001d2:	bc80      	pop	{r7}
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	003d0900 	.word	0x003d0900
  4001dc:	007a1200 	.word	0x007a1200
  4001e0:	00b71b00 	.word	0x00b71b00

004001e4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4001e4:	b580      	push	{r7, lr}
  4001e6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001e8:	2006      	movs	r0, #6
  4001ea:	4b04      	ldr	r3, [pc, #16]	; (4001fc <sysclk_get_main_hz+0x18>)
  4001ec:	4798      	blx	r3
  4001ee:	4602      	mov	r2, r0
  4001f0:	4613      	mov	r3, r2
  4001f2:	009b      	lsls	r3, r3, #2
  4001f4:	4413      	add	r3, r2
  4001f6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001f8:	4618      	mov	r0, r3
  4001fa:	bd80      	pop	{r7, pc}
  4001fc:	00400171 	.word	0x00400171

00400200 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400200:	b580      	push	{r7, lr}
  400202:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400204:	4b02      	ldr	r3, [pc, #8]	; (400210 <sysclk_get_cpu_hz+0x10>)
  400206:	4798      	blx	r3
  400208:	4603      	mov	r3, r0
  40020a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40020c:	4618      	mov	r0, r3
  40020e:	bd80      	pop	{r7, pc}
  400210:	004001e5 	.word	0x004001e5

00400214 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400214:	b580      	push	{r7, lr}
  400216:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400218:	4b02      	ldr	r3, [pc, #8]	; (400224 <sysclk_get_peripheral_hz+0x10>)
  40021a:	4798      	blx	r3
  40021c:	4603      	mov	r3, r0
  40021e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400220:	4618      	mov	r0, r3
  400222:	bd80      	pop	{r7, pc}
  400224:	004001e5 	.word	0x004001e5

00400228 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400228:	b580      	push	{r7, lr}
  40022a:	b082      	sub	sp, #8
  40022c:	af00      	add	r7, sp, #0
  40022e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400230:	6878      	ldr	r0, [r7, #4]
  400232:	4b03      	ldr	r3, [pc, #12]	; (400240 <sysclk_enable_peripheral_clock+0x18>)
  400234:	4798      	blx	r3
}
  400236:	bf00      	nop
  400238:	3708      	adds	r7, #8
  40023a:	46bd      	mov	sp, r7
  40023c:	bd80      	pop	{r7, pc}
  40023e:	bf00      	nop
  400240:	00401cf5 	.word	0x00401cf5

00400244 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  400244:	b580      	push	{r7, lr}
  400246:	b08c      	sub	sp, #48	; 0x30
  400248:	af00      	add	r7, sp, #0
  40024a:	6078      	str	r0, [r7, #4]
  40024c:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40024e:	4b31      	ldr	r3, [pc, #196]	; (400314 <usart_serial_init+0xd0>)
  400250:	4798      	blx	r3
  400252:	4603      	mov	r3, r0
  400254:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  400256:	683b      	ldr	r3, [r7, #0]
  400258:	681b      	ldr	r3, [r3, #0]
  40025a:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  40025c:	683b      	ldr	r3, [r7, #0]
  40025e:	689b      	ldr	r3, [r3, #8]
  400260:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  400262:	683b      	ldr	r3, [r7, #0]
  400264:	681b      	ldr	r3, [r3, #0]
  400266:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  400268:	683b      	ldr	r3, [r7, #0]
  40026a:	685b      	ldr	r3, [r3, #4]
  40026c:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40026e:	683b      	ldr	r3, [r7, #0]
  400270:	689b      	ldr	r3, [r3, #8]
  400272:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  400274:	683b      	ldr	r3, [r7, #0]
  400276:	68db      	ldr	r3, [r3, #12]
  400278:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40027a:	2300      	movs	r3, #0
  40027c:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40027e:	687b      	ldr	r3, [r7, #4]
  400280:	4a25      	ldr	r2, [pc, #148]	; (400318 <usart_serial_init+0xd4>)
  400282:	4293      	cmp	r3, r2
  400284:	d108      	bne.n	400298 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  400286:	2008      	movs	r0, #8
  400288:	4b24      	ldr	r3, [pc, #144]	; (40031c <usart_serial_init+0xd8>)
  40028a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40028c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400290:	4619      	mov	r1, r3
  400292:	6878      	ldr	r0, [r7, #4]
  400294:	4b22      	ldr	r3, [pc, #136]	; (400320 <usart_serial_init+0xdc>)
  400296:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	4a22      	ldr	r2, [pc, #136]	; (400324 <usart_serial_init+0xe0>)
  40029c:	4293      	cmp	r3, r2
  40029e:	d108      	bne.n	4002b2 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4002a0:	2009      	movs	r0, #9
  4002a2:	4b1e      	ldr	r3, [pc, #120]	; (40031c <usart_serial_init+0xd8>)
  4002a4:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4002a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4002aa:	4619      	mov	r1, r3
  4002ac:	6878      	ldr	r0, [r7, #4]
  4002ae:	4b1c      	ldr	r3, [pc, #112]	; (400320 <usart_serial_init+0xdc>)
  4002b0:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b2:	687b      	ldr	r3, [r7, #4]
  4002b4:	4a1c      	ldr	r2, [pc, #112]	; (400328 <usart_serial_init+0xe4>)
  4002b6:	4293      	cmp	r3, r2
  4002b8:	d111      	bne.n	4002de <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4002ba:	200e      	movs	r0, #14
  4002bc:	4b17      	ldr	r3, [pc, #92]	; (40031c <usart_serial_init+0xd8>)
  4002be:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002c0:	4b14      	ldr	r3, [pc, #80]	; (400314 <usart_serial_init+0xd0>)
  4002c2:	4798      	blx	r3
  4002c4:	4602      	mov	r2, r0
  4002c6:	f107 030c 	add.w	r3, r7, #12
  4002ca:	4619      	mov	r1, r3
  4002cc:	6878      	ldr	r0, [r7, #4]
  4002ce:	4b17      	ldr	r3, [pc, #92]	; (40032c <usart_serial_init+0xe8>)
  4002d0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002d2:	6878      	ldr	r0, [r7, #4]
  4002d4:	4b16      	ldr	r3, [pc, #88]	; (400330 <usart_serial_init+0xec>)
  4002d6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4002d8:	6878      	ldr	r0, [r7, #4]
  4002da:	4b16      	ldr	r3, [pc, #88]	; (400334 <usart_serial_init+0xf0>)
  4002dc:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002de:	687b      	ldr	r3, [r7, #4]
  4002e0:	4a15      	ldr	r2, [pc, #84]	; (400338 <usart_serial_init+0xf4>)
  4002e2:	4293      	cmp	r3, r2
  4002e4:	d111      	bne.n	40030a <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4002e6:	200f      	movs	r0, #15
  4002e8:	4b0c      	ldr	r3, [pc, #48]	; (40031c <usart_serial_init+0xd8>)
  4002ea:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002ec:	4b09      	ldr	r3, [pc, #36]	; (400314 <usart_serial_init+0xd0>)
  4002ee:	4798      	blx	r3
  4002f0:	4602      	mov	r2, r0
  4002f2:	f107 030c 	add.w	r3, r7, #12
  4002f6:	4619      	mov	r1, r3
  4002f8:	6878      	ldr	r0, [r7, #4]
  4002fa:	4b0c      	ldr	r3, [pc, #48]	; (40032c <usart_serial_init+0xe8>)
  4002fc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002fe:	6878      	ldr	r0, [r7, #4]
  400300:	4b0b      	ldr	r3, [pc, #44]	; (400330 <usart_serial_init+0xec>)
  400302:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400304:	6878      	ldr	r0, [r7, #4]
  400306:	4b0b      	ldr	r3, [pc, #44]	; (400334 <usart_serial_init+0xf0>)
  400308:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40030a:	bf00      	nop
  40030c:	3730      	adds	r7, #48	; 0x30
  40030e:	46bd      	mov	sp, r7
  400310:	bd80      	pop	{r7, pc}
  400312:	bf00      	nop
  400314:	00400215 	.word	0x00400215
  400318:	400e0600 	.word	0x400e0600
  40031c:	00400229 	.word	0x00400229
  400320:	00401d75 	.word	0x00401d75
  400324:	400e0800 	.word	0x400e0800
  400328:	40024000 	.word	0x40024000
  40032c:	00401f1d 	.word	0x00401f1d
  400330:	00401fa1 	.word	0x00401fa1
  400334:	00401fd1 	.word	0x00401fd1
  400338:	40028000 	.word	0x40028000

0040033c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40033c:	b580      	push	{r7, lr}
  40033e:	b082      	sub	sp, #8
  400340:	af00      	add	r7, sp, #0
  400342:	6078      	str	r0, [r7, #4]
  400344:	460b      	mov	r3, r1
  400346:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400348:	687b      	ldr	r3, [r7, #4]
  40034a:	4a20      	ldr	r2, [pc, #128]	; (4003cc <usart_serial_putchar+0x90>)
  40034c:	4293      	cmp	r3, r2
  40034e:	d10a      	bne.n	400366 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400350:	bf00      	nop
  400352:	78fb      	ldrb	r3, [r7, #3]
  400354:	4619      	mov	r1, r3
  400356:	6878      	ldr	r0, [r7, #4]
  400358:	4b1d      	ldr	r3, [pc, #116]	; (4003d0 <usart_serial_putchar+0x94>)
  40035a:	4798      	blx	r3
  40035c:	4603      	mov	r3, r0
  40035e:	2b00      	cmp	r3, #0
  400360:	d1f7      	bne.n	400352 <usart_serial_putchar+0x16>
		return 1;
  400362:	2301      	movs	r3, #1
  400364:	e02d      	b.n	4003c2 <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400366:	687b      	ldr	r3, [r7, #4]
  400368:	4a1a      	ldr	r2, [pc, #104]	; (4003d4 <usart_serial_putchar+0x98>)
  40036a:	4293      	cmp	r3, r2
  40036c:	d10a      	bne.n	400384 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40036e:	bf00      	nop
  400370:	78fb      	ldrb	r3, [r7, #3]
  400372:	4619      	mov	r1, r3
  400374:	6878      	ldr	r0, [r7, #4]
  400376:	4b16      	ldr	r3, [pc, #88]	; (4003d0 <usart_serial_putchar+0x94>)
  400378:	4798      	blx	r3
  40037a:	4603      	mov	r3, r0
  40037c:	2b00      	cmp	r3, #0
  40037e:	d1f7      	bne.n	400370 <usart_serial_putchar+0x34>
		return 1;
  400380:	2301      	movs	r3, #1
  400382:	e01e      	b.n	4003c2 <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400384:	687b      	ldr	r3, [r7, #4]
  400386:	4a14      	ldr	r2, [pc, #80]	; (4003d8 <usart_serial_putchar+0x9c>)
  400388:	4293      	cmp	r3, r2
  40038a:	d10a      	bne.n	4003a2 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  40038c:	bf00      	nop
  40038e:	78fb      	ldrb	r3, [r7, #3]
  400390:	4619      	mov	r1, r3
  400392:	6878      	ldr	r0, [r7, #4]
  400394:	4b11      	ldr	r3, [pc, #68]	; (4003dc <usart_serial_putchar+0xa0>)
  400396:	4798      	blx	r3
  400398:	4603      	mov	r3, r0
  40039a:	2b00      	cmp	r3, #0
  40039c:	d1f7      	bne.n	40038e <usart_serial_putchar+0x52>
		return 1;
  40039e:	2301      	movs	r3, #1
  4003a0:	e00f      	b.n	4003c2 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4003a2:	687b      	ldr	r3, [r7, #4]
  4003a4:	4a0e      	ldr	r2, [pc, #56]	; (4003e0 <usart_serial_putchar+0xa4>)
  4003a6:	4293      	cmp	r3, r2
  4003a8:	d10a      	bne.n	4003c0 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  4003aa:	bf00      	nop
  4003ac:	78fb      	ldrb	r3, [r7, #3]
  4003ae:	4619      	mov	r1, r3
  4003b0:	6878      	ldr	r0, [r7, #4]
  4003b2:	4b0a      	ldr	r3, [pc, #40]	; (4003dc <usart_serial_putchar+0xa0>)
  4003b4:	4798      	blx	r3
  4003b6:	4603      	mov	r3, r0
  4003b8:	2b00      	cmp	r3, #0
  4003ba:	d1f7      	bne.n	4003ac <usart_serial_putchar+0x70>
		return 1;
  4003bc:	2301      	movs	r3, #1
  4003be:	e000      	b.n	4003c2 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4003c0:	2300      	movs	r3, #0
}
  4003c2:	4618      	mov	r0, r3
  4003c4:	3708      	adds	r7, #8
  4003c6:	46bd      	mov	sp, r7
  4003c8:	bd80      	pop	{r7, pc}
  4003ca:	bf00      	nop
  4003cc:	400e0600 	.word	0x400e0600
  4003d0:	00401dd5 	.word	0x00401dd5
  4003d4:	400e0800 	.word	0x400e0800
  4003d8:	40024000 	.word	0x40024000
  4003dc:	0040207f 	.word	0x0040207f
  4003e0:	40028000 	.word	0x40028000

004003e4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4003e4:	b580      	push	{r7, lr}
  4003e6:	b084      	sub	sp, #16
  4003e8:	af00      	add	r7, sp, #0
  4003ea:	6078      	str	r0, [r7, #4]
  4003ec:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4003ee:	2300      	movs	r3, #0
  4003f0:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4003f2:	687b      	ldr	r3, [r7, #4]
  4003f4:	4a1f      	ldr	r2, [pc, #124]	; (400474 <usart_serial_getchar+0x90>)
  4003f6:	4293      	cmp	r3, r2
  4003f8:	d107      	bne.n	40040a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4003fa:	bf00      	nop
  4003fc:	6839      	ldr	r1, [r7, #0]
  4003fe:	6878      	ldr	r0, [r7, #4]
  400400:	4b1d      	ldr	r3, [pc, #116]	; (400478 <usart_serial_getchar+0x94>)
  400402:	4798      	blx	r3
  400404:	4603      	mov	r3, r0
  400406:	2b00      	cmp	r3, #0
  400408:	d1f8      	bne.n	4003fc <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40040a:	687b      	ldr	r3, [r7, #4]
  40040c:	4a1b      	ldr	r2, [pc, #108]	; (40047c <usart_serial_getchar+0x98>)
  40040e:	4293      	cmp	r3, r2
  400410:	d107      	bne.n	400422 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  400412:	bf00      	nop
  400414:	6839      	ldr	r1, [r7, #0]
  400416:	6878      	ldr	r0, [r7, #4]
  400418:	4b17      	ldr	r3, [pc, #92]	; (400478 <usart_serial_getchar+0x94>)
  40041a:	4798      	blx	r3
  40041c:	4603      	mov	r3, r0
  40041e:	2b00      	cmp	r3, #0
  400420:	d1f8      	bne.n	400414 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400422:	687b      	ldr	r3, [r7, #4]
  400424:	4a16      	ldr	r2, [pc, #88]	; (400480 <usart_serial_getchar+0x9c>)
  400426:	4293      	cmp	r3, r2
  400428:	d10d      	bne.n	400446 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  40042a:	bf00      	nop
  40042c:	f107 030c 	add.w	r3, r7, #12
  400430:	4619      	mov	r1, r3
  400432:	6878      	ldr	r0, [r7, #4]
  400434:	4b13      	ldr	r3, [pc, #76]	; (400484 <usart_serial_getchar+0xa0>)
  400436:	4798      	blx	r3
  400438:	4603      	mov	r3, r0
  40043a:	2b00      	cmp	r3, #0
  40043c:	d1f6      	bne.n	40042c <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  40043e:	68fb      	ldr	r3, [r7, #12]
  400440:	b2da      	uxtb	r2, r3
  400442:	683b      	ldr	r3, [r7, #0]
  400444:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400446:	687b      	ldr	r3, [r7, #4]
  400448:	4a0f      	ldr	r2, [pc, #60]	; (400488 <usart_serial_getchar+0xa4>)
  40044a:	4293      	cmp	r3, r2
  40044c:	d10d      	bne.n	40046a <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  40044e:	bf00      	nop
  400450:	f107 030c 	add.w	r3, r7, #12
  400454:	4619      	mov	r1, r3
  400456:	6878      	ldr	r0, [r7, #4]
  400458:	4b0a      	ldr	r3, [pc, #40]	; (400484 <usart_serial_getchar+0xa0>)
  40045a:	4798      	blx	r3
  40045c:	4603      	mov	r3, r0
  40045e:	2b00      	cmp	r3, #0
  400460:	d1f6      	bne.n	400450 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  400462:	68fb      	ldr	r3, [r7, #12]
  400464:	b2da      	uxtb	r2, r3
  400466:	683b      	ldr	r3, [r7, #0]
  400468:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40046a:	bf00      	nop
  40046c:	3710      	adds	r7, #16
  40046e:	46bd      	mov	sp, r7
  400470:	bd80      	pop	{r7, pc}
  400472:	bf00      	nop
  400474:	400e0600 	.word	0x400e0600
  400478:	00401e03 	.word	0x00401e03
  40047c:	400e0800 	.word	0x400e0800
  400480:	40024000 	.word	0x40024000
  400484:	004020af 	.word	0x004020af
  400488:	40028000 	.word	0x40028000

0040048c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  40048c:	b580      	push	{r7, lr}
  40048e:	b082      	sub	sp, #8
  400490:	af00      	add	r7, sp, #0
  400492:	6078      	str	r0, [r7, #4]
  400494:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  400496:	4a0f      	ldr	r2, [pc, #60]	; (4004d4 <stdio_serial_init+0x48>)
  400498:	687b      	ldr	r3, [r7, #4]
  40049a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40049c:	4b0e      	ldr	r3, [pc, #56]	; (4004d8 <stdio_serial_init+0x4c>)
  40049e:	4a0f      	ldr	r2, [pc, #60]	; (4004dc <stdio_serial_init+0x50>)
  4004a0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4004a2:	4b0f      	ldr	r3, [pc, #60]	; (4004e0 <stdio_serial_init+0x54>)
  4004a4:	4a0f      	ldr	r2, [pc, #60]	; (4004e4 <stdio_serial_init+0x58>)
  4004a6:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4004a8:	6839      	ldr	r1, [r7, #0]
  4004aa:	6878      	ldr	r0, [r7, #4]
  4004ac:	4b0e      	ldr	r3, [pc, #56]	; (4004e8 <stdio_serial_init+0x5c>)
  4004ae:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4004b0:	4b0e      	ldr	r3, [pc, #56]	; (4004ec <stdio_serial_init+0x60>)
  4004b2:	681b      	ldr	r3, [r3, #0]
  4004b4:	689b      	ldr	r3, [r3, #8]
  4004b6:	2100      	movs	r1, #0
  4004b8:	4618      	mov	r0, r3
  4004ba:	4b0d      	ldr	r3, [pc, #52]	; (4004f0 <stdio_serial_init+0x64>)
  4004bc:	4798      	blx	r3
	setbuf(stdin, NULL);
  4004be:	4b0b      	ldr	r3, [pc, #44]	; (4004ec <stdio_serial_init+0x60>)
  4004c0:	681b      	ldr	r3, [r3, #0]
  4004c2:	685b      	ldr	r3, [r3, #4]
  4004c4:	2100      	movs	r1, #0
  4004c6:	4618      	mov	r0, r3
  4004c8:	4b09      	ldr	r3, [pc, #36]	; (4004f0 <stdio_serial_init+0x64>)
  4004ca:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4004cc:	bf00      	nop
  4004ce:	3708      	adds	r7, #8
  4004d0:	46bd      	mov	sp, r7
  4004d2:	bd80      	pop	{r7, pc}
  4004d4:	20002d3c 	.word	0x20002d3c
  4004d8:	20002d38 	.word	0x20002d38
  4004dc:	0040033d 	.word	0x0040033d
  4004e0:	20002d34 	.word	0x20002d34
  4004e4:	004003e5 	.word	0x004003e5
  4004e8:	00400245 	.word	0x00400245
  4004ec:	20000010 	.word	0x20000010
  4004f0:	004031f5 	.word	0x004031f5

004004f4 <Boot_Uart_Init>:
Uart_Packet_t Uart_Packet;
uint16_t Uart_Buffer_Length;
uint8_t Uart_Packet_Received_Flag;

void Boot_Uart_Init(void)
{
  4004f4:	b590      	push	{r4, r7, lr}
  4004f6:	b085      	sub	sp, #20
  4004f8:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = 
  4004fa:	4b0c      	ldr	r3, [pc, #48]	; (40052c <Boot_Uart_Init+0x38>)
  4004fc:	463c      	mov	r4, r7
  4004fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits =	CONF_UART_STOP_BITS,
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(ID_UART1);
  400504:	2009      	movs	r0, #9
  400506:	4b0a      	ldr	r3, [pc, #40]	; (400530 <Boot_Uart_Init+0x3c>)
  400508:	4798      	blx	r3
	stdio_serial_init(UART1, &uart_serial_options);
  40050a:	463b      	mov	r3, r7
  40050c:	4619      	mov	r1, r3
  40050e:	4809      	ldr	r0, [pc, #36]	; (400534 <Boot_Uart_Init+0x40>)
  400510:	4b09      	ldr	r3, [pc, #36]	; (400538 <Boot_Uart_Init+0x44>)
  400512:	4798      	blx	r3
	usart_enable_interrupt(UART1, US_IER_RXRDY); // UART RX 인터럽트 활성화
  400514:	2101      	movs	r1, #1
  400516:	4807      	ldr	r0, [pc, #28]	; (400534 <Boot_Uart_Init+0x40>)
  400518:	4b08      	ldr	r3, [pc, #32]	; (40053c <Boot_Uart_Init+0x48>)
  40051a:	4798      	blx	r3
    NVIC_EnableIRQ(UART1_IRQn); // 전체 인터럽트 활성화
  40051c:	2009      	movs	r0, #9
  40051e:	4b08      	ldr	r3, [pc, #32]	; (400540 <Boot_Uart_Init+0x4c>)
  400520:	4798      	blx	r3
}
  400522:	bf00      	nop
  400524:	3714      	adds	r7, #20
  400526:	46bd      	mov	sp, r7
  400528:	bd90      	pop	{r4, r7, pc}
  40052a:	bf00      	nop
  40052c:	00403d5c 	.word	0x00403d5c
  400530:	00400229 	.word	0x00400229
  400534:	400e0800 	.word	0x400e0800
  400538:	0040048d 	.word	0x0040048d
  40053c:	00402001 	.word	0x00402001
  400540:	00400139 	.word	0x00400139

00400544 <Uart_Transmit>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
Uart_Status_t Uart_Transmit(uint8_t data)
{
  400544:	b580      	push	{r7, lr}
  400546:	b084      	sub	sp, #16
  400548:	af00      	add	r7, sp, #0
  40054a:	4603      	mov	r3, r0
  40054c:	71fb      	strb	r3, [r7, #7]
	Uart_Status_t status = UART_ERROR;
  40054e:	23ff      	movs	r3, #255	; 0xff
  400550:	73fb      	strb	r3, [r7, #15]

	if(uart_write(UART1,data) == 0)
  400552:	79fb      	ldrb	r3, [r7, #7]
  400554:	4619      	mov	r1, r3
  400556:	4806      	ldr	r0, [pc, #24]	; (400570 <Uart_Transmit+0x2c>)
  400558:	4b06      	ldr	r3, [pc, #24]	; (400574 <Uart_Transmit+0x30>)
  40055a:	4798      	blx	r3
  40055c:	4603      	mov	r3, r0
  40055e:	2b00      	cmp	r3, #0
  400560:	d101      	bne.n	400566 <Uart_Transmit+0x22>
	{
		status = UART_OK;
  400562:	2300      	movs	r3, #0
  400564:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  400566:	7bfb      	ldrb	r3, [r7, #15]
}
  400568:	4618      	mov	r0, r3
  40056a:	3710      	adds	r7, #16
  40056c:	46bd      	mov	sp, r7
  40056e:	bd80      	pop	{r7, pc}
  400570:	400e0800 	.word	0x400e0800
  400574:	00401dd5 	.word	0x00401dd5

00400578 <Uart_Transmit_Str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
Uart_Status_t Uart_Transmit_Str(uint8_t *data)
{
  400578:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  40057c:	b084      	sub	sp, #16
  40057e:	af00      	add	r7, sp, #0
  400580:	6078      	str	r0, [r7, #4]
	Uart_Status_t status = UART_ERROR;
  400582:	23ff      	movs	r3, #255	; 0xff
  400584:	737b      	strb	r3, [r7, #13]
	uint16_t length = (uint16_t)strlen((char *)data);
  400586:	6878      	ldr	r0, [r7, #4]
  400588:	4b29      	ldr	r3, [pc, #164]	; (400630 <Uart_Transmit_Str+0xb8>)
  40058a:	4798      	blx	r3
  40058c:	4603      	mov	r3, r0
  40058e:	817b      	strh	r3, [r7, #10]

	/* Calculate the length. */
	for(uint16_t i = 0; i < length; i++)
  400590:	2300      	movs	r3, #0
  400592:	81fb      	strh	r3, [r7, #14]
  400594:	e03b      	b.n	40060e <Uart_Transmit_Str+0x96>
	{
		status = Uart_Transmit(*(data+i));
  400596:	89fb      	ldrh	r3, [r7, #14]
  400598:	687a      	ldr	r2, [r7, #4]
  40059a:	4413      	add	r3, r2
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4618      	mov	r0, r3
  4005a0:	4b24      	ldr	r3, [pc, #144]	; (400634 <Uart_Transmit_Str+0xbc>)
  4005a2:	4798      	blx	r3
  4005a4:	4603      	mov	r3, r0
  4005a6:	737b      	strb	r3, [r7, #13]
		delay_us(100);
  4005a8:	4b23      	ldr	r3, [pc, #140]	; (400638 <Uart_Transmit_Str+0xc0>)
  4005aa:	4798      	blx	r3
  4005ac:	4603      	mov	r3, r0
  4005ae:	4619      	mov	r1, r3
  4005b0:	f04f 0200 	mov.w	r2, #0
  4005b4:	460b      	mov	r3, r1
  4005b6:	4614      	mov	r4, r2
  4005b8:	18db      	adds	r3, r3, r3
  4005ba:	eb44 0404 	adc.w	r4, r4, r4
  4005be:	185b      	adds	r3, r3, r1
  4005c0:	eb44 0402 	adc.w	r4, r4, r2
  4005c4:	0166      	lsls	r6, r4, #5
  4005c6:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4005ca:	015d      	lsls	r5, r3, #5
  4005cc:	195b      	adds	r3, r3, r5
  4005ce:	eb44 0406 	adc.w	r4, r4, r6
  4005d2:	185b      	adds	r3, r3, r1
  4005d4:	eb44 0402 	adc.w	r4, r4, r2
  4005d8:	a213      	add	r2, pc, #76	; (adr r2, 400628 <Uart_Transmit_Str+0xb0>)
  4005da:	e9d2 1200 	ldrd	r1, r2, [r2]
  4005de:	eb13 0b01 	adds.w	fp, r3, r1
  4005e2:	eb44 0c02 	adc.w	ip, r4, r2
  4005e6:	4658      	mov	r0, fp
  4005e8:	4661      	mov	r1, ip
  4005ea:	4c14      	ldr	r4, [pc, #80]	; (40063c <Uart_Transmit_Str+0xc4>)
  4005ec:	4a14      	ldr	r2, [pc, #80]	; (400640 <Uart_Transmit_Str+0xc8>)
  4005ee:	f04f 0300 	mov.w	r3, #0
  4005f2:	47a0      	blx	r4
  4005f4:	4603      	mov	r3, r0
  4005f6:	460c      	mov	r4, r1
  4005f8:	4618      	mov	r0, r3
  4005fa:	4b12      	ldr	r3, [pc, #72]	; (400644 <Uart_Transmit_Str+0xcc>)
  4005fc:	4798      	blx	r3
		if (status == UART_ERROR)
  4005fe:	7b7b      	ldrb	r3, [r7, #13]
  400600:	2bff      	cmp	r3, #255	; 0xff
  400602:	d101      	bne.n	400608 <Uart_Transmit_Str+0x90>
		{
			return status;
  400604:	7b7b      	ldrb	r3, [r7, #13]
  400606:	e009      	b.n	40061c <Uart_Transmit_Str+0xa4>
	for(uint16_t i = 0; i < length; i++)
  400608:	89fb      	ldrh	r3, [r7, #14]
  40060a:	3301      	adds	r3, #1
  40060c:	81fb      	strh	r3, [r7, #14]
  40060e:	89fa      	ldrh	r2, [r7, #14]
  400610:	897b      	ldrh	r3, [r7, #10]
  400612:	429a      	cmp	r2, r3
  400614:	d3bf      	bcc.n	400596 <Uart_Transmit_Str+0x1e>
		}
	}

	status = UART_OK;
  400616:	2300      	movs	r3, #0
  400618:	737b      	strb	r3, [r7, #13]

	return status;
  40061a:	7b7b      	ldrb	r3, [r7, #13]
}
  40061c:	4618      	mov	r0, r3
  40061e:	3710      	adds	r7, #16
  400620:	46bd      	mov	sp, r7
  400622:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  400626:	bf00      	nop
  400628:	00d59f7f 	.word	0x00d59f7f
  40062c:	00000000 	.word	0x00000000
  400630:	004033c1 	.word	0x004033c1
  400634:	00400545 	.word	0x00400545
  400638:	00400201 	.word	0x00400201
  40063c:	00402719 	.word	0x00402719
  400640:	00d59f80 	.word	0x00d59f80
  400644:	20000001 	.word	0x20000001

00400648 <Uart_Packet_Receive>:

Uart_Status_t Uart_Packet_Receive(uint8_t *data, Uart_Packet_Index_t index)
{
  400648:	b480      	push	{r7}
  40064a:	b085      	sub	sp, #20
  40064c:	af00      	add	r7, sp, #0
  40064e:	6078      	str	r0, [r7, #4]
  400650:	460b      	mov	r3, r1
  400652:	70fb      	strb	r3, [r7, #3]
	Uart_Status_t status = UART_ERROR;
  400654:	23ff      	movs	r3, #255	; 0xff
  400656:	73fb      	strb	r3, [r7, #15]
	if ((Uart_Buffer_Length > 0) || (Uart_Packet_Received_Flag == 1))
  400658:	4b2d      	ldr	r3, [pc, #180]	; (400710 <Uart_Packet_Receive+0xc8>)
  40065a:	881b      	ldrh	r3, [r3, #0]
  40065c:	2b00      	cmp	r3, #0
  40065e:	d103      	bne.n	400668 <Uart_Packet_Receive+0x20>
  400660:	4b2c      	ldr	r3, [pc, #176]	; (400714 <Uart_Packet_Receive+0xcc>)
  400662:	781b      	ldrb	r3, [r3, #0]
  400664:	2b01      	cmp	r3, #1
  400666:	d14c      	bne.n	400702 <Uart_Packet_Receive+0xba>
	{
		switch(index)
  400668:	78fb      	ldrb	r3, [r7, #3]
  40066a:	2b03      	cmp	r3, #3
  40066c:	d847      	bhi.n	4006fe <Uart_Packet_Receive+0xb6>
  40066e:	a201      	add	r2, pc, #4	; (adr r2, 400674 <Uart_Packet_Receive+0x2c>)
  400670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400674:	00400685 	.word	0x00400685
  400678:	0040068f 	.word	0x0040068f
  40067c:	004006b3 	.word	0x004006b3
  400680:	004006d9 	.word	0x004006d9
		{
			case UART_PACKET_HEADER : 
				*data = Uart_Packet.header;
  400684:	4b24      	ldr	r3, [pc, #144]	; (400718 <Uart_Packet_Receive+0xd0>)
  400686:	781a      	ldrb	r2, [r3, #0]
  400688:	687b      	ldr	r3, [r7, #4]
  40068a:	701a      	strb	r2, [r3, #0]
			break;
  40068c:	e037      	b.n	4006fe <Uart_Packet_Receive+0xb6>
			case UART_PACKET_NUM :
				for(uint8_t i = 0; i < 2; i++)
  40068e:	2300      	movs	r3, #0
  400690:	73bb      	strb	r3, [r7, #14]
  400692:	e00a      	b.n	4006aa <Uart_Packet_Receive+0x62>
				{
					*(data+i) = Uart_Packet.packet_num[i];
  400694:	7bbb      	ldrb	r3, [r7, #14]
  400696:	687a      	ldr	r2, [r7, #4]
  400698:	4413      	add	r3, r2
  40069a:	7bba      	ldrb	r2, [r7, #14]
  40069c:	491e      	ldr	r1, [pc, #120]	; (400718 <Uart_Packet_Receive+0xd0>)
  40069e:	440a      	add	r2, r1
  4006a0:	7852      	ldrb	r2, [r2, #1]
  4006a2:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < 2; i++)
  4006a4:	7bbb      	ldrb	r3, [r7, #14]
  4006a6:	3301      	adds	r3, #1
  4006a8:	73bb      	strb	r3, [r7, #14]
  4006aa:	7bbb      	ldrb	r3, [r7, #14]
  4006ac:	2b01      	cmp	r3, #1
  4006ae:	d9f1      	bls.n	400694 <Uart_Packet_Receive+0x4c>
				}
			break;
  4006b0:	e025      	b.n	4006fe <Uart_Packet_Receive+0xb6>
			case UART_PACKET_DATA :
				for(uint16_t i = 0; i < 1024; i++)
  4006b2:	2300      	movs	r3, #0
  4006b4:	81bb      	strh	r3, [r7, #12]
  4006b6:	e00a      	b.n	4006ce <Uart_Packet_Receive+0x86>
				{
					*(data+i) = Uart_Packet.data[i];
  4006b8:	89bb      	ldrh	r3, [r7, #12]
  4006ba:	687a      	ldr	r2, [r7, #4]
  4006bc:	4413      	add	r3, r2
  4006be:	89ba      	ldrh	r2, [r7, #12]
  4006c0:	4915      	ldr	r1, [pc, #84]	; (400718 <Uart_Packet_Receive+0xd0>)
  4006c2:	440a      	add	r2, r1
  4006c4:	78d2      	ldrb	r2, [r2, #3]
  4006c6:	701a      	strb	r2, [r3, #0]
				for(uint16_t i = 0; i < 1024; i++)
  4006c8:	89bb      	ldrh	r3, [r7, #12]
  4006ca:	3301      	adds	r3, #1
  4006cc:	81bb      	strh	r3, [r7, #12]
  4006ce:	89bb      	ldrh	r3, [r7, #12]
  4006d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4006d4:	d3f0      	bcc.n	4006b8 <Uart_Packet_Receive+0x70>
				}
			break;
  4006d6:	e012      	b.n	4006fe <Uart_Packet_Receive+0xb6>
			case UART_PACKET_CHECKSUM :
				for(uint8_t i = 0; i < 2; i++)
  4006d8:	2300      	movs	r3, #0
  4006da:	72fb      	strb	r3, [r7, #11]
  4006dc:	e00b      	b.n	4006f6 <Uart_Packet_Receive+0xae>
				{
					*(data+i) = Uart_Packet.checksum[i];
  4006de:	7afb      	ldrb	r3, [r7, #11]
  4006e0:	687a      	ldr	r2, [r7, #4]
  4006e2:	4413      	add	r3, r2
  4006e4:	7afa      	ldrb	r2, [r7, #11]
  4006e6:	490c      	ldr	r1, [pc, #48]	; (400718 <Uart_Packet_Receive+0xd0>)
  4006e8:	440a      	add	r2, r1
  4006ea:	f892 2403 	ldrb.w	r2, [r2, #1027]	; 0x403
  4006ee:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < 2; i++)
  4006f0:	7afb      	ldrb	r3, [r7, #11]
  4006f2:	3301      	adds	r3, #1
  4006f4:	72fb      	strb	r3, [r7, #11]
  4006f6:	7afb      	ldrb	r3, [r7, #11]
  4006f8:	2b01      	cmp	r3, #1
  4006fa:	d9f0      	bls.n	4006de <Uart_Packet_Receive+0x96>
				}		
			break;
  4006fc:	bf00      	nop
		}
		status = UART_OK;
  4006fe:	2300      	movs	r3, #0
  400700:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  400702:	7bfb      	ldrb	r3, [r7, #15]
}
  400704:	4618      	mov	r0, r3
  400706:	3714      	adds	r7, #20
  400708:	46bd      	mov	sp, r7
  40070a:	bc80      	pop	{r7}
  40070c:	4770      	bx	lr
  40070e:	bf00      	nop
  400710:	20002d32 	.word	0x20002d32
  400714:	20002d30 	.word	0x20002d30
  400718:	20000928 	.word	0x20000928

0040071c <UART1_Handler>:

void UART1_Handler(void)
{
  40071c:	b580      	push	{r7, lr}
  40071e:	b082      	sub	sp, #8
  400720:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
  400722:	2300      	movs	r3, #0
  400724:	71fb      	strb	r3, [r7, #7]
    if (usart_get_interrupt_mask(UART1) & US_IER_RXRDY) 
  400726:	4838      	ldr	r0, [pc, #224]	; (400808 <UART1_Handler+0xec>)
  400728:	4b38      	ldr	r3, [pc, #224]	; (40080c <UART1_Handler+0xf0>)
  40072a:	4798      	blx	r3
  40072c:	4603      	mov	r3, r0
  40072e:	f003 0301 	and.w	r3, r3, #1
  400732:	2b00      	cmp	r3, #0
  400734:	d063      	beq.n	4007fe <UART1_Handler+0xe2>
	{
        usart_getchar(UART1,(uint32_t *)&Uart_Rx_Buf[Uart_Buffer_Length]); 
  400736:	4b36      	ldr	r3, [pc, #216]	; (400810 <UART1_Handler+0xf4>)
  400738:	881b      	ldrh	r3, [r3, #0]
  40073a:	009b      	lsls	r3, r3, #2
  40073c:	4a35      	ldr	r2, [pc, #212]	; (400814 <UART1_Handler+0xf8>)
  40073e:	4413      	add	r3, r2
  400740:	4619      	mov	r1, r3
  400742:	4831      	ldr	r0, [pc, #196]	; (400808 <UART1_Handler+0xec>)
  400744:	4b34      	ldr	r3, [pc, #208]	; (400818 <UART1_Handler+0xfc>)
  400746:	4798      	blx	r3
		if (Uart_Buffer_Length < 1)
  400748:	4b31      	ldr	r3, [pc, #196]	; (400810 <UART1_Handler+0xf4>)
  40074a:	881b      	ldrh	r3, [r3, #0]
  40074c:	2b00      	cmp	r3, #0
  40074e:	d109      	bne.n	400764 <UART1_Handler+0x48>
		{
			Uart_Packet.header = Uart_Rx_Buf[Uart_Buffer_Length];
  400750:	4b2f      	ldr	r3, [pc, #188]	; (400810 <UART1_Handler+0xf4>)
  400752:	881b      	ldrh	r3, [r3, #0]
  400754:	461a      	mov	r2, r3
  400756:	4b2f      	ldr	r3, [pc, #188]	; (400814 <UART1_Handler+0xf8>)
  400758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40075c:	b2da      	uxtb	r2, r3
  40075e:	4b2f      	ldr	r3, [pc, #188]	; (40081c <UART1_Handler+0x100>)
  400760:	701a      	strb	r2, [r3, #0]
  400762:	e03d      	b.n	4007e0 <UART1_Handler+0xc4>
		}
		else if (Uart_Buffer_Length < 3)
  400764:	4b2a      	ldr	r3, [pc, #168]	; (400810 <UART1_Handler+0xf4>)
  400766:	881b      	ldrh	r3, [r3, #0]
  400768:	2b02      	cmp	r3, #2
  40076a:	d80e      	bhi.n	40078a <UART1_Handler+0x6e>
		{
			Uart_Packet.packet_num[Uart_Buffer_Length - 1] = Uart_Rx_Buf[Uart_Buffer_Length];
  40076c:	4b28      	ldr	r3, [pc, #160]	; (400810 <UART1_Handler+0xf4>)
  40076e:	881b      	ldrh	r3, [r3, #0]
  400770:	3b01      	subs	r3, #1
  400772:	4a27      	ldr	r2, [pc, #156]	; (400810 <UART1_Handler+0xf4>)
  400774:	8812      	ldrh	r2, [r2, #0]
  400776:	4611      	mov	r1, r2
  400778:	4a26      	ldr	r2, [pc, #152]	; (400814 <UART1_Handler+0xf8>)
  40077a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40077e:	b2d1      	uxtb	r1, r2
  400780:	4a26      	ldr	r2, [pc, #152]	; (40081c <UART1_Handler+0x100>)
  400782:	4413      	add	r3, r2
  400784:	460a      	mov	r2, r1
  400786:	705a      	strb	r2, [r3, #1]
  400788:	e02a      	b.n	4007e0 <UART1_Handler+0xc4>
		}
		else if (Uart_Buffer_Length < 1027)
  40078a:	4b21      	ldr	r3, [pc, #132]	; (400810 <UART1_Handler+0xf4>)
  40078c:	881b      	ldrh	r3, [r3, #0]
  40078e:	f240 4202 	movw	r2, #1026	; 0x402
  400792:	4293      	cmp	r3, r2
  400794:	d80e      	bhi.n	4007b4 <UART1_Handler+0x98>
		{
			Uart_Packet.data[Uart_Buffer_Length - 3] = Uart_Rx_Buf[Uart_Buffer_Length];
  400796:	4b1e      	ldr	r3, [pc, #120]	; (400810 <UART1_Handler+0xf4>)
  400798:	881b      	ldrh	r3, [r3, #0]
  40079a:	3b03      	subs	r3, #3
  40079c:	4a1c      	ldr	r2, [pc, #112]	; (400810 <UART1_Handler+0xf4>)
  40079e:	8812      	ldrh	r2, [r2, #0]
  4007a0:	4611      	mov	r1, r2
  4007a2:	4a1c      	ldr	r2, [pc, #112]	; (400814 <UART1_Handler+0xf8>)
  4007a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4007a8:	b2d1      	uxtb	r1, r2
  4007aa:	4a1c      	ldr	r2, [pc, #112]	; (40081c <UART1_Handler+0x100>)
  4007ac:	4413      	add	r3, r2
  4007ae:	460a      	mov	r2, r1
  4007b0:	70da      	strb	r2, [r3, #3]
  4007b2:	e015      	b.n	4007e0 <UART1_Handler+0xc4>
		}
		else if (Uart_Buffer_Length < 1029)
  4007b4:	4b16      	ldr	r3, [pc, #88]	; (400810 <UART1_Handler+0xf4>)
  4007b6:	881b      	ldrh	r3, [r3, #0]
  4007b8:	f240 4204 	movw	r2, #1028	; 0x404
  4007bc:	4293      	cmp	r3, r2
  4007be:	d80f      	bhi.n	4007e0 <UART1_Handler+0xc4>
		{
			Uart_Packet.checksum[Uart_Buffer_Length - 1027] = Uart_Rx_Buf[Uart_Buffer_Length];
  4007c0:	4b13      	ldr	r3, [pc, #76]	; (400810 <UART1_Handler+0xf4>)
  4007c2:	881b      	ldrh	r3, [r3, #0]
  4007c4:	f2a3 4303 	subw	r3, r3, #1027	; 0x403
  4007c8:	4a11      	ldr	r2, [pc, #68]	; (400810 <UART1_Handler+0xf4>)
  4007ca:	8812      	ldrh	r2, [r2, #0]
  4007cc:	4611      	mov	r1, r2
  4007ce:	4a11      	ldr	r2, [pc, #68]	; (400814 <UART1_Handler+0xf8>)
  4007d0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4007d4:	b2d1      	uxtb	r1, r2
  4007d6:	4a11      	ldr	r2, [pc, #68]	; (40081c <UART1_Handler+0x100>)
  4007d8:	4413      	add	r3, r2
  4007da:	460a      	mov	r2, r1
  4007dc:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
		}
		
		if(Uart_Buffer_Length >= 1028)
  4007e0:	4b0b      	ldr	r3, [pc, #44]	; (400810 <UART1_Handler+0xf4>)
  4007e2:	881b      	ldrh	r3, [r3, #0]
  4007e4:	f240 4203 	movw	r2, #1027	; 0x403
  4007e8:	4293      	cmp	r3, r2
  4007ea:	d902      	bls.n	4007f2 <UART1_Handler+0xd6>
		{
			Uart_Packet_Received_Flag = 1;
  4007ec:	4b0c      	ldr	r3, [pc, #48]	; (400820 <UART1_Handler+0x104>)
  4007ee:	2201      	movs	r2, #1
  4007f0:	701a      	strb	r2, [r3, #0]
		}
		Uart_Buffer_Length++;
  4007f2:	4b07      	ldr	r3, [pc, #28]	; (400810 <UART1_Handler+0xf4>)
  4007f4:	881b      	ldrh	r3, [r3, #0]
  4007f6:	3301      	adds	r3, #1
  4007f8:	b29a      	uxth	r2, r3
  4007fa:	4b05      	ldr	r3, [pc, #20]	; (400810 <UART1_Handler+0xf4>)
  4007fc:	801a      	strh	r2, [r3, #0]
    }
}
  4007fe:	bf00      	nop
  400800:	3708      	adds	r7, #8
  400802:	46bd      	mov	sp, r7
  400804:	bd80      	pop	{r7, pc}
  400806:	bf00      	nop
  400808:	400e0800 	.word	0x400e0800
  40080c:	0040201b 	.word	0x0040201b
  400810:	20002d32 	.word	0x20002d32
  400814:	20000d30 	.word	0x20000d30
  400818:	004020e1 	.word	0x004020e1
  40081c:	20000928 	.word	0x20000928
  400820:	20002d30 	.word	0x20002d30

00400824 <osc_get_rate>:
{
  400824:	b480      	push	{r7}
  400826:	b083      	sub	sp, #12
  400828:	af00      	add	r7, sp, #0
  40082a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40082c:	687b      	ldr	r3, [r7, #4]
  40082e:	2b07      	cmp	r3, #7
  400830:	d825      	bhi.n	40087e <osc_get_rate+0x5a>
  400832:	a201      	add	r2, pc, #4	; (adr r2, 400838 <osc_get_rate+0x14>)
  400834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400838:	00400859 	.word	0x00400859
  40083c:	0040085f 	.word	0x0040085f
  400840:	00400865 	.word	0x00400865
  400844:	0040086b 	.word	0x0040086b
  400848:	0040086f 	.word	0x0040086f
  40084c:	00400873 	.word	0x00400873
  400850:	00400877 	.word	0x00400877
  400854:	0040087b 	.word	0x0040087b
		return OSC_SLCK_32K_RC_HZ;
  400858:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40085c:	e010      	b.n	400880 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40085e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400862:	e00d      	b.n	400880 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400868:	e00a      	b.n	400880 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40086a:	4b08      	ldr	r3, [pc, #32]	; (40088c <osc_get_rate+0x68>)
  40086c:	e008      	b.n	400880 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40086e:	4b08      	ldr	r3, [pc, #32]	; (400890 <osc_get_rate+0x6c>)
  400870:	e006      	b.n	400880 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400872:	4b08      	ldr	r3, [pc, #32]	; (400894 <osc_get_rate+0x70>)
  400874:	e004      	b.n	400880 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400876:	4b07      	ldr	r3, [pc, #28]	; (400894 <osc_get_rate+0x70>)
  400878:	e002      	b.n	400880 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40087a:	4b06      	ldr	r3, [pc, #24]	; (400894 <osc_get_rate+0x70>)
  40087c:	e000      	b.n	400880 <osc_get_rate+0x5c>
	return 0;
  40087e:	2300      	movs	r3, #0
}
  400880:	4618      	mov	r0, r3
  400882:	370c      	adds	r7, #12
  400884:	46bd      	mov	sp, r7
  400886:	bc80      	pop	{r7}
  400888:	4770      	bx	lr
  40088a:	bf00      	nop
  40088c:	003d0900 	.word	0x003d0900
  400890:	007a1200 	.word	0x007a1200
  400894:	00b71b00 	.word	0x00b71b00

00400898 <sysclk_get_main_hz>:
{
  400898:	b580      	push	{r7, lr}
  40089a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40089c:	2006      	movs	r0, #6
  40089e:	4b04      	ldr	r3, [pc, #16]	; (4008b0 <sysclk_get_main_hz+0x18>)
  4008a0:	4798      	blx	r3
  4008a2:	4602      	mov	r2, r0
  4008a4:	4613      	mov	r3, r2
  4008a6:	009b      	lsls	r3, r3, #2
  4008a8:	4413      	add	r3, r2
  4008aa:	009b      	lsls	r3, r3, #2
}
  4008ac:	4618      	mov	r0, r3
  4008ae:	bd80      	pop	{r7, pc}
  4008b0:	00400825 	.word	0x00400825

004008b4 <sysclk_get_cpu_hz>:
{
  4008b4:	b580      	push	{r7, lr}
  4008b6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4008b8:	4b02      	ldr	r3, [pc, #8]	; (4008c4 <sysclk_get_cpu_hz+0x10>)
  4008ba:	4798      	blx	r3
  4008bc:	4603      	mov	r3, r0
  4008be:	085b      	lsrs	r3, r3, #1
}
  4008c0:	4618      	mov	r0, r3
  4008c2:	bd80      	pop	{r7, pc}
  4008c4:	00400899 	.word	0x00400899

004008c8 <xmodem_receive>:
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void xmodem_receive(void)
{
  4008c8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  4008cc:	b082      	sub	sp, #8
  4008ce:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
  4008d0:	2300      	movs	r3, #0
  4008d2:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0u;
  4008d4:	2300      	movs	r3, #0
  4008d6:	713b      	strb	r3, [r7, #4]

    x_first_packet_received = false;
  4008d8:	4b66      	ldr	r3, [pc, #408]	; (400a74 <xmodem_receive+0x1ac>)
  4008da:	2200      	movs	r2, #0
  4008dc:	701a      	strb	r2, [r3, #0]
    xmodem_packet_number = 1u;
  4008de:	4b66      	ldr	r3, [pc, #408]	; (400a78 <xmodem_receive+0x1b0>)
  4008e0:	2201      	movs	r2, #1
  4008e2:	701a      	strb	r2, [r3, #0]
    //xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;

    /* Loop until there isn't any error (or until we jump to the user application). */
    while (X_OK == status)
  4008e4:	e0bb      	b.n	400a5e <xmodem_receive+0x196>
    {
        uint8_t header = 0x00u;
  4008e6:	2300      	movs	r3, #0
  4008e8:	70fb      	strb	r3, [r7, #3]

        /* Get the header from UART. */
		Uart_Status_t comm_status = Uart_Packet_Receive(&header, UART_PACKET_HEADER);
  4008ea:	1cfb      	adds	r3, r7, #3
  4008ec:	2100      	movs	r1, #0
  4008ee:	4618      	mov	r0, r3
  4008f0:	4b62      	ldr	r3, [pc, #392]	; (400a7c <xmodem_receive+0x1b4>)
  4008f2:	4798      	blx	r3
  4008f4:	4603      	mov	r3, r0
  4008f6:	71fb      	strb	r3, [r7, #7]
        if ((header == X_SOH) || (header == X_STX))
  4008f8:	78fb      	ldrb	r3, [r7, #3]
  4008fa:	2b01      	cmp	r3, #1
  4008fc:	d002      	beq.n	400904 <xmodem_receive+0x3c>
  4008fe:	78fb      	ldrb	r3, [r7, #3]
  400900:	2b02      	cmp	r3, #2
  400902:	d102      	bne.n	40090a <xmodem_receive+0x42>
        {
            x_first_packet_received = true;
  400904:	4b5b      	ldr	r3, [pc, #364]	; (400a74 <xmodem_receive+0x1ac>)
  400906:	2201      	movs	r2, #1
  400908:	701a      	strb	r2, [r3, #0]
        }
        /* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
        if (x_first_packet_received == false)
  40090a:	4b5a      	ldr	r3, [pc, #360]	; (400a74 <xmodem_receive+0x1ac>)
  40090c:	781b      	ldrb	r3, [r3, #0]
  40090e:	2b00      	cmp	r3, #0
  400910:	d12d      	bne.n	40096e <xmodem_receive+0xa6>
        {
            (void)Uart_Transmit(X_C);
  400912:	2043      	movs	r0, #67	; 0x43
  400914:	4b5a      	ldr	r3, [pc, #360]	; (400a80 <xmodem_receive+0x1b8>)
  400916:	4798      	blx	r3
            delay_ms(10);
  400918:	4b5a      	ldr	r3, [pc, #360]	; (400a84 <xmodem_receive+0x1bc>)
  40091a:	4798      	blx	r3
  40091c:	4603      	mov	r3, r0
  40091e:	4619      	mov	r1, r3
  400920:	f04f 0200 	mov.w	r2, #0
  400924:	460b      	mov	r3, r1
  400926:	4614      	mov	r4, r2
  400928:	00a6      	lsls	r6, r4, #2
  40092a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40092e:	009d      	lsls	r5, r3, #2
  400930:	462b      	mov	r3, r5
  400932:	4634      	mov	r4, r6
  400934:	185b      	adds	r3, r3, r1
  400936:	eb44 0402 	adc.w	r4, r4, r2
  40093a:	18db      	adds	r3, r3, r3
  40093c:	eb44 0404 	adc.w	r4, r4, r4
  400940:	4619      	mov	r1, r3
  400942:	4622      	mov	r2, r4
  400944:	f243 63af 	movw	r3, #13999	; 0x36af
  400948:	f04f 0400 	mov.w	r4, #0
  40094c:	eb11 0b03 	adds.w	fp, r1, r3
  400950:	eb42 0c04 	adc.w	ip, r2, r4
  400954:	4658      	mov	r0, fp
  400956:	4661      	mov	r1, ip
  400958:	4c4b      	ldr	r4, [pc, #300]	; (400a88 <xmodem_receive+0x1c0>)
  40095a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40095e:	f04f 0300 	mov.w	r3, #0
  400962:	47a0      	blx	r4
  400964:	4603      	mov	r3, r0
  400966:	460c      	mov	r4, r1
  400968:	4618      	mov	r0, r3
  40096a:	4b48      	ldr	r3, [pc, #288]	; (400a8c <xmodem_receive+0x1c4>)
  40096c:	4798      	blx	r3
        }
		
        /* The header can be: SOH, STX, EOT and CAN. */
        switch(header)
  40096e:	78fb      	ldrb	r3, [r7, #3]
  400970:	3b01      	subs	r3, #1
  400972:	2b17      	cmp	r3, #23
  400974:	d865      	bhi.n	400a42 <xmodem_receive+0x17a>
  400976:	a201      	add	r2, pc, #4	; (adr r2, 40097c <xmodem_receive+0xb4>)
  400978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40097c:	004009dd 	.word	0x004009dd
  400980:	004009dd 	.word	0x004009dd
  400984:	00400a43 	.word	0x00400a43
  400988:	00400a29 	.word	0x00400a29
  40098c:	00400a43 	.word	0x00400a43
  400990:	00400a43 	.word	0x00400a43
  400994:	00400a43 	.word	0x00400a43
  400998:	00400a43 	.word	0x00400a43
  40099c:	00400a43 	.word	0x00400a43
  4009a0:	00400a43 	.word	0x00400a43
  4009a4:	00400a43 	.word	0x00400a43
  4009a8:	00400a43 	.word	0x00400a43
  4009ac:	00400a43 	.word	0x00400a43
  4009b0:	00400a43 	.word	0x00400a43
  4009b4:	00400a43 	.word	0x00400a43
  4009b8:	00400a43 	.word	0x00400a43
  4009bc:	00400a43 	.word	0x00400a43
  4009c0:	00400a43 	.word	0x00400a43
  4009c4:	00400a43 	.word	0x00400a43
  4009c8:	00400a43 	.word	0x00400a43
  4009cc:	00400a43 	.word	0x00400a43
  4009d0:	00400a43 	.word	0x00400a43
  4009d4:	00400a43 	.word	0x00400a43
  4009d8:	00400a3d 	.word	0x00400a3d
        {
            xmodem_status packet_status = X_ERROR;
            /* 128 or 1024 bytes of data. */
            case X_SOH:
            case X_STX:
                if(Uart_Packet_Received_Flag == 1)
  4009dc:	4b2c      	ldr	r3, [pc, #176]	; (400a90 <xmodem_receive+0x1c8>)
  4009de:	781b      	ldrb	r3, [r3, #0]
  4009e0:	2b01      	cmp	r3, #1
  4009e2:	d139      	bne.n	400a58 <xmodem_receive+0x190>
                {
                    /* If the handling was successful, then send an ACK. */
                    packet_status = xmodem_handle_packet(header);
  4009e4:	78fb      	ldrb	r3, [r7, #3]
  4009e6:	4618      	mov	r0, r3
  4009e8:	4b2a      	ldr	r3, [pc, #168]	; (400a94 <xmodem_receive+0x1cc>)
  4009ea:	4798      	blx	r3
  4009ec:	4603      	mov	r3, r0
  4009ee:	71bb      	strb	r3, [r7, #6]
                    if (X_OK == packet_status)
  4009f0:	79bb      	ldrb	r3, [r7, #6]
  4009f2:	2b00      	cmp	r3, #0
  4009f4:	d103      	bne.n	4009fe <xmodem_receive+0x136>
                    {
                        (void)Uart_Transmit(X_ACK);
  4009f6:	2006      	movs	r0, #6
  4009f8:	4b21      	ldr	r3, [pc, #132]	; (400a80 <xmodem_receive+0x1b8>)
  4009fa:	4798      	blx	r3
                    else
                    {
                        status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
                    }
                }
            break;
  4009fc:	e02c      	b.n	400a58 <xmodem_receive+0x190>
                    else if (X_ERROR_FLASH == packet_status)
  4009fe:	79bb      	ldrb	r3, [r7, #6]
  400a00:	2b08      	cmp	r3, #8
  400a02:	d109      	bne.n	400a18 <xmodem_receive+0x150>
                        error_number = X_MAX_ERRORS;
  400a04:	2303      	movs	r3, #3
  400a06:	713b      	strb	r3, [r7, #4]
                        status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  400a08:	1d3b      	adds	r3, r7, #4
  400a0a:	2103      	movs	r1, #3
  400a0c:	4618      	mov	r0, r3
  400a0e:	4b22      	ldr	r3, [pc, #136]	; (400a98 <xmodem_receive+0x1d0>)
  400a10:	4798      	blx	r3
  400a12:	4603      	mov	r3, r0
  400a14:	717b      	strb	r3, [r7, #5]
            break;
  400a16:	e01f      	b.n	400a58 <xmodem_receive+0x190>
                        status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  400a18:	1d3b      	adds	r3, r7, #4
  400a1a:	2103      	movs	r1, #3
  400a1c:	4618      	mov	r0, r3
  400a1e:	4b1e      	ldr	r3, [pc, #120]	; (400a98 <xmodem_receive+0x1d0>)
  400a20:	4798      	blx	r3
  400a22:	4603      	mov	r3, r0
  400a24:	717b      	strb	r3, [r7, #5]
            break;
  400a26:	e017      	b.n	400a58 <xmodem_receive+0x190>
            /* End of Transmission. */
            case X_EOT:
                /* ACK, feedback to user (as a text), then jump to user application. */
                (void)Uart_Transmit(X_ACK);
  400a28:	2006      	movs	r0, #6
  400a2a:	4b15      	ldr	r3, [pc, #84]	; (400a80 <xmodem_receive+0x1b8>)
  400a2c:	4798      	blx	r3
                (void)Uart_Transmit_Str((uint8_t*)"\n\rFirmware updated!\r\n");
  400a2e:	481b      	ldr	r0, [pc, #108]	; (400a9c <xmodem_receive+0x1d4>)
  400a30:	4b1b      	ldr	r3, [pc, #108]	; (400aa0 <xmodem_receive+0x1d8>)
  400a32:	4798      	blx	r3
                (void)Uart_Transmit_Str((uint8_t*)"Jumping to user application...\r\n");
  400a34:	481b      	ldr	r0, [pc, #108]	; (400aa4 <xmodem_receive+0x1dc>)
  400a36:	4b1a      	ldr	r3, [pc, #104]	; (400aa0 <xmodem_receive+0x1d8>)
  400a38:	4798      	blx	r3
                //Jump_To_Application();
            break;
  400a3a:	e010      	b.n	400a5e <xmodem_receive+0x196>
            /* Abort from host. */
            case X_CAN:
                status = X_ERROR;
  400a3c:	23ff      	movs	r3, #255	; 0xff
  400a3e:	717b      	strb	r3, [r7, #5]
            break;
  400a40:	e00d      	b.n	400a5e <xmodem_receive+0x196>
            default:
                /* Wrong header. */
                if (UART_OK == comm_status)
  400a42:	79fb      	ldrb	r3, [r7, #7]
  400a44:	2b00      	cmp	r3, #0
  400a46:	d109      	bne.n	400a5c <xmodem_receive+0x194>
                {
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  400a48:	1d3b      	adds	r3, r7, #4
  400a4a:	2103      	movs	r1, #3
  400a4c:	4618      	mov	r0, r3
  400a4e:	4b12      	ldr	r3, [pc, #72]	; (400a98 <xmodem_receive+0x1d0>)
  400a50:	4798      	blx	r3
  400a52:	4603      	mov	r3, r0
  400a54:	717b      	strb	r3, [r7, #5]
                }
            break;
  400a56:	e001      	b.n	400a5c <xmodem_receive+0x194>
            break;
  400a58:	bf00      	nop
  400a5a:	e000      	b.n	400a5e <xmodem_receive+0x196>
            break;
  400a5c:	bf00      	nop
    while (X_OK == status)
  400a5e:	797b      	ldrb	r3, [r7, #5]
  400a60:	b2db      	uxtb	r3, r3
  400a62:	2b00      	cmp	r3, #0
  400a64:	f43f af3f 	beq.w	4008e6 <xmodem_receive+0x1e>
        }
    }
}
  400a68:	bf00      	nop
  400a6a:	3708      	adds	r7, #8
  400a6c:	46bd      	mov	sp, r7
  400a6e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  400a72:	bf00      	nop
  400a74:	20000874 	.word	0x20000874
  400a78:	2000000a 	.word	0x2000000a
  400a7c:	00400649 	.word	0x00400649
  400a80:	00400545 	.word	0x00400545
  400a84:	004008b5 	.word	0x004008b5
  400a88:	00402719 	.word	0x00402719
  400a8c:	20000001 	.word	0x20000001
  400a90:	20002d30 	.word	0x20002d30
  400a94:	00400b1d 	.word	0x00400b1d
  400a98:	00400cb9 	.word	0x00400cb9
  400a9c:	00403d6c 	.word	0x00403d6c
  400aa0:	00400579 	.word	0x00400579
  400aa4:	00403d84 	.word	0x00403d84

00400aa8 <xmodem_calc_crc>:

static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
  400aa8:	b480      	push	{r7}
  400aaa:	b085      	sub	sp, #20
  400aac:	af00      	add	r7, sp, #0
  400aae:	6078      	str	r0, [r7, #4]
  400ab0:	460b      	mov	r3, r1
  400ab2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
  400ab4:	2300      	movs	r3, #0
  400ab6:	81fb      	strh	r3, [r7, #14]
    while (length)
  400ab8:	e026      	b.n	400b08 <xmodem_calc_crc+0x60>
    {
        length--;
  400aba:	887b      	ldrh	r3, [r7, #2]
  400abc:	3b01      	subs	r3, #1
  400abe:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
  400ac0:	687b      	ldr	r3, [r7, #4]
  400ac2:	1c5a      	adds	r2, r3, #1
  400ac4:	607a      	str	r2, [r7, #4]
  400ac6:	781b      	ldrb	r3, [r3, #0]
  400ac8:	021b      	lsls	r3, r3, #8
  400aca:	b21a      	sxth	r2, r3
  400acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  400ad0:	4053      	eors	r3, r2
  400ad2:	b21b      	sxth	r3, r3
  400ad4:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
  400ad6:	2300      	movs	r3, #0
  400ad8:	737b      	strb	r3, [r7, #13]
  400ada:	e012      	b.n	400b02 <xmodem_calc_crc+0x5a>
        {
            if (crc & 0x8000u)
  400adc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  400ae0:	2b00      	cmp	r3, #0
  400ae2:	da08      	bge.n	400af6 <xmodem_calc_crc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
  400ae4:	89fb      	ldrh	r3, [r7, #14]
  400ae6:	005b      	lsls	r3, r3, #1
  400ae8:	b29b      	uxth	r3, r3
  400aea:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
  400aee:	f083 0301 	eor.w	r3, r3, #1
  400af2:	81fb      	strh	r3, [r7, #14]
  400af4:	e002      	b.n	400afc <xmodem_calc_crc+0x54>
            }
            else
            {
                crc = crc << 1u;
  400af6:	89fb      	ldrh	r3, [r7, #14]
  400af8:	005b      	lsls	r3, r3, #1
  400afa:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
  400afc:	7b7b      	ldrb	r3, [r7, #13]
  400afe:	3301      	adds	r3, #1
  400b00:	737b      	strb	r3, [r7, #13]
  400b02:	7b7b      	ldrb	r3, [r7, #13]
  400b04:	2b07      	cmp	r3, #7
  400b06:	d9e9      	bls.n	400adc <xmodem_calc_crc+0x34>
    while (length)
  400b08:	887b      	ldrh	r3, [r7, #2]
  400b0a:	2b00      	cmp	r3, #0
  400b0c:	d1d5      	bne.n	400aba <xmodem_calc_crc+0x12>
            }
        }
    }
    return crc;
  400b0e:	89fb      	ldrh	r3, [r7, #14]
}
  400b10:	4618      	mov	r0, r3
  400b12:	3714      	adds	r7, #20
  400b14:	46bd      	mov	sp, r7
  400b16:	bc80      	pop	{r7}
  400b18:	4770      	bx	lr
	...

00400b1c <xmodem_handle_packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header)
{
  400b1c:	b580      	push	{r7, lr}
  400b1e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
  400b22:	af00      	add	r7, sp, #0
  400b24:	4602      	mov	r2, r0
  400b26:	1dfb      	adds	r3, r7, #7
  400b28:	701a      	strb	r2, [r3, #0]
    xmodem_status status = X_OK;
  400b2a:	2300      	movs	r3, #0
  400b2c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    uint16_t size = 0u;
  400b30:	2300      	movs	r3, #0
  400b32:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
    uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
    uint8_t received_packet_data[X_PACKET_1024_SIZE];
    uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

    /* Get the size of the data. */
    if (X_SOH == header)
  400b36:	1dfb      	adds	r3, r7, #7
  400b38:	781b      	ldrb	r3, [r3, #0]
  400b3a:	2b01      	cmp	r3, #1
  400b3c:	d103      	bne.n	400b46 <xmodem_handle_packet+0x2a>
    {
        size = X_PACKET_128_SIZE;
  400b3e:	2380      	movs	r3, #128	; 0x80
  400b40:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  400b44:	e00b      	b.n	400b5e <xmodem_handle_packet+0x42>
    }
    else if (X_STX == header)
  400b46:	1dfb      	adds	r3, r7, #7
  400b48:	781b      	ldrb	r3, [r3, #0]
  400b4a:	2b02      	cmp	r3, #2
  400b4c:	d104      	bne.n	400b58 <xmodem_handle_packet+0x3c>
    {
        size = X_PACKET_1024_SIZE;
  400b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400b52:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  400b56:	e002      	b.n	400b5e <xmodem_handle_packet+0x42>
    }
    else
    {
        /* Wrong header type. This shoudn't be possible... */
        status |= X_ERROR;
  400b58:	23ff      	movs	r3, #255	; 0xff
  400b5a:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    Uart_Status_t comm_status = UART_OK;
  400b5e:	2300      	movs	r3, #0
  400b60:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    /* Get the packet number, data and CRC from UART. */
    comm_status |= Uart_Packet_Receive(&received_packet_number[0u], UART_PACKET_NUM);
  400b64:	f207 430c 	addw	r3, r7, #1036	; 0x40c
  400b68:	2101      	movs	r1, #1
  400b6a:	4618      	mov	r0, r3
  400b6c:	4b4b      	ldr	r3, [pc, #300]	; (400c9c <xmodem_handle_packet+0x180>)
  400b6e:	4798      	blx	r3
  400b70:	4603      	mov	r3, r0
  400b72:	461a      	mov	r2, r3
  400b74:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400b78:	4313      	orrs	r3, r2
  400b7a:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    comm_status |= Uart_Packet_Receive(&received_packet_data[0u], UART_PACKET_DATA);
  400b7e:	f107 030c 	add.w	r3, r7, #12
  400b82:	2102      	movs	r1, #2
  400b84:	4618      	mov	r0, r3
  400b86:	4b45      	ldr	r3, [pc, #276]	; (400c9c <xmodem_handle_packet+0x180>)
  400b88:	4798      	blx	r3
  400b8a:	4603      	mov	r3, r0
  400b8c:	461a      	mov	r2, r3
  400b8e:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400b92:	4313      	orrs	r3, r2
  400b94:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    comm_status |= Uart_Packet_Receive(&received_packet_crc[0u], UART_PACKET_CHECKSUM);
  400b98:	f107 0308 	add.w	r3, r7, #8
  400b9c:	2103      	movs	r1, #3
  400b9e:	4618      	mov	r0, r3
  400ba0:	4b3e      	ldr	r3, [pc, #248]	; (400c9c <xmodem_handle_packet+0x180>)
  400ba2:	4798      	blx	r3
  400ba4:	4603      	mov	r3, r0
  400ba6:	461a      	mov	r2, r3
  400ba8:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400bac:	4313      	orrs	r3, r2
  400bae:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    
    /* Merge the two bytes of CRC. */
    uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
  400bb2:	f107 0308 	add.w	r3, r7, #8
  400bb6:	781b      	ldrb	r3, [r3, #0]
  400bb8:	021b      	lsls	r3, r3, #8
  400bba:	b21a      	sxth	r2, r3
  400bbc:	f107 0308 	add.w	r3, r7, #8
  400bc0:	785b      	ldrb	r3, [r3, #1]
  400bc2:	b21b      	sxth	r3, r3
  400bc4:	4313      	orrs	r3, r2
  400bc6:	b21b      	sxth	r3, r3
  400bc8:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
    /* We calculate it too. */
    uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
  400bcc:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  400bd0:	f107 030c 	add.w	r3, r7, #12
  400bd4:	4611      	mov	r1, r2
  400bd6:	4618      	mov	r0, r3
  400bd8:	4b31      	ldr	r3, [pc, #196]	; (400ca0 <xmodem_handle_packet+0x184>)
  400bda:	4798      	blx	r3
  400bdc:	4603      	mov	r3, r0
  400bde:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    
    /* Communication error. */
    if (UART_OK != comm_status)
  400be2:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400be6:	2b00      	cmp	r3, #0
  400be8:	d005      	beq.n	400bf6 <xmodem_handle_packet+0xda>
    {
        status |= X_ERROR_UART;
  400bea:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400bee:	f043 0304 	orr.w	r3, r3, #4
  400bf2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    /* If it is the first packet, then erase the memory. */
    if ((X_OK == status) && (false == x_first_packet_received))
  400bf6:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400bfa:	2b00      	cmp	r3, #0
  400bfc:	d106      	bne.n	400c0c <xmodem_handle_packet+0xf0>
  400bfe:	4b29      	ldr	r3, [pc, #164]	; (400ca4 <xmodem_handle_packet+0x188>)
  400c00:	781b      	ldrb	r3, [r3, #0]
  400c02:	2b00      	cmp	r3, #0
  400c04:	d102      	bne.n	400c0c <xmodem_handle_packet+0xf0>
    {
        if (1)//(FLASH_OK == flash_erase(FLASH_APP_START_ADDRESS))
        {
            x_first_packet_received = true;
  400c06:	4b27      	ldr	r3, [pc, #156]	; (400ca4 <xmodem_handle_packet+0x188>)
  400c08:	2201      	movs	r2, #1
  400c0a:	701a      	strb	r2, [r3, #0]
            status |= X_ERROR_FLASH;
        }
    }

    /* Error handling and flashing. */
    if (X_OK == status)
  400c0c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400c10:	2b00      	cmp	r3, #0
  400c12:	d125      	bne.n	400c60 <xmodem_handle_packet+0x144>
    {
        if (xmodem_packet_number != received_packet_number[0u])
  400c14:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
  400c18:	4b23      	ldr	r3, [pc, #140]	; (400ca8 <xmodem_handle_packet+0x18c>)
  400c1a:	781b      	ldrb	r3, [r3, #0]
  400c1c:	429a      	cmp	r2, r3
  400c1e:	d005      	beq.n	400c2c <xmodem_handle_packet+0x110>
        {
            /* Packet number counter mismatch. */
            status |= X_ERROR_NUMBER;
  400c20:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400c24:	f043 0302 	orr.w	r3, r3, #2
  400c28:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
        if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
  400c2c:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
  400c30:	461a      	mov	r2, r3
  400c32:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
  400c36:	4413      	add	r3, r2
  400c38:	2bff      	cmp	r3, #255	; 0xff
  400c3a:	d005      	beq.n	400c48 <xmodem_handle_packet+0x12c>
        {
            /* The sum of the packet number and packet number complement aren't 255. */
            /* The sum always has to be 255. */
            status |= X_ERROR_NUMBER;
  400c3c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400c40:	f043 0302 	orr.w	r3, r3, #2
  400c44:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
        if (crc_calculated != crc_received)
  400c48:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
  400c4c:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
  400c50:	429a      	cmp	r2, r3
  400c52:	d005      	beq.n	400c60 <xmodem_handle_packet+0x144>
        {
            /* The calculated and received CRC are different. */
            status |= X_ERROR_CRC;
  400c54:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400c58:	f043 0301 	orr.w	r3, r3, #1
  400c5c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
            /* Flashing error. */
            status |= X_ERROR_FLASH;
        }

    /* Raise the packet number and the address counters (if there weren't any errors). */
    if (X_OK == status)
  400c60:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400c64:	2b00      	cmp	r3, #0
  400c66:	d10c      	bne.n	400c82 <xmodem_handle_packet+0x166>
    {
        xmodem_packet_number++;
  400c68:	4b0f      	ldr	r3, [pc, #60]	; (400ca8 <xmodem_handle_packet+0x18c>)
  400c6a:	781b      	ldrb	r3, [r3, #0]
  400c6c:	3301      	adds	r3, #1
  400c6e:	b2da      	uxtb	r2, r3
  400c70:	4b0d      	ldr	r3, [pc, #52]	; (400ca8 <xmodem_handle_packet+0x18c>)
  400c72:	701a      	strb	r2, [r3, #0]
        xmodem_actual_flash_address += size;
  400c74:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  400c78:	4b0c      	ldr	r3, [pc, #48]	; (400cac <xmodem_handle_packet+0x190>)
  400c7a:	681b      	ldr	r3, [r3, #0]
  400c7c:	4413      	add	r3, r2
  400c7e:	4a0b      	ldr	r2, [pc, #44]	; (400cac <xmodem_handle_packet+0x190>)
  400c80:	6013      	str	r3, [r2, #0]
    }
    
    Uart_Buffer_Length = 0;
  400c82:	4b0b      	ldr	r3, [pc, #44]	; (400cb0 <xmodem_handle_packet+0x194>)
  400c84:	2200      	movs	r2, #0
  400c86:	801a      	strh	r2, [r3, #0]
	Uart_Packet_Received_Flag = 0;
  400c88:	4b0a      	ldr	r3, [pc, #40]	; (400cb4 <xmodem_handle_packet+0x198>)
  400c8a:	2200      	movs	r2, #0
  400c8c:	701a      	strb	r2, [r3, #0]
    return status;
  400c8e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
  400c92:	4618      	mov	r0, r3
  400c94:	f507 6783 	add.w	r7, r7, #1048	; 0x418
  400c98:	46bd      	mov	sp, r7
  400c9a:	bd80      	pop	{r7, pc}
  400c9c:	00400649 	.word	0x00400649
  400ca0:	00400aa9 	.word	0x00400aa9
  400ca4:	20000874 	.word	0x20000874
  400ca8:	2000000a 	.word	0x2000000a
  400cac:	20000870 	.word	0x20000870
  400cb0:	20002d32 	.word	0x20002d32
  400cb4:	20002d30 	.word	0x20002d30

00400cb8 <xmodem_error_handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number)
{
  400cb8:	b580      	push	{r7, lr}
  400cba:	b084      	sub	sp, #16
  400cbc:	af00      	add	r7, sp, #0
  400cbe:	6078      	str	r0, [r7, #4]
  400cc0:	460b      	mov	r3, r1
  400cc2:	70fb      	strb	r3, [r7, #3]
    xmodem_status status = X_OK;
  400cc4:	2300      	movs	r3, #0
  400cc6:	73fb      	strb	r3, [r7, #15]
    /* Raise the error counter. */
    (*error_number)++;
  400cc8:	687b      	ldr	r3, [r7, #4]
  400cca:	781b      	ldrb	r3, [r3, #0]
  400ccc:	3301      	adds	r3, #1
  400cce:	b2da      	uxtb	r2, r3
  400cd0:	687b      	ldr	r3, [r7, #4]
  400cd2:	701a      	strb	r2, [r3, #0]
    /* If the counter reached the max value, then abort. */
    if ((*error_number) >= max_error_number)
  400cd4:	687b      	ldr	r3, [r7, #4]
  400cd6:	781b      	ldrb	r3, [r3, #0]
  400cd8:	78fa      	ldrb	r2, [r7, #3]
  400cda:	429a      	cmp	r2, r3
  400cdc:	d808      	bhi.n	400cf0 <xmodem_error_handler+0x38>
    {
        /* Graceful abort. */
        (void)Uart_Transmit(X_CAN);
  400cde:	2018      	movs	r0, #24
  400ce0:	4b08      	ldr	r3, [pc, #32]	; (400d04 <xmodem_error_handler+0x4c>)
  400ce2:	4798      	blx	r3
        (void)Uart_Transmit(X_CAN);
  400ce4:	2018      	movs	r0, #24
  400ce6:	4b07      	ldr	r3, [pc, #28]	; (400d04 <xmodem_error_handler+0x4c>)
  400ce8:	4798      	blx	r3
        status = X_ERROR;
  400cea:	23ff      	movs	r3, #255	; 0xff
  400cec:	73fb      	strb	r3, [r7, #15]
  400cee:	e004      	b.n	400cfa <xmodem_error_handler+0x42>
    }
    /* Otherwise send a NAK for a repeat. */
    else
    {
        (void)Uart_Transmit(X_NAK);
  400cf0:	2015      	movs	r0, #21
  400cf2:	4b04      	ldr	r3, [pc, #16]	; (400d04 <xmodem_error_handler+0x4c>)
  400cf4:	4798      	blx	r3
        status = X_OK;
  400cf6:	2300      	movs	r3, #0
  400cf8:	73fb      	strb	r3, [r7, #15]
    }
    return status;
  400cfa:	7bfb      	ldrb	r3, [r7, #15]
  400cfc:	4618      	mov	r0, r3
  400cfe:	3710      	adds	r7, #16
  400d00:	46bd      	mov	sp, r7
  400d02:	bd80      	pop	{r7, pc}
  400d04:	00400545 	.word	0x00400545

00400d08 <osc_enable>:
{
  400d08:	b580      	push	{r7, lr}
  400d0a:	b082      	sub	sp, #8
  400d0c:	af00      	add	r7, sp, #0
  400d0e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d10:	687b      	ldr	r3, [r7, #4]
  400d12:	2b07      	cmp	r3, #7
  400d14:	d831      	bhi.n	400d7a <osc_enable+0x72>
  400d16:	a201      	add	r2, pc, #4	; (adr r2, 400d1c <osc_enable+0x14>)
  400d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d1c:	00400d79 	.word	0x00400d79
  400d20:	00400d3d 	.word	0x00400d3d
  400d24:	00400d45 	.word	0x00400d45
  400d28:	00400d4d 	.word	0x00400d4d
  400d2c:	00400d55 	.word	0x00400d55
  400d30:	00400d5d 	.word	0x00400d5d
  400d34:	00400d65 	.word	0x00400d65
  400d38:	00400d6f 	.word	0x00400d6f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400d3c:	2000      	movs	r0, #0
  400d3e:	4b11      	ldr	r3, [pc, #68]	; (400d84 <osc_enable+0x7c>)
  400d40:	4798      	blx	r3
		break;
  400d42:	e01a      	b.n	400d7a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400d44:	2001      	movs	r0, #1
  400d46:	4b0f      	ldr	r3, [pc, #60]	; (400d84 <osc_enable+0x7c>)
  400d48:	4798      	blx	r3
		break;
  400d4a:	e016      	b.n	400d7a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400d4c:	2000      	movs	r0, #0
  400d4e:	4b0e      	ldr	r3, [pc, #56]	; (400d88 <osc_enable+0x80>)
  400d50:	4798      	blx	r3
		break;
  400d52:	e012      	b.n	400d7a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400d54:	2010      	movs	r0, #16
  400d56:	4b0c      	ldr	r3, [pc, #48]	; (400d88 <osc_enable+0x80>)
  400d58:	4798      	blx	r3
		break;
  400d5a:	e00e      	b.n	400d7a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400d5c:	2020      	movs	r0, #32
  400d5e:	4b0a      	ldr	r3, [pc, #40]	; (400d88 <osc_enable+0x80>)
  400d60:	4798      	blx	r3
		break;
  400d62:	e00a      	b.n	400d7a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400d64:	213e      	movs	r1, #62	; 0x3e
  400d66:	2000      	movs	r0, #0
  400d68:	4b08      	ldr	r3, [pc, #32]	; (400d8c <osc_enable+0x84>)
  400d6a:	4798      	blx	r3
		break;
  400d6c:	e005      	b.n	400d7a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400d6e:	213e      	movs	r1, #62	; 0x3e
  400d70:	2001      	movs	r0, #1
  400d72:	4b06      	ldr	r3, [pc, #24]	; (400d8c <osc_enable+0x84>)
  400d74:	4798      	blx	r3
		break;
  400d76:	e000      	b.n	400d7a <osc_enable+0x72>
		break;
  400d78:	bf00      	nop
}
  400d7a:	bf00      	nop
  400d7c:	3708      	adds	r7, #8
  400d7e:	46bd      	mov	sp, r7
  400d80:	bd80      	pop	{r7, pc}
  400d82:	bf00      	nop
  400d84:	00401b29 	.word	0x00401b29
  400d88:	00401b95 	.word	0x00401b95
  400d8c:	00401c05 	.word	0x00401c05

00400d90 <osc_is_ready>:
{
  400d90:	b580      	push	{r7, lr}
  400d92:	b082      	sub	sp, #8
  400d94:	af00      	add	r7, sp, #0
  400d96:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d98:	687b      	ldr	r3, [r7, #4]
  400d9a:	2b07      	cmp	r3, #7
  400d9c:	d826      	bhi.n	400dec <osc_is_ready+0x5c>
  400d9e:	a201      	add	r2, pc, #4	; (adr r2, 400da4 <osc_is_ready+0x14>)
  400da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400da4:	00400dc5 	.word	0x00400dc5
  400da8:	00400dc9 	.word	0x00400dc9
  400dac:	00400dc9 	.word	0x00400dc9
  400db0:	00400ddb 	.word	0x00400ddb
  400db4:	00400ddb 	.word	0x00400ddb
  400db8:	00400ddb 	.word	0x00400ddb
  400dbc:	00400ddb 	.word	0x00400ddb
  400dc0:	00400ddb 	.word	0x00400ddb
		return 1;
  400dc4:	2301      	movs	r3, #1
  400dc6:	e012      	b.n	400dee <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  400dc8:	4b0b      	ldr	r3, [pc, #44]	; (400df8 <osc_is_ready+0x68>)
  400dca:	4798      	blx	r3
  400dcc:	4603      	mov	r3, r0
  400dce:	2b00      	cmp	r3, #0
  400dd0:	bf14      	ite	ne
  400dd2:	2301      	movne	r3, #1
  400dd4:	2300      	moveq	r3, #0
  400dd6:	b2db      	uxtb	r3, r3
  400dd8:	e009      	b.n	400dee <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  400dda:	4b08      	ldr	r3, [pc, #32]	; (400dfc <osc_is_ready+0x6c>)
  400ddc:	4798      	blx	r3
  400dde:	4603      	mov	r3, r0
  400de0:	2b00      	cmp	r3, #0
  400de2:	bf14      	ite	ne
  400de4:	2301      	movne	r3, #1
  400de6:	2300      	moveq	r3, #0
  400de8:	b2db      	uxtb	r3, r3
  400dea:	e000      	b.n	400dee <osc_is_ready+0x5e>
	return 0;
  400dec:	2300      	movs	r3, #0
}
  400dee:	4618      	mov	r0, r3
  400df0:	3708      	adds	r7, #8
  400df2:	46bd      	mov	sp, r7
  400df4:	bd80      	pop	{r7, pc}
  400df6:	bf00      	nop
  400df8:	00401b61 	.word	0x00401b61
  400dfc:	00401c7d 	.word	0x00401c7d

00400e00 <osc_get_rate>:
{
  400e00:	b480      	push	{r7}
  400e02:	b083      	sub	sp, #12
  400e04:	af00      	add	r7, sp, #0
  400e06:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400e08:	687b      	ldr	r3, [r7, #4]
  400e0a:	2b07      	cmp	r3, #7
  400e0c:	d825      	bhi.n	400e5a <osc_get_rate+0x5a>
  400e0e:	a201      	add	r2, pc, #4	; (adr r2, 400e14 <osc_get_rate+0x14>)
  400e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e14:	00400e35 	.word	0x00400e35
  400e18:	00400e3b 	.word	0x00400e3b
  400e1c:	00400e41 	.word	0x00400e41
  400e20:	00400e47 	.word	0x00400e47
  400e24:	00400e4b 	.word	0x00400e4b
  400e28:	00400e4f 	.word	0x00400e4f
  400e2c:	00400e53 	.word	0x00400e53
  400e30:	00400e57 	.word	0x00400e57
		return OSC_SLCK_32K_RC_HZ;
  400e34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400e38:	e010      	b.n	400e5c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e3e:	e00d      	b.n	400e5c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e44:	e00a      	b.n	400e5c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400e46:	4b08      	ldr	r3, [pc, #32]	; (400e68 <osc_get_rate+0x68>)
  400e48:	e008      	b.n	400e5c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400e4a:	4b08      	ldr	r3, [pc, #32]	; (400e6c <osc_get_rate+0x6c>)
  400e4c:	e006      	b.n	400e5c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400e4e:	4b08      	ldr	r3, [pc, #32]	; (400e70 <osc_get_rate+0x70>)
  400e50:	e004      	b.n	400e5c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400e52:	4b07      	ldr	r3, [pc, #28]	; (400e70 <osc_get_rate+0x70>)
  400e54:	e002      	b.n	400e5c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400e56:	4b06      	ldr	r3, [pc, #24]	; (400e70 <osc_get_rate+0x70>)
  400e58:	e000      	b.n	400e5c <osc_get_rate+0x5c>
	return 0;
  400e5a:	2300      	movs	r3, #0
}
  400e5c:	4618      	mov	r0, r3
  400e5e:	370c      	adds	r7, #12
  400e60:	46bd      	mov	sp, r7
  400e62:	bc80      	pop	{r7}
  400e64:	4770      	bx	lr
  400e66:	bf00      	nop
  400e68:	003d0900 	.word	0x003d0900
  400e6c:	007a1200 	.word	0x007a1200
  400e70:	00b71b00 	.word	0x00b71b00

00400e74 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400e74:	b580      	push	{r7, lr}
  400e76:	b082      	sub	sp, #8
  400e78:	af00      	add	r7, sp, #0
  400e7a:	4603      	mov	r3, r0
  400e7c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400e7e:	bf00      	nop
  400e80:	79fb      	ldrb	r3, [r7, #7]
  400e82:	4618      	mov	r0, r3
  400e84:	4b05      	ldr	r3, [pc, #20]	; (400e9c <osc_wait_ready+0x28>)
  400e86:	4798      	blx	r3
  400e88:	4603      	mov	r3, r0
  400e8a:	f083 0301 	eor.w	r3, r3, #1
  400e8e:	b2db      	uxtb	r3, r3
  400e90:	2b00      	cmp	r3, #0
  400e92:	d1f5      	bne.n	400e80 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400e94:	bf00      	nop
  400e96:	3708      	adds	r7, #8
  400e98:	46bd      	mov	sp, r7
  400e9a:	bd80      	pop	{r7, pc}
  400e9c:	00400d91 	.word	0x00400d91

00400ea0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400ea0:	b580      	push	{r7, lr}
  400ea2:	b086      	sub	sp, #24
  400ea4:	af00      	add	r7, sp, #0
  400ea6:	60f8      	str	r0, [r7, #12]
  400ea8:	607a      	str	r2, [r7, #4]
  400eaa:	603b      	str	r3, [r7, #0]
  400eac:	460b      	mov	r3, r1
  400eae:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400eb0:	7afb      	ldrb	r3, [r7, #11]
  400eb2:	4618      	mov	r0, r3
  400eb4:	4b0d      	ldr	r3, [pc, #52]	; (400eec <pll_config_init+0x4c>)
  400eb6:	4798      	blx	r3
  400eb8:	4602      	mov	r2, r0
  400eba:	687b      	ldr	r3, [r7, #4]
  400ebc:	fbb2 f3f3 	udiv	r3, r2, r3
  400ec0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400ec2:	697b      	ldr	r3, [r7, #20]
  400ec4:	683a      	ldr	r2, [r7, #0]
  400ec6:	fb02 f303 	mul.w	r3, r2, r3
  400eca:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400ecc:	683b      	ldr	r3, [r7, #0]
  400ece:	3b01      	subs	r3, #1
  400ed0:	041a      	lsls	r2, r3, #16
  400ed2:	4b07      	ldr	r3, [pc, #28]	; (400ef0 <pll_config_init+0x50>)
  400ed4:	4013      	ands	r3, r2
  400ed6:	687a      	ldr	r2, [r7, #4]
  400ed8:	b2d2      	uxtb	r2, r2
  400eda:	4313      	orrs	r3, r2
  400edc:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400ee0:	68fb      	ldr	r3, [r7, #12]
  400ee2:	601a      	str	r2, [r3, #0]
}
  400ee4:	bf00      	nop
  400ee6:	3718      	adds	r7, #24
  400ee8:	46bd      	mov	sp, r7
  400eea:	bd80      	pop	{r7, pc}
  400eec:	00400e01 	.word	0x00400e01
  400ef0:	07ff0000 	.word	0x07ff0000

00400ef4 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400ef4:	b580      	push	{r7, lr}
  400ef6:	b082      	sub	sp, #8
  400ef8:	af00      	add	r7, sp, #0
  400efa:	6078      	str	r0, [r7, #4]
  400efc:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400efe:	683b      	ldr	r3, [r7, #0]
  400f00:	2b00      	cmp	r3, #0
  400f02:	d108      	bne.n	400f16 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400f04:	4b09      	ldr	r3, [pc, #36]	; (400f2c <pll_enable+0x38>)
  400f06:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400f08:	4a09      	ldr	r2, [pc, #36]	; (400f30 <pll_enable+0x3c>)
  400f0a:	687b      	ldr	r3, [r7, #4]
  400f0c:	681b      	ldr	r3, [r3, #0]
  400f0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400f12:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400f14:	e005      	b.n	400f22 <pll_enable+0x2e>
		pmc_disable_pllbck();
  400f16:	4b07      	ldr	r3, [pc, #28]	; (400f34 <pll_enable+0x40>)
  400f18:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400f1a:	4a05      	ldr	r2, [pc, #20]	; (400f30 <pll_enable+0x3c>)
  400f1c:	687b      	ldr	r3, [r7, #4]
  400f1e:	681b      	ldr	r3, [r3, #0]
  400f20:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400f22:	bf00      	nop
  400f24:	3708      	adds	r7, #8
  400f26:	46bd      	mov	sp, r7
  400f28:	bd80      	pop	{r7, pc}
  400f2a:	bf00      	nop
  400f2c:	00401c95 	.word	0x00401c95
  400f30:	400e0400 	.word	0x400e0400
  400f34:	00401cc5 	.word	0x00401cc5

00400f38 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400f38:	b580      	push	{r7, lr}
  400f3a:	b082      	sub	sp, #8
  400f3c:	af00      	add	r7, sp, #0
  400f3e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400f40:	687b      	ldr	r3, [r7, #4]
  400f42:	2b00      	cmp	r3, #0
  400f44:	d103      	bne.n	400f4e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400f46:	4b05      	ldr	r3, [pc, #20]	; (400f5c <pll_is_locked+0x24>)
  400f48:	4798      	blx	r3
  400f4a:	4603      	mov	r3, r0
  400f4c:	e002      	b.n	400f54 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400f4e:	4b04      	ldr	r3, [pc, #16]	; (400f60 <pll_is_locked+0x28>)
  400f50:	4798      	blx	r3
  400f52:	4603      	mov	r3, r0
	}
}
  400f54:	4618      	mov	r0, r3
  400f56:	3708      	adds	r7, #8
  400f58:	46bd      	mov	sp, r7
  400f5a:	bd80      	pop	{r7, pc}
  400f5c:	00401cad 	.word	0x00401cad
  400f60:	00401cdd 	.word	0x00401cdd

00400f64 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400f64:	b580      	push	{r7, lr}
  400f66:	b082      	sub	sp, #8
  400f68:	af00      	add	r7, sp, #0
  400f6a:	4603      	mov	r3, r0
  400f6c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400f6e:	79fb      	ldrb	r3, [r7, #7]
  400f70:	3b03      	subs	r3, #3
  400f72:	2b04      	cmp	r3, #4
  400f74:	d808      	bhi.n	400f88 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400f76:	79fb      	ldrb	r3, [r7, #7]
  400f78:	4618      	mov	r0, r3
  400f7a:	4b06      	ldr	r3, [pc, #24]	; (400f94 <pll_enable_source+0x30>)
  400f7c:	4798      	blx	r3
		osc_wait_ready(e_src);
  400f7e:	79fb      	ldrb	r3, [r7, #7]
  400f80:	4618      	mov	r0, r3
  400f82:	4b05      	ldr	r3, [pc, #20]	; (400f98 <pll_enable_source+0x34>)
  400f84:	4798      	blx	r3
		break;
  400f86:	e000      	b.n	400f8a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400f88:	bf00      	nop
	}
}
  400f8a:	bf00      	nop
  400f8c:	3708      	adds	r7, #8
  400f8e:	46bd      	mov	sp, r7
  400f90:	bd80      	pop	{r7, pc}
  400f92:	bf00      	nop
  400f94:	00400d09 	.word	0x00400d09
  400f98:	00400e75 	.word	0x00400e75

00400f9c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400f9c:	b580      	push	{r7, lr}
  400f9e:	b082      	sub	sp, #8
  400fa0:	af00      	add	r7, sp, #0
  400fa2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400fa4:	bf00      	nop
  400fa6:	6878      	ldr	r0, [r7, #4]
  400fa8:	4b04      	ldr	r3, [pc, #16]	; (400fbc <pll_wait_for_lock+0x20>)
  400faa:	4798      	blx	r3
  400fac:	4603      	mov	r3, r0
  400fae:	2b00      	cmp	r3, #0
  400fb0:	d0f9      	beq.n	400fa6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400fb2:	2300      	movs	r3, #0
}
  400fb4:	4618      	mov	r0, r3
  400fb6:	3708      	adds	r7, #8
  400fb8:	46bd      	mov	sp, r7
  400fba:	bd80      	pop	{r7, pc}
  400fbc:	00400f39 	.word	0x00400f39

00400fc0 <sysclk_get_main_hz>:
{
  400fc0:	b580      	push	{r7, lr}
  400fc2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400fc4:	2006      	movs	r0, #6
  400fc6:	4b04      	ldr	r3, [pc, #16]	; (400fd8 <sysclk_get_main_hz+0x18>)
  400fc8:	4798      	blx	r3
  400fca:	4602      	mov	r2, r0
  400fcc:	4613      	mov	r3, r2
  400fce:	009b      	lsls	r3, r3, #2
  400fd0:	4413      	add	r3, r2
  400fd2:	009b      	lsls	r3, r3, #2
}
  400fd4:	4618      	mov	r0, r3
  400fd6:	bd80      	pop	{r7, pc}
  400fd8:	00400e01 	.word	0x00400e01

00400fdc <sysclk_get_cpu_hz>:
{
  400fdc:	b580      	push	{r7, lr}
  400fde:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fe0:	4b02      	ldr	r3, [pc, #8]	; (400fec <sysclk_get_cpu_hz+0x10>)
  400fe2:	4798      	blx	r3
  400fe4:	4603      	mov	r3, r0
  400fe6:	085b      	lsrs	r3, r3, #1
}
  400fe8:	4618      	mov	r0, r3
  400fea:	bd80      	pop	{r7, pc}
  400fec:	00400fc1 	.word	0x00400fc1

00400ff0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400ff0:	b590      	push	{r4, r7, lr}
  400ff2:	b083      	sub	sp, #12
  400ff4:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400ff6:	4811      	ldr	r0, [pc, #68]	; (40103c <sysclk_init+0x4c>)
  400ff8:	4b11      	ldr	r3, [pc, #68]	; (401040 <sysclk_init+0x50>)
  400ffa:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400ffc:	2006      	movs	r0, #6
  400ffe:	4b11      	ldr	r3, [pc, #68]	; (401044 <sysclk_init+0x54>)
  401000:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401002:	1d38      	adds	r0, r7, #4
  401004:	2314      	movs	r3, #20
  401006:	2201      	movs	r2, #1
  401008:	2106      	movs	r1, #6
  40100a:	4c0f      	ldr	r4, [pc, #60]	; (401048 <sysclk_init+0x58>)
  40100c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40100e:	1d3b      	adds	r3, r7, #4
  401010:	2100      	movs	r1, #0
  401012:	4618      	mov	r0, r3
  401014:	4b0d      	ldr	r3, [pc, #52]	; (40104c <sysclk_init+0x5c>)
  401016:	4798      	blx	r3
		pll_wait_for_lock(0);
  401018:	2000      	movs	r0, #0
  40101a:	4b0d      	ldr	r3, [pc, #52]	; (401050 <sysclk_init+0x60>)
  40101c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40101e:	2010      	movs	r0, #16
  401020:	4b0c      	ldr	r3, [pc, #48]	; (401054 <sysclk_init+0x64>)
  401022:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401024:	4b0c      	ldr	r3, [pc, #48]	; (401058 <sysclk_init+0x68>)
  401026:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401028:	4b0c      	ldr	r3, [pc, #48]	; (40105c <sysclk_init+0x6c>)
  40102a:	4798      	blx	r3
  40102c:	4603      	mov	r3, r0
  40102e:	4618      	mov	r0, r3
  401030:	4b03      	ldr	r3, [pc, #12]	; (401040 <sysclk_init+0x50>)
  401032:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401034:	bf00      	nop
  401036:	370c      	adds	r7, #12
  401038:	46bd      	mov	sp, r7
  40103a:	bd90      	pop	{r4, r7, pc}
  40103c:	07270e00 	.word	0x07270e00
  401040:	004023b5 	.word	0x004023b5
  401044:	00400f65 	.word	0x00400f65
  401048:	00400ea1 	.word	0x00400ea1
  40104c:	00400ef5 	.word	0x00400ef5
  401050:	00400f9d 	.word	0x00400f9d
  401054:	00401aa9 	.word	0x00401aa9
  401058:	0040221d 	.word	0x0040221d
  40105c:	00400fdd 	.word	0x00400fdd

00401060 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401060:	b580      	push	{r7, lr}
  401062:	b086      	sub	sp, #24
  401064:	af00      	add	r7, sp, #0
  401066:	60f8      	str	r0, [r7, #12]
  401068:	60b9      	str	r1, [r7, #8]
  40106a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40106c:	2300      	movs	r3, #0
  40106e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  401070:	68fb      	ldr	r3, [r7, #12]
  401072:	2b00      	cmp	r3, #0
  401074:	d012      	beq.n	40109c <_read+0x3c>
		return -1;
  401076:	f04f 33ff 	mov.w	r3, #4294967295
  40107a:	e013      	b.n	4010a4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  40107c:	4b0b      	ldr	r3, [pc, #44]	; (4010ac <_read+0x4c>)
  40107e:	681b      	ldr	r3, [r3, #0]
  401080:	4a0b      	ldr	r2, [pc, #44]	; (4010b0 <_read+0x50>)
  401082:	6812      	ldr	r2, [r2, #0]
  401084:	68b9      	ldr	r1, [r7, #8]
  401086:	4610      	mov	r0, r2
  401088:	4798      	blx	r3
		ptr++;
  40108a:	68bb      	ldr	r3, [r7, #8]
  40108c:	3301      	adds	r3, #1
  40108e:	60bb      	str	r3, [r7, #8]
		nChars++;
  401090:	697b      	ldr	r3, [r7, #20]
  401092:	3301      	adds	r3, #1
  401094:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  401096:	687b      	ldr	r3, [r7, #4]
  401098:	3b01      	subs	r3, #1
  40109a:	607b      	str	r3, [r7, #4]
  40109c:	687b      	ldr	r3, [r7, #4]
  40109e:	2b00      	cmp	r3, #0
  4010a0:	dcec      	bgt.n	40107c <_read+0x1c>
	}
	return nChars;
  4010a2:	697b      	ldr	r3, [r7, #20]
}
  4010a4:	4618      	mov	r0, r3
  4010a6:	3718      	adds	r7, #24
  4010a8:	46bd      	mov	sp, r7
  4010aa:	bd80      	pop	{r7, pc}
  4010ac:	20002d34 	.word	0x20002d34
  4010b0:	20002d3c 	.word	0x20002d3c

004010b4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4010b4:	b580      	push	{r7, lr}
  4010b6:	b086      	sub	sp, #24
  4010b8:	af00      	add	r7, sp, #0
  4010ba:	60f8      	str	r0, [r7, #12]
  4010bc:	60b9      	str	r1, [r7, #8]
  4010be:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4010c0:	2300      	movs	r3, #0
  4010c2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4010c4:	68fb      	ldr	r3, [r7, #12]
  4010c6:	2b01      	cmp	r3, #1
  4010c8:	d01e      	beq.n	401108 <_write+0x54>
  4010ca:	68fb      	ldr	r3, [r7, #12]
  4010cc:	2b02      	cmp	r3, #2
  4010ce:	d01b      	beq.n	401108 <_write+0x54>
  4010d0:	68fb      	ldr	r3, [r7, #12]
  4010d2:	2b03      	cmp	r3, #3
  4010d4:	d018      	beq.n	401108 <_write+0x54>
		return -1;
  4010d6:	f04f 33ff 	mov.w	r3, #4294967295
  4010da:	e019      	b.n	401110 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4010dc:	4b0e      	ldr	r3, [pc, #56]	; (401118 <_write+0x64>)
  4010de:	681a      	ldr	r2, [r3, #0]
  4010e0:	4b0e      	ldr	r3, [pc, #56]	; (40111c <_write+0x68>)
  4010e2:	6818      	ldr	r0, [r3, #0]
  4010e4:	68bb      	ldr	r3, [r7, #8]
  4010e6:	1c59      	adds	r1, r3, #1
  4010e8:	60b9      	str	r1, [r7, #8]
  4010ea:	781b      	ldrb	r3, [r3, #0]
  4010ec:	4619      	mov	r1, r3
  4010ee:	4790      	blx	r2
  4010f0:	4603      	mov	r3, r0
  4010f2:	2b00      	cmp	r3, #0
  4010f4:	da02      	bge.n	4010fc <_write+0x48>
			return -1;
  4010f6:	f04f 33ff 	mov.w	r3, #4294967295
  4010fa:	e009      	b.n	401110 <_write+0x5c>
		}
		++nChars;
  4010fc:	697b      	ldr	r3, [r7, #20]
  4010fe:	3301      	adds	r3, #1
  401100:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  401102:	687b      	ldr	r3, [r7, #4]
  401104:	3b01      	subs	r3, #1
  401106:	607b      	str	r3, [r7, #4]
  401108:	687b      	ldr	r3, [r7, #4]
  40110a:	2b00      	cmp	r3, #0
  40110c:	d1e6      	bne.n	4010dc <_write+0x28>
	}
	return nChars;
  40110e:	697b      	ldr	r3, [r7, #20]
}
  401110:	4618      	mov	r0, r3
  401112:	3718      	adds	r7, #24
  401114:	46bd      	mov	sp, r7
  401116:	bd80      	pop	{r7, pc}
  401118:	20002d38 	.word	0x20002d38
  40111c:	20002d3c 	.word	0x20002d3c

00401120 <sysclk_enable_peripheral_clock>:
{
  401120:	b580      	push	{r7, lr}
  401122:	b082      	sub	sp, #8
  401124:	af00      	add	r7, sp, #0
  401126:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401128:	6878      	ldr	r0, [r7, #4]
  40112a:	4b03      	ldr	r3, [pc, #12]	; (401138 <sysclk_enable_peripheral_clock+0x18>)
  40112c:	4798      	blx	r3
}
  40112e:	bf00      	nop
  401130:	3708      	adds	r7, #8
  401132:	46bd      	mov	sp, r7
  401134:	bd80      	pop	{r7, pc}
  401136:	bf00      	nop
  401138:	00401cf5 	.word	0x00401cf5

0040113c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40113c:	b580      	push	{r7, lr}
  40113e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  401140:	200b      	movs	r0, #11
  401142:	4b05      	ldr	r3, [pc, #20]	; (401158 <ioport_init+0x1c>)
  401144:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  401146:	200c      	movs	r0, #12
  401148:	4b03      	ldr	r3, [pc, #12]	; (401158 <ioport_init+0x1c>)
  40114a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40114c:	200d      	movs	r0, #13
  40114e:	4b02      	ldr	r3, [pc, #8]	; (401158 <ioport_init+0x1c>)
  401150:	4798      	blx	r3
	arch_ioport_init();
}
  401152:	bf00      	nop
  401154:	bd80      	pop	{r7, pc}
  401156:	bf00      	nop
  401158:	00401121 	.word	0x00401121

0040115c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  40115c:	b480      	push	{r7}
  40115e:	b08d      	sub	sp, #52	; 0x34
  401160:	af00      	add	r7, sp, #0
  401162:	6078      	str	r0, [r7, #4]
  401164:	6039      	str	r1, [r7, #0]
  401166:	687b      	ldr	r3, [r7, #4]
  401168:	62fb      	str	r3, [r7, #44]	; 0x2c
  40116a:	683b      	ldr	r3, [r7, #0]
  40116c:	62bb      	str	r3, [r7, #40]	; 0x28
  40116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401170:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401174:	095a      	lsrs	r2, r3, #5
  401176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401178:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40117a:	6a3b      	ldr	r3, [r7, #32]
  40117c:	f003 031f 	and.w	r3, r3, #31
  401180:	2101      	movs	r1, #1
  401182:	fa01 f303 	lsl.w	r3, r1, r3
  401186:	61fa      	str	r2, [r7, #28]
  401188:	61bb      	str	r3, [r7, #24]
  40118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40118c:	617b      	str	r3, [r7, #20]
  40118e:	69fb      	ldr	r3, [r7, #28]
  401190:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401192:	693b      	ldr	r3, [r7, #16]
  401194:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401198:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40119c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  40119e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4011a0:	697b      	ldr	r3, [r7, #20]
  4011a2:	f003 0308 	and.w	r3, r3, #8
  4011a6:	2b00      	cmp	r3, #0
  4011a8:	d003      	beq.n	4011b2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4011aa:	68fb      	ldr	r3, [r7, #12]
  4011ac:	69ba      	ldr	r2, [r7, #24]
  4011ae:	665a      	str	r2, [r3, #100]	; 0x64
  4011b0:	e002      	b.n	4011b8 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4011b2:	68fb      	ldr	r3, [r7, #12]
  4011b4:	69ba      	ldr	r2, [r7, #24]
  4011b6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4011b8:	697b      	ldr	r3, [r7, #20]
  4011ba:	f003 0310 	and.w	r3, r3, #16
  4011be:	2b00      	cmp	r3, #0
  4011c0:	d004      	beq.n	4011cc <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4011c2:	68fb      	ldr	r3, [r7, #12]
  4011c4:	69ba      	ldr	r2, [r7, #24]
  4011c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4011ca:	e003      	b.n	4011d4 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  4011cc:	68fb      	ldr	r3, [r7, #12]
  4011ce:	69ba      	ldr	r2, [r7, #24]
  4011d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4011d4:	697b      	ldr	r3, [r7, #20]
  4011d6:	f003 0320 	and.w	r3, r3, #32
  4011da:	2b00      	cmp	r3, #0
  4011dc:	d003      	beq.n	4011e6 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4011de:	68fb      	ldr	r3, [r7, #12]
  4011e0:	69ba      	ldr	r2, [r7, #24]
  4011e2:	651a      	str	r2, [r3, #80]	; 0x50
  4011e4:	e002      	b.n	4011ec <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  4011e6:	68fb      	ldr	r3, [r7, #12]
  4011e8:	69ba      	ldr	r2, [r7, #24]
  4011ea:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4011ec:	697b      	ldr	r3, [r7, #20]
  4011ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4011f2:	2b00      	cmp	r3, #0
  4011f4:	d003      	beq.n	4011fe <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4011f6:	68fb      	ldr	r3, [r7, #12]
  4011f8:	69ba      	ldr	r2, [r7, #24]
  4011fa:	621a      	str	r2, [r3, #32]
  4011fc:	e002      	b.n	401204 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  4011fe:	68fb      	ldr	r3, [r7, #12]
  401200:	69ba      	ldr	r2, [r7, #24]
  401202:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  401204:	697b      	ldr	r3, [r7, #20]
  401206:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40120a:	2b00      	cmp	r3, #0
  40120c:	d004      	beq.n	401218 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40120e:	68fb      	ldr	r3, [r7, #12]
  401210:	69ba      	ldr	r2, [r7, #24]
  401212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401216:	e003      	b.n	401220 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401218:	68fb      	ldr	r3, [r7, #12]
  40121a:	69ba      	ldr	r2, [r7, #24]
  40121c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401220:	697b      	ldr	r3, [r7, #20]
  401222:	f003 0301 	and.w	r3, r3, #1
  401226:	2b00      	cmp	r3, #0
  401228:	d006      	beq.n	401238 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40122a:	68fb      	ldr	r3, [r7, #12]
  40122c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40122e:	69bb      	ldr	r3, [r7, #24]
  401230:	431a      	orrs	r2, r3
  401232:	68fb      	ldr	r3, [r7, #12]
  401234:	671a      	str	r2, [r3, #112]	; 0x70
  401236:	e006      	b.n	401246 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401238:	68fb      	ldr	r3, [r7, #12]
  40123a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40123c:	69bb      	ldr	r3, [r7, #24]
  40123e:	43db      	mvns	r3, r3
  401240:	401a      	ands	r2, r3
  401242:	68fb      	ldr	r3, [r7, #12]
  401244:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  401246:	697b      	ldr	r3, [r7, #20]
  401248:	f003 0302 	and.w	r3, r3, #2
  40124c:	2b00      	cmp	r3, #0
  40124e:	d006      	beq.n	40125e <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  401250:	68fb      	ldr	r3, [r7, #12]
  401252:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401254:	69bb      	ldr	r3, [r7, #24]
  401256:	431a      	orrs	r2, r3
  401258:	68fb      	ldr	r3, [r7, #12]
  40125a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40125c:	e006      	b.n	40126c <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40125e:	68fb      	ldr	r3, [r7, #12]
  401260:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401262:	69bb      	ldr	r3, [r7, #24]
  401264:	43db      	mvns	r3, r3
  401266:	401a      	ands	r2, r3
  401268:	68fb      	ldr	r3, [r7, #12]
  40126a:	675a      	str	r2, [r3, #116]	; 0x74
  40126c:	bf00      	nop
  40126e:	3734      	adds	r7, #52	; 0x34
  401270:	46bd      	mov	sp, r7
  401272:	bc80      	pop	{r7}
  401274:	4770      	bx	lr

00401276 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401276:	b480      	push	{r7}
  401278:	b08d      	sub	sp, #52	; 0x34
  40127a:	af00      	add	r7, sp, #0
  40127c:	6078      	str	r0, [r7, #4]
  40127e:	460b      	mov	r3, r1
  401280:	70fb      	strb	r3, [r7, #3]
  401282:	687b      	ldr	r3, [r7, #4]
  401284:	62fb      	str	r3, [r7, #44]	; 0x2c
  401286:	78fb      	ldrb	r3, [r7, #3]
  401288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40128e:	627b      	str	r3, [r7, #36]	; 0x24
  401290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401292:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401294:	6a3b      	ldr	r3, [r7, #32]
  401296:	095b      	lsrs	r3, r3, #5
  401298:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40129a:	69fb      	ldr	r3, [r7, #28]
  40129c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4012a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4012a4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4012a6:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4012a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4012ac:	2b01      	cmp	r3, #1
  4012ae:	d109      	bne.n	4012c4 <ioport_set_pin_dir+0x4e>
  4012b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4012b2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4012b4:	697b      	ldr	r3, [r7, #20]
  4012b6:	f003 031f 	and.w	r3, r3, #31
  4012ba:	2201      	movs	r2, #1
  4012bc:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012be:	69bb      	ldr	r3, [r7, #24]
  4012c0:	611a      	str	r2, [r3, #16]
  4012c2:	e00c      	b.n	4012de <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4012c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4012c8:	2b00      	cmp	r3, #0
  4012ca:	d108      	bne.n	4012de <ioport_set_pin_dir+0x68>
  4012cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4012ce:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4012d0:	693b      	ldr	r3, [r7, #16]
  4012d2:	f003 031f 	and.w	r3, r3, #31
  4012d6:	2201      	movs	r2, #1
  4012d8:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4012da:	69bb      	ldr	r3, [r7, #24]
  4012dc:	615a      	str	r2, [r3, #20]
  4012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4012e0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4012e2:	68fb      	ldr	r3, [r7, #12]
  4012e4:	f003 031f 	and.w	r3, r3, #31
  4012e8:	2201      	movs	r2, #1
  4012ea:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012ec:	69bb      	ldr	r3, [r7, #24]
  4012ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4012f2:	bf00      	nop
  4012f4:	3734      	adds	r7, #52	; 0x34
  4012f6:	46bd      	mov	sp, r7
  4012f8:	bc80      	pop	{r7}
  4012fa:	4770      	bx	lr

004012fc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4012fc:	b480      	push	{r7}
  4012fe:	b08b      	sub	sp, #44	; 0x2c
  401300:	af00      	add	r7, sp, #0
  401302:	6078      	str	r0, [r7, #4]
  401304:	460b      	mov	r3, r1
  401306:	70fb      	strb	r3, [r7, #3]
  401308:	687b      	ldr	r3, [r7, #4]
  40130a:	627b      	str	r3, [r7, #36]	; 0x24
  40130c:	78fb      	ldrb	r3, [r7, #3]
  40130e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401314:	61fb      	str	r3, [r7, #28]
  401316:	69fb      	ldr	r3, [r7, #28]
  401318:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40131a:	69bb      	ldr	r3, [r7, #24]
  40131c:	095b      	lsrs	r3, r3, #5
  40131e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401320:	697b      	ldr	r3, [r7, #20]
  401322:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401326:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40132a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40132c:	613b      	str	r3, [r7, #16]

	if (level) {
  40132e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401332:	2b00      	cmp	r3, #0
  401334:	d009      	beq.n	40134a <ioport_set_pin_level+0x4e>
  401336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401338:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40133a:	68fb      	ldr	r3, [r7, #12]
  40133c:	f003 031f 	and.w	r3, r3, #31
  401340:	2201      	movs	r2, #1
  401342:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401344:	693b      	ldr	r3, [r7, #16]
  401346:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401348:	e008      	b.n	40135c <ioport_set_pin_level+0x60>
  40134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40134c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40134e:	68bb      	ldr	r3, [r7, #8]
  401350:	f003 031f 	and.w	r3, r3, #31
  401354:	2201      	movs	r2, #1
  401356:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401358:	693b      	ldr	r3, [r7, #16]
  40135a:	635a      	str	r2, [r3, #52]	; 0x34
  40135c:	bf00      	nop
  40135e:	372c      	adds	r7, #44	; 0x2c
  401360:	46bd      	mov	sp, r7
  401362:	bc80      	pop	{r7}
  401364:	4770      	bx	lr
	...

00401368 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401368:	b580      	push	{r7, lr}
  40136a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40136c:	4824      	ldr	r0, [pc, #144]	; (401400 <board_init+0x98>)
  40136e:	4b25      	ldr	r3, [pc, #148]	; (401404 <board_init+0x9c>)
  401370:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  401372:	4b25      	ldr	r3, [pc, #148]	; (401408 <board_init+0xa0>)
  401374:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  401376:	2101      	movs	r1, #1
  401378:	2057      	movs	r0, #87	; 0x57
  40137a:	4b24      	ldr	r3, [pc, #144]	; (40140c <board_init+0xa4>)
  40137c:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  40137e:	2101      	movs	r1, #1
  401380:	2057      	movs	r0, #87	; 0x57
  401382:	4b23      	ldr	r3, [pc, #140]	; (401410 <board_init+0xa8>)
  401384:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  401386:	2100      	movs	r1, #0
  401388:	2002      	movs	r0, #2
  40138a:	4b21      	ldr	r3, [pc, #132]	; (401410 <board_init+0xa8>)
  40138c:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  40138e:	2108      	movs	r1, #8
  401390:	2002      	movs	r0, #2
  401392:	4b20      	ldr	r3, [pc, #128]	; (401414 <board_init+0xac>)
  401394:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  401396:	2101      	movs	r1, #1
  401398:	2054      	movs	r0, #84	; 0x54
  40139a:	4b1c      	ldr	r3, [pc, #112]	; (40140c <board_init+0xa4>)
  40139c:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  40139e:	2101      	movs	r1, #1
  4013a0:	2054      	movs	r0, #84	; 0x54
  4013a2:	4b1b      	ldr	r3, [pc, #108]	; (401410 <board_init+0xa8>)
  4013a4:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  4013a6:	2101      	movs	r1, #1
  4013a8:	2010      	movs	r0, #16
  4013aa:	4b18      	ldr	r3, [pc, #96]	; (40140c <board_init+0xa4>)
  4013ac:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  4013ae:	2101      	movs	r1, #1
  4013b0:	2010      	movs	r0, #16
  4013b2:	4b17      	ldr	r3, [pc, #92]	; (401410 <board_init+0xa8>)
  4013b4:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  4013b6:	2101      	movs	r1, #1
  4013b8:	2056      	movs	r0, #86	; 0x56
  4013ba:	4b14      	ldr	r3, [pc, #80]	; (40140c <board_init+0xa4>)
  4013bc:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  4013be:	2101      	movs	r1, #1
  4013c0:	2056      	movs	r0, #86	; 0x56
  4013c2:	4b13      	ldr	r3, [pc, #76]	; (401410 <board_init+0xa8>)
  4013c4:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4013c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4013ca:	210c      	movs	r1, #12
  4013cc:	4812      	ldr	r0, [pc, #72]	; (401418 <board_init+0xb0>)
  4013ce:	4b13      	ldr	r3, [pc, #76]	; (40141c <board_init+0xb4>)
  4013d0:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4013d2:	4913      	ldr	r1, [pc, #76]	; (401420 <board_init+0xb8>)
  4013d4:	200c      	movs	r0, #12
  4013d6:	4b13      	ldr	r3, [pc, #76]	; (401424 <board_init+0xbc>)
  4013d8:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4013da:	4911      	ldr	r1, [pc, #68]	; (401420 <board_init+0xb8>)
  4013dc:	200d      	movs	r0, #13
  4013de:	4b11      	ldr	r3, [pc, #68]	; (401424 <board_init+0xbc>)
  4013e0:	4798      	blx	r3
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4013e2:	490f      	ldr	r1, [pc, #60]	; (401420 <board_init+0xb8>)
  4013e4:	200e      	movs	r0, #14
  4013e6:	4b0f      	ldr	r3, [pc, #60]	; (401424 <board_init+0xbc>)
  4013e8:	4798      	blx	r3
	 * Depending on the application requirements, the default PIN may not be available.
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */
#ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4013ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013ee:	200b      	movs	r0, #11
  4013f0:	4b0c      	ldr	r3, [pc, #48]	; (401424 <board_init+0xbc>)
  4013f2:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  4013f4:	2108      	movs	r1, #8
  4013f6:	2002      	movs	r0, #2
  4013f8:	4b06      	ldr	r3, [pc, #24]	; (401414 <board_init+0xac>)
  4013fa:	4798      	blx	r3

#endif



}
  4013fc:	bf00      	nop
  4013fe:	bd80      	pop	{r7, pc}
  401400:	400e1450 	.word	0x400e1450
  401404:	00402131 	.word	0x00402131
  401408:	0040113d 	.word	0x0040113d
  40140c:	004012fd 	.word	0x004012fd
  401410:	00401277 	.word	0x00401277
  401414:	0040115d 	.word	0x0040115d
  401418:	400e1000 	.word	0x400e1000
  40141c:	0040183d 	.word	0x0040183d
  401420:	08000001 	.word	0x08000001
  401424:	0040168d 	.word	0x0040168d

00401428 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401428:	b480      	push	{r7}
  40142a:	b085      	sub	sp, #20
  40142c:	af00      	add	r7, sp, #0
  40142e:	60f8      	str	r0, [r7, #12]
  401430:	60b9      	str	r1, [r7, #8]
  401432:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401434:	687b      	ldr	r3, [r7, #4]
  401436:	2b00      	cmp	r3, #0
  401438:	d003      	beq.n	401442 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40143a:	68fb      	ldr	r3, [r7, #12]
  40143c:	68ba      	ldr	r2, [r7, #8]
  40143e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401440:	e002      	b.n	401448 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401442:	68fb      	ldr	r3, [r7, #12]
  401444:	68ba      	ldr	r2, [r7, #8]
  401446:	661a      	str	r2, [r3, #96]	; 0x60
}
  401448:	bf00      	nop
  40144a:	3714      	adds	r7, #20
  40144c:	46bd      	mov	sp, r7
  40144e:	bc80      	pop	{r7}
  401450:	4770      	bx	lr

00401452 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401452:	b480      	push	{r7}
  401454:	b087      	sub	sp, #28
  401456:	af00      	add	r7, sp, #0
  401458:	60f8      	str	r0, [r7, #12]
  40145a:	60b9      	str	r1, [r7, #8]
  40145c:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40145e:	68fb      	ldr	r3, [r7, #12]
  401460:	687a      	ldr	r2, [r7, #4]
  401462:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401464:	68bb      	ldr	r3, [r7, #8]
  401466:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40146a:	d04a      	beq.n	401502 <pio_set_peripheral+0xb0>
  40146c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401470:	d808      	bhi.n	401484 <pio_set_peripheral+0x32>
  401472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401476:	d016      	beq.n	4014a6 <pio_set_peripheral+0x54>
  401478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40147c:	d02c      	beq.n	4014d8 <pio_set_peripheral+0x86>
  40147e:	2b00      	cmp	r3, #0
  401480:	d069      	beq.n	401556 <pio_set_peripheral+0x104>
  401482:	e064      	b.n	40154e <pio_set_peripheral+0xfc>
  401484:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401488:	d065      	beq.n	401556 <pio_set_peripheral+0x104>
  40148a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40148e:	d803      	bhi.n	401498 <pio_set_peripheral+0x46>
  401490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401494:	d04a      	beq.n	40152c <pio_set_peripheral+0xda>
  401496:	e05a      	b.n	40154e <pio_set_peripheral+0xfc>
  401498:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40149c:	d05b      	beq.n	401556 <pio_set_peripheral+0x104>
  40149e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4014a2:	d058      	beq.n	401556 <pio_set_peripheral+0x104>
  4014a4:	e053      	b.n	40154e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4014a6:	68fb      	ldr	r3, [r7, #12]
  4014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4014aa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4014ac:	68fb      	ldr	r3, [r7, #12]
  4014ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4014b0:	687b      	ldr	r3, [r7, #4]
  4014b2:	43d9      	mvns	r1, r3
  4014b4:	697b      	ldr	r3, [r7, #20]
  4014b6:	400b      	ands	r3, r1
  4014b8:	401a      	ands	r2, r3
  4014ba:	68fb      	ldr	r3, [r7, #12]
  4014bc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4014be:	68fb      	ldr	r3, [r7, #12]
  4014c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4014c2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4014c4:	68fb      	ldr	r3, [r7, #12]
  4014c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014c8:	687b      	ldr	r3, [r7, #4]
  4014ca:	43d9      	mvns	r1, r3
  4014cc:	697b      	ldr	r3, [r7, #20]
  4014ce:	400b      	ands	r3, r1
  4014d0:	401a      	ands	r2, r3
  4014d2:	68fb      	ldr	r3, [r7, #12]
  4014d4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4014d6:	e03a      	b.n	40154e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4014d8:	68fb      	ldr	r3, [r7, #12]
  4014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4014dc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4014de:	687a      	ldr	r2, [r7, #4]
  4014e0:	697b      	ldr	r3, [r7, #20]
  4014e2:	431a      	orrs	r2, r3
  4014e4:	68fb      	ldr	r3, [r7, #12]
  4014e6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4014e8:	68fb      	ldr	r3, [r7, #12]
  4014ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4014ec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4014ee:	68fb      	ldr	r3, [r7, #12]
  4014f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014f2:	687b      	ldr	r3, [r7, #4]
  4014f4:	43d9      	mvns	r1, r3
  4014f6:	697b      	ldr	r3, [r7, #20]
  4014f8:	400b      	ands	r3, r1
  4014fa:	401a      	ands	r2, r3
  4014fc:	68fb      	ldr	r3, [r7, #12]
  4014fe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401500:	e025      	b.n	40154e <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401502:	68fb      	ldr	r3, [r7, #12]
  401504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401506:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401508:	68fb      	ldr	r3, [r7, #12]
  40150a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40150c:	687b      	ldr	r3, [r7, #4]
  40150e:	43d9      	mvns	r1, r3
  401510:	697b      	ldr	r3, [r7, #20]
  401512:	400b      	ands	r3, r1
  401514:	401a      	ands	r2, r3
  401516:	68fb      	ldr	r3, [r7, #12]
  401518:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40151a:	68fb      	ldr	r3, [r7, #12]
  40151c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40151e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401520:	687a      	ldr	r2, [r7, #4]
  401522:	697b      	ldr	r3, [r7, #20]
  401524:	431a      	orrs	r2, r3
  401526:	68fb      	ldr	r3, [r7, #12]
  401528:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40152a:	e010      	b.n	40154e <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40152c:	68fb      	ldr	r3, [r7, #12]
  40152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401530:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401532:	687a      	ldr	r2, [r7, #4]
  401534:	697b      	ldr	r3, [r7, #20]
  401536:	431a      	orrs	r2, r3
  401538:	68fb      	ldr	r3, [r7, #12]
  40153a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40153c:	68fb      	ldr	r3, [r7, #12]
  40153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401540:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401542:	687a      	ldr	r2, [r7, #4]
  401544:	697b      	ldr	r3, [r7, #20]
  401546:	431a      	orrs	r2, r3
  401548:	68fb      	ldr	r3, [r7, #12]
  40154a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40154c:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40154e:	68fb      	ldr	r3, [r7, #12]
  401550:	687a      	ldr	r2, [r7, #4]
  401552:	605a      	str	r2, [r3, #4]
  401554:	e000      	b.n	401558 <pio_set_peripheral+0x106>
		return;
  401556:	bf00      	nop
}
  401558:	371c      	adds	r7, #28
  40155a:	46bd      	mov	sp, r7
  40155c:	bc80      	pop	{r7}
  40155e:	4770      	bx	lr

00401560 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401560:	b580      	push	{r7, lr}
  401562:	b084      	sub	sp, #16
  401564:	af00      	add	r7, sp, #0
  401566:	60f8      	str	r0, [r7, #12]
  401568:	60b9      	str	r1, [r7, #8]
  40156a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40156c:	68b9      	ldr	r1, [r7, #8]
  40156e:	68f8      	ldr	r0, [r7, #12]
  401570:	4b19      	ldr	r3, [pc, #100]	; (4015d8 <pio_set_input+0x78>)
  401572:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401574:	687b      	ldr	r3, [r7, #4]
  401576:	f003 0301 	and.w	r3, r3, #1
  40157a:	461a      	mov	r2, r3
  40157c:	68b9      	ldr	r1, [r7, #8]
  40157e:	68f8      	ldr	r0, [r7, #12]
  401580:	4b16      	ldr	r3, [pc, #88]	; (4015dc <pio_set_input+0x7c>)
  401582:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401584:	687b      	ldr	r3, [r7, #4]
  401586:	f003 030a 	and.w	r3, r3, #10
  40158a:	2b00      	cmp	r3, #0
  40158c:	d003      	beq.n	401596 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40158e:	68fb      	ldr	r3, [r7, #12]
  401590:	68ba      	ldr	r2, [r7, #8]
  401592:	621a      	str	r2, [r3, #32]
  401594:	e002      	b.n	40159c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401596:	68fb      	ldr	r3, [r7, #12]
  401598:	68ba      	ldr	r2, [r7, #8]
  40159a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40159c:	687b      	ldr	r3, [r7, #4]
  40159e:	f003 0302 	and.w	r3, r3, #2
  4015a2:	2b00      	cmp	r3, #0
  4015a4:	d004      	beq.n	4015b0 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4015a6:	68fb      	ldr	r3, [r7, #12]
  4015a8:	68ba      	ldr	r2, [r7, #8]
  4015aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4015ae:	e008      	b.n	4015c2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4015b0:	687b      	ldr	r3, [r7, #4]
  4015b2:	f003 0308 	and.w	r3, r3, #8
  4015b6:	2b00      	cmp	r3, #0
  4015b8:	d003      	beq.n	4015c2 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4015ba:	68fb      	ldr	r3, [r7, #12]
  4015bc:	68ba      	ldr	r2, [r7, #8]
  4015be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4015c2:	68fb      	ldr	r3, [r7, #12]
  4015c4:	68ba      	ldr	r2, [r7, #8]
  4015c6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4015c8:	68fb      	ldr	r3, [r7, #12]
  4015ca:	68ba      	ldr	r2, [r7, #8]
  4015cc:	601a      	str	r2, [r3, #0]
}
  4015ce:	bf00      	nop
  4015d0:	3710      	adds	r7, #16
  4015d2:	46bd      	mov	sp, r7
  4015d4:	bd80      	pop	{r7, pc}
  4015d6:	bf00      	nop
  4015d8:	00401645 	.word	0x00401645
  4015dc:	00401429 	.word	0x00401429

004015e0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4015e0:	b580      	push	{r7, lr}
  4015e2:	b084      	sub	sp, #16
  4015e4:	af00      	add	r7, sp, #0
  4015e6:	60f8      	str	r0, [r7, #12]
  4015e8:	60b9      	str	r1, [r7, #8]
  4015ea:	607a      	str	r2, [r7, #4]
  4015ec:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4015ee:	68b9      	ldr	r1, [r7, #8]
  4015f0:	68f8      	ldr	r0, [r7, #12]
  4015f2:	4b12      	ldr	r3, [pc, #72]	; (40163c <pio_set_output+0x5c>)
  4015f4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4015f6:	69ba      	ldr	r2, [r7, #24]
  4015f8:	68b9      	ldr	r1, [r7, #8]
  4015fa:	68f8      	ldr	r0, [r7, #12]
  4015fc:	4b10      	ldr	r3, [pc, #64]	; (401640 <pio_set_output+0x60>)
  4015fe:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401600:	683b      	ldr	r3, [r7, #0]
  401602:	2b00      	cmp	r3, #0
  401604:	d003      	beq.n	40160e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401606:	68fb      	ldr	r3, [r7, #12]
  401608:	68ba      	ldr	r2, [r7, #8]
  40160a:	651a      	str	r2, [r3, #80]	; 0x50
  40160c:	e002      	b.n	401614 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40160e:	68fb      	ldr	r3, [r7, #12]
  401610:	68ba      	ldr	r2, [r7, #8]
  401612:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401614:	687b      	ldr	r3, [r7, #4]
  401616:	2b00      	cmp	r3, #0
  401618:	d003      	beq.n	401622 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40161a:	68fb      	ldr	r3, [r7, #12]
  40161c:	68ba      	ldr	r2, [r7, #8]
  40161e:	631a      	str	r2, [r3, #48]	; 0x30
  401620:	e002      	b.n	401628 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401622:	68fb      	ldr	r3, [r7, #12]
  401624:	68ba      	ldr	r2, [r7, #8]
  401626:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401628:	68fb      	ldr	r3, [r7, #12]
  40162a:	68ba      	ldr	r2, [r7, #8]
  40162c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40162e:	68fb      	ldr	r3, [r7, #12]
  401630:	68ba      	ldr	r2, [r7, #8]
  401632:	601a      	str	r2, [r3, #0]
}
  401634:	bf00      	nop
  401636:	3710      	adds	r7, #16
  401638:	46bd      	mov	sp, r7
  40163a:	bd80      	pop	{r7, pc}
  40163c:	00401645 	.word	0x00401645
  401640:	00401429 	.word	0x00401429

00401644 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401644:	b480      	push	{r7}
  401646:	b083      	sub	sp, #12
  401648:	af00      	add	r7, sp, #0
  40164a:	6078      	str	r0, [r7, #4]
  40164c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40164e:	687b      	ldr	r3, [r7, #4]
  401650:	683a      	ldr	r2, [r7, #0]
  401652:	645a      	str	r2, [r3, #68]	; 0x44
}
  401654:	bf00      	nop
  401656:	370c      	adds	r7, #12
  401658:	46bd      	mov	sp, r7
  40165a:	bc80      	pop	{r7}
  40165c:	4770      	bx	lr

0040165e <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40165e:	b480      	push	{r7}
  401660:	b083      	sub	sp, #12
  401662:	af00      	add	r7, sp, #0
  401664:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401666:	687b      	ldr	r3, [r7, #4]
  401668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40166a:	4618      	mov	r0, r3
  40166c:	370c      	adds	r7, #12
  40166e:	46bd      	mov	sp, r7
  401670:	bc80      	pop	{r7}
  401672:	4770      	bx	lr

00401674 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401674:	b480      	push	{r7}
  401676:	b083      	sub	sp, #12
  401678:	af00      	add	r7, sp, #0
  40167a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40167c:	687b      	ldr	r3, [r7, #4]
  40167e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401680:	4618      	mov	r0, r3
  401682:	370c      	adds	r7, #12
  401684:	46bd      	mov	sp, r7
  401686:	bc80      	pop	{r7}
  401688:	4770      	bx	lr
	...

0040168c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40168c:	b590      	push	{r4, r7, lr}
  40168e:	b087      	sub	sp, #28
  401690:	af02      	add	r7, sp, #8
  401692:	6078      	str	r0, [r7, #4]
  401694:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401696:	6878      	ldr	r0, [r7, #4]
  401698:	4b63      	ldr	r3, [pc, #396]	; (401828 <pio_configure_pin+0x19c>)
  40169a:	4798      	blx	r3
  40169c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40169e:	683b      	ldr	r3, [r7, #0]
  4016a0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4016a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016a8:	d067      	beq.n	40177a <pio_configure_pin+0xee>
  4016aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016ae:	d809      	bhi.n	4016c4 <pio_configure_pin+0x38>
  4016b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4016b4:	d02b      	beq.n	40170e <pio_configure_pin+0x82>
  4016b6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4016ba:	d043      	beq.n	401744 <pio_configure_pin+0xb8>
  4016bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4016c0:	d00a      	beq.n	4016d8 <pio_configure_pin+0x4c>
  4016c2:	e0a9      	b.n	401818 <pio_configure_pin+0x18c>
  4016c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4016c8:	d07e      	beq.n	4017c8 <pio_configure_pin+0x13c>
  4016ca:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4016ce:	d07b      	beq.n	4017c8 <pio_configure_pin+0x13c>
  4016d0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4016d4:	d06c      	beq.n	4017b0 <pio_configure_pin+0x124>
  4016d6:	e09f      	b.n	401818 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	f003 031f 	and.w	r3, r3, #31
  4016de:	2201      	movs	r2, #1
  4016e0:	fa02 f303 	lsl.w	r3, r2, r3
  4016e4:	461a      	mov	r2, r3
  4016e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4016ea:	68f8      	ldr	r0, [r7, #12]
  4016ec:	4b4f      	ldr	r3, [pc, #316]	; (40182c <pio_configure_pin+0x1a0>)
  4016ee:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4016f0:	687b      	ldr	r3, [r7, #4]
  4016f2:	f003 031f 	and.w	r3, r3, #31
  4016f6:	2201      	movs	r2, #1
  4016f8:	fa02 f303 	lsl.w	r3, r2, r3
  4016fc:	4619      	mov	r1, r3
  4016fe:	683b      	ldr	r3, [r7, #0]
  401700:	f003 0301 	and.w	r3, r3, #1
  401704:	461a      	mov	r2, r3
  401706:	68f8      	ldr	r0, [r7, #12]
  401708:	4b49      	ldr	r3, [pc, #292]	; (401830 <pio_configure_pin+0x1a4>)
  40170a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40170c:	e086      	b.n	40181c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40170e:	687b      	ldr	r3, [r7, #4]
  401710:	f003 031f 	and.w	r3, r3, #31
  401714:	2201      	movs	r2, #1
  401716:	fa02 f303 	lsl.w	r3, r2, r3
  40171a:	461a      	mov	r2, r3
  40171c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401720:	68f8      	ldr	r0, [r7, #12]
  401722:	4b42      	ldr	r3, [pc, #264]	; (40182c <pio_configure_pin+0x1a0>)
  401724:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401726:	687b      	ldr	r3, [r7, #4]
  401728:	f003 031f 	and.w	r3, r3, #31
  40172c:	2201      	movs	r2, #1
  40172e:	fa02 f303 	lsl.w	r3, r2, r3
  401732:	4619      	mov	r1, r3
  401734:	683b      	ldr	r3, [r7, #0]
  401736:	f003 0301 	and.w	r3, r3, #1
  40173a:	461a      	mov	r2, r3
  40173c:	68f8      	ldr	r0, [r7, #12]
  40173e:	4b3c      	ldr	r3, [pc, #240]	; (401830 <pio_configure_pin+0x1a4>)
  401740:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401742:	e06b      	b.n	40181c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401744:	687b      	ldr	r3, [r7, #4]
  401746:	f003 031f 	and.w	r3, r3, #31
  40174a:	2201      	movs	r2, #1
  40174c:	fa02 f303 	lsl.w	r3, r2, r3
  401750:	461a      	mov	r2, r3
  401752:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401756:	68f8      	ldr	r0, [r7, #12]
  401758:	4b34      	ldr	r3, [pc, #208]	; (40182c <pio_configure_pin+0x1a0>)
  40175a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40175c:	687b      	ldr	r3, [r7, #4]
  40175e:	f003 031f 	and.w	r3, r3, #31
  401762:	2201      	movs	r2, #1
  401764:	fa02 f303 	lsl.w	r3, r2, r3
  401768:	4619      	mov	r1, r3
  40176a:	683b      	ldr	r3, [r7, #0]
  40176c:	f003 0301 	and.w	r3, r3, #1
  401770:	461a      	mov	r2, r3
  401772:	68f8      	ldr	r0, [r7, #12]
  401774:	4b2e      	ldr	r3, [pc, #184]	; (401830 <pio_configure_pin+0x1a4>)
  401776:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401778:	e050      	b.n	40181c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40177a:	687b      	ldr	r3, [r7, #4]
  40177c:	f003 031f 	and.w	r3, r3, #31
  401780:	2201      	movs	r2, #1
  401782:	fa02 f303 	lsl.w	r3, r2, r3
  401786:	461a      	mov	r2, r3
  401788:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40178c:	68f8      	ldr	r0, [r7, #12]
  40178e:	4b27      	ldr	r3, [pc, #156]	; (40182c <pio_configure_pin+0x1a0>)
  401790:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401792:	687b      	ldr	r3, [r7, #4]
  401794:	f003 031f 	and.w	r3, r3, #31
  401798:	2201      	movs	r2, #1
  40179a:	fa02 f303 	lsl.w	r3, r2, r3
  40179e:	4619      	mov	r1, r3
  4017a0:	683b      	ldr	r3, [r7, #0]
  4017a2:	f003 0301 	and.w	r3, r3, #1
  4017a6:	461a      	mov	r2, r3
  4017a8:	68f8      	ldr	r0, [r7, #12]
  4017aa:	4b21      	ldr	r3, [pc, #132]	; (401830 <pio_configure_pin+0x1a4>)
  4017ac:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4017ae:	e035      	b.n	40181c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4017b0:	687b      	ldr	r3, [r7, #4]
  4017b2:	f003 031f 	and.w	r3, r3, #31
  4017b6:	2201      	movs	r2, #1
  4017b8:	fa02 f303 	lsl.w	r3, r2, r3
  4017bc:	683a      	ldr	r2, [r7, #0]
  4017be:	4619      	mov	r1, r3
  4017c0:	68f8      	ldr	r0, [r7, #12]
  4017c2:	4b1c      	ldr	r3, [pc, #112]	; (401834 <pio_configure_pin+0x1a8>)
  4017c4:	4798      	blx	r3
		break;
  4017c6:	e029      	b.n	40181c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4017c8:	687b      	ldr	r3, [r7, #4]
  4017ca:	f003 031f 	and.w	r3, r3, #31
  4017ce:	2201      	movs	r2, #1
  4017d0:	fa02 f303 	lsl.w	r3, r2, r3
  4017d4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4017d6:	683b      	ldr	r3, [r7, #0]
  4017d8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4017dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4017e0:	bf0c      	ite	eq
  4017e2:	2301      	moveq	r3, #1
  4017e4:	2300      	movne	r3, #0
  4017e6:	b2db      	uxtb	r3, r3
  4017e8:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4017ea:	683b      	ldr	r3, [r7, #0]
  4017ec:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4017f0:	2b00      	cmp	r3, #0
  4017f2:	bf14      	ite	ne
  4017f4:	2301      	movne	r3, #1
  4017f6:	2300      	moveq	r3, #0
  4017f8:	b2db      	uxtb	r3, r3
  4017fa:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4017fc:	683b      	ldr	r3, [r7, #0]
  4017fe:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401802:	2b00      	cmp	r3, #0
  401804:	bf14      	ite	ne
  401806:	2301      	movne	r3, #1
  401808:	2300      	moveq	r3, #0
  40180a:	b2db      	uxtb	r3, r3
  40180c:	9300      	str	r3, [sp, #0]
  40180e:	4603      	mov	r3, r0
  401810:	68f8      	ldr	r0, [r7, #12]
  401812:	4c09      	ldr	r4, [pc, #36]	; (401838 <pio_configure_pin+0x1ac>)
  401814:	47a0      	blx	r4
		break;
  401816:	e001      	b.n	40181c <pio_configure_pin+0x190>

	default:
		return 0;
  401818:	2300      	movs	r3, #0
  40181a:	e000      	b.n	40181e <pio_configure_pin+0x192>
	}

	return 1;
  40181c:	2301      	movs	r3, #1
}
  40181e:	4618      	mov	r0, r3
  401820:	3714      	adds	r7, #20
  401822:	46bd      	mov	sp, r7
  401824:	bd90      	pop	{r4, r7, pc}
  401826:	bf00      	nop
  401828:	00401969 	.word	0x00401969
  40182c:	00401453 	.word	0x00401453
  401830:	00401429 	.word	0x00401429
  401834:	00401561 	.word	0x00401561
  401838:	004015e1 	.word	0x004015e1

0040183c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40183c:	b590      	push	{r4, r7, lr}
  40183e:	b087      	sub	sp, #28
  401840:	af02      	add	r7, sp, #8
  401842:	60f8      	str	r0, [r7, #12]
  401844:	60b9      	str	r1, [r7, #8]
  401846:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401848:	687b      	ldr	r3, [r7, #4]
  40184a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40184e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401852:	d043      	beq.n	4018dc <pio_configure_pin_group+0xa0>
  401854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401858:	d809      	bhi.n	40186e <pio_configure_pin_group+0x32>
  40185a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40185e:	d01f      	beq.n	4018a0 <pio_configure_pin_group+0x64>
  401860:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401864:	d02b      	beq.n	4018be <pio_configure_pin_group+0x82>
  401866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40186a:	d00a      	beq.n	401882 <pio_configure_pin_group+0x46>
  40186c:	e06d      	b.n	40194a <pio_configure_pin_group+0x10e>
  40186e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401872:	d048      	beq.n	401906 <pio_configure_pin_group+0xca>
  401874:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401878:	d045      	beq.n	401906 <pio_configure_pin_group+0xca>
  40187a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40187e:	d03c      	beq.n	4018fa <pio_configure_pin_group+0xbe>
  401880:	e063      	b.n	40194a <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401882:	68ba      	ldr	r2, [r7, #8]
  401884:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401888:	68f8      	ldr	r0, [r7, #12]
  40188a:	4b33      	ldr	r3, [pc, #204]	; (401958 <pio_configure_pin_group+0x11c>)
  40188c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40188e:	687b      	ldr	r3, [r7, #4]
  401890:	f003 0301 	and.w	r3, r3, #1
  401894:	461a      	mov	r2, r3
  401896:	68b9      	ldr	r1, [r7, #8]
  401898:	68f8      	ldr	r0, [r7, #12]
  40189a:	4b30      	ldr	r3, [pc, #192]	; (40195c <pio_configure_pin_group+0x120>)
  40189c:	4798      	blx	r3
		break;
  40189e:	e056      	b.n	40194e <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4018a0:	68ba      	ldr	r2, [r7, #8]
  4018a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4018a6:	68f8      	ldr	r0, [r7, #12]
  4018a8:	4b2b      	ldr	r3, [pc, #172]	; (401958 <pio_configure_pin_group+0x11c>)
  4018aa:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4018ac:	687b      	ldr	r3, [r7, #4]
  4018ae:	f003 0301 	and.w	r3, r3, #1
  4018b2:	461a      	mov	r2, r3
  4018b4:	68b9      	ldr	r1, [r7, #8]
  4018b6:	68f8      	ldr	r0, [r7, #12]
  4018b8:	4b28      	ldr	r3, [pc, #160]	; (40195c <pio_configure_pin_group+0x120>)
  4018ba:	4798      	blx	r3
		break;
  4018bc:	e047      	b.n	40194e <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4018be:	68ba      	ldr	r2, [r7, #8]
  4018c0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4018c4:	68f8      	ldr	r0, [r7, #12]
  4018c6:	4b24      	ldr	r3, [pc, #144]	; (401958 <pio_configure_pin_group+0x11c>)
  4018c8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4018ca:	687b      	ldr	r3, [r7, #4]
  4018cc:	f003 0301 	and.w	r3, r3, #1
  4018d0:	461a      	mov	r2, r3
  4018d2:	68b9      	ldr	r1, [r7, #8]
  4018d4:	68f8      	ldr	r0, [r7, #12]
  4018d6:	4b21      	ldr	r3, [pc, #132]	; (40195c <pio_configure_pin_group+0x120>)
  4018d8:	4798      	blx	r3
		break;
  4018da:	e038      	b.n	40194e <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4018dc:	68ba      	ldr	r2, [r7, #8]
  4018de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4018e2:	68f8      	ldr	r0, [r7, #12]
  4018e4:	4b1c      	ldr	r3, [pc, #112]	; (401958 <pio_configure_pin_group+0x11c>)
  4018e6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4018e8:	687b      	ldr	r3, [r7, #4]
  4018ea:	f003 0301 	and.w	r3, r3, #1
  4018ee:	461a      	mov	r2, r3
  4018f0:	68b9      	ldr	r1, [r7, #8]
  4018f2:	68f8      	ldr	r0, [r7, #12]
  4018f4:	4b19      	ldr	r3, [pc, #100]	; (40195c <pio_configure_pin_group+0x120>)
  4018f6:	4798      	blx	r3
		break;
  4018f8:	e029      	b.n	40194e <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4018fa:	687a      	ldr	r2, [r7, #4]
  4018fc:	68b9      	ldr	r1, [r7, #8]
  4018fe:	68f8      	ldr	r0, [r7, #12]
  401900:	4b17      	ldr	r3, [pc, #92]	; (401960 <pio_configure_pin_group+0x124>)
  401902:	4798      	blx	r3
		break;
  401904:	e023      	b.n	40194e <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401906:	687b      	ldr	r3, [r7, #4]
  401908:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  40190c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401910:	bf0c      	ite	eq
  401912:	2301      	moveq	r3, #1
  401914:	2300      	movne	r3, #0
  401916:	b2db      	uxtb	r3, r3
  401918:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40191a:	687b      	ldr	r3, [r7, #4]
  40191c:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
  401920:	2b00      	cmp	r3, #0
  401922:	bf14      	ite	ne
  401924:	2301      	movne	r3, #1
  401926:	2300      	moveq	r3, #0
  401928:	b2db      	uxtb	r3, r3
  40192a:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
  401932:	2b00      	cmp	r3, #0
  401934:	bf14      	ite	ne
  401936:	2301      	movne	r3, #1
  401938:	2300      	moveq	r3, #0
  40193a:	b2db      	uxtb	r3, r3
  40193c:	9300      	str	r3, [sp, #0]
  40193e:	460b      	mov	r3, r1
  401940:	68b9      	ldr	r1, [r7, #8]
  401942:	68f8      	ldr	r0, [r7, #12]
  401944:	4c07      	ldr	r4, [pc, #28]	; (401964 <pio_configure_pin_group+0x128>)
  401946:	47a0      	blx	r4
		break;
  401948:	e001      	b.n	40194e <pio_configure_pin_group+0x112>

	default:
		return 0;
  40194a:	2300      	movs	r3, #0
  40194c:	e000      	b.n	401950 <pio_configure_pin_group+0x114>
	}

	return 1;
  40194e:	2301      	movs	r3, #1
}
  401950:	4618      	mov	r0, r3
  401952:	3714      	adds	r7, #20
  401954:	46bd      	mov	sp, r7
  401956:	bd90      	pop	{r4, r7, pc}
  401958:	00401453 	.word	0x00401453
  40195c:	00401429 	.word	0x00401429
  401960:	00401561 	.word	0x00401561
  401964:	004015e1 	.word	0x004015e1

00401968 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401968:	b480      	push	{r7}
  40196a:	b085      	sub	sp, #20
  40196c:	af00      	add	r7, sp, #0
  40196e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401970:	687b      	ldr	r3, [r7, #4]
  401972:	095b      	lsrs	r3, r3, #5
  401974:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401978:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40197c:	025b      	lsls	r3, r3, #9
  40197e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401980:	68fb      	ldr	r3, [r7, #12]
}
  401982:	4618      	mov	r0, r3
  401984:	3714      	adds	r7, #20
  401986:	46bd      	mov	sp, r7
  401988:	bc80      	pop	{r7}
  40198a:	4770      	bx	lr

0040198c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40198c:	b580      	push	{r7, lr}
  40198e:	b084      	sub	sp, #16
  401990:	af00      	add	r7, sp, #0
  401992:	6078      	str	r0, [r7, #4]
  401994:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401996:	6878      	ldr	r0, [r7, #4]
  401998:	4b2c      	ldr	r3, [pc, #176]	; (401a4c <pio_handler_process+0xc0>)
  40199a:	4798      	blx	r3
  40199c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40199e:	6878      	ldr	r0, [r7, #4]
  4019a0:	4b2b      	ldr	r3, [pc, #172]	; (401a50 <pio_handler_process+0xc4>)
  4019a2:	4798      	blx	r3
  4019a4:	4602      	mov	r2, r0
  4019a6:	68fb      	ldr	r3, [r7, #12]
  4019a8:	4013      	ands	r3, r2
  4019aa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4019ac:	68fb      	ldr	r3, [r7, #12]
  4019ae:	2b00      	cmp	r3, #0
  4019b0:	d03c      	beq.n	401a2c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4019b2:	2300      	movs	r3, #0
  4019b4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4019b6:	e034      	b.n	401a22 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4019b8:	4a26      	ldr	r2, [pc, #152]	; (401a54 <pio_handler_process+0xc8>)
  4019ba:	68bb      	ldr	r3, [r7, #8]
  4019bc:	011b      	lsls	r3, r3, #4
  4019be:	4413      	add	r3, r2
  4019c0:	681a      	ldr	r2, [r3, #0]
  4019c2:	683b      	ldr	r3, [r7, #0]
  4019c4:	429a      	cmp	r2, r3
  4019c6:	d126      	bne.n	401a16 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4019c8:	4a22      	ldr	r2, [pc, #136]	; (401a54 <pio_handler_process+0xc8>)
  4019ca:	68bb      	ldr	r3, [r7, #8]
  4019cc:	011b      	lsls	r3, r3, #4
  4019ce:	4413      	add	r3, r2
  4019d0:	3304      	adds	r3, #4
  4019d2:	681a      	ldr	r2, [r3, #0]
  4019d4:	68fb      	ldr	r3, [r7, #12]
  4019d6:	4013      	ands	r3, r2
  4019d8:	2b00      	cmp	r3, #0
  4019da:	d01c      	beq.n	401a16 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4019dc:	4a1d      	ldr	r2, [pc, #116]	; (401a54 <pio_handler_process+0xc8>)
  4019de:	68bb      	ldr	r3, [r7, #8]
  4019e0:	011b      	lsls	r3, r3, #4
  4019e2:	4413      	add	r3, r2
  4019e4:	330c      	adds	r3, #12
  4019e6:	681b      	ldr	r3, [r3, #0]
  4019e8:	491a      	ldr	r1, [pc, #104]	; (401a54 <pio_handler_process+0xc8>)
  4019ea:	68ba      	ldr	r2, [r7, #8]
  4019ec:	0112      	lsls	r2, r2, #4
  4019ee:	440a      	add	r2, r1
  4019f0:	6810      	ldr	r0, [r2, #0]
  4019f2:	4918      	ldr	r1, [pc, #96]	; (401a54 <pio_handler_process+0xc8>)
  4019f4:	68ba      	ldr	r2, [r7, #8]
  4019f6:	0112      	lsls	r2, r2, #4
  4019f8:	440a      	add	r2, r1
  4019fa:	3204      	adds	r2, #4
  4019fc:	6812      	ldr	r2, [r2, #0]
  4019fe:	4611      	mov	r1, r2
  401a00:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401a02:	4a14      	ldr	r2, [pc, #80]	; (401a54 <pio_handler_process+0xc8>)
  401a04:	68bb      	ldr	r3, [r7, #8]
  401a06:	011b      	lsls	r3, r3, #4
  401a08:	4413      	add	r3, r2
  401a0a:	3304      	adds	r3, #4
  401a0c:	681b      	ldr	r3, [r3, #0]
  401a0e:	43db      	mvns	r3, r3
  401a10:	68fa      	ldr	r2, [r7, #12]
  401a12:	4013      	ands	r3, r2
  401a14:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401a16:	68bb      	ldr	r3, [r7, #8]
  401a18:	3301      	adds	r3, #1
  401a1a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  401a1c:	68bb      	ldr	r3, [r7, #8]
  401a1e:	2b06      	cmp	r3, #6
  401a20:	d803      	bhi.n	401a2a <pio_handler_process+0x9e>
		while (status != 0) {
  401a22:	68fb      	ldr	r3, [r7, #12]
  401a24:	2b00      	cmp	r3, #0
  401a26:	d1c7      	bne.n	4019b8 <pio_handler_process+0x2c>
  401a28:	e000      	b.n	401a2c <pio_handler_process+0xa0>
				break;
  401a2a:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401a2c:	4b0a      	ldr	r3, [pc, #40]	; (401a58 <pio_handler_process+0xcc>)
  401a2e:	681b      	ldr	r3, [r3, #0]
  401a30:	2b00      	cmp	r3, #0
  401a32:	d007      	beq.n	401a44 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  401a34:	4b09      	ldr	r3, [pc, #36]	; (401a5c <pio_handler_process+0xd0>)
  401a36:	681b      	ldr	r3, [r3, #0]
  401a38:	2b00      	cmp	r3, #0
  401a3a:	d003      	beq.n	401a44 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  401a3c:	4b07      	ldr	r3, [pc, #28]	; (401a5c <pio_handler_process+0xd0>)
  401a3e:	681b      	ldr	r3, [r3, #0]
  401a40:	6878      	ldr	r0, [r7, #4]
  401a42:	4798      	blx	r3
		}
	}
#endif
}
  401a44:	bf00      	nop
  401a46:	3710      	adds	r7, #16
  401a48:	46bd      	mov	sp, r7
  401a4a:	bd80      	pop	{r7, pc}
  401a4c:	0040165f 	.word	0x0040165f
  401a50:	00401675 	.word	0x00401675
  401a54:	20000878 	.word	0x20000878
  401a58:	20002d40 	.word	0x20002d40
  401a5c:	200008e8 	.word	0x200008e8

00401a60 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401a60:	b580      	push	{r7, lr}
  401a62:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401a64:	210b      	movs	r1, #11
  401a66:	4802      	ldr	r0, [pc, #8]	; (401a70 <PIOA_Handler+0x10>)
  401a68:	4b02      	ldr	r3, [pc, #8]	; (401a74 <PIOA_Handler+0x14>)
  401a6a:	4798      	blx	r3
}
  401a6c:	bf00      	nop
  401a6e:	bd80      	pop	{r7, pc}
  401a70:	400e0e00 	.word	0x400e0e00
  401a74:	0040198d 	.word	0x0040198d

00401a78 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401a78:	b580      	push	{r7, lr}
  401a7a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401a7c:	210c      	movs	r1, #12
  401a7e:	4802      	ldr	r0, [pc, #8]	; (401a88 <PIOB_Handler+0x10>)
  401a80:	4b02      	ldr	r3, [pc, #8]	; (401a8c <PIOB_Handler+0x14>)
  401a82:	4798      	blx	r3
}
  401a84:	bf00      	nop
  401a86:	bd80      	pop	{r7, pc}
  401a88:	400e1000 	.word	0x400e1000
  401a8c:	0040198d 	.word	0x0040198d

00401a90 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401a90:	b580      	push	{r7, lr}
  401a92:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401a94:	210d      	movs	r1, #13
  401a96:	4802      	ldr	r0, [pc, #8]	; (401aa0 <PIOC_Handler+0x10>)
  401a98:	4b02      	ldr	r3, [pc, #8]	; (401aa4 <PIOC_Handler+0x14>)
  401a9a:	4798      	blx	r3
}
  401a9c:	bf00      	nop
  401a9e:	bd80      	pop	{r7, pc}
  401aa0:	400e1200 	.word	0x400e1200
  401aa4:	0040198d 	.word	0x0040198d

00401aa8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401aa8:	b480      	push	{r7}
  401aaa:	b085      	sub	sp, #20
  401aac:	af00      	add	r7, sp, #0
  401aae:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401ab0:	491c      	ldr	r1, [pc, #112]	; (401b24 <pmc_switch_mck_to_pllack+0x7c>)
  401ab2:	4b1c      	ldr	r3, [pc, #112]	; (401b24 <pmc_switch_mck_to_pllack+0x7c>)
  401ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401aba:	687b      	ldr	r3, [r7, #4]
  401abc:	4313      	orrs	r3, r2
  401abe:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ac0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401ac4:	60fb      	str	r3, [r7, #12]
  401ac6:	e007      	b.n	401ad8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401ac8:	68fb      	ldr	r3, [r7, #12]
  401aca:	2b00      	cmp	r3, #0
  401acc:	d101      	bne.n	401ad2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401ace:	2301      	movs	r3, #1
  401ad0:	e023      	b.n	401b1a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401ad2:	68fb      	ldr	r3, [r7, #12]
  401ad4:	3b01      	subs	r3, #1
  401ad6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ad8:	4b12      	ldr	r3, [pc, #72]	; (401b24 <pmc_switch_mck_to_pllack+0x7c>)
  401ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401adc:	f003 0308 	and.w	r3, r3, #8
  401ae0:	2b00      	cmp	r3, #0
  401ae2:	d0f1      	beq.n	401ac8 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401ae4:	4a0f      	ldr	r2, [pc, #60]	; (401b24 <pmc_switch_mck_to_pllack+0x7c>)
  401ae6:	4b0f      	ldr	r3, [pc, #60]	; (401b24 <pmc_switch_mck_to_pllack+0x7c>)
  401ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401aea:	f023 0303 	bic.w	r3, r3, #3
  401aee:	f043 0302 	orr.w	r3, r3, #2
  401af2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401af8:	60fb      	str	r3, [r7, #12]
  401afa:	e007      	b.n	401b0c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401afc:	68fb      	ldr	r3, [r7, #12]
  401afe:	2b00      	cmp	r3, #0
  401b00:	d101      	bne.n	401b06 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401b02:	2301      	movs	r3, #1
  401b04:	e009      	b.n	401b1a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401b06:	68fb      	ldr	r3, [r7, #12]
  401b08:	3b01      	subs	r3, #1
  401b0a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401b0c:	4b05      	ldr	r3, [pc, #20]	; (401b24 <pmc_switch_mck_to_pllack+0x7c>)
  401b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b10:	f003 0308 	and.w	r3, r3, #8
  401b14:	2b00      	cmp	r3, #0
  401b16:	d0f1      	beq.n	401afc <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401b18:	2300      	movs	r3, #0
}
  401b1a:	4618      	mov	r0, r3
  401b1c:	3714      	adds	r7, #20
  401b1e:	46bd      	mov	sp, r7
  401b20:	bc80      	pop	{r7}
  401b22:	4770      	bx	lr
  401b24:	400e0400 	.word	0x400e0400

00401b28 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401b28:	b480      	push	{r7}
  401b2a:	b083      	sub	sp, #12
  401b2c:	af00      	add	r7, sp, #0
  401b2e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401b30:	687b      	ldr	r3, [r7, #4]
  401b32:	2b01      	cmp	r3, #1
  401b34:	d107      	bne.n	401b46 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401b36:	4a08      	ldr	r2, [pc, #32]	; (401b58 <pmc_switch_sclk_to_32kxtal+0x30>)
  401b38:	4b07      	ldr	r3, [pc, #28]	; (401b58 <pmc_switch_sclk_to_32kxtal+0x30>)
  401b3a:	689b      	ldr	r3, [r3, #8]
  401b3c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401b44:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401b46:	4b04      	ldr	r3, [pc, #16]	; (401b58 <pmc_switch_sclk_to_32kxtal+0x30>)
  401b48:	4a04      	ldr	r2, [pc, #16]	; (401b5c <pmc_switch_sclk_to_32kxtal+0x34>)
  401b4a:	601a      	str	r2, [r3, #0]
}
  401b4c:	bf00      	nop
  401b4e:	370c      	adds	r7, #12
  401b50:	46bd      	mov	sp, r7
  401b52:	bc80      	pop	{r7}
  401b54:	4770      	bx	lr
  401b56:	bf00      	nop
  401b58:	400e1410 	.word	0x400e1410
  401b5c:	a5000008 	.word	0xa5000008

00401b60 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401b60:	b480      	push	{r7}
  401b62:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401b64:	4b09      	ldr	r3, [pc, #36]	; (401b8c <pmc_osc_is_ready_32kxtal+0x2c>)
  401b66:	695b      	ldr	r3, [r3, #20]
  401b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401b6c:	2b00      	cmp	r3, #0
  401b6e:	d007      	beq.n	401b80 <pmc_osc_is_ready_32kxtal+0x20>
  401b70:	4b07      	ldr	r3, [pc, #28]	; (401b90 <pmc_osc_is_ready_32kxtal+0x30>)
  401b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401b78:	2b00      	cmp	r3, #0
  401b7a:	d001      	beq.n	401b80 <pmc_osc_is_ready_32kxtal+0x20>
  401b7c:	2301      	movs	r3, #1
  401b7e:	e000      	b.n	401b82 <pmc_osc_is_ready_32kxtal+0x22>
  401b80:	2300      	movs	r3, #0
}
  401b82:	4618      	mov	r0, r3
  401b84:	46bd      	mov	sp, r7
  401b86:	bc80      	pop	{r7}
  401b88:	4770      	bx	lr
  401b8a:	bf00      	nop
  401b8c:	400e1410 	.word	0x400e1410
  401b90:	400e0400 	.word	0x400e0400

00401b94 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401b94:	b480      	push	{r7}
  401b96:	b083      	sub	sp, #12
  401b98:	af00      	add	r7, sp, #0
  401b9a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401b9c:	4a18      	ldr	r2, [pc, #96]	; (401c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  401b9e:	4b18      	ldr	r3, [pc, #96]	; (401c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  401ba0:	6a1b      	ldr	r3, [r3, #32]
  401ba2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401ba6:	f043 0308 	orr.w	r3, r3, #8
  401baa:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401bac:	bf00      	nop
  401bae:	4b14      	ldr	r3, [pc, #80]	; (401c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  401bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401bb6:	2b00      	cmp	r3, #0
  401bb8:	d0f9      	beq.n	401bae <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401bba:	4911      	ldr	r1, [pc, #68]	; (401c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  401bbc:	4b10      	ldr	r3, [pc, #64]	; (401c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  401bbe:	6a1b      	ldr	r3, [r3, #32]
  401bc0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401bc8:	687a      	ldr	r2, [r7, #4]
  401bca:	4313      	orrs	r3, r2
  401bcc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401bd0:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401bd2:	bf00      	nop
  401bd4:	4b0a      	ldr	r3, [pc, #40]	; (401c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  401bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401bdc:	2b00      	cmp	r3, #0
  401bde:	d0f9      	beq.n	401bd4 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401be0:	4a07      	ldr	r2, [pc, #28]	; (401c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  401be2:	4b07      	ldr	r3, [pc, #28]	; (401c00 <pmc_switch_mainck_to_fastrc+0x6c>)
  401be4:	6a1b      	ldr	r3, [r3, #32]
  401be6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401bee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401bf2:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401bf4:	bf00      	nop
  401bf6:	370c      	adds	r7, #12
  401bf8:	46bd      	mov	sp, r7
  401bfa:	bc80      	pop	{r7}
  401bfc:	4770      	bx	lr
  401bfe:	bf00      	nop
  401c00:	400e0400 	.word	0x400e0400

00401c04 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401c04:	b480      	push	{r7}
  401c06:	b083      	sub	sp, #12
  401c08:	af00      	add	r7, sp, #0
  401c0a:	6078      	str	r0, [r7, #4]
  401c0c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401c0e:	687b      	ldr	r3, [r7, #4]
  401c10:	2b00      	cmp	r3, #0
  401c12:	d008      	beq.n	401c26 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401c14:	4916      	ldr	r1, [pc, #88]	; (401c70 <pmc_switch_mainck_to_xtal+0x6c>)
  401c16:	4b16      	ldr	r3, [pc, #88]	; (401c70 <pmc_switch_mainck_to_xtal+0x6c>)
  401c18:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401c1a:	4a16      	ldr	r2, [pc, #88]	; (401c74 <pmc_switch_mainck_to_xtal+0x70>)
  401c1c:	401a      	ands	r2, r3
  401c1e:	4b16      	ldr	r3, [pc, #88]	; (401c78 <pmc_switch_mainck_to_xtal+0x74>)
  401c20:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401c22:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401c24:	e01e      	b.n	401c64 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401c26:	4912      	ldr	r1, [pc, #72]	; (401c70 <pmc_switch_mainck_to_xtal+0x6c>)
  401c28:	4b11      	ldr	r3, [pc, #68]	; (401c70 <pmc_switch_mainck_to_xtal+0x6c>)
  401c2a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401c2c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401c30:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401c34:	683a      	ldr	r2, [r7, #0]
  401c36:	0212      	lsls	r2, r2, #8
  401c38:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401c3a:	4313      	orrs	r3, r2
  401c3c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401c40:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401c44:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401c46:	bf00      	nop
  401c48:	4b09      	ldr	r3, [pc, #36]	; (401c70 <pmc_switch_mainck_to_xtal+0x6c>)
  401c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401c4c:	f003 0301 	and.w	r3, r3, #1
  401c50:	2b00      	cmp	r3, #0
  401c52:	d0f9      	beq.n	401c48 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401c54:	4a06      	ldr	r2, [pc, #24]	; (401c70 <pmc_switch_mainck_to_xtal+0x6c>)
  401c56:	4b06      	ldr	r3, [pc, #24]	; (401c70 <pmc_switch_mainck_to_xtal+0x6c>)
  401c58:	6a1b      	ldr	r3, [r3, #32]
  401c5a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401c62:	6213      	str	r3, [r2, #32]
}
  401c64:	bf00      	nop
  401c66:	370c      	adds	r7, #12
  401c68:	46bd      	mov	sp, r7
  401c6a:	bc80      	pop	{r7}
  401c6c:	4770      	bx	lr
  401c6e:	bf00      	nop
  401c70:	400e0400 	.word	0x400e0400
  401c74:	fec8fffc 	.word	0xfec8fffc
  401c78:	01370002 	.word	0x01370002

00401c7c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401c7c:	b480      	push	{r7}
  401c7e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401c80:	4b03      	ldr	r3, [pc, #12]	; (401c90 <pmc_osc_is_ready_mainck+0x14>)
  401c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401c88:	4618      	mov	r0, r3
  401c8a:	46bd      	mov	sp, r7
  401c8c:	bc80      	pop	{r7}
  401c8e:	4770      	bx	lr
  401c90:	400e0400 	.word	0x400e0400

00401c94 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401c94:	b480      	push	{r7}
  401c96:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401c98:	4b03      	ldr	r3, [pc, #12]	; (401ca8 <pmc_disable_pllack+0x14>)
  401c9a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401c9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401ca0:	bf00      	nop
  401ca2:	46bd      	mov	sp, r7
  401ca4:	bc80      	pop	{r7}
  401ca6:	4770      	bx	lr
  401ca8:	400e0400 	.word	0x400e0400

00401cac <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401cac:	b480      	push	{r7}
  401cae:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401cb0:	4b03      	ldr	r3, [pc, #12]	; (401cc0 <pmc_is_locked_pllack+0x14>)
  401cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401cb4:	f003 0302 	and.w	r3, r3, #2
}
  401cb8:	4618      	mov	r0, r3
  401cba:	46bd      	mov	sp, r7
  401cbc:	bc80      	pop	{r7}
  401cbe:	4770      	bx	lr
  401cc0:	400e0400 	.word	0x400e0400

00401cc4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401cc4:	b480      	push	{r7}
  401cc6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401cc8:	4b03      	ldr	r3, [pc, #12]	; (401cd8 <pmc_disable_pllbck+0x14>)
  401cca:	2200      	movs	r2, #0
  401ccc:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401cce:	bf00      	nop
  401cd0:	46bd      	mov	sp, r7
  401cd2:	bc80      	pop	{r7}
  401cd4:	4770      	bx	lr
  401cd6:	bf00      	nop
  401cd8:	400e0400 	.word	0x400e0400

00401cdc <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401cdc:	b480      	push	{r7}
  401cde:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401ce0:	4b03      	ldr	r3, [pc, #12]	; (401cf0 <pmc_is_locked_pllbck+0x14>)
  401ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401ce4:	f003 0304 	and.w	r3, r3, #4
}
  401ce8:	4618      	mov	r0, r3
  401cea:	46bd      	mov	sp, r7
  401cec:	bc80      	pop	{r7}
  401cee:	4770      	bx	lr
  401cf0:	400e0400 	.word	0x400e0400

00401cf4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401cf4:	b480      	push	{r7}
  401cf6:	b083      	sub	sp, #12
  401cf8:	af00      	add	r7, sp, #0
  401cfa:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	2b22      	cmp	r3, #34	; 0x22
  401d00:	d901      	bls.n	401d06 <pmc_enable_periph_clk+0x12>
		return 1;
  401d02:	2301      	movs	r3, #1
  401d04:	e02f      	b.n	401d66 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401d06:	687b      	ldr	r3, [r7, #4]
  401d08:	2b1f      	cmp	r3, #31
  401d0a:	d813      	bhi.n	401d34 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401d0c:	4b18      	ldr	r3, [pc, #96]	; (401d70 <pmc_enable_periph_clk+0x7c>)
  401d0e:	699a      	ldr	r2, [r3, #24]
  401d10:	2101      	movs	r1, #1
  401d12:	687b      	ldr	r3, [r7, #4]
  401d14:	fa01 f303 	lsl.w	r3, r1, r3
  401d18:	401a      	ands	r2, r3
  401d1a:	2101      	movs	r1, #1
  401d1c:	687b      	ldr	r3, [r7, #4]
  401d1e:	fa01 f303 	lsl.w	r3, r1, r3
  401d22:	429a      	cmp	r2, r3
  401d24:	d01e      	beq.n	401d64 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401d26:	4a12      	ldr	r2, [pc, #72]	; (401d70 <pmc_enable_periph_clk+0x7c>)
  401d28:	2101      	movs	r1, #1
  401d2a:	687b      	ldr	r3, [r7, #4]
  401d2c:	fa01 f303 	lsl.w	r3, r1, r3
  401d30:	6113      	str	r3, [r2, #16]
  401d32:	e017      	b.n	401d64 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401d34:	687b      	ldr	r3, [r7, #4]
  401d36:	3b20      	subs	r3, #32
  401d38:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401d3a:	4b0d      	ldr	r3, [pc, #52]	; (401d70 <pmc_enable_periph_clk+0x7c>)
  401d3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401d40:	2101      	movs	r1, #1
  401d42:	687b      	ldr	r3, [r7, #4]
  401d44:	fa01 f303 	lsl.w	r3, r1, r3
  401d48:	401a      	ands	r2, r3
  401d4a:	2101      	movs	r1, #1
  401d4c:	687b      	ldr	r3, [r7, #4]
  401d4e:	fa01 f303 	lsl.w	r3, r1, r3
  401d52:	429a      	cmp	r2, r3
  401d54:	d006      	beq.n	401d64 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401d56:	4a06      	ldr	r2, [pc, #24]	; (401d70 <pmc_enable_periph_clk+0x7c>)
  401d58:	2101      	movs	r1, #1
  401d5a:	687b      	ldr	r3, [r7, #4]
  401d5c:	fa01 f303 	lsl.w	r3, r1, r3
  401d60:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401d64:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401d66:	4618      	mov	r0, r3
  401d68:	370c      	adds	r7, #12
  401d6a:	46bd      	mov	sp, r7
  401d6c:	bc80      	pop	{r7}
  401d6e:	4770      	bx	lr
  401d70:	400e0400 	.word	0x400e0400

00401d74 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401d74:	b480      	push	{r7}
  401d76:	b085      	sub	sp, #20
  401d78:	af00      	add	r7, sp, #0
  401d7a:	6078      	str	r0, [r7, #4]
  401d7c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401d7e:	2300      	movs	r3, #0
  401d80:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401d82:	687b      	ldr	r3, [r7, #4]
  401d84:	22ac      	movs	r2, #172	; 0xac
  401d86:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401d88:	683b      	ldr	r3, [r7, #0]
  401d8a:	681a      	ldr	r2, [r3, #0]
  401d8c:	683b      	ldr	r3, [r7, #0]
  401d8e:	685b      	ldr	r3, [r3, #4]
  401d90:	fbb2 f3f3 	udiv	r3, r2, r3
  401d94:	091b      	lsrs	r3, r3, #4
  401d96:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401d98:	68fb      	ldr	r3, [r7, #12]
  401d9a:	2b00      	cmp	r3, #0
  401d9c:	d003      	beq.n	401da6 <uart_init+0x32>
  401d9e:	68fb      	ldr	r3, [r7, #12]
  401da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401da4:	d301      	bcc.n	401daa <uart_init+0x36>
		return 1;
  401da6:	2301      	movs	r3, #1
  401da8:	e00f      	b.n	401dca <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  401daa:	687b      	ldr	r3, [r7, #4]
  401dac:	68fa      	ldr	r2, [r7, #12]
  401dae:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401db0:	683b      	ldr	r3, [r7, #0]
  401db2:	689a      	ldr	r2, [r3, #8]
  401db4:	687b      	ldr	r3, [r7, #4]
  401db6:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401db8:	687b      	ldr	r3, [r7, #4]
  401dba:	f240 2202 	movw	r2, #514	; 0x202
  401dbe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401dc2:	687b      	ldr	r3, [r7, #4]
  401dc4:	2250      	movs	r2, #80	; 0x50
  401dc6:	601a      	str	r2, [r3, #0]

	return 0;
  401dc8:	2300      	movs	r3, #0
}
  401dca:	4618      	mov	r0, r3
  401dcc:	3714      	adds	r7, #20
  401dce:	46bd      	mov	sp, r7
  401dd0:	bc80      	pop	{r7}
  401dd2:	4770      	bx	lr

00401dd4 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401dd4:	b480      	push	{r7}
  401dd6:	b083      	sub	sp, #12
  401dd8:	af00      	add	r7, sp, #0
  401dda:	6078      	str	r0, [r7, #4]
  401ddc:	460b      	mov	r3, r1
  401dde:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401de0:	687b      	ldr	r3, [r7, #4]
  401de2:	695b      	ldr	r3, [r3, #20]
  401de4:	f003 0302 	and.w	r3, r3, #2
  401de8:	2b00      	cmp	r3, #0
  401dea:	d101      	bne.n	401df0 <uart_write+0x1c>
		return 1;
  401dec:	2301      	movs	r3, #1
  401dee:	e003      	b.n	401df8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401df0:	78fa      	ldrb	r2, [r7, #3]
  401df2:	687b      	ldr	r3, [r7, #4]
  401df4:	61da      	str	r2, [r3, #28]
	return 0;
  401df6:	2300      	movs	r3, #0
}
  401df8:	4618      	mov	r0, r3
  401dfa:	370c      	adds	r7, #12
  401dfc:	46bd      	mov	sp, r7
  401dfe:	bc80      	pop	{r7}
  401e00:	4770      	bx	lr

00401e02 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401e02:	b480      	push	{r7}
  401e04:	b083      	sub	sp, #12
  401e06:	af00      	add	r7, sp, #0
  401e08:	6078      	str	r0, [r7, #4]
  401e0a:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401e0c:	687b      	ldr	r3, [r7, #4]
  401e0e:	695b      	ldr	r3, [r3, #20]
  401e10:	f003 0301 	and.w	r3, r3, #1
  401e14:	2b00      	cmp	r3, #0
  401e16:	d101      	bne.n	401e1c <uart_read+0x1a>
		return 1;
  401e18:	2301      	movs	r3, #1
  401e1a:	e005      	b.n	401e28 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	699b      	ldr	r3, [r3, #24]
  401e20:	b2da      	uxtb	r2, r3
  401e22:	683b      	ldr	r3, [r7, #0]
  401e24:	701a      	strb	r2, [r3, #0]
	return 0;
  401e26:	2300      	movs	r3, #0
}
  401e28:	4618      	mov	r0, r3
  401e2a:	370c      	adds	r7, #12
  401e2c:	46bd      	mov	sp, r7
  401e2e:	bc80      	pop	{r7}
  401e30:	4770      	bx	lr

00401e32 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401e32:	b480      	push	{r7}
  401e34:	b089      	sub	sp, #36	; 0x24
  401e36:	af00      	add	r7, sp, #0
  401e38:	60f8      	str	r0, [r7, #12]
  401e3a:	60b9      	str	r1, [r7, #8]
  401e3c:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401e3e:	68bb      	ldr	r3, [r7, #8]
  401e40:	011a      	lsls	r2, r3, #4
  401e42:	687b      	ldr	r3, [r7, #4]
  401e44:	429a      	cmp	r2, r3
  401e46:	d802      	bhi.n	401e4e <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401e48:	2310      	movs	r3, #16
  401e4a:	61fb      	str	r3, [r7, #28]
  401e4c:	e001      	b.n	401e52 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401e4e:	2308      	movs	r3, #8
  401e50:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e52:	687b      	ldr	r3, [r7, #4]
  401e54:	00da      	lsls	r2, r3, #3
  401e56:	69fb      	ldr	r3, [r7, #28]
  401e58:	68b9      	ldr	r1, [r7, #8]
  401e5a:	fb01 f303 	mul.w	r3, r1, r3
  401e5e:	085b      	lsrs	r3, r3, #1
  401e60:	441a      	add	r2, r3
  401e62:	69fb      	ldr	r3, [r7, #28]
  401e64:	68b9      	ldr	r1, [r7, #8]
  401e66:	fb01 f303 	mul.w	r3, r1, r3
  401e6a:	fbb2 f3f3 	udiv	r3, r2, r3
  401e6e:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401e70:	69bb      	ldr	r3, [r7, #24]
  401e72:	08db      	lsrs	r3, r3, #3
  401e74:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401e76:	69bb      	ldr	r3, [r7, #24]
  401e78:	f003 0307 	and.w	r3, r3, #7
  401e7c:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401e7e:	697b      	ldr	r3, [r7, #20]
  401e80:	2b00      	cmp	r3, #0
  401e82:	d003      	beq.n	401e8c <usart_set_async_baudrate+0x5a>
  401e84:	697b      	ldr	r3, [r7, #20]
  401e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401e8a:	d301      	bcc.n	401e90 <usart_set_async_baudrate+0x5e>
		return 1;
  401e8c:	2301      	movs	r3, #1
  401e8e:	e00f      	b.n	401eb0 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401e90:	69fb      	ldr	r3, [r7, #28]
  401e92:	2b08      	cmp	r3, #8
  401e94:	d105      	bne.n	401ea2 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401e96:	68fb      	ldr	r3, [r7, #12]
  401e98:	685b      	ldr	r3, [r3, #4]
  401e9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401e9e:	68fb      	ldr	r3, [r7, #12]
  401ea0:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401ea2:	693b      	ldr	r3, [r7, #16]
  401ea4:	041a      	lsls	r2, r3, #16
  401ea6:	697b      	ldr	r3, [r7, #20]
  401ea8:	431a      	orrs	r2, r3
  401eaa:	68fb      	ldr	r3, [r7, #12]
  401eac:	621a      	str	r2, [r3, #32]

	return 0;
  401eae:	2300      	movs	r3, #0
}
  401eb0:	4618      	mov	r0, r3
  401eb2:	3724      	adds	r7, #36	; 0x24
  401eb4:	46bd      	mov	sp, r7
  401eb6:	bc80      	pop	{r7}
  401eb8:	4770      	bx	lr
	...

00401ebc <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401ebc:	b580      	push	{r7, lr}
  401ebe:	b082      	sub	sp, #8
  401ec0:	af00      	add	r7, sp, #0
  401ec2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401ec4:	6878      	ldr	r0, [r7, #4]
  401ec6:	4b0f      	ldr	r3, [pc, #60]	; (401f04 <usart_reset+0x48>)
  401ec8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401eca:	687b      	ldr	r3, [r7, #4]
  401ecc:	2200      	movs	r2, #0
  401ece:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401ed0:	687b      	ldr	r3, [r7, #4]
  401ed2:	2200      	movs	r2, #0
  401ed4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401ed6:	687b      	ldr	r3, [r7, #4]
  401ed8:	2200      	movs	r2, #0
  401eda:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401edc:	6878      	ldr	r0, [r7, #4]
  401ede:	4b0a      	ldr	r3, [pc, #40]	; (401f08 <usart_reset+0x4c>)
  401ee0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401ee2:	6878      	ldr	r0, [r7, #4]
  401ee4:	4b09      	ldr	r3, [pc, #36]	; (401f0c <usart_reset+0x50>)
  401ee6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401ee8:	6878      	ldr	r0, [r7, #4]
  401eea:	4b09      	ldr	r3, [pc, #36]	; (401f10 <usart_reset+0x54>)
  401eec:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401eee:	6878      	ldr	r0, [r7, #4]
  401ef0:	4b08      	ldr	r3, [pc, #32]	; (401f14 <usart_reset+0x58>)
  401ef2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  401ef4:	6878      	ldr	r0, [r7, #4]
  401ef6:	4b08      	ldr	r3, [pc, #32]	; (401f18 <usart_reset+0x5c>)
  401ef8:	4798      	blx	r3
#endif
}
  401efa:	bf00      	nop
  401efc:	3708      	adds	r7, #8
  401efe:	46bd      	mov	sp, r7
  401f00:	bd80      	pop	{r7, pc}
  401f02:	bf00      	nop
  401f04:	00402111 	.word	0x00402111
  401f08:	00401fb9 	.word	0x00401fb9
  401f0c:	00401fe9 	.word	0x00401fe9
  401f10:	00402031 	.word	0x00402031
  401f14:	00402065 	.word	0x00402065
  401f18:	0040204b 	.word	0x0040204b

00401f1c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401f1c:	b580      	push	{r7, lr}
  401f1e:	b084      	sub	sp, #16
  401f20:	af00      	add	r7, sp, #0
  401f22:	60f8      	str	r0, [r7, #12]
  401f24:	60b9      	str	r1, [r7, #8]
  401f26:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401f28:	68f8      	ldr	r0, [r7, #12]
  401f2a:	4b1a      	ldr	r3, [pc, #104]	; (401f94 <usart_init_rs232+0x78>)
  401f2c:	4798      	blx	r3

	ul_reg_val = 0;
  401f2e:	4b1a      	ldr	r3, [pc, #104]	; (401f98 <usart_init_rs232+0x7c>)
  401f30:	2200      	movs	r2, #0
  401f32:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401f34:	68bb      	ldr	r3, [r7, #8]
  401f36:	2b00      	cmp	r3, #0
  401f38:	d009      	beq.n	401f4e <usart_init_rs232+0x32>
  401f3a:	68bb      	ldr	r3, [r7, #8]
  401f3c:	681b      	ldr	r3, [r3, #0]
  401f3e:	687a      	ldr	r2, [r7, #4]
  401f40:	4619      	mov	r1, r3
  401f42:	68f8      	ldr	r0, [r7, #12]
  401f44:	4b15      	ldr	r3, [pc, #84]	; (401f9c <usart_init_rs232+0x80>)
  401f46:	4798      	blx	r3
  401f48:	4603      	mov	r3, r0
  401f4a:	2b00      	cmp	r3, #0
  401f4c:	d001      	beq.n	401f52 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401f4e:	2301      	movs	r3, #1
  401f50:	e01b      	b.n	401f8a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401f52:	68bb      	ldr	r3, [r7, #8]
  401f54:	685a      	ldr	r2, [r3, #4]
  401f56:	68bb      	ldr	r3, [r7, #8]
  401f58:	689b      	ldr	r3, [r3, #8]
  401f5a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401f5c:	68bb      	ldr	r3, [r7, #8]
  401f5e:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401f60:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401f62:	68bb      	ldr	r3, [r7, #8]
  401f64:	68db      	ldr	r3, [r3, #12]
  401f66:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401f68:	4b0b      	ldr	r3, [pc, #44]	; (401f98 <usart_init_rs232+0x7c>)
  401f6a:	681b      	ldr	r3, [r3, #0]
  401f6c:	4313      	orrs	r3, r2
  401f6e:	4a0a      	ldr	r2, [pc, #40]	; (401f98 <usart_init_rs232+0x7c>)
  401f70:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401f72:	4b09      	ldr	r3, [pc, #36]	; (401f98 <usart_init_rs232+0x7c>)
  401f74:	681b      	ldr	r3, [r3, #0]
  401f76:	4a08      	ldr	r2, [pc, #32]	; (401f98 <usart_init_rs232+0x7c>)
  401f78:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401f7a:	68fb      	ldr	r3, [r7, #12]
  401f7c:	685a      	ldr	r2, [r3, #4]
  401f7e:	4b06      	ldr	r3, [pc, #24]	; (401f98 <usart_init_rs232+0x7c>)
  401f80:	681b      	ldr	r3, [r3, #0]
  401f82:	431a      	orrs	r2, r3
  401f84:	68fb      	ldr	r3, [r7, #12]
  401f86:	605a      	str	r2, [r3, #4]

	return 0;
  401f88:	2300      	movs	r3, #0
}
  401f8a:	4618      	mov	r0, r3
  401f8c:	3710      	adds	r7, #16
  401f8e:	46bd      	mov	sp, r7
  401f90:	bd80      	pop	{r7, pc}
  401f92:	bf00      	nop
  401f94:	00401ebd 	.word	0x00401ebd
  401f98:	200008ec 	.word	0x200008ec
  401f9c:	00401e33 	.word	0x00401e33

00401fa0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401fa0:	b480      	push	{r7}
  401fa2:	b083      	sub	sp, #12
  401fa4:	af00      	add	r7, sp, #0
  401fa6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401fa8:	687b      	ldr	r3, [r7, #4]
  401faa:	2240      	movs	r2, #64	; 0x40
  401fac:	601a      	str	r2, [r3, #0]
}
  401fae:	bf00      	nop
  401fb0:	370c      	adds	r7, #12
  401fb2:	46bd      	mov	sp, r7
  401fb4:	bc80      	pop	{r7}
  401fb6:	4770      	bx	lr

00401fb8 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401fb8:	b480      	push	{r7}
  401fba:	b083      	sub	sp, #12
  401fbc:	af00      	add	r7, sp, #0
  401fbe:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401fc0:	687b      	ldr	r3, [r7, #4]
  401fc2:	2288      	movs	r2, #136	; 0x88
  401fc4:	601a      	str	r2, [r3, #0]
}
  401fc6:	bf00      	nop
  401fc8:	370c      	adds	r7, #12
  401fca:	46bd      	mov	sp, r7
  401fcc:	bc80      	pop	{r7}
  401fce:	4770      	bx	lr

00401fd0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401fd0:	b480      	push	{r7}
  401fd2:	b083      	sub	sp, #12
  401fd4:	af00      	add	r7, sp, #0
  401fd6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401fd8:	687b      	ldr	r3, [r7, #4]
  401fda:	2210      	movs	r2, #16
  401fdc:	601a      	str	r2, [r3, #0]
}
  401fde:	bf00      	nop
  401fe0:	370c      	adds	r7, #12
  401fe2:	46bd      	mov	sp, r7
  401fe4:	bc80      	pop	{r7}
  401fe6:	4770      	bx	lr

00401fe8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401fe8:	b480      	push	{r7}
  401fea:	b083      	sub	sp, #12
  401fec:	af00      	add	r7, sp, #0
  401fee:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401ff0:	687b      	ldr	r3, [r7, #4]
  401ff2:	2224      	movs	r2, #36	; 0x24
  401ff4:	601a      	str	r2, [r3, #0]
}
  401ff6:	bf00      	nop
  401ff8:	370c      	adds	r7, #12
  401ffa:	46bd      	mov	sp, r7
  401ffc:	bc80      	pop	{r7}
  401ffe:	4770      	bx	lr

00402000 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402000:	b480      	push	{r7}
  402002:	b083      	sub	sp, #12
  402004:	af00      	add	r7, sp, #0
  402006:	6078      	str	r0, [r7, #4]
  402008:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40200a:	687b      	ldr	r3, [r7, #4]
  40200c:	683a      	ldr	r2, [r7, #0]
  40200e:	609a      	str	r2, [r3, #8]
}
  402010:	bf00      	nop
  402012:	370c      	adds	r7, #12
  402014:	46bd      	mov	sp, r7
  402016:	bc80      	pop	{r7}
  402018:	4770      	bx	lr

0040201a <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  40201a:	b480      	push	{r7}
  40201c:	b083      	sub	sp, #12
  40201e:	af00      	add	r7, sp, #0
  402020:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  402022:	687b      	ldr	r3, [r7, #4]
  402024:	691b      	ldr	r3, [r3, #16]
}
  402026:	4618      	mov	r0, r3
  402028:	370c      	adds	r7, #12
  40202a:	46bd      	mov	sp, r7
  40202c:	bc80      	pop	{r7}
  40202e:	4770      	bx	lr

00402030 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  402030:	b480      	push	{r7}
  402032:	b083      	sub	sp, #12
  402034:	af00      	add	r7, sp, #0
  402036:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  402038:	687b      	ldr	r3, [r7, #4]
  40203a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40203e:	601a      	str	r2, [r3, #0]
}
  402040:	bf00      	nop
  402042:	370c      	adds	r7, #12
  402044:	46bd      	mov	sp, r7
  402046:	bc80      	pop	{r7}
  402048:	4770      	bx	lr

0040204a <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40204a:	b480      	push	{r7}
  40204c:	b083      	sub	sp, #12
  40204e:	af00      	add	r7, sp, #0
  402050:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  402052:	687b      	ldr	r3, [r7, #4]
  402054:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402058:	601a      	str	r2, [r3, #0]
}
  40205a:	bf00      	nop
  40205c:	370c      	adds	r7, #12
  40205e:	46bd      	mov	sp, r7
  402060:	bc80      	pop	{r7}
  402062:	4770      	bx	lr

00402064 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  402064:	b480      	push	{r7}
  402066:	b083      	sub	sp, #12
  402068:	af00      	add	r7, sp, #0
  40206a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40206c:	687b      	ldr	r3, [r7, #4]
  40206e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402072:	601a      	str	r2, [r3, #0]
}
  402074:	bf00      	nop
  402076:	370c      	adds	r7, #12
  402078:	46bd      	mov	sp, r7
  40207a:	bc80      	pop	{r7}
  40207c:	4770      	bx	lr

0040207e <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  40207e:	b480      	push	{r7}
  402080:	b083      	sub	sp, #12
  402082:	af00      	add	r7, sp, #0
  402084:	6078      	str	r0, [r7, #4]
  402086:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402088:	687b      	ldr	r3, [r7, #4]
  40208a:	695b      	ldr	r3, [r3, #20]
  40208c:	f003 0302 	and.w	r3, r3, #2
  402090:	2b00      	cmp	r3, #0
  402092:	d101      	bne.n	402098 <usart_write+0x1a>
		return 1;
  402094:	2301      	movs	r3, #1
  402096:	e005      	b.n	4020a4 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402098:	683b      	ldr	r3, [r7, #0]
  40209a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40209e:	687b      	ldr	r3, [r7, #4]
  4020a0:	61da      	str	r2, [r3, #28]
	return 0;
  4020a2:	2300      	movs	r3, #0
}
  4020a4:	4618      	mov	r0, r3
  4020a6:	370c      	adds	r7, #12
  4020a8:	46bd      	mov	sp, r7
  4020aa:	bc80      	pop	{r7}
  4020ac:	4770      	bx	lr

004020ae <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4020ae:	b480      	push	{r7}
  4020b0:	b083      	sub	sp, #12
  4020b2:	af00      	add	r7, sp, #0
  4020b4:	6078      	str	r0, [r7, #4]
  4020b6:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4020b8:	687b      	ldr	r3, [r7, #4]
  4020ba:	695b      	ldr	r3, [r3, #20]
  4020bc:	f003 0301 	and.w	r3, r3, #1
  4020c0:	2b00      	cmp	r3, #0
  4020c2:	d101      	bne.n	4020c8 <usart_read+0x1a>
		return 1;
  4020c4:	2301      	movs	r3, #1
  4020c6:	e006      	b.n	4020d6 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4020c8:	687b      	ldr	r3, [r7, #4]
  4020ca:	699b      	ldr	r3, [r3, #24]
  4020cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4020d0:	683b      	ldr	r3, [r7, #0]
  4020d2:	601a      	str	r2, [r3, #0]

	return 0;
  4020d4:	2300      	movs	r3, #0
}
  4020d6:	4618      	mov	r0, r3
  4020d8:	370c      	adds	r7, #12
  4020da:	46bd      	mov	sp, r7
  4020dc:	bc80      	pop	{r7}
  4020de:	4770      	bx	lr

004020e0 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  4020e0:	b480      	push	{r7}
  4020e2:	b083      	sub	sp, #12
  4020e4:	af00      	add	r7, sp, #0
  4020e6:	6078      	str	r0, [r7, #4]
  4020e8:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4020ea:	bf00      	nop
  4020ec:	687b      	ldr	r3, [r7, #4]
  4020ee:	695b      	ldr	r3, [r3, #20]
  4020f0:	f003 0301 	and.w	r3, r3, #1
  4020f4:	2b00      	cmp	r3, #0
  4020f6:	d0f9      	beq.n	4020ec <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4020f8:	687b      	ldr	r3, [r7, #4]
  4020fa:	699b      	ldr	r3, [r3, #24]
  4020fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402100:	683b      	ldr	r3, [r7, #0]
  402102:	601a      	str	r2, [r3, #0]

	return 0;
  402104:	2300      	movs	r3, #0
}
  402106:	4618      	mov	r0, r3
  402108:	370c      	adds	r7, #12
  40210a:	46bd      	mov	sp, r7
  40210c:	bc80      	pop	{r7}
  40210e:	4770      	bx	lr

00402110 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  402110:	b480      	push	{r7}
  402112:	b083      	sub	sp, #12
  402114:	af00      	add	r7, sp, #0
  402116:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402118:	687b      	ldr	r3, [r7, #4]
  40211a:	4a04      	ldr	r2, [pc, #16]	; (40212c <usart_disable_writeprotect+0x1c>)
  40211c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402120:	bf00      	nop
  402122:	370c      	adds	r7, #12
  402124:	46bd      	mov	sp, r7
  402126:	bc80      	pop	{r7}
  402128:	4770      	bx	lr
  40212a:	bf00      	nop
  40212c:	55534100 	.word	0x55534100

00402130 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  402130:	b480      	push	{r7}
  402132:	b083      	sub	sp, #12
  402134:	af00      	add	r7, sp, #0
  402136:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402138:	687b      	ldr	r3, [r7, #4]
  40213a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40213e:	605a      	str	r2, [r3, #4]

}
  402140:	bf00      	nop
  402142:	370c      	adds	r7, #12
  402144:	46bd      	mov	sp, r7
  402146:	bc80      	pop	{r7}
  402148:	4770      	bx	lr
	...

0040214c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40214c:	b580      	push	{r7, lr}
  40214e:	b084      	sub	sp, #16
  402150:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  402152:	4b27      	ldr	r3, [pc, #156]	; (4021f0 <Reset_Handler+0xa4>)
  402154:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402156:	4b27      	ldr	r3, [pc, #156]	; (4021f4 <Reset_Handler+0xa8>)
  402158:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40215a:	68fa      	ldr	r2, [r7, #12]
  40215c:	68bb      	ldr	r3, [r7, #8]
  40215e:	429a      	cmp	r2, r3
  402160:	d90d      	bls.n	40217e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402162:	e007      	b.n	402174 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402164:	68bb      	ldr	r3, [r7, #8]
  402166:	1d1a      	adds	r2, r3, #4
  402168:	60ba      	str	r2, [r7, #8]
  40216a:	68fa      	ldr	r2, [r7, #12]
  40216c:	1d11      	adds	r1, r2, #4
  40216e:	60f9      	str	r1, [r7, #12]
  402170:	6812      	ldr	r2, [r2, #0]
  402172:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402174:	68bb      	ldr	r3, [r7, #8]
  402176:	4a20      	ldr	r2, [pc, #128]	; (4021f8 <Reset_Handler+0xac>)
  402178:	4293      	cmp	r3, r2
  40217a:	d3f3      	bcc.n	402164 <Reset_Handler+0x18>
  40217c:	e020      	b.n	4021c0 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  40217e:	68fa      	ldr	r2, [r7, #12]
  402180:	68bb      	ldr	r3, [r7, #8]
  402182:	429a      	cmp	r2, r3
  402184:	d21c      	bcs.n	4021c0 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402186:	4a1c      	ldr	r2, [pc, #112]	; (4021f8 <Reset_Handler+0xac>)
  402188:	4b1a      	ldr	r3, [pc, #104]	; (4021f4 <Reset_Handler+0xa8>)
  40218a:	1ad3      	subs	r3, r2, r3
  40218c:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40218e:	68fa      	ldr	r2, [r7, #12]
  402190:	687b      	ldr	r3, [r7, #4]
  402192:	4413      	add	r3, r2
  402194:	3b04      	subs	r3, #4
  402196:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402198:	68ba      	ldr	r2, [r7, #8]
  40219a:	687b      	ldr	r3, [r7, #4]
  40219c:	4413      	add	r3, r2
  40219e:	3b04      	subs	r3, #4
  4021a0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4021a2:	e00a      	b.n	4021ba <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4021a4:	68bb      	ldr	r3, [r7, #8]
  4021a6:	1f1a      	subs	r2, r3, #4
  4021a8:	60ba      	str	r2, [r7, #8]
  4021aa:	68fa      	ldr	r2, [r7, #12]
  4021ac:	1f11      	subs	r1, r2, #4
  4021ae:	60f9      	str	r1, [r7, #12]
  4021b0:	6812      	ldr	r2, [r2, #0]
  4021b2:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  4021b4:	687b      	ldr	r3, [r7, #4]
  4021b6:	3b04      	subs	r3, #4
  4021b8:	607b      	str	r3, [r7, #4]
  4021ba:	687b      	ldr	r3, [r7, #4]
  4021bc:	2b00      	cmp	r3, #0
  4021be:	d1f1      	bne.n	4021a4 <Reset_Handler+0x58>
		}
	}
	__NOP();
  4021c0:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4021c2:	4b0e      	ldr	r3, [pc, #56]	; (4021fc <Reset_Handler+0xb0>)
  4021c4:	60bb      	str	r3, [r7, #8]
  4021c6:	e004      	b.n	4021d2 <Reset_Handler+0x86>
		*pDest++ = 0;
  4021c8:	68bb      	ldr	r3, [r7, #8]
  4021ca:	1d1a      	adds	r2, r3, #4
  4021cc:	60ba      	str	r2, [r7, #8]
  4021ce:	2200      	movs	r2, #0
  4021d0:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  4021d2:	68bb      	ldr	r3, [r7, #8]
  4021d4:	4a0a      	ldr	r2, [pc, #40]	; (402200 <Reset_Handler+0xb4>)
  4021d6:	4293      	cmp	r3, r2
  4021d8:	d3f6      	bcc.n	4021c8 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4021da:	4b0a      	ldr	r3, [pc, #40]	; (402204 <Reset_Handler+0xb8>)
  4021dc:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4021de:	4a0a      	ldr	r2, [pc, #40]	; (402208 <Reset_Handler+0xbc>)
  4021e0:	68fb      	ldr	r3, [r7, #12]
  4021e2:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4021e4:	4b09      	ldr	r3, [pc, #36]	; (40220c <Reset_Handler+0xc0>)
  4021e6:	4798      	blx	r3

	/* Branch to main function */
	main();
  4021e8:	4b09      	ldr	r3, [pc, #36]	; (402210 <Reset_Handler+0xc4>)
  4021ea:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4021ec:	e7fe      	b.n	4021ec <Reset_Handler+0xa0>
  4021ee:	bf00      	nop
  4021f0:	00403ea0 	.word	0x00403ea0
  4021f4:	20000000 	.word	0x20000000
  4021f8:	20000854 	.word	0x20000854
  4021fc:	20000854 	.word	0x20000854
  402200:	20002d6c 	.word	0x20002d6c
  402204:	00400000 	.word	0x00400000
  402208:	e000ed00 	.word	0xe000ed00
  40220c:	00402a29 	.word	0x00402a29
  402210:	004025bd 	.word	0x004025bd

00402214 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402214:	b480      	push	{r7}
  402216:	af00      	add	r7, sp, #0
	while (1) {
  402218:	e7fe      	b.n	402218 <Dummy_Handler+0x4>
	...

0040221c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40221c:	b480      	push	{r7}
  40221e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402220:	4b5d      	ldr	r3, [pc, #372]	; (402398 <SystemCoreClockUpdate+0x17c>)
  402222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402224:	f003 0303 	and.w	r3, r3, #3
  402228:	2b03      	cmp	r3, #3
  40222a:	f200 8096 	bhi.w	40235a <SystemCoreClockUpdate+0x13e>
  40222e:	a201      	add	r2, pc, #4	; (adr r2, 402234 <SystemCoreClockUpdate+0x18>)
  402230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402234:	00402245 	.word	0x00402245
  402238:	00402265 	.word	0x00402265
  40223c:	004022af 	.word	0x004022af
  402240:	004022af 	.word	0x004022af
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402244:	4b55      	ldr	r3, [pc, #340]	; (40239c <SystemCoreClockUpdate+0x180>)
  402246:	695b      	ldr	r3, [r3, #20]
  402248:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40224c:	2b00      	cmp	r3, #0
  40224e:	d004      	beq.n	40225a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402250:	4b53      	ldr	r3, [pc, #332]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402252:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402256:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402258:	e080      	b.n	40235c <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40225a:	4b51      	ldr	r3, [pc, #324]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  40225c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402260:	601a      	str	r2, [r3, #0]
		break;
  402262:	e07b      	b.n	40235c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402264:	4b4c      	ldr	r3, [pc, #304]	; (402398 <SystemCoreClockUpdate+0x17c>)
  402266:	6a1b      	ldr	r3, [r3, #32]
  402268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40226c:	2b00      	cmp	r3, #0
  40226e:	d003      	beq.n	402278 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402270:	4b4b      	ldr	r3, [pc, #300]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402272:	4a4c      	ldr	r2, [pc, #304]	; (4023a4 <SystemCoreClockUpdate+0x188>)
  402274:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402276:	e071      	b.n	40235c <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402278:	4b49      	ldr	r3, [pc, #292]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  40227a:	4a4b      	ldr	r2, [pc, #300]	; (4023a8 <SystemCoreClockUpdate+0x18c>)
  40227c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40227e:	4b46      	ldr	r3, [pc, #280]	; (402398 <SystemCoreClockUpdate+0x17c>)
  402280:	6a1b      	ldr	r3, [r3, #32]
  402282:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402286:	2b10      	cmp	r3, #16
  402288:	d008      	beq.n	40229c <SystemCoreClockUpdate+0x80>
  40228a:	2b20      	cmp	r3, #32
  40228c:	d00a      	beq.n	4022a4 <SystemCoreClockUpdate+0x88>
  40228e:	2b00      	cmp	r3, #0
  402290:	d000      	beq.n	402294 <SystemCoreClockUpdate+0x78>
			break;
  402292:	e00b      	b.n	4022ac <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402294:	4b42      	ldr	r3, [pc, #264]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402296:	4a44      	ldr	r2, [pc, #272]	; (4023a8 <SystemCoreClockUpdate+0x18c>)
  402298:	601a      	str	r2, [r3, #0]
			break;
  40229a:	e007      	b.n	4022ac <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40229c:	4b40      	ldr	r3, [pc, #256]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  40229e:	4a43      	ldr	r2, [pc, #268]	; (4023ac <SystemCoreClockUpdate+0x190>)
  4022a0:	601a      	str	r2, [r3, #0]
			break;
  4022a2:	e003      	b.n	4022ac <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4022a4:	4b3e      	ldr	r3, [pc, #248]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  4022a6:	4a3f      	ldr	r2, [pc, #252]	; (4023a4 <SystemCoreClockUpdate+0x188>)
  4022a8:	601a      	str	r2, [r3, #0]
			break;
  4022aa:	bf00      	nop
		break;
  4022ac:	e056      	b.n	40235c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4022ae:	4b3a      	ldr	r3, [pc, #232]	; (402398 <SystemCoreClockUpdate+0x17c>)
  4022b0:	6a1b      	ldr	r3, [r3, #32]
  4022b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4022b6:	2b00      	cmp	r3, #0
  4022b8:	d003      	beq.n	4022c2 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4022ba:	4b39      	ldr	r3, [pc, #228]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  4022bc:	4a39      	ldr	r2, [pc, #228]	; (4023a4 <SystemCoreClockUpdate+0x188>)
  4022be:	601a      	str	r2, [r3, #0]
  4022c0:	e019      	b.n	4022f6 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4022c2:	4b37      	ldr	r3, [pc, #220]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  4022c4:	4a38      	ldr	r2, [pc, #224]	; (4023a8 <SystemCoreClockUpdate+0x18c>)
  4022c6:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4022c8:	4b33      	ldr	r3, [pc, #204]	; (402398 <SystemCoreClockUpdate+0x17c>)
  4022ca:	6a1b      	ldr	r3, [r3, #32]
  4022cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4022d0:	2b10      	cmp	r3, #16
  4022d2:	d008      	beq.n	4022e6 <SystemCoreClockUpdate+0xca>
  4022d4:	2b20      	cmp	r3, #32
  4022d6:	d00a      	beq.n	4022ee <SystemCoreClockUpdate+0xd2>
  4022d8:	2b00      	cmp	r3, #0
  4022da:	d000      	beq.n	4022de <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4022dc:	e00b      	b.n	4022f6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4022de:	4b30      	ldr	r3, [pc, #192]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  4022e0:	4a31      	ldr	r2, [pc, #196]	; (4023a8 <SystemCoreClockUpdate+0x18c>)
  4022e2:	601a      	str	r2, [r3, #0]
					break;
  4022e4:	e007      	b.n	4022f6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4022e6:	4b2e      	ldr	r3, [pc, #184]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  4022e8:	4a30      	ldr	r2, [pc, #192]	; (4023ac <SystemCoreClockUpdate+0x190>)
  4022ea:	601a      	str	r2, [r3, #0]
					break;
  4022ec:	e003      	b.n	4022f6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4022ee:	4b2c      	ldr	r3, [pc, #176]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  4022f0:	4a2c      	ldr	r2, [pc, #176]	; (4023a4 <SystemCoreClockUpdate+0x188>)
  4022f2:	601a      	str	r2, [r3, #0]
					break;
  4022f4:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4022f6:	4b28      	ldr	r3, [pc, #160]	; (402398 <SystemCoreClockUpdate+0x17c>)
  4022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4022fa:	f003 0303 	and.w	r3, r3, #3
  4022fe:	2b02      	cmp	r3, #2
  402300:	d115      	bne.n	40232e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402302:	4b25      	ldr	r3, [pc, #148]	; (402398 <SystemCoreClockUpdate+0x17c>)
  402304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402306:	0c1b      	lsrs	r3, r3, #16
  402308:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40230c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40230e:	4a24      	ldr	r2, [pc, #144]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402310:	6812      	ldr	r2, [r2, #0]
  402312:	fb02 f303 	mul.w	r3, r2, r3
  402316:	4a22      	ldr	r2, [pc, #136]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402318:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40231a:	4b1f      	ldr	r3, [pc, #124]	; (402398 <SystemCoreClockUpdate+0x17c>)
  40231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40231e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402320:	4a1f      	ldr	r2, [pc, #124]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402322:	6812      	ldr	r2, [r2, #0]
  402324:	fbb2 f3f3 	udiv	r3, r2, r3
  402328:	4a1d      	ldr	r2, [pc, #116]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  40232a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40232c:	e016      	b.n	40235c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40232e:	4b1a      	ldr	r3, [pc, #104]	; (402398 <SystemCoreClockUpdate+0x17c>)
  402330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402332:	0c1b      	lsrs	r3, r3, #16
  402334:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402338:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40233a:	4a19      	ldr	r2, [pc, #100]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  40233c:	6812      	ldr	r2, [r2, #0]
  40233e:	fb02 f303 	mul.w	r3, r2, r3
  402342:	4a17      	ldr	r2, [pc, #92]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402344:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402346:	4b14      	ldr	r3, [pc, #80]	; (402398 <SystemCoreClockUpdate+0x17c>)
  402348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40234a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40234c:	4a14      	ldr	r2, [pc, #80]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  40234e:	6812      	ldr	r2, [r2, #0]
  402350:	fbb2 f3f3 	udiv	r3, r2, r3
  402354:	4a12      	ldr	r2, [pc, #72]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402356:	6013      	str	r3, [r2, #0]
		break;
  402358:	e000      	b.n	40235c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40235a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40235c:	4b0e      	ldr	r3, [pc, #56]	; (402398 <SystemCoreClockUpdate+0x17c>)
  40235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402360:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402364:	2b70      	cmp	r3, #112	; 0x70
  402366:	d108      	bne.n	40237a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402368:	4b0d      	ldr	r3, [pc, #52]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  40236a:	681b      	ldr	r3, [r3, #0]
  40236c:	4a10      	ldr	r2, [pc, #64]	; (4023b0 <SystemCoreClockUpdate+0x194>)
  40236e:	fba2 2303 	umull	r2, r3, r2, r3
  402372:	085b      	lsrs	r3, r3, #1
  402374:	4a0a      	ldr	r2, [pc, #40]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402376:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402378:	e00a      	b.n	402390 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40237a:	4b07      	ldr	r3, [pc, #28]	; (402398 <SystemCoreClockUpdate+0x17c>)
  40237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40237e:	091b      	lsrs	r3, r3, #4
  402380:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402384:	4a06      	ldr	r2, [pc, #24]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  402386:	6812      	ldr	r2, [r2, #0]
  402388:	fa22 f303 	lsr.w	r3, r2, r3
  40238c:	4a04      	ldr	r2, [pc, #16]	; (4023a0 <SystemCoreClockUpdate+0x184>)
  40238e:	6013      	str	r3, [r2, #0]
}
  402390:	bf00      	nop
  402392:	46bd      	mov	sp, r7
  402394:	bc80      	pop	{r7}
  402396:	4770      	bx	lr
  402398:	400e0400 	.word	0x400e0400
  40239c:	400e1410 	.word	0x400e1410
  4023a0:	2000000c 	.word	0x2000000c
  4023a4:	00b71b00 	.word	0x00b71b00
  4023a8:	003d0900 	.word	0x003d0900
  4023ac:	007a1200 	.word	0x007a1200
  4023b0:	aaaaaaab 	.word	0xaaaaaaab

004023b4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4023b4:	b480      	push	{r7}
  4023b6:	b083      	sub	sp, #12
  4023b8:	af00      	add	r7, sp, #0
  4023ba:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4023bc:	687b      	ldr	r3, [r7, #4]
  4023be:	4a22      	ldr	r2, [pc, #136]	; (402448 <system_init_flash+0x94>)
  4023c0:	4293      	cmp	r3, r2
  4023c2:	d808      	bhi.n	4023d6 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4023c4:	4b21      	ldr	r3, [pc, #132]	; (40244c <system_init_flash+0x98>)
  4023c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4023ca:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4023cc:	4b20      	ldr	r3, [pc, #128]	; (402450 <system_init_flash+0x9c>)
  4023ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4023d2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4023d4:	e033      	b.n	40243e <system_init_flash+0x8a>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4023d6:	687b      	ldr	r3, [r7, #4]
  4023d8:	4a1e      	ldr	r2, [pc, #120]	; (402454 <system_init_flash+0xa0>)
  4023da:	4293      	cmp	r3, r2
  4023dc:	d806      	bhi.n	4023ec <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4023de:	4b1b      	ldr	r3, [pc, #108]	; (40244c <system_init_flash+0x98>)
  4023e0:	4a1d      	ldr	r2, [pc, #116]	; (402458 <system_init_flash+0xa4>)
  4023e2:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4023e4:	4b1a      	ldr	r3, [pc, #104]	; (402450 <system_init_flash+0x9c>)
  4023e6:	4a1c      	ldr	r2, [pc, #112]	; (402458 <system_init_flash+0xa4>)
  4023e8:	601a      	str	r2, [r3, #0]
}
  4023ea:	e028      	b.n	40243e <system_init_flash+0x8a>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4023ec:	687b      	ldr	r3, [r7, #4]
  4023ee:	4a1b      	ldr	r2, [pc, #108]	; (40245c <system_init_flash+0xa8>)
  4023f0:	4293      	cmp	r3, r2
  4023f2:	d806      	bhi.n	402402 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4023f4:	4b15      	ldr	r3, [pc, #84]	; (40244c <system_init_flash+0x98>)
  4023f6:	4a1a      	ldr	r2, [pc, #104]	; (402460 <system_init_flash+0xac>)
  4023f8:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4023fa:	4b15      	ldr	r3, [pc, #84]	; (402450 <system_init_flash+0x9c>)
  4023fc:	4a18      	ldr	r2, [pc, #96]	; (402460 <system_init_flash+0xac>)
  4023fe:	601a      	str	r2, [r3, #0]
}
  402400:	e01d      	b.n	40243e <system_init_flash+0x8a>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402402:	687b      	ldr	r3, [r7, #4]
  402404:	4a17      	ldr	r2, [pc, #92]	; (402464 <system_init_flash+0xb0>)
  402406:	4293      	cmp	r3, r2
  402408:	d806      	bhi.n	402418 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40240a:	4b10      	ldr	r3, [pc, #64]	; (40244c <system_init_flash+0x98>)
  40240c:	4a16      	ldr	r2, [pc, #88]	; (402468 <system_init_flash+0xb4>)
  40240e:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402410:	4b0f      	ldr	r3, [pc, #60]	; (402450 <system_init_flash+0x9c>)
  402412:	4a15      	ldr	r2, [pc, #84]	; (402468 <system_init_flash+0xb4>)
  402414:	601a      	str	r2, [r3, #0]
}
  402416:	e012      	b.n	40243e <system_init_flash+0x8a>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402418:	687b      	ldr	r3, [r7, #4]
  40241a:	4a14      	ldr	r2, [pc, #80]	; (40246c <system_init_flash+0xb8>)
  40241c:	4293      	cmp	r3, r2
  40241e:	d808      	bhi.n	402432 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402420:	4b0a      	ldr	r3, [pc, #40]	; (40244c <system_init_flash+0x98>)
  402422:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402426:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402428:	4b09      	ldr	r3, [pc, #36]	; (402450 <system_init_flash+0x9c>)
  40242a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40242e:	601a      	str	r2, [r3, #0]
}
  402430:	e005      	b.n	40243e <system_init_flash+0x8a>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402432:	4b06      	ldr	r3, [pc, #24]	; (40244c <system_init_flash+0x98>)
  402434:	4a0e      	ldr	r2, [pc, #56]	; (402470 <system_init_flash+0xbc>)
  402436:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402438:	4b05      	ldr	r3, [pc, #20]	; (402450 <system_init_flash+0x9c>)
  40243a:	4a0d      	ldr	r2, [pc, #52]	; (402470 <system_init_flash+0xbc>)
  40243c:	601a      	str	r2, [r3, #0]
}
  40243e:	bf00      	nop
  402440:	370c      	adds	r7, #12
  402442:	46bd      	mov	sp, r7
  402444:	bc80      	pop	{r7}
  402446:	4770      	bx	lr
  402448:	01312cff 	.word	0x01312cff
  40244c:	400e0a00 	.word	0x400e0a00
  402450:	400e0c00 	.word	0x400e0c00
  402454:	026259ff 	.word	0x026259ff
  402458:	04000100 	.word	0x04000100
  40245c:	039386ff 	.word	0x039386ff
  402460:	04000200 	.word	0x04000200
  402464:	04c4b3ff 	.word	0x04c4b3ff
  402468:	04000300 	.word	0x04000300
  40246c:	05f5e0ff 	.word	0x05f5e0ff
  402470:	04000500 	.word	0x04000500

00402474 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402474:	b480      	push	{r7}
  402476:	b085      	sub	sp, #20
  402478:	af00      	add	r7, sp, #0
  40247a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40247c:	4b10      	ldr	r3, [pc, #64]	; (4024c0 <_sbrk+0x4c>)
  40247e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402480:	4b10      	ldr	r3, [pc, #64]	; (4024c4 <_sbrk+0x50>)
  402482:	681b      	ldr	r3, [r3, #0]
  402484:	2b00      	cmp	r3, #0
  402486:	d102      	bne.n	40248e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402488:	4b0e      	ldr	r3, [pc, #56]	; (4024c4 <_sbrk+0x50>)
  40248a:	4a0f      	ldr	r2, [pc, #60]	; (4024c8 <_sbrk+0x54>)
  40248c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40248e:	4b0d      	ldr	r3, [pc, #52]	; (4024c4 <_sbrk+0x50>)
  402490:	681b      	ldr	r3, [r3, #0]
  402492:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402494:	68ba      	ldr	r2, [r7, #8]
  402496:	687b      	ldr	r3, [r7, #4]
  402498:	441a      	add	r2, r3
  40249a:	68fb      	ldr	r3, [r7, #12]
  40249c:	429a      	cmp	r2, r3
  40249e:	dd02      	ble.n	4024a6 <_sbrk+0x32>
		return (caddr_t) -1;	
  4024a0:	f04f 33ff 	mov.w	r3, #4294967295
  4024a4:	e006      	b.n	4024b4 <_sbrk+0x40>
	}

	heap += incr;
  4024a6:	4b07      	ldr	r3, [pc, #28]	; (4024c4 <_sbrk+0x50>)
  4024a8:	681a      	ldr	r2, [r3, #0]
  4024aa:	687b      	ldr	r3, [r7, #4]
  4024ac:	4413      	add	r3, r2
  4024ae:	4a05      	ldr	r2, [pc, #20]	; (4024c4 <_sbrk+0x50>)
  4024b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4024b2:	68bb      	ldr	r3, [r7, #8]
}
  4024b4:	4618      	mov	r0, r3
  4024b6:	3714      	adds	r7, #20
  4024b8:	46bd      	mov	sp, r7
  4024ba:	bc80      	pop	{r7}
  4024bc:	4770      	bx	lr
  4024be:	bf00      	nop
  4024c0:	20027ffc 	.word	0x20027ffc
  4024c4:	200008f0 	.word	0x200008f0
  4024c8:	20005d70 	.word	0x20005d70

004024cc <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4024cc:	b480      	push	{r7}
  4024ce:	b083      	sub	sp, #12
  4024d0:	af00      	add	r7, sp, #0
  4024d2:	6078      	str	r0, [r7, #4]
	return -1;
  4024d4:	f04f 33ff 	mov.w	r3, #4294967295
}
  4024d8:	4618      	mov	r0, r3
  4024da:	370c      	adds	r7, #12
  4024dc:	46bd      	mov	sp, r7
  4024de:	bc80      	pop	{r7}
  4024e0:	4770      	bx	lr

004024e2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4024e2:	b480      	push	{r7}
  4024e4:	b083      	sub	sp, #12
  4024e6:	af00      	add	r7, sp, #0
  4024e8:	6078      	str	r0, [r7, #4]
  4024ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4024ec:	683b      	ldr	r3, [r7, #0]
  4024ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4024f2:	605a      	str	r2, [r3, #4]

	return 0;
  4024f4:	2300      	movs	r3, #0
}
  4024f6:	4618      	mov	r0, r3
  4024f8:	370c      	adds	r7, #12
  4024fa:	46bd      	mov	sp, r7
  4024fc:	bc80      	pop	{r7}
  4024fe:	4770      	bx	lr

00402500 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
  402500:	b480      	push	{r7}
  402502:	b085      	sub	sp, #20
  402504:	af00      	add	r7, sp, #0
  402506:	60f8      	str	r0, [r7, #12]
  402508:	60b9      	str	r1, [r7, #8]
  40250a:	607a      	str	r2, [r7, #4]
	return 0;
  40250c:	2300      	movs	r3, #0
}
  40250e:	4618      	mov	r0, r3
  402510:	3714      	adds	r7, #20
  402512:	46bd      	mov	sp, r7
  402514:	bc80      	pop	{r7}
  402516:	4770      	bx	lr

00402518 <osc_get_rate>:
{
  402518:	b480      	push	{r7}
  40251a:	b083      	sub	sp, #12
  40251c:	af00      	add	r7, sp, #0
  40251e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402520:	687b      	ldr	r3, [r7, #4]
  402522:	2b07      	cmp	r3, #7
  402524:	d825      	bhi.n	402572 <osc_get_rate+0x5a>
  402526:	a201      	add	r2, pc, #4	; (adr r2, 40252c <osc_get_rate+0x14>)
  402528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40252c:	0040254d 	.word	0x0040254d
  402530:	00402553 	.word	0x00402553
  402534:	00402559 	.word	0x00402559
  402538:	0040255f 	.word	0x0040255f
  40253c:	00402563 	.word	0x00402563
  402540:	00402567 	.word	0x00402567
  402544:	0040256b 	.word	0x0040256b
  402548:	0040256f 	.word	0x0040256f
		return OSC_SLCK_32K_RC_HZ;
  40254c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402550:	e010      	b.n	402574 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402556:	e00d      	b.n	402574 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40255c:	e00a      	b.n	402574 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40255e:	4b08      	ldr	r3, [pc, #32]	; (402580 <osc_get_rate+0x68>)
  402560:	e008      	b.n	402574 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402562:	4b08      	ldr	r3, [pc, #32]	; (402584 <osc_get_rate+0x6c>)
  402564:	e006      	b.n	402574 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402566:	4b08      	ldr	r3, [pc, #32]	; (402588 <osc_get_rate+0x70>)
  402568:	e004      	b.n	402574 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40256a:	4b07      	ldr	r3, [pc, #28]	; (402588 <osc_get_rate+0x70>)
  40256c:	e002      	b.n	402574 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40256e:	4b06      	ldr	r3, [pc, #24]	; (402588 <osc_get_rate+0x70>)
  402570:	e000      	b.n	402574 <osc_get_rate+0x5c>
	return 0;
  402572:	2300      	movs	r3, #0
}
  402574:	4618      	mov	r0, r3
  402576:	370c      	adds	r7, #12
  402578:	46bd      	mov	sp, r7
  40257a:	bc80      	pop	{r7}
  40257c:	4770      	bx	lr
  40257e:	bf00      	nop
  402580:	003d0900 	.word	0x003d0900
  402584:	007a1200 	.word	0x007a1200
  402588:	00b71b00 	.word	0x00b71b00

0040258c <sysclk_get_main_hz>:
{
  40258c:	b580      	push	{r7, lr}
  40258e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402590:	2006      	movs	r0, #6
  402592:	4b04      	ldr	r3, [pc, #16]	; (4025a4 <sysclk_get_main_hz+0x18>)
  402594:	4798      	blx	r3
  402596:	4602      	mov	r2, r0
  402598:	4613      	mov	r3, r2
  40259a:	009b      	lsls	r3, r3, #2
  40259c:	4413      	add	r3, r2
  40259e:	009b      	lsls	r3, r3, #2
}
  4025a0:	4618      	mov	r0, r3
  4025a2:	bd80      	pop	{r7, pc}
  4025a4:	00402519 	.word	0x00402519

004025a8 <sysclk_get_cpu_hz>:
{
  4025a8:	b580      	push	{r7, lr}
  4025aa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4025ac:	4b02      	ldr	r3, [pc, #8]	; (4025b8 <sysclk_get_cpu_hz+0x10>)
  4025ae:	4798      	blx	r3
  4025b0:	4603      	mov	r3, r0
  4025b2:	085b      	lsrs	r3, r3, #1
}
  4025b4:	4618      	mov	r0, r3
  4025b6:	bd80      	pop	{r7, pc}
  4025b8:	0040258d 	.word	0x0040258d

004025bc <main>:
﻿#include "main.h"
#include "boot_uart.h"
#include "xmodem.h"

int main(void)
{
  4025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4025be:	b09b      	sub	sp, #108	; 0x6c
  4025c0:	af00      	add	r7, sp, #0
	uint8_t buf[100] = {0,};
  4025c2:	1d3b      	adds	r3, r7, #4
  4025c4:	2264      	movs	r2, #100	; 0x64
  4025c6:	2100      	movs	r1, #0
  4025c8:	4618      	mov	r0, r3
  4025ca:	4b45      	ldr	r3, [pc, #276]	; (4026e0 <main+0x124>)
  4025cc:	4798      	blx	r3

	/* Initialize the board. */
	sysclk_init();
  4025ce:	4b45      	ldr	r3, [pc, #276]	; (4026e4 <main+0x128>)
  4025d0:	4798      	blx	r3
	board_init();
  4025d2:	4b45      	ldr	r3, [pc, #276]	; (4026e8 <main+0x12c>)
  4025d4:	4798      	blx	r3

	/* Initialize the UART console. */
	Boot_Uart_Init();
  4025d6:	4b45      	ldr	r3, [pc, #276]	; (4026ec <main+0x130>)
  4025d8:	4798      	blx	r3
	delay_ms(100);
  4025da:	4b45      	ldr	r3, [pc, #276]	; (4026f0 <main+0x134>)
  4025dc:	4798      	blx	r3
  4025de:	4603      	mov	r3, r0
  4025e0:	4619      	mov	r1, r3
  4025e2:	f04f 0200 	mov.w	r2, #0
  4025e6:	460b      	mov	r3, r1
  4025e8:	4614      	mov	r4, r2
  4025ea:	18db      	adds	r3, r3, r3
  4025ec:	eb44 0404 	adc.w	r4, r4, r4
  4025f0:	185b      	adds	r3, r3, r1
  4025f2:	eb44 0402 	adc.w	r4, r4, r2
  4025f6:	0166      	lsls	r6, r4, #5
  4025f8:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4025fc:	015d      	lsls	r5, r3, #5
  4025fe:	195b      	adds	r3, r3, r5
  402600:	eb44 0406 	adc.w	r4, r4, r6
  402604:	185b      	adds	r3, r3, r1
  402606:	eb44 0402 	adc.w	r4, r4, r2
  40260a:	f243 61af 	movw	r1, #13999	; 0x36af
  40260e:	f04f 0200 	mov.w	r2, #0
  402612:	185d      	adds	r5, r3, r1
  402614:	eb44 0602 	adc.w	r6, r4, r2
  402618:	4628      	mov	r0, r5
  40261a:	4631      	mov	r1, r6
  40261c:	4c35      	ldr	r4, [pc, #212]	; (4026f4 <main+0x138>)
  40261e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402622:	f04f 0300 	mov.w	r3, #0
  402626:	47a0      	blx	r4
  402628:	4603      	mov	r3, r0
  40262a:	460c      	mov	r4, r1
  40262c:	4618      	mov	r0, r3
  40262e:	4b32      	ldr	r3, [pc, #200]	; (4026f8 <main+0x13c>)
  402630:	4798      	blx	r3
	sprintf((char *)buf,"========================================\r\n");
  402632:	1d3b      	adds	r3, r7, #4
  402634:	4a31      	ldr	r2, [pc, #196]	; (4026fc <main+0x140>)
  402636:	461c      	mov	r4, r3
  402638:	4615      	mov	r5, r2
  40263a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40263c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40263e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402646:	c403      	stmia	r4!, {r0, r1}
  402648:	8022      	strh	r2, [r4, #0]
  40264a:	3402      	adds	r4, #2
  40264c:	0c13      	lsrs	r3, r2, #16
  40264e:	7023      	strb	r3, [r4, #0]
	Uart_Transmit_Str(buf);
  402650:	1d3b      	adds	r3, r7, #4
  402652:	4618      	mov	r0, r3
  402654:	4b2a      	ldr	r3, [pc, #168]	; (402700 <main+0x144>)
  402656:	4798      	blx	r3
	sprintf((char *)buf,"=  ATSAM4S Firmware Update Bootloader  =\r\n");
  402658:	1d3b      	adds	r3, r7, #4
  40265a:	4a2a      	ldr	r2, [pc, #168]	; (402704 <main+0x148>)
  40265c:	461c      	mov	r4, r3
  40265e:	4615      	mov	r5, r2
  402660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  40266c:	c403      	stmia	r4!, {r0, r1}
  40266e:	8022      	strh	r2, [r4, #0]
  402670:	3402      	adds	r4, #2
  402672:	0c13      	lsrs	r3, r2, #16
  402674:	7023      	strb	r3, [r4, #0]
	Uart_Transmit_Str(buf);
  402676:	1d3b      	adds	r3, r7, #4
  402678:	4618      	mov	r0, r3
  40267a:	4b21      	ldr	r3, [pc, #132]	; (402700 <main+0x144>)
  40267c:	4798      	blx	r3
	sprintf((char *)buf,"========================================\r\n");
  40267e:	1d3b      	adds	r3, r7, #4
  402680:	4a1e      	ldr	r2, [pc, #120]	; (4026fc <main+0x140>)
  402682:	461c      	mov	r4, r3
  402684:	4615      	mov	r5, r2
  402686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40268a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40268c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40268e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402692:	c403      	stmia	r4!, {r0, r1}
  402694:	8022      	strh	r2, [r4, #0]
  402696:	3402      	adds	r4, #2
  402698:	0c13      	lsrs	r3, r2, #16
  40269a:	7023      	strb	r3, [r4, #0]
	Uart_Transmit_Str(buf);
  40269c:	1d3b      	adds	r3, r7, #4
  40269e:	4618      	mov	r0, r3
  4026a0:	4b17      	ldr	r3, [pc, #92]	; (402700 <main+0x144>)
  4026a2:	4798      	blx	r3
	while(1)
	{
		sprintf((char *)buf,"Please send a new binary file with Xmodem protocol to update the firmware.\r\n");
  4026a4:	1d3b      	adds	r3, r7, #4
  4026a6:	4a18      	ldr	r2, [pc, #96]	; (402708 <main+0x14c>)
  4026a8:	4618      	mov	r0, r3
  4026aa:	4611      	mov	r1, r2
  4026ac:	234d      	movs	r3, #77	; 0x4d
  4026ae:	461a      	mov	r2, r3
  4026b0:	4b16      	ldr	r3, [pc, #88]	; (40270c <main+0x150>)
  4026b2:	4798      	blx	r3
		Uart_Transmit_Str(buf);
  4026b4:	1d3b      	adds	r3, r7, #4
  4026b6:	4618      	mov	r0, r3
  4026b8:	4b11      	ldr	r3, [pc, #68]	; (402700 <main+0x144>)
  4026ba:	4798      	blx	r3
		xmodem_receive();		
  4026bc:	4b14      	ldr	r3, [pc, #80]	; (402710 <main+0x154>)
  4026be:	4798      	blx	r3
		sprintf((char *)buf,"\r\nFailed... Please try again.\r\n");
  4026c0:	1d3b      	adds	r3, r7, #4
  4026c2:	4a14      	ldr	r2, [pc, #80]	; (402714 <main+0x158>)
  4026c4:	461c      	mov	r4, r3
  4026c6:	4615      	mov	r5, r2
  4026c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4026ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4026cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4026d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Uart_Transmit_Str(buf);
  4026d4:	1d3b      	adds	r3, r7, #4
  4026d6:	4618      	mov	r0, r3
  4026d8:	4b09      	ldr	r3, [pc, #36]	; (402700 <main+0x144>)
  4026da:	4798      	blx	r3
		sprintf((char *)buf,"Please send a new binary file with Xmodem protocol to update the firmware.\r\n");
  4026dc:	e7e2      	b.n	4026a4 <main+0xe8>
  4026de:	bf00      	nop
  4026e0:	0040311d 	.word	0x0040311d
  4026e4:	00400ff1 	.word	0x00400ff1
  4026e8:	00401369 	.word	0x00401369
  4026ec:	004004f5 	.word	0x004004f5
  4026f0:	004025a9 	.word	0x004025a9
  4026f4:	00402719 	.word	0x00402719
  4026f8:	20000001 	.word	0x20000001
  4026fc:	00403da8 	.word	0x00403da8
  402700:	00400579 	.word	0x00400579
  402704:	00403dd4 	.word	0x00403dd4
  402708:	00403e00 	.word	0x00403e00
  40270c:	00402fe9 	.word	0x00402fe9
  402710:	004008c9 	.word	0x004008c9
  402714:	00403e50 	.word	0x00403e50

00402718 <__aeabi_uldivmod>:
  402718:	b953      	cbnz	r3, 402730 <__aeabi_uldivmod+0x18>
  40271a:	b94a      	cbnz	r2, 402730 <__aeabi_uldivmod+0x18>
  40271c:	2900      	cmp	r1, #0
  40271e:	bf08      	it	eq
  402720:	2800      	cmpeq	r0, #0
  402722:	bf1c      	itt	ne
  402724:	f04f 31ff 	movne.w	r1, #4294967295
  402728:	f04f 30ff 	movne.w	r0, #4294967295
  40272c:	f000 b97a 	b.w	402a24 <__aeabi_idiv0>
  402730:	f1ad 0c08 	sub.w	ip, sp, #8
  402734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402738:	f000 f806 	bl	402748 <__udivmoddi4>
  40273c:	f8dd e004 	ldr.w	lr, [sp, #4]
  402740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402744:	b004      	add	sp, #16
  402746:	4770      	bx	lr

00402748 <__udivmoddi4>:
  402748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40274c:	468c      	mov	ip, r1
  40274e:	460d      	mov	r5, r1
  402750:	4604      	mov	r4, r0
  402752:	9e08      	ldr	r6, [sp, #32]
  402754:	2b00      	cmp	r3, #0
  402756:	d151      	bne.n	4027fc <__udivmoddi4+0xb4>
  402758:	428a      	cmp	r2, r1
  40275a:	4617      	mov	r7, r2
  40275c:	d96d      	bls.n	40283a <__udivmoddi4+0xf2>
  40275e:	fab2 fe82 	clz	lr, r2
  402762:	f1be 0f00 	cmp.w	lr, #0
  402766:	d00b      	beq.n	402780 <__udivmoddi4+0x38>
  402768:	f1ce 0c20 	rsb	ip, lr, #32
  40276c:	fa01 f50e 	lsl.w	r5, r1, lr
  402770:	fa20 fc0c 	lsr.w	ip, r0, ip
  402774:	fa02 f70e 	lsl.w	r7, r2, lr
  402778:	ea4c 0c05 	orr.w	ip, ip, r5
  40277c:	fa00 f40e 	lsl.w	r4, r0, lr
  402780:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402784:	0c25      	lsrs	r5, r4, #16
  402786:	fbbc f8fa 	udiv	r8, ip, sl
  40278a:	fa1f f987 	uxth.w	r9, r7
  40278e:	fb0a cc18 	mls	ip, sl, r8, ip
  402792:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402796:	fb08 f309 	mul.w	r3, r8, r9
  40279a:	42ab      	cmp	r3, r5
  40279c:	d90a      	bls.n	4027b4 <__udivmoddi4+0x6c>
  40279e:	19ed      	adds	r5, r5, r7
  4027a0:	f108 32ff 	add.w	r2, r8, #4294967295
  4027a4:	f080 8123 	bcs.w	4029ee <__udivmoddi4+0x2a6>
  4027a8:	42ab      	cmp	r3, r5
  4027aa:	f240 8120 	bls.w	4029ee <__udivmoddi4+0x2a6>
  4027ae:	f1a8 0802 	sub.w	r8, r8, #2
  4027b2:	443d      	add	r5, r7
  4027b4:	1aed      	subs	r5, r5, r3
  4027b6:	b2a4      	uxth	r4, r4
  4027b8:	fbb5 f0fa 	udiv	r0, r5, sl
  4027bc:	fb0a 5510 	mls	r5, sl, r0, r5
  4027c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4027c4:	fb00 f909 	mul.w	r9, r0, r9
  4027c8:	45a1      	cmp	r9, r4
  4027ca:	d909      	bls.n	4027e0 <__udivmoddi4+0x98>
  4027cc:	19e4      	adds	r4, r4, r7
  4027ce:	f100 33ff 	add.w	r3, r0, #4294967295
  4027d2:	f080 810a 	bcs.w	4029ea <__udivmoddi4+0x2a2>
  4027d6:	45a1      	cmp	r9, r4
  4027d8:	f240 8107 	bls.w	4029ea <__udivmoddi4+0x2a2>
  4027dc:	3802      	subs	r0, #2
  4027de:	443c      	add	r4, r7
  4027e0:	eba4 0409 	sub.w	r4, r4, r9
  4027e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4027e8:	2100      	movs	r1, #0
  4027ea:	2e00      	cmp	r6, #0
  4027ec:	d061      	beq.n	4028b2 <__udivmoddi4+0x16a>
  4027ee:	fa24 f40e 	lsr.w	r4, r4, lr
  4027f2:	2300      	movs	r3, #0
  4027f4:	6034      	str	r4, [r6, #0]
  4027f6:	6073      	str	r3, [r6, #4]
  4027f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027fc:	428b      	cmp	r3, r1
  4027fe:	d907      	bls.n	402810 <__udivmoddi4+0xc8>
  402800:	2e00      	cmp	r6, #0
  402802:	d054      	beq.n	4028ae <__udivmoddi4+0x166>
  402804:	2100      	movs	r1, #0
  402806:	e886 0021 	stmia.w	r6, {r0, r5}
  40280a:	4608      	mov	r0, r1
  40280c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402810:	fab3 f183 	clz	r1, r3
  402814:	2900      	cmp	r1, #0
  402816:	f040 808e 	bne.w	402936 <__udivmoddi4+0x1ee>
  40281a:	42ab      	cmp	r3, r5
  40281c:	d302      	bcc.n	402824 <__udivmoddi4+0xdc>
  40281e:	4282      	cmp	r2, r0
  402820:	f200 80fa 	bhi.w	402a18 <__udivmoddi4+0x2d0>
  402824:	1a84      	subs	r4, r0, r2
  402826:	eb65 0503 	sbc.w	r5, r5, r3
  40282a:	2001      	movs	r0, #1
  40282c:	46ac      	mov	ip, r5
  40282e:	2e00      	cmp	r6, #0
  402830:	d03f      	beq.n	4028b2 <__udivmoddi4+0x16a>
  402832:	e886 1010 	stmia.w	r6, {r4, ip}
  402836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40283a:	b912      	cbnz	r2, 402842 <__udivmoddi4+0xfa>
  40283c:	2701      	movs	r7, #1
  40283e:	fbb7 f7f2 	udiv	r7, r7, r2
  402842:	fab7 fe87 	clz	lr, r7
  402846:	f1be 0f00 	cmp.w	lr, #0
  40284a:	d134      	bne.n	4028b6 <__udivmoddi4+0x16e>
  40284c:	1beb      	subs	r3, r5, r7
  40284e:	0c3a      	lsrs	r2, r7, #16
  402850:	fa1f fc87 	uxth.w	ip, r7
  402854:	2101      	movs	r1, #1
  402856:	fbb3 f8f2 	udiv	r8, r3, r2
  40285a:	0c25      	lsrs	r5, r4, #16
  40285c:	fb02 3318 	mls	r3, r2, r8, r3
  402860:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402864:	fb0c f308 	mul.w	r3, ip, r8
  402868:	42ab      	cmp	r3, r5
  40286a:	d907      	bls.n	40287c <__udivmoddi4+0x134>
  40286c:	19ed      	adds	r5, r5, r7
  40286e:	f108 30ff 	add.w	r0, r8, #4294967295
  402872:	d202      	bcs.n	40287a <__udivmoddi4+0x132>
  402874:	42ab      	cmp	r3, r5
  402876:	f200 80d1 	bhi.w	402a1c <__udivmoddi4+0x2d4>
  40287a:	4680      	mov	r8, r0
  40287c:	1aed      	subs	r5, r5, r3
  40287e:	b2a3      	uxth	r3, r4
  402880:	fbb5 f0f2 	udiv	r0, r5, r2
  402884:	fb02 5510 	mls	r5, r2, r0, r5
  402888:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40288c:	fb0c fc00 	mul.w	ip, ip, r0
  402890:	45a4      	cmp	ip, r4
  402892:	d907      	bls.n	4028a4 <__udivmoddi4+0x15c>
  402894:	19e4      	adds	r4, r4, r7
  402896:	f100 33ff 	add.w	r3, r0, #4294967295
  40289a:	d202      	bcs.n	4028a2 <__udivmoddi4+0x15a>
  40289c:	45a4      	cmp	ip, r4
  40289e:	f200 80b8 	bhi.w	402a12 <__udivmoddi4+0x2ca>
  4028a2:	4618      	mov	r0, r3
  4028a4:	eba4 040c 	sub.w	r4, r4, ip
  4028a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4028ac:	e79d      	b.n	4027ea <__udivmoddi4+0xa2>
  4028ae:	4631      	mov	r1, r6
  4028b0:	4630      	mov	r0, r6
  4028b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028b6:	f1ce 0420 	rsb	r4, lr, #32
  4028ba:	fa05 f30e 	lsl.w	r3, r5, lr
  4028be:	fa07 f70e 	lsl.w	r7, r7, lr
  4028c2:	fa20 f804 	lsr.w	r8, r0, r4
  4028c6:	0c3a      	lsrs	r2, r7, #16
  4028c8:	fa25 f404 	lsr.w	r4, r5, r4
  4028cc:	ea48 0803 	orr.w	r8, r8, r3
  4028d0:	fbb4 f1f2 	udiv	r1, r4, r2
  4028d4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4028d8:	fb02 4411 	mls	r4, r2, r1, r4
  4028dc:	fa1f fc87 	uxth.w	ip, r7
  4028e0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4028e4:	fb01 f30c 	mul.w	r3, r1, ip
  4028e8:	42ab      	cmp	r3, r5
  4028ea:	fa00 f40e 	lsl.w	r4, r0, lr
  4028ee:	d909      	bls.n	402904 <__udivmoddi4+0x1bc>
  4028f0:	19ed      	adds	r5, r5, r7
  4028f2:	f101 30ff 	add.w	r0, r1, #4294967295
  4028f6:	f080 808a 	bcs.w	402a0e <__udivmoddi4+0x2c6>
  4028fa:	42ab      	cmp	r3, r5
  4028fc:	f240 8087 	bls.w	402a0e <__udivmoddi4+0x2c6>
  402900:	3902      	subs	r1, #2
  402902:	443d      	add	r5, r7
  402904:	1aeb      	subs	r3, r5, r3
  402906:	fa1f f588 	uxth.w	r5, r8
  40290a:	fbb3 f0f2 	udiv	r0, r3, r2
  40290e:	fb02 3310 	mls	r3, r2, r0, r3
  402912:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402916:	fb00 f30c 	mul.w	r3, r0, ip
  40291a:	42ab      	cmp	r3, r5
  40291c:	d907      	bls.n	40292e <__udivmoddi4+0x1e6>
  40291e:	19ed      	adds	r5, r5, r7
  402920:	f100 38ff 	add.w	r8, r0, #4294967295
  402924:	d26f      	bcs.n	402a06 <__udivmoddi4+0x2be>
  402926:	42ab      	cmp	r3, r5
  402928:	d96d      	bls.n	402a06 <__udivmoddi4+0x2be>
  40292a:	3802      	subs	r0, #2
  40292c:	443d      	add	r5, r7
  40292e:	1aeb      	subs	r3, r5, r3
  402930:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402934:	e78f      	b.n	402856 <__udivmoddi4+0x10e>
  402936:	f1c1 0720 	rsb	r7, r1, #32
  40293a:	fa22 f807 	lsr.w	r8, r2, r7
  40293e:	408b      	lsls	r3, r1
  402940:	fa05 f401 	lsl.w	r4, r5, r1
  402944:	ea48 0303 	orr.w	r3, r8, r3
  402948:	fa20 fe07 	lsr.w	lr, r0, r7
  40294c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402950:	40fd      	lsrs	r5, r7
  402952:	ea4e 0e04 	orr.w	lr, lr, r4
  402956:	fbb5 f9fc 	udiv	r9, r5, ip
  40295a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40295e:	fb0c 5519 	mls	r5, ip, r9, r5
  402962:	fa1f f883 	uxth.w	r8, r3
  402966:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40296a:	fb09 f408 	mul.w	r4, r9, r8
  40296e:	42ac      	cmp	r4, r5
  402970:	fa02 f201 	lsl.w	r2, r2, r1
  402974:	fa00 fa01 	lsl.w	sl, r0, r1
  402978:	d908      	bls.n	40298c <__udivmoddi4+0x244>
  40297a:	18ed      	adds	r5, r5, r3
  40297c:	f109 30ff 	add.w	r0, r9, #4294967295
  402980:	d243      	bcs.n	402a0a <__udivmoddi4+0x2c2>
  402982:	42ac      	cmp	r4, r5
  402984:	d941      	bls.n	402a0a <__udivmoddi4+0x2c2>
  402986:	f1a9 0902 	sub.w	r9, r9, #2
  40298a:	441d      	add	r5, r3
  40298c:	1b2d      	subs	r5, r5, r4
  40298e:	fa1f fe8e 	uxth.w	lr, lr
  402992:	fbb5 f0fc 	udiv	r0, r5, ip
  402996:	fb0c 5510 	mls	r5, ip, r0, r5
  40299a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40299e:	fb00 f808 	mul.w	r8, r0, r8
  4029a2:	45a0      	cmp	r8, r4
  4029a4:	d907      	bls.n	4029b6 <__udivmoddi4+0x26e>
  4029a6:	18e4      	adds	r4, r4, r3
  4029a8:	f100 35ff 	add.w	r5, r0, #4294967295
  4029ac:	d229      	bcs.n	402a02 <__udivmoddi4+0x2ba>
  4029ae:	45a0      	cmp	r8, r4
  4029b0:	d927      	bls.n	402a02 <__udivmoddi4+0x2ba>
  4029b2:	3802      	subs	r0, #2
  4029b4:	441c      	add	r4, r3
  4029b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4029ba:	eba4 0408 	sub.w	r4, r4, r8
  4029be:	fba0 8902 	umull	r8, r9, r0, r2
  4029c2:	454c      	cmp	r4, r9
  4029c4:	46c6      	mov	lr, r8
  4029c6:	464d      	mov	r5, r9
  4029c8:	d315      	bcc.n	4029f6 <__udivmoddi4+0x2ae>
  4029ca:	d012      	beq.n	4029f2 <__udivmoddi4+0x2aa>
  4029cc:	b156      	cbz	r6, 4029e4 <__udivmoddi4+0x29c>
  4029ce:	ebba 030e 	subs.w	r3, sl, lr
  4029d2:	eb64 0405 	sbc.w	r4, r4, r5
  4029d6:	fa04 f707 	lsl.w	r7, r4, r7
  4029da:	40cb      	lsrs	r3, r1
  4029dc:	431f      	orrs	r7, r3
  4029de:	40cc      	lsrs	r4, r1
  4029e0:	6037      	str	r7, [r6, #0]
  4029e2:	6074      	str	r4, [r6, #4]
  4029e4:	2100      	movs	r1, #0
  4029e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4029ea:	4618      	mov	r0, r3
  4029ec:	e6f8      	b.n	4027e0 <__udivmoddi4+0x98>
  4029ee:	4690      	mov	r8, r2
  4029f0:	e6e0      	b.n	4027b4 <__udivmoddi4+0x6c>
  4029f2:	45c2      	cmp	sl, r8
  4029f4:	d2ea      	bcs.n	4029cc <__udivmoddi4+0x284>
  4029f6:	ebb8 0e02 	subs.w	lr, r8, r2
  4029fa:	eb69 0503 	sbc.w	r5, r9, r3
  4029fe:	3801      	subs	r0, #1
  402a00:	e7e4      	b.n	4029cc <__udivmoddi4+0x284>
  402a02:	4628      	mov	r0, r5
  402a04:	e7d7      	b.n	4029b6 <__udivmoddi4+0x26e>
  402a06:	4640      	mov	r0, r8
  402a08:	e791      	b.n	40292e <__udivmoddi4+0x1e6>
  402a0a:	4681      	mov	r9, r0
  402a0c:	e7be      	b.n	40298c <__udivmoddi4+0x244>
  402a0e:	4601      	mov	r1, r0
  402a10:	e778      	b.n	402904 <__udivmoddi4+0x1bc>
  402a12:	3802      	subs	r0, #2
  402a14:	443c      	add	r4, r7
  402a16:	e745      	b.n	4028a4 <__udivmoddi4+0x15c>
  402a18:	4608      	mov	r0, r1
  402a1a:	e708      	b.n	40282e <__udivmoddi4+0xe6>
  402a1c:	f1a8 0802 	sub.w	r8, r8, #2
  402a20:	443d      	add	r5, r7
  402a22:	e72b      	b.n	40287c <__udivmoddi4+0x134>

00402a24 <__aeabi_idiv0>:
  402a24:	4770      	bx	lr
  402a26:	bf00      	nop

00402a28 <__libc_init_array>:
  402a28:	b570      	push	{r4, r5, r6, lr}
  402a2a:	4e0f      	ldr	r6, [pc, #60]	; (402a68 <__libc_init_array+0x40>)
  402a2c:	4d0f      	ldr	r5, [pc, #60]	; (402a6c <__libc_init_array+0x44>)
  402a2e:	1b76      	subs	r6, r6, r5
  402a30:	10b6      	asrs	r6, r6, #2
  402a32:	bf18      	it	ne
  402a34:	2400      	movne	r4, #0
  402a36:	d005      	beq.n	402a44 <__libc_init_array+0x1c>
  402a38:	3401      	adds	r4, #1
  402a3a:	f855 3b04 	ldr.w	r3, [r5], #4
  402a3e:	4798      	blx	r3
  402a40:	42a6      	cmp	r6, r4
  402a42:	d1f9      	bne.n	402a38 <__libc_init_array+0x10>
  402a44:	4e0a      	ldr	r6, [pc, #40]	; (402a70 <__libc_init_array+0x48>)
  402a46:	4d0b      	ldr	r5, [pc, #44]	; (402a74 <__libc_init_array+0x4c>)
  402a48:	1b76      	subs	r6, r6, r5
  402a4a:	f001 fa13 	bl	403e74 <_init>
  402a4e:	10b6      	asrs	r6, r6, #2
  402a50:	bf18      	it	ne
  402a52:	2400      	movne	r4, #0
  402a54:	d006      	beq.n	402a64 <__libc_init_array+0x3c>
  402a56:	3401      	adds	r4, #1
  402a58:	f855 3b04 	ldr.w	r3, [r5], #4
  402a5c:	4798      	blx	r3
  402a5e:	42a6      	cmp	r6, r4
  402a60:	d1f9      	bne.n	402a56 <__libc_init_array+0x2e>
  402a62:	bd70      	pop	{r4, r5, r6, pc}
  402a64:	bd70      	pop	{r4, r5, r6, pc}
  402a66:	bf00      	nop
  402a68:	00403e80 	.word	0x00403e80
  402a6c:	00403e80 	.word	0x00403e80
  402a70:	00403e88 	.word	0x00403e88
  402a74:	00403e80 	.word	0x00403e80

00402a78 <malloc>:
  402a78:	4b02      	ldr	r3, [pc, #8]	; (402a84 <malloc+0xc>)
  402a7a:	4601      	mov	r1, r0
  402a7c:	6818      	ldr	r0, [r3, #0]
  402a7e:	f000 b803 	b.w	402a88 <_malloc_r>
  402a82:	bf00      	nop
  402a84:	20000010 	.word	0x20000010

00402a88 <_malloc_r>:
  402a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a8c:	f101 060b 	add.w	r6, r1, #11
  402a90:	2e16      	cmp	r6, #22
  402a92:	b083      	sub	sp, #12
  402a94:	4605      	mov	r5, r0
  402a96:	f240 809e 	bls.w	402bd6 <_malloc_r+0x14e>
  402a9a:	f036 0607 	bics.w	r6, r6, #7
  402a9e:	f100 80bd 	bmi.w	402c1c <_malloc_r+0x194>
  402aa2:	42b1      	cmp	r1, r6
  402aa4:	f200 80ba 	bhi.w	402c1c <_malloc_r+0x194>
  402aa8:	f000 fb86 	bl	4031b8 <__malloc_lock>
  402aac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402ab0:	f0c0 8293 	bcc.w	402fda <_malloc_r+0x552>
  402ab4:	0a73      	lsrs	r3, r6, #9
  402ab6:	f000 80b8 	beq.w	402c2a <_malloc_r+0x1a2>
  402aba:	2b04      	cmp	r3, #4
  402abc:	f200 8179 	bhi.w	402db2 <_malloc_r+0x32a>
  402ac0:	09b3      	lsrs	r3, r6, #6
  402ac2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402ac6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402aca:	00c3      	lsls	r3, r0, #3
  402acc:	4fbf      	ldr	r7, [pc, #764]	; (402dcc <_malloc_r+0x344>)
  402ace:	443b      	add	r3, r7
  402ad0:	f1a3 0108 	sub.w	r1, r3, #8
  402ad4:	685c      	ldr	r4, [r3, #4]
  402ad6:	42a1      	cmp	r1, r4
  402ad8:	d106      	bne.n	402ae8 <_malloc_r+0x60>
  402ada:	e00c      	b.n	402af6 <_malloc_r+0x6e>
  402adc:	2a00      	cmp	r2, #0
  402ade:	f280 80aa 	bge.w	402c36 <_malloc_r+0x1ae>
  402ae2:	68e4      	ldr	r4, [r4, #12]
  402ae4:	42a1      	cmp	r1, r4
  402ae6:	d006      	beq.n	402af6 <_malloc_r+0x6e>
  402ae8:	6863      	ldr	r3, [r4, #4]
  402aea:	f023 0303 	bic.w	r3, r3, #3
  402aee:	1b9a      	subs	r2, r3, r6
  402af0:	2a0f      	cmp	r2, #15
  402af2:	ddf3      	ble.n	402adc <_malloc_r+0x54>
  402af4:	4670      	mov	r0, lr
  402af6:	693c      	ldr	r4, [r7, #16]
  402af8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402de0 <_malloc_r+0x358>
  402afc:	4574      	cmp	r4, lr
  402afe:	f000 81ab 	beq.w	402e58 <_malloc_r+0x3d0>
  402b02:	6863      	ldr	r3, [r4, #4]
  402b04:	f023 0303 	bic.w	r3, r3, #3
  402b08:	1b9a      	subs	r2, r3, r6
  402b0a:	2a0f      	cmp	r2, #15
  402b0c:	f300 8190 	bgt.w	402e30 <_malloc_r+0x3a8>
  402b10:	2a00      	cmp	r2, #0
  402b12:	f8c7 e014 	str.w	lr, [r7, #20]
  402b16:	f8c7 e010 	str.w	lr, [r7, #16]
  402b1a:	f280 809d 	bge.w	402c58 <_malloc_r+0x1d0>
  402b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402b22:	f080 8161 	bcs.w	402de8 <_malloc_r+0x360>
  402b26:	08db      	lsrs	r3, r3, #3
  402b28:	f103 0c01 	add.w	ip, r3, #1
  402b2c:	1099      	asrs	r1, r3, #2
  402b2e:	687a      	ldr	r2, [r7, #4]
  402b30:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402b34:	f8c4 8008 	str.w	r8, [r4, #8]
  402b38:	2301      	movs	r3, #1
  402b3a:	408b      	lsls	r3, r1
  402b3c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402b40:	4313      	orrs	r3, r2
  402b42:	3908      	subs	r1, #8
  402b44:	60e1      	str	r1, [r4, #12]
  402b46:	607b      	str	r3, [r7, #4]
  402b48:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402b4c:	f8c8 400c 	str.w	r4, [r8, #12]
  402b50:	1082      	asrs	r2, r0, #2
  402b52:	2401      	movs	r4, #1
  402b54:	4094      	lsls	r4, r2
  402b56:	429c      	cmp	r4, r3
  402b58:	f200 808b 	bhi.w	402c72 <_malloc_r+0x1ea>
  402b5c:	421c      	tst	r4, r3
  402b5e:	d106      	bne.n	402b6e <_malloc_r+0xe6>
  402b60:	f020 0003 	bic.w	r0, r0, #3
  402b64:	0064      	lsls	r4, r4, #1
  402b66:	421c      	tst	r4, r3
  402b68:	f100 0004 	add.w	r0, r0, #4
  402b6c:	d0fa      	beq.n	402b64 <_malloc_r+0xdc>
  402b6e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402b72:	46cc      	mov	ip, r9
  402b74:	4680      	mov	r8, r0
  402b76:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402b7a:	459c      	cmp	ip, r3
  402b7c:	d107      	bne.n	402b8e <_malloc_r+0x106>
  402b7e:	e16d      	b.n	402e5c <_malloc_r+0x3d4>
  402b80:	2a00      	cmp	r2, #0
  402b82:	f280 817b 	bge.w	402e7c <_malloc_r+0x3f4>
  402b86:	68db      	ldr	r3, [r3, #12]
  402b88:	459c      	cmp	ip, r3
  402b8a:	f000 8167 	beq.w	402e5c <_malloc_r+0x3d4>
  402b8e:	6859      	ldr	r1, [r3, #4]
  402b90:	f021 0103 	bic.w	r1, r1, #3
  402b94:	1b8a      	subs	r2, r1, r6
  402b96:	2a0f      	cmp	r2, #15
  402b98:	ddf2      	ble.n	402b80 <_malloc_r+0xf8>
  402b9a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402b9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402ba2:	9300      	str	r3, [sp, #0]
  402ba4:	199c      	adds	r4, r3, r6
  402ba6:	4628      	mov	r0, r5
  402ba8:	f046 0601 	orr.w	r6, r6, #1
  402bac:	f042 0501 	orr.w	r5, r2, #1
  402bb0:	605e      	str	r6, [r3, #4]
  402bb2:	f8c8 c00c 	str.w	ip, [r8, #12]
  402bb6:	f8cc 8008 	str.w	r8, [ip, #8]
  402bba:	617c      	str	r4, [r7, #20]
  402bbc:	613c      	str	r4, [r7, #16]
  402bbe:	f8c4 e00c 	str.w	lr, [r4, #12]
  402bc2:	f8c4 e008 	str.w	lr, [r4, #8]
  402bc6:	6065      	str	r5, [r4, #4]
  402bc8:	505a      	str	r2, [r3, r1]
  402bca:	f000 fafb 	bl	4031c4 <__malloc_unlock>
  402bce:	9b00      	ldr	r3, [sp, #0]
  402bd0:	f103 0408 	add.w	r4, r3, #8
  402bd4:	e01e      	b.n	402c14 <_malloc_r+0x18c>
  402bd6:	2910      	cmp	r1, #16
  402bd8:	d820      	bhi.n	402c1c <_malloc_r+0x194>
  402bda:	f000 faed 	bl	4031b8 <__malloc_lock>
  402bde:	2610      	movs	r6, #16
  402be0:	2318      	movs	r3, #24
  402be2:	2002      	movs	r0, #2
  402be4:	4f79      	ldr	r7, [pc, #484]	; (402dcc <_malloc_r+0x344>)
  402be6:	443b      	add	r3, r7
  402be8:	f1a3 0208 	sub.w	r2, r3, #8
  402bec:	685c      	ldr	r4, [r3, #4]
  402bee:	4294      	cmp	r4, r2
  402bf0:	f000 813d 	beq.w	402e6e <_malloc_r+0x3e6>
  402bf4:	6863      	ldr	r3, [r4, #4]
  402bf6:	68e1      	ldr	r1, [r4, #12]
  402bf8:	68a6      	ldr	r6, [r4, #8]
  402bfa:	f023 0303 	bic.w	r3, r3, #3
  402bfe:	4423      	add	r3, r4
  402c00:	4628      	mov	r0, r5
  402c02:	685a      	ldr	r2, [r3, #4]
  402c04:	60f1      	str	r1, [r6, #12]
  402c06:	f042 0201 	orr.w	r2, r2, #1
  402c0a:	608e      	str	r6, [r1, #8]
  402c0c:	605a      	str	r2, [r3, #4]
  402c0e:	f000 fad9 	bl	4031c4 <__malloc_unlock>
  402c12:	3408      	adds	r4, #8
  402c14:	4620      	mov	r0, r4
  402c16:	b003      	add	sp, #12
  402c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c1c:	2400      	movs	r4, #0
  402c1e:	230c      	movs	r3, #12
  402c20:	4620      	mov	r0, r4
  402c22:	602b      	str	r3, [r5, #0]
  402c24:	b003      	add	sp, #12
  402c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c2a:	2040      	movs	r0, #64	; 0x40
  402c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
  402c30:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402c34:	e74a      	b.n	402acc <_malloc_r+0x44>
  402c36:	4423      	add	r3, r4
  402c38:	68e1      	ldr	r1, [r4, #12]
  402c3a:	685a      	ldr	r2, [r3, #4]
  402c3c:	68a6      	ldr	r6, [r4, #8]
  402c3e:	f042 0201 	orr.w	r2, r2, #1
  402c42:	60f1      	str	r1, [r6, #12]
  402c44:	4628      	mov	r0, r5
  402c46:	608e      	str	r6, [r1, #8]
  402c48:	605a      	str	r2, [r3, #4]
  402c4a:	f000 fabb 	bl	4031c4 <__malloc_unlock>
  402c4e:	3408      	adds	r4, #8
  402c50:	4620      	mov	r0, r4
  402c52:	b003      	add	sp, #12
  402c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c58:	4423      	add	r3, r4
  402c5a:	4628      	mov	r0, r5
  402c5c:	685a      	ldr	r2, [r3, #4]
  402c5e:	f042 0201 	orr.w	r2, r2, #1
  402c62:	605a      	str	r2, [r3, #4]
  402c64:	f000 faae 	bl	4031c4 <__malloc_unlock>
  402c68:	3408      	adds	r4, #8
  402c6a:	4620      	mov	r0, r4
  402c6c:	b003      	add	sp, #12
  402c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c72:	68bc      	ldr	r4, [r7, #8]
  402c74:	6863      	ldr	r3, [r4, #4]
  402c76:	f023 0803 	bic.w	r8, r3, #3
  402c7a:	45b0      	cmp	r8, r6
  402c7c:	d304      	bcc.n	402c88 <_malloc_r+0x200>
  402c7e:	eba8 0306 	sub.w	r3, r8, r6
  402c82:	2b0f      	cmp	r3, #15
  402c84:	f300 8085 	bgt.w	402d92 <_malloc_r+0x30a>
  402c88:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402de4 <_malloc_r+0x35c>
  402c8c:	4b50      	ldr	r3, [pc, #320]	; (402dd0 <_malloc_r+0x348>)
  402c8e:	f8d9 2000 	ldr.w	r2, [r9]
  402c92:	681b      	ldr	r3, [r3, #0]
  402c94:	3201      	adds	r2, #1
  402c96:	4433      	add	r3, r6
  402c98:	eb04 0a08 	add.w	sl, r4, r8
  402c9c:	f000 8155 	beq.w	402f4a <_malloc_r+0x4c2>
  402ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402ca4:	330f      	adds	r3, #15
  402ca6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402caa:	f02b 0b0f 	bic.w	fp, fp, #15
  402cae:	4659      	mov	r1, fp
  402cb0:	4628      	mov	r0, r5
  402cb2:	f000 fa8d 	bl	4031d0 <_sbrk_r>
  402cb6:	1c41      	adds	r1, r0, #1
  402cb8:	4602      	mov	r2, r0
  402cba:	f000 80fc 	beq.w	402eb6 <_malloc_r+0x42e>
  402cbe:	4582      	cmp	sl, r0
  402cc0:	f200 80f7 	bhi.w	402eb2 <_malloc_r+0x42a>
  402cc4:	4b43      	ldr	r3, [pc, #268]	; (402dd4 <_malloc_r+0x34c>)
  402cc6:	6819      	ldr	r1, [r3, #0]
  402cc8:	4459      	add	r1, fp
  402cca:	6019      	str	r1, [r3, #0]
  402ccc:	f000 814d 	beq.w	402f6a <_malloc_r+0x4e2>
  402cd0:	f8d9 0000 	ldr.w	r0, [r9]
  402cd4:	3001      	adds	r0, #1
  402cd6:	bf1b      	ittet	ne
  402cd8:	eba2 0a0a 	subne.w	sl, r2, sl
  402cdc:	4451      	addne	r1, sl
  402cde:	f8c9 2000 	streq.w	r2, [r9]
  402ce2:	6019      	strne	r1, [r3, #0]
  402ce4:	f012 0107 	ands.w	r1, r2, #7
  402ce8:	f000 8115 	beq.w	402f16 <_malloc_r+0x48e>
  402cec:	f1c1 0008 	rsb	r0, r1, #8
  402cf0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402cf4:	4402      	add	r2, r0
  402cf6:	3108      	adds	r1, #8
  402cf8:	eb02 090b 	add.w	r9, r2, fp
  402cfc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402d00:	eba1 0909 	sub.w	r9, r1, r9
  402d04:	4649      	mov	r1, r9
  402d06:	4628      	mov	r0, r5
  402d08:	9301      	str	r3, [sp, #4]
  402d0a:	9200      	str	r2, [sp, #0]
  402d0c:	f000 fa60 	bl	4031d0 <_sbrk_r>
  402d10:	1c43      	adds	r3, r0, #1
  402d12:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402d16:	f000 8143 	beq.w	402fa0 <_malloc_r+0x518>
  402d1a:	1a80      	subs	r0, r0, r2
  402d1c:	4448      	add	r0, r9
  402d1e:	f040 0001 	orr.w	r0, r0, #1
  402d22:	6819      	ldr	r1, [r3, #0]
  402d24:	60ba      	str	r2, [r7, #8]
  402d26:	4449      	add	r1, r9
  402d28:	42bc      	cmp	r4, r7
  402d2a:	6050      	str	r0, [r2, #4]
  402d2c:	6019      	str	r1, [r3, #0]
  402d2e:	d017      	beq.n	402d60 <_malloc_r+0x2d8>
  402d30:	f1b8 0f0f 	cmp.w	r8, #15
  402d34:	f240 80fb 	bls.w	402f2e <_malloc_r+0x4a6>
  402d38:	6860      	ldr	r0, [r4, #4]
  402d3a:	f1a8 020c 	sub.w	r2, r8, #12
  402d3e:	f022 0207 	bic.w	r2, r2, #7
  402d42:	eb04 0e02 	add.w	lr, r4, r2
  402d46:	f000 0001 	and.w	r0, r0, #1
  402d4a:	f04f 0c05 	mov.w	ip, #5
  402d4e:	4310      	orrs	r0, r2
  402d50:	2a0f      	cmp	r2, #15
  402d52:	6060      	str	r0, [r4, #4]
  402d54:	f8ce c004 	str.w	ip, [lr, #4]
  402d58:	f8ce c008 	str.w	ip, [lr, #8]
  402d5c:	f200 8117 	bhi.w	402f8e <_malloc_r+0x506>
  402d60:	4b1d      	ldr	r3, [pc, #116]	; (402dd8 <_malloc_r+0x350>)
  402d62:	68bc      	ldr	r4, [r7, #8]
  402d64:	681a      	ldr	r2, [r3, #0]
  402d66:	4291      	cmp	r1, r2
  402d68:	bf88      	it	hi
  402d6a:	6019      	strhi	r1, [r3, #0]
  402d6c:	4b1b      	ldr	r3, [pc, #108]	; (402ddc <_malloc_r+0x354>)
  402d6e:	681a      	ldr	r2, [r3, #0]
  402d70:	4291      	cmp	r1, r2
  402d72:	6862      	ldr	r2, [r4, #4]
  402d74:	bf88      	it	hi
  402d76:	6019      	strhi	r1, [r3, #0]
  402d78:	f022 0203 	bic.w	r2, r2, #3
  402d7c:	4296      	cmp	r6, r2
  402d7e:	eba2 0306 	sub.w	r3, r2, r6
  402d82:	d801      	bhi.n	402d88 <_malloc_r+0x300>
  402d84:	2b0f      	cmp	r3, #15
  402d86:	dc04      	bgt.n	402d92 <_malloc_r+0x30a>
  402d88:	4628      	mov	r0, r5
  402d8a:	f000 fa1b 	bl	4031c4 <__malloc_unlock>
  402d8e:	2400      	movs	r4, #0
  402d90:	e740      	b.n	402c14 <_malloc_r+0x18c>
  402d92:	19a2      	adds	r2, r4, r6
  402d94:	f043 0301 	orr.w	r3, r3, #1
  402d98:	f046 0601 	orr.w	r6, r6, #1
  402d9c:	6066      	str	r6, [r4, #4]
  402d9e:	4628      	mov	r0, r5
  402da0:	60ba      	str	r2, [r7, #8]
  402da2:	6053      	str	r3, [r2, #4]
  402da4:	f000 fa0e 	bl	4031c4 <__malloc_unlock>
  402da8:	3408      	adds	r4, #8
  402daa:	4620      	mov	r0, r4
  402dac:	b003      	add	sp, #12
  402dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402db2:	2b14      	cmp	r3, #20
  402db4:	d971      	bls.n	402e9a <_malloc_r+0x412>
  402db6:	2b54      	cmp	r3, #84	; 0x54
  402db8:	f200 80a3 	bhi.w	402f02 <_malloc_r+0x47a>
  402dbc:	0b33      	lsrs	r3, r6, #12
  402dbe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402dc2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402dc6:	00c3      	lsls	r3, r0, #3
  402dc8:	e680      	b.n	402acc <_malloc_r+0x44>
  402dca:	bf00      	nop
  402dcc:	20000440 	.word	0x20000440
  402dd0:	20000924 	.word	0x20000924
  402dd4:	200008f4 	.word	0x200008f4
  402dd8:	2000091c 	.word	0x2000091c
  402ddc:	20000920 	.word	0x20000920
  402de0:	20000448 	.word	0x20000448
  402de4:	20000848 	.word	0x20000848
  402de8:	0a5a      	lsrs	r2, r3, #9
  402dea:	2a04      	cmp	r2, #4
  402dec:	d95b      	bls.n	402ea6 <_malloc_r+0x41e>
  402dee:	2a14      	cmp	r2, #20
  402df0:	f200 80ae 	bhi.w	402f50 <_malloc_r+0x4c8>
  402df4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402df8:	00c9      	lsls	r1, r1, #3
  402dfa:	325b      	adds	r2, #91	; 0x5b
  402dfc:	eb07 0c01 	add.w	ip, r7, r1
  402e00:	5879      	ldr	r1, [r7, r1]
  402e02:	f1ac 0c08 	sub.w	ip, ip, #8
  402e06:	458c      	cmp	ip, r1
  402e08:	f000 8088 	beq.w	402f1c <_malloc_r+0x494>
  402e0c:	684a      	ldr	r2, [r1, #4]
  402e0e:	f022 0203 	bic.w	r2, r2, #3
  402e12:	4293      	cmp	r3, r2
  402e14:	d273      	bcs.n	402efe <_malloc_r+0x476>
  402e16:	6889      	ldr	r1, [r1, #8]
  402e18:	458c      	cmp	ip, r1
  402e1a:	d1f7      	bne.n	402e0c <_malloc_r+0x384>
  402e1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402e20:	687b      	ldr	r3, [r7, #4]
  402e22:	60e2      	str	r2, [r4, #12]
  402e24:	f8c4 c008 	str.w	ip, [r4, #8]
  402e28:	6094      	str	r4, [r2, #8]
  402e2a:	f8cc 400c 	str.w	r4, [ip, #12]
  402e2e:	e68f      	b.n	402b50 <_malloc_r+0xc8>
  402e30:	19a1      	adds	r1, r4, r6
  402e32:	f046 0c01 	orr.w	ip, r6, #1
  402e36:	f042 0601 	orr.w	r6, r2, #1
  402e3a:	f8c4 c004 	str.w	ip, [r4, #4]
  402e3e:	4628      	mov	r0, r5
  402e40:	6179      	str	r1, [r7, #20]
  402e42:	6139      	str	r1, [r7, #16]
  402e44:	f8c1 e00c 	str.w	lr, [r1, #12]
  402e48:	f8c1 e008 	str.w	lr, [r1, #8]
  402e4c:	604e      	str	r6, [r1, #4]
  402e4e:	50e2      	str	r2, [r4, r3]
  402e50:	f000 f9b8 	bl	4031c4 <__malloc_unlock>
  402e54:	3408      	adds	r4, #8
  402e56:	e6dd      	b.n	402c14 <_malloc_r+0x18c>
  402e58:	687b      	ldr	r3, [r7, #4]
  402e5a:	e679      	b.n	402b50 <_malloc_r+0xc8>
  402e5c:	f108 0801 	add.w	r8, r8, #1
  402e60:	f018 0f03 	tst.w	r8, #3
  402e64:	f10c 0c08 	add.w	ip, ip, #8
  402e68:	f47f ae85 	bne.w	402b76 <_malloc_r+0xee>
  402e6c:	e02d      	b.n	402eca <_malloc_r+0x442>
  402e6e:	68dc      	ldr	r4, [r3, #12]
  402e70:	42a3      	cmp	r3, r4
  402e72:	bf08      	it	eq
  402e74:	3002      	addeq	r0, #2
  402e76:	f43f ae3e 	beq.w	402af6 <_malloc_r+0x6e>
  402e7a:	e6bb      	b.n	402bf4 <_malloc_r+0x16c>
  402e7c:	4419      	add	r1, r3
  402e7e:	461c      	mov	r4, r3
  402e80:	684a      	ldr	r2, [r1, #4]
  402e82:	68db      	ldr	r3, [r3, #12]
  402e84:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402e88:	f042 0201 	orr.w	r2, r2, #1
  402e8c:	604a      	str	r2, [r1, #4]
  402e8e:	4628      	mov	r0, r5
  402e90:	60f3      	str	r3, [r6, #12]
  402e92:	609e      	str	r6, [r3, #8]
  402e94:	f000 f996 	bl	4031c4 <__malloc_unlock>
  402e98:	e6bc      	b.n	402c14 <_malloc_r+0x18c>
  402e9a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402e9e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402ea2:	00c3      	lsls	r3, r0, #3
  402ea4:	e612      	b.n	402acc <_malloc_r+0x44>
  402ea6:	099a      	lsrs	r2, r3, #6
  402ea8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402eac:	00c9      	lsls	r1, r1, #3
  402eae:	3238      	adds	r2, #56	; 0x38
  402eb0:	e7a4      	b.n	402dfc <_malloc_r+0x374>
  402eb2:	42bc      	cmp	r4, r7
  402eb4:	d054      	beq.n	402f60 <_malloc_r+0x4d8>
  402eb6:	68bc      	ldr	r4, [r7, #8]
  402eb8:	6862      	ldr	r2, [r4, #4]
  402eba:	f022 0203 	bic.w	r2, r2, #3
  402ebe:	e75d      	b.n	402d7c <_malloc_r+0x2f4>
  402ec0:	f859 3908 	ldr.w	r3, [r9], #-8
  402ec4:	4599      	cmp	r9, r3
  402ec6:	f040 8086 	bne.w	402fd6 <_malloc_r+0x54e>
  402eca:	f010 0f03 	tst.w	r0, #3
  402ece:	f100 30ff 	add.w	r0, r0, #4294967295
  402ed2:	d1f5      	bne.n	402ec0 <_malloc_r+0x438>
  402ed4:	687b      	ldr	r3, [r7, #4]
  402ed6:	ea23 0304 	bic.w	r3, r3, r4
  402eda:	607b      	str	r3, [r7, #4]
  402edc:	0064      	lsls	r4, r4, #1
  402ede:	429c      	cmp	r4, r3
  402ee0:	f63f aec7 	bhi.w	402c72 <_malloc_r+0x1ea>
  402ee4:	2c00      	cmp	r4, #0
  402ee6:	f43f aec4 	beq.w	402c72 <_malloc_r+0x1ea>
  402eea:	421c      	tst	r4, r3
  402eec:	4640      	mov	r0, r8
  402eee:	f47f ae3e 	bne.w	402b6e <_malloc_r+0xe6>
  402ef2:	0064      	lsls	r4, r4, #1
  402ef4:	421c      	tst	r4, r3
  402ef6:	f100 0004 	add.w	r0, r0, #4
  402efa:	d0fa      	beq.n	402ef2 <_malloc_r+0x46a>
  402efc:	e637      	b.n	402b6e <_malloc_r+0xe6>
  402efe:	468c      	mov	ip, r1
  402f00:	e78c      	b.n	402e1c <_malloc_r+0x394>
  402f02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402f06:	d815      	bhi.n	402f34 <_malloc_r+0x4ac>
  402f08:	0bf3      	lsrs	r3, r6, #15
  402f0a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402f0e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402f12:	00c3      	lsls	r3, r0, #3
  402f14:	e5da      	b.n	402acc <_malloc_r+0x44>
  402f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402f1a:	e6ed      	b.n	402cf8 <_malloc_r+0x270>
  402f1c:	687b      	ldr	r3, [r7, #4]
  402f1e:	1092      	asrs	r2, r2, #2
  402f20:	2101      	movs	r1, #1
  402f22:	fa01 f202 	lsl.w	r2, r1, r2
  402f26:	4313      	orrs	r3, r2
  402f28:	607b      	str	r3, [r7, #4]
  402f2a:	4662      	mov	r2, ip
  402f2c:	e779      	b.n	402e22 <_malloc_r+0x39a>
  402f2e:	2301      	movs	r3, #1
  402f30:	6053      	str	r3, [r2, #4]
  402f32:	e729      	b.n	402d88 <_malloc_r+0x300>
  402f34:	f240 5254 	movw	r2, #1364	; 0x554
  402f38:	4293      	cmp	r3, r2
  402f3a:	d822      	bhi.n	402f82 <_malloc_r+0x4fa>
  402f3c:	0cb3      	lsrs	r3, r6, #18
  402f3e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402f42:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402f46:	00c3      	lsls	r3, r0, #3
  402f48:	e5c0      	b.n	402acc <_malloc_r+0x44>
  402f4a:	f103 0b10 	add.w	fp, r3, #16
  402f4e:	e6ae      	b.n	402cae <_malloc_r+0x226>
  402f50:	2a54      	cmp	r2, #84	; 0x54
  402f52:	d829      	bhi.n	402fa8 <_malloc_r+0x520>
  402f54:	0b1a      	lsrs	r2, r3, #12
  402f56:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402f5a:	00c9      	lsls	r1, r1, #3
  402f5c:	326e      	adds	r2, #110	; 0x6e
  402f5e:	e74d      	b.n	402dfc <_malloc_r+0x374>
  402f60:	4b20      	ldr	r3, [pc, #128]	; (402fe4 <_malloc_r+0x55c>)
  402f62:	6819      	ldr	r1, [r3, #0]
  402f64:	4459      	add	r1, fp
  402f66:	6019      	str	r1, [r3, #0]
  402f68:	e6b2      	b.n	402cd0 <_malloc_r+0x248>
  402f6a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402f6e:	2800      	cmp	r0, #0
  402f70:	f47f aeae 	bne.w	402cd0 <_malloc_r+0x248>
  402f74:	eb08 030b 	add.w	r3, r8, fp
  402f78:	68ba      	ldr	r2, [r7, #8]
  402f7a:	f043 0301 	orr.w	r3, r3, #1
  402f7e:	6053      	str	r3, [r2, #4]
  402f80:	e6ee      	b.n	402d60 <_malloc_r+0x2d8>
  402f82:	207f      	movs	r0, #127	; 0x7f
  402f84:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402f88:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402f8c:	e59e      	b.n	402acc <_malloc_r+0x44>
  402f8e:	f104 0108 	add.w	r1, r4, #8
  402f92:	4628      	mov	r0, r5
  402f94:	9300      	str	r3, [sp, #0]
  402f96:	f000 fc2b 	bl	4037f0 <_free_r>
  402f9a:	9b00      	ldr	r3, [sp, #0]
  402f9c:	6819      	ldr	r1, [r3, #0]
  402f9e:	e6df      	b.n	402d60 <_malloc_r+0x2d8>
  402fa0:	2001      	movs	r0, #1
  402fa2:	f04f 0900 	mov.w	r9, #0
  402fa6:	e6bc      	b.n	402d22 <_malloc_r+0x29a>
  402fa8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402fac:	d805      	bhi.n	402fba <_malloc_r+0x532>
  402fae:	0bda      	lsrs	r2, r3, #15
  402fb0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402fb4:	00c9      	lsls	r1, r1, #3
  402fb6:	3277      	adds	r2, #119	; 0x77
  402fb8:	e720      	b.n	402dfc <_malloc_r+0x374>
  402fba:	f240 5154 	movw	r1, #1364	; 0x554
  402fbe:	428a      	cmp	r2, r1
  402fc0:	d805      	bhi.n	402fce <_malloc_r+0x546>
  402fc2:	0c9a      	lsrs	r2, r3, #18
  402fc4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402fc8:	00c9      	lsls	r1, r1, #3
  402fca:	327c      	adds	r2, #124	; 0x7c
  402fcc:	e716      	b.n	402dfc <_malloc_r+0x374>
  402fce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402fd2:	227e      	movs	r2, #126	; 0x7e
  402fd4:	e712      	b.n	402dfc <_malloc_r+0x374>
  402fd6:	687b      	ldr	r3, [r7, #4]
  402fd8:	e780      	b.n	402edc <_malloc_r+0x454>
  402fda:	08f0      	lsrs	r0, r6, #3
  402fdc:	f106 0308 	add.w	r3, r6, #8
  402fe0:	e600      	b.n	402be4 <_malloc_r+0x15c>
  402fe2:	bf00      	nop
  402fe4:	200008f4 	.word	0x200008f4

00402fe8 <memcpy>:
  402fe8:	4684      	mov	ip, r0
  402fea:	ea41 0300 	orr.w	r3, r1, r0
  402fee:	f013 0303 	ands.w	r3, r3, #3
  402ff2:	d16d      	bne.n	4030d0 <memcpy+0xe8>
  402ff4:	3a40      	subs	r2, #64	; 0x40
  402ff6:	d341      	bcc.n	40307c <memcpy+0x94>
  402ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  402ffc:	f840 3b04 	str.w	r3, [r0], #4
  403000:	f851 3b04 	ldr.w	r3, [r1], #4
  403004:	f840 3b04 	str.w	r3, [r0], #4
  403008:	f851 3b04 	ldr.w	r3, [r1], #4
  40300c:	f840 3b04 	str.w	r3, [r0], #4
  403010:	f851 3b04 	ldr.w	r3, [r1], #4
  403014:	f840 3b04 	str.w	r3, [r0], #4
  403018:	f851 3b04 	ldr.w	r3, [r1], #4
  40301c:	f840 3b04 	str.w	r3, [r0], #4
  403020:	f851 3b04 	ldr.w	r3, [r1], #4
  403024:	f840 3b04 	str.w	r3, [r0], #4
  403028:	f851 3b04 	ldr.w	r3, [r1], #4
  40302c:	f840 3b04 	str.w	r3, [r0], #4
  403030:	f851 3b04 	ldr.w	r3, [r1], #4
  403034:	f840 3b04 	str.w	r3, [r0], #4
  403038:	f851 3b04 	ldr.w	r3, [r1], #4
  40303c:	f840 3b04 	str.w	r3, [r0], #4
  403040:	f851 3b04 	ldr.w	r3, [r1], #4
  403044:	f840 3b04 	str.w	r3, [r0], #4
  403048:	f851 3b04 	ldr.w	r3, [r1], #4
  40304c:	f840 3b04 	str.w	r3, [r0], #4
  403050:	f851 3b04 	ldr.w	r3, [r1], #4
  403054:	f840 3b04 	str.w	r3, [r0], #4
  403058:	f851 3b04 	ldr.w	r3, [r1], #4
  40305c:	f840 3b04 	str.w	r3, [r0], #4
  403060:	f851 3b04 	ldr.w	r3, [r1], #4
  403064:	f840 3b04 	str.w	r3, [r0], #4
  403068:	f851 3b04 	ldr.w	r3, [r1], #4
  40306c:	f840 3b04 	str.w	r3, [r0], #4
  403070:	f851 3b04 	ldr.w	r3, [r1], #4
  403074:	f840 3b04 	str.w	r3, [r0], #4
  403078:	3a40      	subs	r2, #64	; 0x40
  40307a:	d2bd      	bcs.n	402ff8 <memcpy+0x10>
  40307c:	3230      	adds	r2, #48	; 0x30
  40307e:	d311      	bcc.n	4030a4 <memcpy+0xbc>
  403080:	f851 3b04 	ldr.w	r3, [r1], #4
  403084:	f840 3b04 	str.w	r3, [r0], #4
  403088:	f851 3b04 	ldr.w	r3, [r1], #4
  40308c:	f840 3b04 	str.w	r3, [r0], #4
  403090:	f851 3b04 	ldr.w	r3, [r1], #4
  403094:	f840 3b04 	str.w	r3, [r0], #4
  403098:	f851 3b04 	ldr.w	r3, [r1], #4
  40309c:	f840 3b04 	str.w	r3, [r0], #4
  4030a0:	3a10      	subs	r2, #16
  4030a2:	d2ed      	bcs.n	403080 <memcpy+0x98>
  4030a4:	320c      	adds	r2, #12
  4030a6:	d305      	bcc.n	4030b4 <memcpy+0xcc>
  4030a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4030ac:	f840 3b04 	str.w	r3, [r0], #4
  4030b0:	3a04      	subs	r2, #4
  4030b2:	d2f9      	bcs.n	4030a8 <memcpy+0xc0>
  4030b4:	3204      	adds	r2, #4
  4030b6:	d008      	beq.n	4030ca <memcpy+0xe2>
  4030b8:	07d2      	lsls	r2, r2, #31
  4030ba:	bf1c      	itt	ne
  4030bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4030c0:	f800 3b01 	strbne.w	r3, [r0], #1
  4030c4:	d301      	bcc.n	4030ca <memcpy+0xe2>
  4030c6:	880b      	ldrh	r3, [r1, #0]
  4030c8:	8003      	strh	r3, [r0, #0]
  4030ca:	4660      	mov	r0, ip
  4030cc:	4770      	bx	lr
  4030ce:	bf00      	nop
  4030d0:	2a08      	cmp	r2, #8
  4030d2:	d313      	bcc.n	4030fc <memcpy+0x114>
  4030d4:	078b      	lsls	r3, r1, #30
  4030d6:	d08d      	beq.n	402ff4 <memcpy+0xc>
  4030d8:	f010 0303 	ands.w	r3, r0, #3
  4030dc:	d08a      	beq.n	402ff4 <memcpy+0xc>
  4030de:	f1c3 0304 	rsb	r3, r3, #4
  4030e2:	1ad2      	subs	r2, r2, r3
  4030e4:	07db      	lsls	r3, r3, #31
  4030e6:	bf1c      	itt	ne
  4030e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4030ec:	f800 3b01 	strbne.w	r3, [r0], #1
  4030f0:	d380      	bcc.n	402ff4 <memcpy+0xc>
  4030f2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4030f6:	f820 3b02 	strh.w	r3, [r0], #2
  4030fa:	e77b      	b.n	402ff4 <memcpy+0xc>
  4030fc:	3a04      	subs	r2, #4
  4030fe:	d3d9      	bcc.n	4030b4 <memcpy+0xcc>
  403100:	3a01      	subs	r2, #1
  403102:	f811 3b01 	ldrb.w	r3, [r1], #1
  403106:	f800 3b01 	strb.w	r3, [r0], #1
  40310a:	d2f9      	bcs.n	403100 <memcpy+0x118>
  40310c:	780b      	ldrb	r3, [r1, #0]
  40310e:	7003      	strb	r3, [r0, #0]
  403110:	784b      	ldrb	r3, [r1, #1]
  403112:	7043      	strb	r3, [r0, #1]
  403114:	788b      	ldrb	r3, [r1, #2]
  403116:	7083      	strb	r3, [r0, #2]
  403118:	4660      	mov	r0, ip
  40311a:	4770      	bx	lr

0040311c <memset>:
  40311c:	b470      	push	{r4, r5, r6}
  40311e:	0786      	lsls	r6, r0, #30
  403120:	d046      	beq.n	4031b0 <memset+0x94>
  403122:	1e54      	subs	r4, r2, #1
  403124:	2a00      	cmp	r2, #0
  403126:	d041      	beq.n	4031ac <memset+0x90>
  403128:	b2ca      	uxtb	r2, r1
  40312a:	4603      	mov	r3, r0
  40312c:	e002      	b.n	403134 <memset+0x18>
  40312e:	f114 34ff 	adds.w	r4, r4, #4294967295
  403132:	d33b      	bcc.n	4031ac <memset+0x90>
  403134:	f803 2b01 	strb.w	r2, [r3], #1
  403138:	079d      	lsls	r5, r3, #30
  40313a:	d1f8      	bne.n	40312e <memset+0x12>
  40313c:	2c03      	cmp	r4, #3
  40313e:	d92e      	bls.n	40319e <memset+0x82>
  403140:	b2cd      	uxtb	r5, r1
  403142:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403146:	2c0f      	cmp	r4, #15
  403148:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40314c:	d919      	bls.n	403182 <memset+0x66>
  40314e:	f103 0210 	add.w	r2, r3, #16
  403152:	4626      	mov	r6, r4
  403154:	3e10      	subs	r6, #16
  403156:	2e0f      	cmp	r6, #15
  403158:	f842 5c10 	str.w	r5, [r2, #-16]
  40315c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403160:	f842 5c08 	str.w	r5, [r2, #-8]
  403164:	f842 5c04 	str.w	r5, [r2, #-4]
  403168:	f102 0210 	add.w	r2, r2, #16
  40316c:	d8f2      	bhi.n	403154 <memset+0x38>
  40316e:	f1a4 0210 	sub.w	r2, r4, #16
  403172:	f022 020f 	bic.w	r2, r2, #15
  403176:	f004 040f 	and.w	r4, r4, #15
  40317a:	3210      	adds	r2, #16
  40317c:	2c03      	cmp	r4, #3
  40317e:	4413      	add	r3, r2
  403180:	d90d      	bls.n	40319e <memset+0x82>
  403182:	461e      	mov	r6, r3
  403184:	4622      	mov	r2, r4
  403186:	3a04      	subs	r2, #4
  403188:	2a03      	cmp	r2, #3
  40318a:	f846 5b04 	str.w	r5, [r6], #4
  40318e:	d8fa      	bhi.n	403186 <memset+0x6a>
  403190:	1f22      	subs	r2, r4, #4
  403192:	f022 0203 	bic.w	r2, r2, #3
  403196:	3204      	adds	r2, #4
  403198:	4413      	add	r3, r2
  40319a:	f004 0403 	and.w	r4, r4, #3
  40319e:	b12c      	cbz	r4, 4031ac <memset+0x90>
  4031a0:	b2c9      	uxtb	r1, r1
  4031a2:	441c      	add	r4, r3
  4031a4:	f803 1b01 	strb.w	r1, [r3], #1
  4031a8:	429c      	cmp	r4, r3
  4031aa:	d1fb      	bne.n	4031a4 <memset+0x88>
  4031ac:	bc70      	pop	{r4, r5, r6}
  4031ae:	4770      	bx	lr
  4031b0:	4614      	mov	r4, r2
  4031b2:	4603      	mov	r3, r0
  4031b4:	e7c2      	b.n	40313c <memset+0x20>
  4031b6:	bf00      	nop

004031b8 <__malloc_lock>:
  4031b8:	4801      	ldr	r0, [pc, #4]	; (4031c0 <__malloc_lock+0x8>)
  4031ba:	f000 bc2d 	b.w	403a18 <__retarget_lock_acquire_recursive>
  4031be:	bf00      	nop
  4031c0:	20002d54 	.word	0x20002d54

004031c4 <__malloc_unlock>:
  4031c4:	4801      	ldr	r0, [pc, #4]	; (4031cc <__malloc_unlock+0x8>)
  4031c6:	f000 bc29 	b.w	403a1c <__retarget_lock_release_recursive>
  4031ca:	bf00      	nop
  4031cc:	20002d54 	.word	0x20002d54

004031d0 <_sbrk_r>:
  4031d0:	b538      	push	{r3, r4, r5, lr}
  4031d2:	4c07      	ldr	r4, [pc, #28]	; (4031f0 <_sbrk_r+0x20>)
  4031d4:	2300      	movs	r3, #0
  4031d6:	4605      	mov	r5, r0
  4031d8:	4608      	mov	r0, r1
  4031da:	6023      	str	r3, [r4, #0]
  4031dc:	f7ff f94a 	bl	402474 <_sbrk>
  4031e0:	1c43      	adds	r3, r0, #1
  4031e2:	d000      	beq.n	4031e6 <_sbrk_r+0x16>
  4031e4:	bd38      	pop	{r3, r4, r5, pc}
  4031e6:	6823      	ldr	r3, [r4, #0]
  4031e8:	2b00      	cmp	r3, #0
  4031ea:	d0fb      	beq.n	4031e4 <_sbrk_r+0x14>
  4031ec:	602b      	str	r3, [r5, #0]
  4031ee:	bd38      	pop	{r3, r4, r5, pc}
  4031f0:	20002d68 	.word	0x20002d68

004031f4 <setbuf>:
  4031f4:	2900      	cmp	r1, #0
  4031f6:	bf0c      	ite	eq
  4031f8:	2202      	moveq	r2, #2
  4031fa:	2200      	movne	r2, #0
  4031fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403200:	f000 b800 	b.w	403204 <setvbuf>

00403204 <setvbuf>:
  403204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403208:	4c61      	ldr	r4, [pc, #388]	; (403390 <setvbuf+0x18c>)
  40320a:	6825      	ldr	r5, [r4, #0]
  40320c:	b083      	sub	sp, #12
  40320e:	4604      	mov	r4, r0
  403210:	460f      	mov	r7, r1
  403212:	4690      	mov	r8, r2
  403214:	461e      	mov	r6, r3
  403216:	b115      	cbz	r5, 40321e <setvbuf+0x1a>
  403218:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40321a:	2b00      	cmp	r3, #0
  40321c:	d064      	beq.n	4032e8 <setvbuf+0xe4>
  40321e:	f1b8 0f02 	cmp.w	r8, #2
  403222:	d006      	beq.n	403232 <setvbuf+0x2e>
  403224:	f1b8 0f01 	cmp.w	r8, #1
  403228:	f200 809f 	bhi.w	40336a <setvbuf+0x166>
  40322c:	2e00      	cmp	r6, #0
  40322e:	f2c0 809c 	blt.w	40336a <setvbuf+0x166>
  403232:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403234:	07d8      	lsls	r0, r3, #31
  403236:	d534      	bpl.n	4032a2 <setvbuf+0x9e>
  403238:	4621      	mov	r1, r4
  40323a:	4628      	mov	r0, r5
  40323c:	f000 f9de 	bl	4035fc <_fflush_r>
  403240:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403242:	b141      	cbz	r1, 403256 <setvbuf+0x52>
  403244:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403248:	4299      	cmp	r1, r3
  40324a:	d002      	beq.n	403252 <setvbuf+0x4e>
  40324c:	4628      	mov	r0, r5
  40324e:	f000 facf 	bl	4037f0 <_free_r>
  403252:	2300      	movs	r3, #0
  403254:	6323      	str	r3, [r4, #48]	; 0x30
  403256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40325a:	2200      	movs	r2, #0
  40325c:	61a2      	str	r2, [r4, #24]
  40325e:	6062      	str	r2, [r4, #4]
  403260:	061a      	lsls	r2, r3, #24
  403262:	d43a      	bmi.n	4032da <setvbuf+0xd6>
  403264:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403268:	f023 0303 	bic.w	r3, r3, #3
  40326c:	f1b8 0f02 	cmp.w	r8, #2
  403270:	81a3      	strh	r3, [r4, #12]
  403272:	d01d      	beq.n	4032b0 <setvbuf+0xac>
  403274:	ab01      	add	r3, sp, #4
  403276:	466a      	mov	r2, sp
  403278:	4621      	mov	r1, r4
  40327a:	4628      	mov	r0, r5
  40327c:	f000 fbd0 	bl	403a20 <__swhatbuf_r>
  403280:	89a3      	ldrh	r3, [r4, #12]
  403282:	4318      	orrs	r0, r3
  403284:	81a0      	strh	r0, [r4, #12]
  403286:	2e00      	cmp	r6, #0
  403288:	d132      	bne.n	4032f0 <setvbuf+0xec>
  40328a:	9e00      	ldr	r6, [sp, #0]
  40328c:	4630      	mov	r0, r6
  40328e:	f7ff fbf3 	bl	402a78 <malloc>
  403292:	4607      	mov	r7, r0
  403294:	2800      	cmp	r0, #0
  403296:	d06b      	beq.n	403370 <setvbuf+0x16c>
  403298:	89a3      	ldrh	r3, [r4, #12]
  40329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40329e:	81a3      	strh	r3, [r4, #12]
  4032a0:	e028      	b.n	4032f4 <setvbuf+0xf0>
  4032a2:	89a3      	ldrh	r3, [r4, #12]
  4032a4:	0599      	lsls	r1, r3, #22
  4032a6:	d4c7      	bmi.n	403238 <setvbuf+0x34>
  4032a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4032aa:	f000 fbb5 	bl	403a18 <__retarget_lock_acquire_recursive>
  4032ae:	e7c3      	b.n	403238 <setvbuf+0x34>
  4032b0:	2500      	movs	r5, #0
  4032b2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4032b4:	2600      	movs	r6, #0
  4032b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4032ba:	f043 0302 	orr.w	r3, r3, #2
  4032be:	2001      	movs	r0, #1
  4032c0:	60a6      	str	r6, [r4, #8]
  4032c2:	07ce      	lsls	r6, r1, #31
  4032c4:	81a3      	strh	r3, [r4, #12]
  4032c6:	6022      	str	r2, [r4, #0]
  4032c8:	6122      	str	r2, [r4, #16]
  4032ca:	6160      	str	r0, [r4, #20]
  4032cc:	d401      	bmi.n	4032d2 <setvbuf+0xce>
  4032ce:	0598      	lsls	r0, r3, #22
  4032d0:	d53e      	bpl.n	403350 <setvbuf+0x14c>
  4032d2:	4628      	mov	r0, r5
  4032d4:	b003      	add	sp, #12
  4032d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4032da:	6921      	ldr	r1, [r4, #16]
  4032dc:	4628      	mov	r0, r5
  4032de:	f000 fa87 	bl	4037f0 <_free_r>
  4032e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032e6:	e7bd      	b.n	403264 <setvbuf+0x60>
  4032e8:	4628      	mov	r0, r5
  4032ea:	f000 f9df 	bl	4036ac <__sinit>
  4032ee:	e796      	b.n	40321e <setvbuf+0x1a>
  4032f0:	2f00      	cmp	r7, #0
  4032f2:	d0cb      	beq.n	40328c <setvbuf+0x88>
  4032f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4032f6:	2b00      	cmp	r3, #0
  4032f8:	d033      	beq.n	403362 <setvbuf+0x15e>
  4032fa:	9b00      	ldr	r3, [sp, #0]
  4032fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403300:	6027      	str	r7, [r4, #0]
  403302:	429e      	cmp	r6, r3
  403304:	bf1c      	itt	ne
  403306:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40330a:	81a2      	strhne	r2, [r4, #12]
  40330c:	f1b8 0f01 	cmp.w	r8, #1
  403310:	bf04      	itt	eq
  403312:	f042 0201 	orreq.w	r2, r2, #1
  403316:	81a2      	strheq	r2, [r4, #12]
  403318:	b292      	uxth	r2, r2
  40331a:	f012 0308 	ands.w	r3, r2, #8
  40331e:	6127      	str	r7, [r4, #16]
  403320:	6166      	str	r6, [r4, #20]
  403322:	d00e      	beq.n	403342 <setvbuf+0x13e>
  403324:	07d1      	lsls	r1, r2, #31
  403326:	d51a      	bpl.n	40335e <setvbuf+0x15a>
  403328:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40332a:	4276      	negs	r6, r6
  40332c:	2300      	movs	r3, #0
  40332e:	f015 0501 	ands.w	r5, r5, #1
  403332:	61a6      	str	r6, [r4, #24]
  403334:	60a3      	str	r3, [r4, #8]
  403336:	d009      	beq.n	40334c <setvbuf+0x148>
  403338:	2500      	movs	r5, #0
  40333a:	4628      	mov	r0, r5
  40333c:	b003      	add	sp, #12
  40333e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403342:	60a3      	str	r3, [r4, #8]
  403344:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403346:	f015 0501 	ands.w	r5, r5, #1
  40334a:	d1f5      	bne.n	403338 <setvbuf+0x134>
  40334c:	0593      	lsls	r3, r2, #22
  40334e:	d4c0      	bmi.n	4032d2 <setvbuf+0xce>
  403350:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403352:	f000 fb63 	bl	403a1c <__retarget_lock_release_recursive>
  403356:	4628      	mov	r0, r5
  403358:	b003      	add	sp, #12
  40335a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40335e:	60a6      	str	r6, [r4, #8]
  403360:	e7f0      	b.n	403344 <setvbuf+0x140>
  403362:	4628      	mov	r0, r5
  403364:	f000 f9a2 	bl	4036ac <__sinit>
  403368:	e7c7      	b.n	4032fa <setvbuf+0xf6>
  40336a:	f04f 35ff 	mov.w	r5, #4294967295
  40336e:	e7b0      	b.n	4032d2 <setvbuf+0xce>
  403370:	f8dd 9000 	ldr.w	r9, [sp]
  403374:	45b1      	cmp	r9, r6
  403376:	d004      	beq.n	403382 <setvbuf+0x17e>
  403378:	4648      	mov	r0, r9
  40337a:	f7ff fb7d 	bl	402a78 <malloc>
  40337e:	4607      	mov	r7, r0
  403380:	b920      	cbnz	r0, 40338c <setvbuf+0x188>
  403382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403386:	f04f 35ff 	mov.w	r5, #4294967295
  40338a:	e792      	b.n	4032b2 <setvbuf+0xae>
  40338c:	464e      	mov	r6, r9
  40338e:	e783      	b.n	403298 <setvbuf+0x94>
  403390:	20000010 	.word	0x20000010
	...

004033c0 <strlen>:
  4033c0:	f890 f000 	pld	[r0]
  4033c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4033c8:	f020 0107 	bic.w	r1, r0, #7
  4033cc:	f06f 0c00 	mvn.w	ip, #0
  4033d0:	f010 0407 	ands.w	r4, r0, #7
  4033d4:	f891 f020 	pld	[r1, #32]
  4033d8:	f040 8049 	bne.w	40346e <strlen+0xae>
  4033dc:	f04f 0400 	mov.w	r4, #0
  4033e0:	f06f 0007 	mvn.w	r0, #7
  4033e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4033e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4033ec:	f100 0008 	add.w	r0, r0, #8
  4033f0:	fa82 f24c 	uadd8	r2, r2, ip
  4033f4:	faa4 f28c 	sel	r2, r4, ip
  4033f8:	fa83 f34c 	uadd8	r3, r3, ip
  4033fc:	faa2 f38c 	sel	r3, r2, ip
  403400:	bb4b      	cbnz	r3, 403456 <strlen+0x96>
  403402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403406:	fa82 f24c 	uadd8	r2, r2, ip
  40340a:	f100 0008 	add.w	r0, r0, #8
  40340e:	faa4 f28c 	sel	r2, r4, ip
  403412:	fa83 f34c 	uadd8	r3, r3, ip
  403416:	faa2 f38c 	sel	r3, r2, ip
  40341a:	b9e3      	cbnz	r3, 403456 <strlen+0x96>
  40341c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403420:	fa82 f24c 	uadd8	r2, r2, ip
  403424:	f100 0008 	add.w	r0, r0, #8
  403428:	faa4 f28c 	sel	r2, r4, ip
  40342c:	fa83 f34c 	uadd8	r3, r3, ip
  403430:	faa2 f38c 	sel	r3, r2, ip
  403434:	b97b      	cbnz	r3, 403456 <strlen+0x96>
  403436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40343a:	f101 0120 	add.w	r1, r1, #32
  40343e:	fa82 f24c 	uadd8	r2, r2, ip
  403442:	f100 0008 	add.w	r0, r0, #8
  403446:	faa4 f28c 	sel	r2, r4, ip
  40344a:	fa83 f34c 	uadd8	r3, r3, ip
  40344e:	faa2 f38c 	sel	r3, r2, ip
  403452:	2b00      	cmp	r3, #0
  403454:	d0c6      	beq.n	4033e4 <strlen+0x24>
  403456:	2a00      	cmp	r2, #0
  403458:	bf04      	itt	eq
  40345a:	3004      	addeq	r0, #4
  40345c:	461a      	moveq	r2, r3
  40345e:	ba12      	rev	r2, r2
  403460:	fab2 f282 	clz	r2, r2
  403464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40346c:	4770      	bx	lr
  40346e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403472:	f004 0503 	and.w	r5, r4, #3
  403476:	f1c4 0000 	rsb	r0, r4, #0
  40347a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40347e:	f014 0f04 	tst.w	r4, #4
  403482:	f891 f040 	pld	[r1, #64]	; 0x40
  403486:	fa0c f505 	lsl.w	r5, ip, r5
  40348a:	ea62 0205 	orn	r2, r2, r5
  40348e:	bf1c      	itt	ne
  403490:	ea63 0305 	ornne	r3, r3, r5
  403494:	4662      	movne	r2, ip
  403496:	f04f 0400 	mov.w	r4, #0
  40349a:	e7a9      	b.n	4033f0 <strlen+0x30>

0040349c <register_fini>:
  40349c:	4b02      	ldr	r3, [pc, #8]	; (4034a8 <register_fini+0xc>)
  40349e:	b113      	cbz	r3, 4034a6 <register_fini+0xa>
  4034a0:	4802      	ldr	r0, [pc, #8]	; (4034ac <register_fini+0x10>)
  4034a2:	f000 b805 	b.w	4034b0 <atexit>
  4034a6:	4770      	bx	lr
  4034a8:	00000000 	.word	0x00000000
  4034ac:	0040371d 	.word	0x0040371d

004034b0 <atexit>:
  4034b0:	2300      	movs	r3, #0
  4034b2:	4601      	mov	r1, r0
  4034b4:	461a      	mov	r2, r3
  4034b6:	4618      	mov	r0, r3
  4034b8:	f000 bb3a 	b.w	403b30 <__register_exitproc>

004034bc <__sflush_r>:
  4034bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4034c0:	b29a      	uxth	r2, r3
  4034c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4034c6:	460d      	mov	r5, r1
  4034c8:	0711      	lsls	r1, r2, #28
  4034ca:	4680      	mov	r8, r0
  4034cc:	d43a      	bmi.n	403544 <__sflush_r+0x88>
  4034ce:	686a      	ldr	r2, [r5, #4]
  4034d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4034d4:	2a00      	cmp	r2, #0
  4034d6:	81ab      	strh	r3, [r5, #12]
  4034d8:	dd6f      	ble.n	4035ba <__sflush_r+0xfe>
  4034da:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4034dc:	2c00      	cmp	r4, #0
  4034de:	d049      	beq.n	403574 <__sflush_r+0xb8>
  4034e0:	2200      	movs	r2, #0
  4034e2:	b29b      	uxth	r3, r3
  4034e4:	f8d8 6000 	ldr.w	r6, [r8]
  4034e8:	f8c8 2000 	str.w	r2, [r8]
  4034ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4034f0:	d067      	beq.n	4035c2 <__sflush_r+0x106>
  4034f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4034f4:	075f      	lsls	r7, r3, #29
  4034f6:	d505      	bpl.n	403504 <__sflush_r+0x48>
  4034f8:	6869      	ldr	r1, [r5, #4]
  4034fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4034fc:	1a52      	subs	r2, r2, r1
  4034fe:	b10b      	cbz	r3, 403504 <__sflush_r+0x48>
  403500:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403502:	1ad2      	subs	r2, r2, r3
  403504:	2300      	movs	r3, #0
  403506:	69e9      	ldr	r1, [r5, #28]
  403508:	4640      	mov	r0, r8
  40350a:	47a0      	blx	r4
  40350c:	1c44      	adds	r4, r0, #1
  40350e:	d03c      	beq.n	40358a <__sflush_r+0xce>
  403510:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403514:	692a      	ldr	r2, [r5, #16]
  403516:	602a      	str	r2, [r5, #0]
  403518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40351c:	2200      	movs	r2, #0
  40351e:	81ab      	strh	r3, [r5, #12]
  403520:	04db      	lsls	r3, r3, #19
  403522:	606a      	str	r2, [r5, #4]
  403524:	d447      	bmi.n	4035b6 <__sflush_r+0xfa>
  403526:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403528:	f8c8 6000 	str.w	r6, [r8]
  40352c:	b311      	cbz	r1, 403574 <__sflush_r+0xb8>
  40352e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403532:	4299      	cmp	r1, r3
  403534:	d002      	beq.n	40353c <__sflush_r+0x80>
  403536:	4640      	mov	r0, r8
  403538:	f000 f95a 	bl	4037f0 <_free_r>
  40353c:	2000      	movs	r0, #0
  40353e:	6328      	str	r0, [r5, #48]	; 0x30
  403540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403544:	692e      	ldr	r6, [r5, #16]
  403546:	b1ae      	cbz	r6, 403574 <__sflush_r+0xb8>
  403548:	682c      	ldr	r4, [r5, #0]
  40354a:	602e      	str	r6, [r5, #0]
  40354c:	0791      	lsls	r1, r2, #30
  40354e:	bf0c      	ite	eq
  403550:	696b      	ldreq	r3, [r5, #20]
  403552:	2300      	movne	r3, #0
  403554:	1ba4      	subs	r4, r4, r6
  403556:	60ab      	str	r3, [r5, #8]
  403558:	e00a      	b.n	403570 <__sflush_r+0xb4>
  40355a:	4623      	mov	r3, r4
  40355c:	4632      	mov	r2, r6
  40355e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403560:	69e9      	ldr	r1, [r5, #28]
  403562:	4640      	mov	r0, r8
  403564:	47b8      	blx	r7
  403566:	2800      	cmp	r0, #0
  403568:	eba4 0400 	sub.w	r4, r4, r0
  40356c:	4406      	add	r6, r0
  40356e:	dd04      	ble.n	40357a <__sflush_r+0xbe>
  403570:	2c00      	cmp	r4, #0
  403572:	dcf2      	bgt.n	40355a <__sflush_r+0x9e>
  403574:	2000      	movs	r0, #0
  403576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40357a:	89ab      	ldrh	r3, [r5, #12]
  40357c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403580:	81ab      	strh	r3, [r5, #12]
  403582:	f04f 30ff 	mov.w	r0, #4294967295
  403586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40358a:	f8d8 4000 	ldr.w	r4, [r8]
  40358e:	2c1d      	cmp	r4, #29
  403590:	d8f3      	bhi.n	40357a <__sflush_r+0xbe>
  403592:	4b19      	ldr	r3, [pc, #100]	; (4035f8 <__sflush_r+0x13c>)
  403594:	40e3      	lsrs	r3, r4
  403596:	43db      	mvns	r3, r3
  403598:	f013 0301 	ands.w	r3, r3, #1
  40359c:	d1ed      	bne.n	40357a <__sflush_r+0xbe>
  40359e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4035a2:	606b      	str	r3, [r5, #4]
  4035a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4035a8:	6929      	ldr	r1, [r5, #16]
  4035aa:	81ab      	strh	r3, [r5, #12]
  4035ac:	04da      	lsls	r2, r3, #19
  4035ae:	6029      	str	r1, [r5, #0]
  4035b0:	d5b9      	bpl.n	403526 <__sflush_r+0x6a>
  4035b2:	2c00      	cmp	r4, #0
  4035b4:	d1b7      	bne.n	403526 <__sflush_r+0x6a>
  4035b6:	6528      	str	r0, [r5, #80]	; 0x50
  4035b8:	e7b5      	b.n	403526 <__sflush_r+0x6a>
  4035ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4035bc:	2a00      	cmp	r2, #0
  4035be:	dc8c      	bgt.n	4034da <__sflush_r+0x1e>
  4035c0:	e7d8      	b.n	403574 <__sflush_r+0xb8>
  4035c2:	2301      	movs	r3, #1
  4035c4:	69e9      	ldr	r1, [r5, #28]
  4035c6:	4640      	mov	r0, r8
  4035c8:	47a0      	blx	r4
  4035ca:	1c43      	adds	r3, r0, #1
  4035cc:	4602      	mov	r2, r0
  4035ce:	d002      	beq.n	4035d6 <__sflush_r+0x11a>
  4035d0:	89ab      	ldrh	r3, [r5, #12]
  4035d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4035d4:	e78e      	b.n	4034f4 <__sflush_r+0x38>
  4035d6:	f8d8 3000 	ldr.w	r3, [r8]
  4035da:	2b00      	cmp	r3, #0
  4035dc:	d0f8      	beq.n	4035d0 <__sflush_r+0x114>
  4035de:	2b1d      	cmp	r3, #29
  4035e0:	d001      	beq.n	4035e6 <__sflush_r+0x12a>
  4035e2:	2b16      	cmp	r3, #22
  4035e4:	d102      	bne.n	4035ec <__sflush_r+0x130>
  4035e6:	f8c8 6000 	str.w	r6, [r8]
  4035ea:	e7c3      	b.n	403574 <__sflush_r+0xb8>
  4035ec:	89ab      	ldrh	r3, [r5, #12]
  4035ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4035f2:	81ab      	strh	r3, [r5, #12]
  4035f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4035f8:	20400001 	.word	0x20400001

004035fc <_fflush_r>:
  4035fc:	b538      	push	{r3, r4, r5, lr}
  4035fe:	460d      	mov	r5, r1
  403600:	4604      	mov	r4, r0
  403602:	b108      	cbz	r0, 403608 <_fflush_r+0xc>
  403604:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403606:	b1bb      	cbz	r3, 403638 <_fflush_r+0x3c>
  403608:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40360c:	b188      	cbz	r0, 403632 <_fflush_r+0x36>
  40360e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403610:	07db      	lsls	r3, r3, #31
  403612:	d401      	bmi.n	403618 <_fflush_r+0x1c>
  403614:	0581      	lsls	r1, r0, #22
  403616:	d517      	bpl.n	403648 <_fflush_r+0x4c>
  403618:	4620      	mov	r0, r4
  40361a:	4629      	mov	r1, r5
  40361c:	f7ff ff4e 	bl	4034bc <__sflush_r>
  403620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403622:	07da      	lsls	r2, r3, #31
  403624:	4604      	mov	r4, r0
  403626:	d402      	bmi.n	40362e <_fflush_r+0x32>
  403628:	89ab      	ldrh	r3, [r5, #12]
  40362a:	059b      	lsls	r3, r3, #22
  40362c:	d507      	bpl.n	40363e <_fflush_r+0x42>
  40362e:	4620      	mov	r0, r4
  403630:	bd38      	pop	{r3, r4, r5, pc}
  403632:	4604      	mov	r4, r0
  403634:	4620      	mov	r0, r4
  403636:	bd38      	pop	{r3, r4, r5, pc}
  403638:	f000 f838 	bl	4036ac <__sinit>
  40363c:	e7e4      	b.n	403608 <_fflush_r+0xc>
  40363e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403640:	f000 f9ec 	bl	403a1c <__retarget_lock_release_recursive>
  403644:	4620      	mov	r0, r4
  403646:	bd38      	pop	{r3, r4, r5, pc}
  403648:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40364a:	f000 f9e5 	bl	403a18 <__retarget_lock_acquire_recursive>
  40364e:	e7e3      	b.n	403618 <_fflush_r+0x1c>

00403650 <_cleanup_r>:
  403650:	4901      	ldr	r1, [pc, #4]	; (403658 <_cleanup_r+0x8>)
  403652:	f000 b9b3 	b.w	4039bc <_fwalk_reent>
  403656:	bf00      	nop
  403658:	00403c19 	.word	0x00403c19

0040365c <std.isra.0>:
  40365c:	b510      	push	{r4, lr}
  40365e:	2300      	movs	r3, #0
  403660:	4604      	mov	r4, r0
  403662:	8181      	strh	r1, [r0, #12]
  403664:	81c2      	strh	r2, [r0, #14]
  403666:	6003      	str	r3, [r0, #0]
  403668:	6043      	str	r3, [r0, #4]
  40366a:	6083      	str	r3, [r0, #8]
  40366c:	6643      	str	r3, [r0, #100]	; 0x64
  40366e:	6103      	str	r3, [r0, #16]
  403670:	6143      	str	r3, [r0, #20]
  403672:	6183      	str	r3, [r0, #24]
  403674:	4619      	mov	r1, r3
  403676:	2208      	movs	r2, #8
  403678:	305c      	adds	r0, #92	; 0x5c
  40367a:	f7ff fd4f 	bl	40311c <memset>
  40367e:	4807      	ldr	r0, [pc, #28]	; (40369c <std.isra.0+0x40>)
  403680:	4907      	ldr	r1, [pc, #28]	; (4036a0 <std.isra.0+0x44>)
  403682:	4a08      	ldr	r2, [pc, #32]	; (4036a4 <std.isra.0+0x48>)
  403684:	4b08      	ldr	r3, [pc, #32]	; (4036a8 <std.isra.0+0x4c>)
  403686:	6220      	str	r0, [r4, #32]
  403688:	61e4      	str	r4, [r4, #28]
  40368a:	6261      	str	r1, [r4, #36]	; 0x24
  40368c:	62a2      	str	r2, [r4, #40]	; 0x28
  40368e:	62e3      	str	r3, [r4, #44]	; 0x2c
  403690:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403698:	f000 b9ba 	b.w	403a10 <__retarget_lock_init_recursive>
  40369c:	00403a7d 	.word	0x00403a7d
  4036a0:	00403aa1 	.word	0x00403aa1
  4036a4:	00403add 	.word	0x00403add
  4036a8:	00403afd 	.word	0x00403afd

004036ac <__sinit>:
  4036ac:	b510      	push	{r4, lr}
  4036ae:	4604      	mov	r4, r0
  4036b0:	4812      	ldr	r0, [pc, #72]	; (4036fc <__sinit+0x50>)
  4036b2:	f000 f9b1 	bl	403a18 <__retarget_lock_acquire_recursive>
  4036b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4036b8:	b9d2      	cbnz	r2, 4036f0 <__sinit+0x44>
  4036ba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4036be:	4810      	ldr	r0, [pc, #64]	; (403700 <__sinit+0x54>)
  4036c0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4036c4:	2103      	movs	r1, #3
  4036c6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4036ca:	63e0      	str	r0, [r4, #60]	; 0x3c
  4036cc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4036d0:	6860      	ldr	r0, [r4, #4]
  4036d2:	2104      	movs	r1, #4
  4036d4:	f7ff ffc2 	bl	40365c <std.isra.0>
  4036d8:	2201      	movs	r2, #1
  4036da:	2109      	movs	r1, #9
  4036dc:	68a0      	ldr	r0, [r4, #8]
  4036de:	f7ff ffbd 	bl	40365c <std.isra.0>
  4036e2:	2202      	movs	r2, #2
  4036e4:	2112      	movs	r1, #18
  4036e6:	68e0      	ldr	r0, [r4, #12]
  4036e8:	f7ff ffb8 	bl	40365c <std.isra.0>
  4036ec:	2301      	movs	r3, #1
  4036ee:	63a3      	str	r3, [r4, #56]	; 0x38
  4036f0:	4802      	ldr	r0, [pc, #8]	; (4036fc <__sinit+0x50>)
  4036f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4036f6:	f000 b991 	b.w	403a1c <__retarget_lock_release_recursive>
  4036fa:	bf00      	nop
  4036fc:	20002d50 	.word	0x20002d50
  403700:	00403651 	.word	0x00403651

00403704 <__sfp_lock_acquire>:
  403704:	4801      	ldr	r0, [pc, #4]	; (40370c <__sfp_lock_acquire+0x8>)
  403706:	f000 b987 	b.w	403a18 <__retarget_lock_acquire_recursive>
  40370a:	bf00      	nop
  40370c:	20002d64 	.word	0x20002d64

00403710 <__sfp_lock_release>:
  403710:	4801      	ldr	r0, [pc, #4]	; (403718 <__sfp_lock_release+0x8>)
  403712:	f000 b983 	b.w	403a1c <__retarget_lock_release_recursive>
  403716:	bf00      	nop
  403718:	20002d64 	.word	0x20002d64

0040371c <__libc_fini_array>:
  40371c:	b538      	push	{r3, r4, r5, lr}
  40371e:	4c0a      	ldr	r4, [pc, #40]	; (403748 <__libc_fini_array+0x2c>)
  403720:	4d0a      	ldr	r5, [pc, #40]	; (40374c <__libc_fini_array+0x30>)
  403722:	1b64      	subs	r4, r4, r5
  403724:	10a4      	asrs	r4, r4, #2
  403726:	d00a      	beq.n	40373e <__libc_fini_array+0x22>
  403728:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40372c:	3b01      	subs	r3, #1
  40372e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403732:	3c01      	subs	r4, #1
  403734:	f855 3904 	ldr.w	r3, [r5], #-4
  403738:	4798      	blx	r3
  40373a:	2c00      	cmp	r4, #0
  40373c:	d1f9      	bne.n	403732 <__libc_fini_array+0x16>
  40373e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403742:	f000 bba1 	b.w	403e88 <_fini>
  403746:	bf00      	nop
  403748:	00403e98 	.word	0x00403e98
  40374c:	00403e94 	.word	0x00403e94

00403750 <_malloc_trim_r>:
  403750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403752:	4f24      	ldr	r7, [pc, #144]	; (4037e4 <_malloc_trim_r+0x94>)
  403754:	460c      	mov	r4, r1
  403756:	4606      	mov	r6, r0
  403758:	f7ff fd2e 	bl	4031b8 <__malloc_lock>
  40375c:	68bb      	ldr	r3, [r7, #8]
  40375e:	685d      	ldr	r5, [r3, #4]
  403760:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403764:	310f      	adds	r1, #15
  403766:	f025 0503 	bic.w	r5, r5, #3
  40376a:	4429      	add	r1, r5
  40376c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403770:	f021 010f 	bic.w	r1, r1, #15
  403774:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403778:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40377c:	db07      	blt.n	40378e <_malloc_trim_r+0x3e>
  40377e:	2100      	movs	r1, #0
  403780:	4630      	mov	r0, r6
  403782:	f7ff fd25 	bl	4031d0 <_sbrk_r>
  403786:	68bb      	ldr	r3, [r7, #8]
  403788:	442b      	add	r3, r5
  40378a:	4298      	cmp	r0, r3
  40378c:	d004      	beq.n	403798 <_malloc_trim_r+0x48>
  40378e:	4630      	mov	r0, r6
  403790:	f7ff fd18 	bl	4031c4 <__malloc_unlock>
  403794:	2000      	movs	r0, #0
  403796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403798:	4261      	negs	r1, r4
  40379a:	4630      	mov	r0, r6
  40379c:	f7ff fd18 	bl	4031d0 <_sbrk_r>
  4037a0:	3001      	adds	r0, #1
  4037a2:	d00d      	beq.n	4037c0 <_malloc_trim_r+0x70>
  4037a4:	4b10      	ldr	r3, [pc, #64]	; (4037e8 <_malloc_trim_r+0x98>)
  4037a6:	68ba      	ldr	r2, [r7, #8]
  4037a8:	6819      	ldr	r1, [r3, #0]
  4037aa:	1b2d      	subs	r5, r5, r4
  4037ac:	f045 0501 	orr.w	r5, r5, #1
  4037b0:	4630      	mov	r0, r6
  4037b2:	1b09      	subs	r1, r1, r4
  4037b4:	6055      	str	r5, [r2, #4]
  4037b6:	6019      	str	r1, [r3, #0]
  4037b8:	f7ff fd04 	bl	4031c4 <__malloc_unlock>
  4037bc:	2001      	movs	r0, #1
  4037be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037c0:	2100      	movs	r1, #0
  4037c2:	4630      	mov	r0, r6
  4037c4:	f7ff fd04 	bl	4031d0 <_sbrk_r>
  4037c8:	68ba      	ldr	r2, [r7, #8]
  4037ca:	1a83      	subs	r3, r0, r2
  4037cc:	2b0f      	cmp	r3, #15
  4037ce:	ddde      	ble.n	40378e <_malloc_trim_r+0x3e>
  4037d0:	4c06      	ldr	r4, [pc, #24]	; (4037ec <_malloc_trim_r+0x9c>)
  4037d2:	4905      	ldr	r1, [pc, #20]	; (4037e8 <_malloc_trim_r+0x98>)
  4037d4:	6824      	ldr	r4, [r4, #0]
  4037d6:	f043 0301 	orr.w	r3, r3, #1
  4037da:	1b00      	subs	r0, r0, r4
  4037dc:	6053      	str	r3, [r2, #4]
  4037de:	6008      	str	r0, [r1, #0]
  4037e0:	e7d5      	b.n	40378e <_malloc_trim_r+0x3e>
  4037e2:	bf00      	nop
  4037e4:	20000440 	.word	0x20000440
  4037e8:	200008f4 	.word	0x200008f4
  4037ec:	20000848 	.word	0x20000848

004037f0 <_free_r>:
  4037f0:	2900      	cmp	r1, #0
  4037f2:	d044      	beq.n	40387e <_free_r+0x8e>
  4037f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037f8:	460d      	mov	r5, r1
  4037fa:	4680      	mov	r8, r0
  4037fc:	f7ff fcdc 	bl	4031b8 <__malloc_lock>
  403800:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403804:	4969      	ldr	r1, [pc, #420]	; (4039ac <_free_r+0x1bc>)
  403806:	f027 0301 	bic.w	r3, r7, #1
  40380a:	f1a5 0408 	sub.w	r4, r5, #8
  40380e:	18e2      	adds	r2, r4, r3
  403810:	688e      	ldr	r6, [r1, #8]
  403812:	6850      	ldr	r0, [r2, #4]
  403814:	42b2      	cmp	r2, r6
  403816:	f020 0003 	bic.w	r0, r0, #3
  40381a:	d05e      	beq.n	4038da <_free_r+0xea>
  40381c:	07fe      	lsls	r6, r7, #31
  40381e:	6050      	str	r0, [r2, #4]
  403820:	d40b      	bmi.n	40383a <_free_r+0x4a>
  403822:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403826:	1be4      	subs	r4, r4, r7
  403828:	f101 0e08 	add.w	lr, r1, #8
  40382c:	68a5      	ldr	r5, [r4, #8]
  40382e:	4575      	cmp	r5, lr
  403830:	443b      	add	r3, r7
  403832:	d06d      	beq.n	403910 <_free_r+0x120>
  403834:	68e7      	ldr	r7, [r4, #12]
  403836:	60ef      	str	r7, [r5, #12]
  403838:	60bd      	str	r5, [r7, #8]
  40383a:	1815      	adds	r5, r2, r0
  40383c:	686d      	ldr	r5, [r5, #4]
  40383e:	07ed      	lsls	r5, r5, #31
  403840:	d53e      	bpl.n	4038c0 <_free_r+0xd0>
  403842:	f043 0201 	orr.w	r2, r3, #1
  403846:	6062      	str	r2, [r4, #4]
  403848:	50e3      	str	r3, [r4, r3]
  40384a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40384e:	d217      	bcs.n	403880 <_free_r+0x90>
  403850:	08db      	lsrs	r3, r3, #3
  403852:	1c58      	adds	r0, r3, #1
  403854:	109a      	asrs	r2, r3, #2
  403856:	684d      	ldr	r5, [r1, #4]
  403858:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40385c:	60a7      	str	r7, [r4, #8]
  40385e:	2301      	movs	r3, #1
  403860:	4093      	lsls	r3, r2
  403862:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403866:	432b      	orrs	r3, r5
  403868:	3a08      	subs	r2, #8
  40386a:	60e2      	str	r2, [r4, #12]
  40386c:	604b      	str	r3, [r1, #4]
  40386e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403872:	60fc      	str	r4, [r7, #12]
  403874:	4640      	mov	r0, r8
  403876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40387a:	f7ff bca3 	b.w	4031c4 <__malloc_unlock>
  40387e:	4770      	bx	lr
  403880:	0a5a      	lsrs	r2, r3, #9
  403882:	2a04      	cmp	r2, #4
  403884:	d852      	bhi.n	40392c <_free_r+0x13c>
  403886:	099a      	lsrs	r2, r3, #6
  403888:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40388c:	00ff      	lsls	r7, r7, #3
  40388e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403892:	19c8      	adds	r0, r1, r7
  403894:	59ca      	ldr	r2, [r1, r7]
  403896:	3808      	subs	r0, #8
  403898:	4290      	cmp	r0, r2
  40389a:	d04f      	beq.n	40393c <_free_r+0x14c>
  40389c:	6851      	ldr	r1, [r2, #4]
  40389e:	f021 0103 	bic.w	r1, r1, #3
  4038a2:	428b      	cmp	r3, r1
  4038a4:	d232      	bcs.n	40390c <_free_r+0x11c>
  4038a6:	6892      	ldr	r2, [r2, #8]
  4038a8:	4290      	cmp	r0, r2
  4038aa:	d1f7      	bne.n	40389c <_free_r+0xac>
  4038ac:	68c3      	ldr	r3, [r0, #12]
  4038ae:	60a0      	str	r0, [r4, #8]
  4038b0:	60e3      	str	r3, [r4, #12]
  4038b2:	609c      	str	r4, [r3, #8]
  4038b4:	60c4      	str	r4, [r0, #12]
  4038b6:	4640      	mov	r0, r8
  4038b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4038bc:	f7ff bc82 	b.w	4031c4 <__malloc_unlock>
  4038c0:	6895      	ldr	r5, [r2, #8]
  4038c2:	4f3b      	ldr	r7, [pc, #236]	; (4039b0 <_free_r+0x1c0>)
  4038c4:	42bd      	cmp	r5, r7
  4038c6:	4403      	add	r3, r0
  4038c8:	d040      	beq.n	40394c <_free_r+0x15c>
  4038ca:	68d0      	ldr	r0, [r2, #12]
  4038cc:	60e8      	str	r0, [r5, #12]
  4038ce:	f043 0201 	orr.w	r2, r3, #1
  4038d2:	6085      	str	r5, [r0, #8]
  4038d4:	6062      	str	r2, [r4, #4]
  4038d6:	50e3      	str	r3, [r4, r3]
  4038d8:	e7b7      	b.n	40384a <_free_r+0x5a>
  4038da:	07ff      	lsls	r7, r7, #31
  4038dc:	4403      	add	r3, r0
  4038de:	d407      	bmi.n	4038f0 <_free_r+0x100>
  4038e0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4038e4:	1aa4      	subs	r4, r4, r2
  4038e6:	4413      	add	r3, r2
  4038e8:	68a0      	ldr	r0, [r4, #8]
  4038ea:	68e2      	ldr	r2, [r4, #12]
  4038ec:	60c2      	str	r2, [r0, #12]
  4038ee:	6090      	str	r0, [r2, #8]
  4038f0:	4a30      	ldr	r2, [pc, #192]	; (4039b4 <_free_r+0x1c4>)
  4038f2:	6812      	ldr	r2, [r2, #0]
  4038f4:	f043 0001 	orr.w	r0, r3, #1
  4038f8:	4293      	cmp	r3, r2
  4038fa:	6060      	str	r0, [r4, #4]
  4038fc:	608c      	str	r4, [r1, #8]
  4038fe:	d3b9      	bcc.n	403874 <_free_r+0x84>
  403900:	4b2d      	ldr	r3, [pc, #180]	; (4039b8 <_free_r+0x1c8>)
  403902:	4640      	mov	r0, r8
  403904:	6819      	ldr	r1, [r3, #0]
  403906:	f7ff ff23 	bl	403750 <_malloc_trim_r>
  40390a:	e7b3      	b.n	403874 <_free_r+0x84>
  40390c:	4610      	mov	r0, r2
  40390e:	e7cd      	b.n	4038ac <_free_r+0xbc>
  403910:	1811      	adds	r1, r2, r0
  403912:	6849      	ldr	r1, [r1, #4]
  403914:	07c9      	lsls	r1, r1, #31
  403916:	d444      	bmi.n	4039a2 <_free_r+0x1b2>
  403918:	6891      	ldr	r1, [r2, #8]
  40391a:	68d2      	ldr	r2, [r2, #12]
  40391c:	60ca      	str	r2, [r1, #12]
  40391e:	4403      	add	r3, r0
  403920:	f043 0001 	orr.w	r0, r3, #1
  403924:	6091      	str	r1, [r2, #8]
  403926:	6060      	str	r0, [r4, #4]
  403928:	50e3      	str	r3, [r4, r3]
  40392a:	e7a3      	b.n	403874 <_free_r+0x84>
  40392c:	2a14      	cmp	r2, #20
  40392e:	d816      	bhi.n	40395e <_free_r+0x16e>
  403930:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403934:	00ff      	lsls	r7, r7, #3
  403936:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40393a:	e7aa      	b.n	403892 <_free_r+0xa2>
  40393c:	10aa      	asrs	r2, r5, #2
  40393e:	2301      	movs	r3, #1
  403940:	684d      	ldr	r5, [r1, #4]
  403942:	4093      	lsls	r3, r2
  403944:	432b      	orrs	r3, r5
  403946:	604b      	str	r3, [r1, #4]
  403948:	4603      	mov	r3, r0
  40394a:	e7b0      	b.n	4038ae <_free_r+0xbe>
  40394c:	f043 0201 	orr.w	r2, r3, #1
  403950:	614c      	str	r4, [r1, #20]
  403952:	610c      	str	r4, [r1, #16]
  403954:	60e5      	str	r5, [r4, #12]
  403956:	60a5      	str	r5, [r4, #8]
  403958:	6062      	str	r2, [r4, #4]
  40395a:	50e3      	str	r3, [r4, r3]
  40395c:	e78a      	b.n	403874 <_free_r+0x84>
  40395e:	2a54      	cmp	r2, #84	; 0x54
  403960:	d806      	bhi.n	403970 <_free_r+0x180>
  403962:	0b1a      	lsrs	r2, r3, #12
  403964:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403968:	00ff      	lsls	r7, r7, #3
  40396a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40396e:	e790      	b.n	403892 <_free_r+0xa2>
  403970:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403974:	d806      	bhi.n	403984 <_free_r+0x194>
  403976:	0bda      	lsrs	r2, r3, #15
  403978:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40397c:	00ff      	lsls	r7, r7, #3
  40397e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403982:	e786      	b.n	403892 <_free_r+0xa2>
  403984:	f240 5054 	movw	r0, #1364	; 0x554
  403988:	4282      	cmp	r2, r0
  40398a:	d806      	bhi.n	40399a <_free_r+0x1aa>
  40398c:	0c9a      	lsrs	r2, r3, #18
  40398e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403992:	00ff      	lsls	r7, r7, #3
  403994:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403998:	e77b      	b.n	403892 <_free_r+0xa2>
  40399a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40399e:	257e      	movs	r5, #126	; 0x7e
  4039a0:	e777      	b.n	403892 <_free_r+0xa2>
  4039a2:	f043 0101 	orr.w	r1, r3, #1
  4039a6:	6061      	str	r1, [r4, #4]
  4039a8:	6013      	str	r3, [r2, #0]
  4039aa:	e763      	b.n	403874 <_free_r+0x84>
  4039ac:	20000440 	.word	0x20000440
  4039b0:	20000448 	.word	0x20000448
  4039b4:	2000084c 	.word	0x2000084c
  4039b8:	20000924 	.word	0x20000924

004039bc <_fwalk_reent>:
  4039bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4039c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4039c4:	d01f      	beq.n	403a06 <_fwalk_reent+0x4a>
  4039c6:	4688      	mov	r8, r1
  4039c8:	4606      	mov	r6, r0
  4039ca:	f04f 0900 	mov.w	r9, #0
  4039ce:	687d      	ldr	r5, [r7, #4]
  4039d0:	68bc      	ldr	r4, [r7, #8]
  4039d2:	3d01      	subs	r5, #1
  4039d4:	d411      	bmi.n	4039fa <_fwalk_reent+0x3e>
  4039d6:	89a3      	ldrh	r3, [r4, #12]
  4039d8:	2b01      	cmp	r3, #1
  4039da:	f105 35ff 	add.w	r5, r5, #4294967295
  4039de:	d908      	bls.n	4039f2 <_fwalk_reent+0x36>
  4039e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4039e4:	3301      	adds	r3, #1
  4039e6:	4621      	mov	r1, r4
  4039e8:	4630      	mov	r0, r6
  4039ea:	d002      	beq.n	4039f2 <_fwalk_reent+0x36>
  4039ec:	47c0      	blx	r8
  4039ee:	ea49 0900 	orr.w	r9, r9, r0
  4039f2:	1c6b      	adds	r3, r5, #1
  4039f4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4039f8:	d1ed      	bne.n	4039d6 <_fwalk_reent+0x1a>
  4039fa:	683f      	ldr	r7, [r7, #0]
  4039fc:	2f00      	cmp	r7, #0
  4039fe:	d1e6      	bne.n	4039ce <_fwalk_reent+0x12>
  403a00:	4648      	mov	r0, r9
  403a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a06:	46b9      	mov	r9, r7
  403a08:	4648      	mov	r0, r9
  403a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a0e:	bf00      	nop

00403a10 <__retarget_lock_init_recursive>:
  403a10:	4770      	bx	lr
  403a12:	bf00      	nop

00403a14 <__retarget_lock_close_recursive>:
  403a14:	4770      	bx	lr
  403a16:	bf00      	nop

00403a18 <__retarget_lock_acquire_recursive>:
  403a18:	4770      	bx	lr
  403a1a:	bf00      	nop

00403a1c <__retarget_lock_release_recursive>:
  403a1c:	4770      	bx	lr
  403a1e:	bf00      	nop

00403a20 <__swhatbuf_r>:
  403a20:	b570      	push	{r4, r5, r6, lr}
  403a22:	460c      	mov	r4, r1
  403a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a28:	2900      	cmp	r1, #0
  403a2a:	b090      	sub	sp, #64	; 0x40
  403a2c:	4615      	mov	r5, r2
  403a2e:	461e      	mov	r6, r3
  403a30:	db14      	blt.n	403a5c <__swhatbuf_r+0x3c>
  403a32:	aa01      	add	r2, sp, #4
  403a34:	f000 f952 	bl	403cdc <_fstat_r>
  403a38:	2800      	cmp	r0, #0
  403a3a:	db0f      	blt.n	403a5c <__swhatbuf_r+0x3c>
  403a3c:	9a02      	ldr	r2, [sp, #8]
  403a3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403a42:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403a46:	fab2 f282 	clz	r2, r2
  403a4a:	0952      	lsrs	r2, r2, #5
  403a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403a50:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403a54:	6032      	str	r2, [r6, #0]
  403a56:	602b      	str	r3, [r5, #0]
  403a58:	b010      	add	sp, #64	; 0x40
  403a5a:	bd70      	pop	{r4, r5, r6, pc}
  403a5c:	89a2      	ldrh	r2, [r4, #12]
  403a5e:	2300      	movs	r3, #0
  403a60:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403a64:	6033      	str	r3, [r6, #0]
  403a66:	d004      	beq.n	403a72 <__swhatbuf_r+0x52>
  403a68:	2240      	movs	r2, #64	; 0x40
  403a6a:	4618      	mov	r0, r3
  403a6c:	602a      	str	r2, [r5, #0]
  403a6e:	b010      	add	sp, #64	; 0x40
  403a70:	bd70      	pop	{r4, r5, r6, pc}
  403a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403a76:	602b      	str	r3, [r5, #0]
  403a78:	b010      	add	sp, #64	; 0x40
  403a7a:	bd70      	pop	{r4, r5, r6, pc}

00403a7c <__sread>:
  403a7c:	b510      	push	{r4, lr}
  403a7e:	460c      	mov	r4, r1
  403a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a84:	f000 f954 	bl	403d30 <_read_r>
  403a88:	2800      	cmp	r0, #0
  403a8a:	db03      	blt.n	403a94 <__sread+0x18>
  403a8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403a8e:	4403      	add	r3, r0
  403a90:	6523      	str	r3, [r4, #80]	; 0x50
  403a92:	bd10      	pop	{r4, pc}
  403a94:	89a3      	ldrh	r3, [r4, #12]
  403a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403a9a:	81a3      	strh	r3, [r4, #12]
  403a9c:	bd10      	pop	{r4, pc}
  403a9e:	bf00      	nop

00403aa0 <__swrite>:
  403aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403aa4:	4616      	mov	r6, r2
  403aa6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403aaa:	461f      	mov	r7, r3
  403aac:	05d3      	lsls	r3, r2, #23
  403aae:	460c      	mov	r4, r1
  403ab0:	4605      	mov	r5, r0
  403ab2:	d507      	bpl.n	403ac4 <__swrite+0x24>
  403ab4:	2200      	movs	r2, #0
  403ab6:	2302      	movs	r3, #2
  403ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403abc:	f000 f922 	bl	403d04 <_lseek_r>
  403ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403ac8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403acc:	81a2      	strh	r2, [r4, #12]
  403ace:	463b      	mov	r3, r7
  403ad0:	4632      	mov	r2, r6
  403ad2:	4628      	mov	r0, r5
  403ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403ad8:	f000 b814 	b.w	403b04 <_write_r>

00403adc <__sseek>:
  403adc:	b510      	push	{r4, lr}
  403ade:	460c      	mov	r4, r1
  403ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ae4:	f000 f90e 	bl	403d04 <_lseek_r>
  403ae8:	89a3      	ldrh	r3, [r4, #12]
  403aea:	1c42      	adds	r2, r0, #1
  403aec:	bf0e      	itee	eq
  403aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403af6:	6520      	strne	r0, [r4, #80]	; 0x50
  403af8:	81a3      	strh	r3, [r4, #12]
  403afa:	bd10      	pop	{r4, pc}

00403afc <__sclose>:
  403afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b00:	f000 b878 	b.w	403bf4 <_close_r>

00403b04 <_write_r>:
  403b04:	b570      	push	{r4, r5, r6, lr}
  403b06:	460d      	mov	r5, r1
  403b08:	4c08      	ldr	r4, [pc, #32]	; (403b2c <_write_r+0x28>)
  403b0a:	4611      	mov	r1, r2
  403b0c:	4606      	mov	r6, r0
  403b0e:	461a      	mov	r2, r3
  403b10:	4628      	mov	r0, r5
  403b12:	2300      	movs	r3, #0
  403b14:	6023      	str	r3, [r4, #0]
  403b16:	f7fd facd 	bl	4010b4 <_write>
  403b1a:	1c43      	adds	r3, r0, #1
  403b1c:	d000      	beq.n	403b20 <_write_r+0x1c>
  403b1e:	bd70      	pop	{r4, r5, r6, pc}
  403b20:	6823      	ldr	r3, [r4, #0]
  403b22:	2b00      	cmp	r3, #0
  403b24:	d0fb      	beq.n	403b1e <_write_r+0x1a>
  403b26:	6033      	str	r3, [r6, #0]
  403b28:	bd70      	pop	{r4, r5, r6, pc}
  403b2a:	bf00      	nop
  403b2c:	20002d68 	.word	0x20002d68

00403b30 <__register_exitproc>:
  403b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403b34:	4d2c      	ldr	r5, [pc, #176]	; (403be8 <__register_exitproc+0xb8>)
  403b36:	4606      	mov	r6, r0
  403b38:	6828      	ldr	r0, [r5, #0]
  403b3a:	4698      	mov	r8, r3
  403b3c:	460f      	mov	r7, r1
  403b3e:	4691      	mov	r9, r2
  403b40:	f7ff ff6a 	bl	403a18 <__retarget_lock_acquire_recursive>
  403b44:	4b29      	ldr	r3, [pc, #164]	; (403bec <__register_exitproc+0xbc>)
  403b46:	681c      	ldr	r4, [r3, #0]
  403b48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403b4c:	2b00      	cmp	r3, #0
  403b4e:	d03e      	beq.n	403bce <__register_exitproc+0x9e>
  403b50:	685a      	ldr	r2, [r3, #4]
  403b52:	2a1f      	cmp	r2, #31
  403b54:	dc1c      	bgt.n	403b90 <__register_exitproc+0x60>
  403b56:	f102 0e01 	add.w	lr, r2, #1
  403b5a:	b176      	cbz	r6, 403b7a <__register_exitproc+0x4a>
  403b5c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403b60:	2401      	movs	r4, #1
  403b62:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403b66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403b6a:	4094      	lsls	r4, r2
  403b6c:	4320      	orrs	r0, r4
  403b6e:	2e02      	cmp	r6, #2
  403b70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403b74:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403b78:	d023      	beq.n	403bc2 <__register_exitproc+0x92>
  403b7a:	3202      	adds	r2, #2
  403b7c:	f8c3 e004 	str.w	lr, [r3, #4]
  403b80:	6828      	ldr	r0, [r5, #0]
  403b82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403b86:	f7ff ff49 	bl	403a1c <__retarget_lock_release_recursive>
  403b8a:	2000      	movs	r0, #0
  403b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403b90:	4b17      	ldr	r3, [pc, #92]	; (403bf0 <__register_exitproc+0xc0>)
  403b92:	b30b      	cbz	r3, 403bd8 <__register_exitproc+0xa8>
  403b94:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403b98:	f7fe ff6e 	bl	402a78 <malloc>
  403b9c:	4603      	mov	r3, r0
  403b9e:	b1d8      	cbz	r0, 403bd8 <__register_exitproc+0xa8>
  403ba0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403ba4:	6002      	str	r2, [r0, #0]
  403ba6:	2100      	movs	r1, #0
  403ba8:	6041      	str	r1, [r0, #4]
  403baa:	460a      	mov	r2, r1
  403bac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403bb0:	f04f 0e01 	mov.w	lr, #1
  403bb4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403bb8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403bbc:	2e00      	cmp	r6, #0
  403bbe:	d0dc      	beq.n	403b7a <__register_exitproc+0x4a>
  403bc0:	e7cc      	b.n	403b5c <__register_exitproc+0x2c>
  403bc2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403bc6:	430c      	orrs	r4, r1
  403bc8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403bcc:	e7d5      	b.n	403b7a <__register_exitproc+0x4a>
  403bce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403bd2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403bd6:	e7bb      	b.n	403b50 <__register_exitproc+0x20>
  403bd8:	6828      	ldr	r0, [r5, #0]
  403bda:	f7ff ff1f 	bl	403a1c <__retarget_lock_release_recursive>
  403bde:	f04f 30ff 	mov.w	r0, #4294967295
  403be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403be6:	bf00      	nop
  403be8:	20000850 	.word	0x20000850
  403bec:	00403e70 	.word	0x00403e70
  403bf0:	00402a79 	.word	0x00402a79

00403bf4 <_close_r>:
  403bf4:	b538      	push	{r3, r4, r5, lr}
  403bf6:	4c07      	ldr	r4, [pc, #28]	; (403c14 <_close_r+0x20>)
  403bf8:	2300      	movs	r3, #0
  403bfa:	4605      	mov	r5, r0
  403bfc:	4608      	mov	r0, r1
  403bfe:	6023      	str	r3, [r4, #0]
  403c00:	f7fe fc64 	bl	4024cc <_close>
  403c04:	1c43      	adds	r3, r0, #1
  403c06:	d000      	beq.n	403c0a <_close_r+0x16>
  403c08:	bd38      	pop	{r3, r4, r5, pc}
  403c0a:	6823      	ldr	r3, [r4, #0]
  403c0c:	2b00      	cmp	r3, #0
  403c0e:	d0fb      	beq.n	403c08 <_close_r+0x14>
  403c10:	602b      	str	r3, [r5, #0]
  403c12:	bd38      	pop	{r3, r4, r5, pc}
  403c14:	20002d68 	.word	0x20002d68

00403c18 <_fclose_r>:
  403c18:	b570      	push	{r4, r5, r6, lr}
  403c1a:	b159      	cbz	r1, 403c34 <_fclose_r+0x1c>
  403c1c:	4605      	mov	r5, r0
  403c1e:	460c      	mov	r4, r1
  403c20:	b110      	cbz	r0, 403c28 <_fclose_r+0x10>
  403c22:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c24:	2b00      	cmp	r3, #0
  403c26:	d03c      	beq.n	403ca2 <_fclose_r+0x8a>
  403c28:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403c2a:	07d8      	lsls	r0, r3, #31
  403c2c:	d505      	bpl.n	403c3a <_fclose_r+0x22>
  403c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c32:	b92b      	cbnz	r3, 403c40 <_fclose_r+0x28>
  403c34:	2600      	movs	r6, #0
  403c36:	4630      	mov	r0, r6
  403c38:	bd70      	pop	{r4, r5, r6, pc}
  403c3a:	89a3      	ldrh	r3, [r4, #12]
  403c3c:	0599      	lsls	r1, r3, #22
  403c3e:	d53c      	bpl.n	403cba <_fclose_r+0xa2>
  403c40:	4621      	mov	r1, r4
  403c42:	4628      	mov	r0, r5
  403c44:	f7ff fc3a 	bl	4034bc <__sflush_r>
  403c48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403c4a:	4606      	mov	r6, r0
  403c4c:	b133      	cbz	r3, 403c5c <_fclose_r+0x44>
  403c4e:	69e1      	ldr	r1, [r4, #28]
  403c50:	4628      	mov	r0, r5
  403c52:	4798      	blx	r3
  403c54:	2800      	cmp	r0, #0
  403c56:	bfb8      	it	lt
  403c58:	f04f 36ff 	movlt.w	r6, #4294967295
  403c5c:	89a3      	ldrh	r3, [r4, #12]
  403c5e:	061a      	lsls	r2, r3, #24
  403c60:	d422      	bmi.n	403ca8 <_fclose_r+0x90>
  403c62:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403c64:	b141      	cbz	r1, 403c78 <_fclose_r+0x60>
  403c66:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403c6a:	4299      	cmp	r1, r3
  403c6c:	d002      	beq.n	403c74 <_fclose_r+0x5c>
  403c6e:	4628      	mov	r0, r5
  403c70:	f7ff fdbe 	bl	4037f0 <_free_r>
  403c74:	2300      	movs	r3, #0
  403c76:	6323      	str	r3, [r4, #48]	; 0x30
  403c78:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403c7a:	b121      	cbz	r1, 403c86 <_fclose_r+0x6e>
  403c7c:	4628      	mov	r0, r5
  403c7e:	f7ff fdb7 	bl	4037f0 <_free_r>
  403c82:	2300      	movs	r3, #0
  403c84:	6463      	str	r3, [r4, #68]	; 0x44
  403c86:	f7ff fd3d 	bl	403704 <__sfp_lock_acquire>
  403c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403c8c:	2200      	movs	r2, #0
  403c8e:	07db      	lsls	r3, r3, #31
  403c90:	81a2      	strh	r2, [r4, #12]
  403c92:	d50e      	bpl.n	403cb2 <_fclose_r+0x9a>
  403c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c96:	f7ff febd 	bl	403a14 <__retarget_lock_close_recursive>
  403c9a:	f7ff fd39 	bl	403710 <__sfp_lock_release>
  403c9e:	4630      	mov	r0, r6
  403ca0:	bd70      	pop	{r4, r5, r6, pc}
  403ca2:	f7ff fd03 	bl	4036ac <__sinit>
  403ca6:	e7bf      	b.n	403c28 <_fclose_r+0x10>
  403ca8:	6921      	ldr	r1, [r4, #16]
  403caa:	4628      	mov	r0, r5
  403cac:	f7ff fda0 	bl	4037f0 <_free_r>
  403cb0:	e7d7      	b.n	403c62 <_fclose_r+0x4a>
  403cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403cb4:	f7ff feb2 	bl	403a1c <__retarget_lock_release_recursive>
  403cb8:	e7ec      	b.n	403c94 <_fclose_r+0x7c>
  403cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403cbc:	f7ff feac 	bl	403a18 <__retarget_lock_acquire_recursive>
  403cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403cc4:	2b00      	cmp	r3, #0
  403cc6:	d1bb      	bne.n	403c40 <_fclose_r+0x28>
  403cc8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403cca:	f016 0601 	ands.w	r6, r6, #1
  403cce:	d1b1      	bne.n	403c34 <_fclose_r+0x1c>
  403cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403cd2:	f7ff fea3 	bl	403a1c <__retarget_lock_release_recursive>
  403cd6:	4630      	mov	r0, r6
  403cd8:	bd70      	pop	{r4, r5, r6, pc}
  403cda:	bf00      	nop

00403cdc <_fstat_r>:
  403cdc:	b538      	push	{r3, r4, r5, lr}
  403cde:	460b      	mov	r3, r1
  403ce0:	4c07      	ldr	r4, [pc, #28]	; (403d00 <_fstat_r+0x24>)
  403ce2:	4605      	mov	r5, r0
  403ce4:	4611      	mov	r1, r2
  403ce6:	4618      	mov	r0, r3
  403ce8:	2300      	movs	r3, #0
  403cea:	6023      	str	r3, [r4, #0]
  403cec:	f7fe fbf9 	bl	4024e2 <_fstat>
  403cf0:	1c43      	adds	r3, r0, #1
  403cf2:	d000      	beq.n	403cf6 <_fstat_r+0x1a>
  403cf4:	bd38      	pop	{r3, r4, r5, pc}
  403cf6:	6823      	ldr	r3, [r4, #0]
  403cf8:	2b00      	cmp	r3, #0
  403cfa:	d0fb      	beq.n	403cf4 <_fstat_r+0x18>
  403cfc:	602b      	str	r3, [r5, #0]
  403cfe:	bd38      	pop	{r3, r4, r5, pc}
  403d00:	20002d68 	.word	0x20002d68

00403d04 <_lseek_r>:
  403d04:	b570      	push	{r4, r5, r6, lr}
  403d06:	460d      	mov	r5, r1
  403d08:	4c08      	ldr	r4, [pc, #32]	; (403d2c <_lseek_r+0x28>)
  403d0a:	4611      	mov	r1, r2
  403d0c:	4606      	mov	r6, r0
  403d0e:	461a      	mov	r2, r3
  403d10:	4628      	mov	r0, r5
  403d12:	2300      	movs	r3, #0
  403d14:	6023      	str	r3, [r4, #0]
  403d16:	f7fe fbf3 	bl	402500 <_lseek>
  403d1a:	1c43      	adds	r3, r0, #1
  403d1c:	d000      	beq.n	403d20 <_lseek_r+0x1c>
  403d1e:	bd70      	pop	{r4, r5, r6, pc}
  403d20:	6823      	ldr	r3, [r4, #0]
  403d22:	2b00      	cmp	r3, #0
  403d24:	d0fb      	beq.n	403d1e <_lseek_r+0x1a>
  403d26:	6033      	str	r3, [r6, #0]
  403d28:	bd70      	pop	{r4, r5, r6, pc}
  403d2a:	bf00      	nop
  403d2c:	20002d68 	.word	0x20002d68

00403d30 <_read_r>:
  403d30:	b570      	push	{r4, r5, r6, lr}
  403d32:	460d      	mov	r5, r1
  403d34:	4c08      	ldr	r4, [pc, #32]	; (403d58 <_read_r+0x28>)
  403d36:	4611      	mov	r1, r2
  403d38:	4606      	mov	r6, r0
  403d3a:	461a      	mov	r2, r3
  403d3c:	4628      	mov	r0, r5
  403d3e:	2300      	movs	r3, #0
  403d40:	6023      	str	r3, [r4, #0]
  403d42:	f7fd f98d 	bl	401060 <_read>
  403d46:	1c43      	adds	r3, r0, #1
  403d48:	d000      	beq.n	403d4c <_read_r+0x1c>
  403d4a:	bd70      	pop	{r4, r5, r6, pc}
  403d4c:	6823      	ldr	r3, [r4, #0]
  403d4e:	2b00      	cmp	r3, #0
  403d50:	d0fb      	beq.n	403d4a <_read_r+0x1a>
  403d52:	6033      	str	r3, [r6, #0]
  403d54:	bd70      	pop	{r4, r5, r6, pc}
  403d56:	bf00      	nop
  403d58:	20002d68 	.word	0x20002d68
  403d5c:	0001c200 	.word	0x0001c200
  403d60:	000000c0 	.word	0x000000c0
  403d64:	00000800 	.word	0x00000800
  403d68:	00000000 	.word	0x00000000
  403d6c:	69460d0a 	.word	0x69460d0a
  403d70:	61776d72 	.word	0x61776d72
  403d74:	75206572 	.word	0x75206572
  403d78:	74616470 	.word	0x74616470
  403d7c:	0d216465 	.word	0x0d216465
  403d80:	0000000a 	.word	0x0000000a
  403d84:	706d754a 	.word	0x706d754a
  403d88:	20676e69 	.word	0x20676e69
  403d8c:	75206f74 	.word	0x75206f74
  403d90:	20726573 	.word	0x20726573
  403d94:	6c707061 	.word	0x6c707061
  403d98:	74616369 	.word	0x74616369
  403d9c:	2e6e6f69 	.word	0x2e6e6f69
  403da0:	0a0d2e2e 	.word	0x0a0d2e2e
  403da4:	00000000 	.word	0x00000000
  403da8:	3d3d3d3d 	.word	0x3d3d3d3d
  403dac:	3d3d3d3d 	.word	0x3d3d3d3d
  403db0:	3d3d3d3d 	.word	0x3d3d3d3d
  403db4:	3d3d3d3d 	.word	0x3d3d3d3d
  403db8:	3d3d3d3d 	.word	0x3d3d3d3d
  403dbc:	3d3d3d3d 	.word	0x3d3d3d3d
  403dc0:	3d3d3d3d 	.word	0x3d3d3d3d
  403dc4:	3d3d3d3d 	.word	0x3d3d3d3d
  403dc8:	3d3d3d3d 	.word	0x3d3d3d3d
  403dcc:	3d3d3d3d 	.word	0x3d3d3d3d
  403dd0:	00000a0d 	.word	0x00000a0d
  403dd4:	4120203d 	.word	0x4120203d
  403dd8:	4d415354 	.word	0x4d415354
  403ddc:	46205334 	.word	0x46205334
  403de0:	776d7269 	.word	0x776d7269
  403de4:	20657261 	.word	0x20657261
  403de8:	61647055 	.word	0x61647055
  403dec:	42206574 	.word	0x42206574
  403df0:	6c746f6f 	.word	0x6c746f6f
  403df4:	6564616f 	.word	0x6564616f
  403df8:	3d202072 	.word	0x3d202072
  403dfc:	00000a0d 	.word	0x00000a0d
  403e00:	61656c50 	.word	0x61656c50
  403e04:	73206573 	.word	0x73206573
  403e08:	20646e65 	.word	0x20646e65
  403e0c:	656e2061 	.word	0x656e2061
  403e10:	69622077 	.word	0x69622077
  403e14:	7972616e 	.word	0x7972616e
  403e18:	6c696620 	.word	0x6c696620
  403e1c:	69772065 	.word	0x69772065
  403e20:	58206874 	.word	0x58206874
  403e24:	65646f6d 	.word	0x65646f6d
  403e28:	7270206d 	.word	0x7270206d
  403e2c:	636f746f 	.word	0x636f746f
  403e30:	74206c6f 	.word	0x74206c6f
  403e34:	7075206f 	.word	0x7075206f
  403e38:	65746164 	.word	0x65746164
  403e3c:	65687420 	.word	0x65687420
  403e40:	72696620 	.word	0x72696620
  403e44:	7261776d 	.word	0x7261776d
  403e48:	0a0d2e65 	.word	0x0a0d2e65
  403e4c:	00000000 	.word	0x00000000
  403e50:	61460a0d 	.word	0x61460a0d
  403e54:	64656c69 	.word	0x64656c69
  403e58:	202e2e2e 	.word	0x202e2e2e
  403e5c:	61656c50 	.word	0x61656c50
  403e60:	74206573 	.word	0x74206573
  403e64:	61207972 	.word	0x61207972
  403e68:	6e696167 	.word	0x6e696167
  403e6c:	000a0d2e 	.word	0x000a0d2e

00403e70 <_global_impure_ptr>:
  403e70:	20000018                                ... 

00403e74 <_init>:
  403e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e76:	bf00      	nop
  403e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403e7a:	bc08      	pop	{r3}
  403e7c:	469e      	mov	lr, r3
  403e7e:	4770      	bx	lr

00403e80 <__init_array_start>:
  403e80:	0040349d 	.word	0x0040349d

00403e84 <__frame_dummy_init_array_entry>:
  403e84:	004000f1                                ..@.

00403e88 <_fini>:
  403e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e8a:	bf00      	nop
  403e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403e8e:	bc08      	pop	{r3}
  403e90:	469e      	mov	lr, r3
  403e92:	4770      	bx	lr

00403e94 <__fini_array_start>:
  403e94:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <xmodem_packet_number>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__malloc_av_>:
	...
20000448:	0440 2000 0440 2000 0448 2000 0448 2000     @.. @.. H.. H.. 
20000458:	0450 2000 0450 2000 0458 2000 0458 2000     P.. P.. X.. X.. 
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 

20000848 <__malloc_sbrk_base>:
20000848:	ffff ffff                                   ....

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__atexit_recursive_mutex>:
20000850:	2d44 2000                                   D-. 

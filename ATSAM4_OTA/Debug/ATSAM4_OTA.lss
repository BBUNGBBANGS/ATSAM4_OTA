
ATSAM4_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005634  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405634  00405634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  0040563c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000518  200009c0  00405ffc  000209c0  2**2
                  ALLOC
  4 .stack        00003000  20000ed8  00406514  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  7 .debug_info   00011dc7  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026cf  00000000  00000000  0003280a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005dce  00000000  00000000  00034ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a70  00000000  00000000  0003aca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009a8  00000000  00000000  0003b717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015122  00000000  00000000  0003c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d4e3  00000000  00000000  000511e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055dd9  00000000  00000000  0005e6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003840  00000000  00000000  000b44a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 3e 00 20 a5 1f 40 00 6d 20 40 00 6d 20 40 00     .>. ..@.m @.m @.
  400010:	6d 20 40 00 6d 20 40 00 6d 20 40 00 00 00 00 00     m @.m @.m @.....
	...
  40002c:	6d 20 40 00 6d 20 40 00 00 00 00 00 6d 20 40 00     m @.m @.....m @.
  40003c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  40004c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  40005c:	6d 20 40 00 6d 20 40 00 11 06 40 00 00 00 00 00     m @.m @...@.....
  40006c:	b9 18 40 00 d1 18 40 00 e9 18 40 00 6d 20 40 00     ..@...@...@.m @.
  40007c:	6d 20 40 00 00 00 00 00 00 00 00 00 6d 20 40 00     m @.........m @.
  40008c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  40009c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  4000ac:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  4000bc:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009c0 	.word	0x200009c0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040563c 	.word	0x0040563c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040563c 	.word	0x0040563c
  40012c:	200009c4 	.word	0x200009c4
  400130:	0040563c 	.word	0x0040563c
  400134:	00000000 	.word	0x00000000

00400138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400138:	b480      	push	{r7}
  40013a:	b083      	sub	sp, #12
  40013c:	af00      	add	r7, sp, #0
  40013e:	4603      	mov	r3, r0
  400140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400142:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400146:	2b00      	cmp	r3, #0
  400148:	db0b      	blt.n	400162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40014a:	4908      	ldr	r1, [pc, #32]	; (40016c <__NVIC_EnableIRQ+0x34>)
  40014c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400150:	095b      	lsrs	r3, r3, #5
  400152:	79fa      	ldrb	r2, [r7, #7]
  400154:	f002 021f 	and.w	r2, r2, #31
  400158:	2001      	movs	r0, #1
  40015a:	fa00 f202 	lsl.w	r2, r0, r2
  40015e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400162:	bf00      	nop
  400164:	370c      	adds	r7, #12
  400166:	46bd      	mov	sp, r7
  400168:	bc80      	pop	{r7}
  40016a:	4770      	bx	lr
  40016c:	e000e100 	.word	0xe000e100

00400170 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400170:	b480      	push	{r7}
  400172:	b083      	sub	sp, #12
  400174:	af00      	add	r7, sp, #0
  400176:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400178:	687b      	ldr	r3, [r7, #4]
  40017a:	2b07      	cmp	r3, #7
  40017c:	d825      	bhi.n	4001ca <osc_get_rate+0x5a>
  40017e:	a201      	add	r2, pc, #4	; (adr r2, 400184 <osc_get_rate+0x14>)
  400180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400184:	004001a5 	.word	0x004001a5
  400188:	004001ab 	.word	0x004001ab
  40018c:	004001b1 	.word	0x004001b1
  400190:	004001b7 	.word	0x004001b7
  400194:	004001bb 	.word	0x004001bb
  400198:	004001bf 	.word	0x004001bf
  40019c:	004001c3 	.word	0x004001c3
  4001a0:	004001c7 	.word	0x004001c7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4001a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4001a8:	e010      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4001aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001ae:	e00d      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4001b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001b4:	e00a      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4001b6:	4b08      	ldr	r3, [pc, #32]	; (4001d8 <osc_get_rate+0x68>)
  4001b8:	e008      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4001ba:	4b08      	ldr	r3, [pc, #32]	; (4001dc <osc_get_rate+0x6c>)
  4001bc:	e006      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4001be:	4b08      	ldr	r3, [pc, #32]	; (4001e0 <osc_get_rate+0x70>)
  4001c0:	e004      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4001c2:	4b07      	ldr	r3, [pc, #28]	; (4001e0 <osc_get_rate+0x70>)
  4001c4:	e002      	b.n	4001cc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4001c6:	4b06      	ldr	r3, [pc, #24]	; (4001e0 <osc_get_rate+0x70>)
  4001c8:	e000      	b.n	4001cc <osc_get_rate+0x5c>
	}

	return 0;
  4001ca:	2300      	movs	r3, #0
}
  4001cc:	4618      	mov	r0, r3
  4001ce:	370c      	adds	r7, #12
  4001d0:	46bd      	mov	sp, r7
  4001d2:	bc80      	pop	{r7}
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	003d0900 	.word	0x003d0900
  4001dc:	007a1200 	.word	0x007a1200
  4001e0:	00b71b00 	.word	0x00b71b00

004001e4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4001e4:	b580      	push	{r7, lr}
  4001e6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001e8:	2006      	movs	r0, #6
  4001ea:	4b04      	ldr	r3, [pc, #16]	; (4001fc <sysclk_get_main_hz+0x18>)
  4001ec:	4798      	blx	r3
  4001ee:	4602      	mov	r2, r0
  4001f0:	4613      	mov	r3, r2
  4001f2:	009b      	lsls	r3, r3, #2
  4001f4:	4413      	add	r3, r2
  4001f6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001f8:	4618      	mov	r0, r3
  4001fa:	bd80      	pop	{r7, pc}
  4001fc:	00400171 	.word	0x00400171

00400200 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400200:	b580      	push	{r7, lr}
  400202:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400204:	4b02      	ldr	r3, [pc, #8]	; (400210 <sysclk_get_peripheral_hz+0x10>)
  400206:	4798      	blx	r3
  400208:	4603      	mov	r3, r0
  40020a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40020c:	4618      	mov	r0, r3
  40020e:	bd80      	pop	{r7, pc}
  400210:	004001e5 	.word	0x004001e5

00400214 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400214:	b580      	push	{r7, lr}
  400216:	b082      	sub	sp, #8
  400218:	af00      	add	r7, sp, #0
  40021a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40021c:	6878      	ldr	r0, [r7, #4]
  40021e:	4b03      	ldr	r3, [pc, #12]	; (40022c <sysclk_enable_peripheral_clock+0x18>)
  400220:	4798      	blx	r3
}
  400222:	bf00      	nop
  400224:	3708      	adds	r7, #8
  400226:	46bd      	mov	sp, r7
  400228:	bd80      	pop	{r7, pc}
  40022a:	bf00      	nop
  40022c:	00401b4d 	.word	0x00401b4d

00400230 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  400230:	b580      	push	{r7, lr}
  400232:	b08c      	sub	sp, #48	; 0x30
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
  400238:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40023a:	4b31      	ldr	r3, [pc, #196]	; (400300 <usart_serial_init+0xd0>)
  40023c:	4798      	blx	r3
  40023e:	4603      	mov	r3, r0
  400240:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  400242:	683b      	ldr	r3, [r7, #0]
  400244:	681b      	ldr	r3, [r3, #0]
  400246:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  400248:	683b      	ldr	r3, [r7, #0]
  40024a:	689b      	ldr	r3, [r3, #8]
  40024c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40024e:	683b      	ldr	r3, [r7, #0]
  400250:	681b      	ldr	r3, [r3, #0]
  400252:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  400254:	683b      	ldr	r3, [r7, #0]
  400256:	685b      	ldr	r3, [r3, #4]
  400258:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40025a:	683b      	ldr	r3, [r7, #0]
  40025c:	689b      	ldr	r3, [r3, #8]
  40025e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  400260:	683b      	ldr	r3, [r7, #0]
  400262:	68db      	ldr	r3, [r3, #12]
  400264:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400266:	2300      	movs	r3, #0
  400268:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40026a:	687b      	ldr	r3, [r7, #4]
  40026c:	4a25      	ldr	r2, [pc, #148]	; (400304 <usart_serial_init+0xd4>)
  40026e:	4293      	cmp	r3, r2
  400270:	d108      	bne.n	400284 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  400272:	2008      	movs	r0, #8
  400274:	4b24      	ldr	r3, [pc, #144]	; (400308 <usart_serial_init+0xd8>)
  400276:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400278:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40027c:	4619      	mov	r1, r3
  40027e:	6878      	ldr	r0, [r7, #4]
  400280:	4b22      	ldr	r3, [pc, #136]	; (40030c <usart_serial_init+0xdc>)
  400282:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	4a22      	ldr	r2, [pc, #136]	; (400310 <usart_serial_init+0xe0>)
  400288:	4293      	cmp	r3, r2
  40028a:	d108      	bne.n	40029e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40028c:	2009      	movs	r0, #9
  40028e:	4b1e      	ldr	r3, [pc, #120]	; (400308 <usart_serial_init+0xd8>)
  400290:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400292:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400296:	4619      	mov	r1, r3
  400298:	6878      	ldr	r0, [r7, #4]
  40029a:	4b1c      	ldr	r3, [pc, #112]	; (40030c <usart_serial_init+0xdc>)
  40029c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40029e:	687b      	ldr	r3, [r7, #4]
  4002a0:	4a1c      	ldr	r2, [pc, #112]	; (400314 <usart_serial_init+0xe4>)
  4002a2:	4293      	cmp	r3, r2
  4002a4:	d111      	bne.n	4002ca <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4002a6:	200e      	movs	r0, #14
  4002a8:	4b17      	ldr	r3, [pc, #92]	; (400308 <usart_serial_init+0xd8>)
  4002aa:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002ac:	4b14      	ldr	r3, [pc, #80]	; (400300 <usart_serial_init+0xd0>)
  4002ae:	4798      	blx	r3
  4002b0:	4602      	mov	r2, r0
  4002b2:	f107 030c 	add.w	r3, r7, #12
  4002b6:	4619      	mov	r1, r3
  4002b8:	6878      	ldr	r0, [r7, #4]
  4002ba:	4b17      	ldr	r3, [pc, #92]	; (400318 <usart_serial_init+0xe8>)
  4002bc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002be:	6878      	ldr	r0, [r7, #4]
  4002c0:	4b16      	ldr	r3, [pc, #88]	; (40031c <usart_serial_init+0xec>)
  4002c2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4002c4:	6878      	ldr	r0, [r7, #4]
  4002c6:	4b16      	ldr	r3, [pc, #88]	; (400320 <usart_serial_init+0xf0>)
  4002c8:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	4a15      	ldr	r2, [pc, #84]	; (400324 <usart_serial_init+0xf4>)
  4002ce:	4293      	cmp	r3, r2
  4002d0:	d111      	bne.n	4002f6 <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4002d2:	200f      	movs	r0, #15
  4002d4:	4b0c      	ldr	r3, [pc, #48]	; (400308 <usart_serial_init+0xd8>)
  4002d6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4002d8:	4b09      	ldr	r3, [pc, #36]	; (400300 <usart_serial_init+0xd0>)
  4002da:	4798      	blx	r3
  4002dc:	4602      	mov	r2, r0
  4002de:	f107 030c 	add.w	r3, r7, #12
  4002e2:	4619      	mov	r1, r3
  4002e4:	6878      	ldr	r0, [r7, #4]
  4002e6:	4b0c      	ldr	r3, [pc, #48]	; (400318 <usart_serial_init+0xe8>)
  4002e8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4002ea:	6878      	ldr	r0, [r7, #4]
  4002ec:	4b0b      	ldr	r3, [pc, #44]	; (40031c <usart_serial_init+0xec>)
  4002ee:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4002f0:	6878      	ldr	r0, [r7, #4]
  4002f2:	4b0b      	ldr	r3, [pc, #44]	; (400320 <usart_serial_init+0xf0>)
  4002f4:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4002f6:	bf00      	nop
  4002f8:	3730      	adds	r7, #48	; 0x30
  4002fa:	46bd      	mov	sp, r7
  4002fc:	bd80      	pop	{r7, pc}
  4002fe:	bf00      	nop
  400300:	00400201 	.word	0x00400201
  400304:	400e0600 	.word	0x400e0600
  400308:	00400215 	.word	0x00400215
  40030c:	00401bcd 	.word	0x00401bcd
  400310:	400e0800 	.word	0x400e0800
  400314:	40024000 	.word	0x40024000
  400318:	00401d75 	.word	0x00401d75
  40031c:	00401df9 	.word	0x00401df9
  400320:	00401e29 	.word	0x00401e29
  400324:	40028000 	.word	0x40028000

00400328 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400328:	b580      	push	{r7, lr}
  40032a:	b082      	sub	sp, #8
  40032c:	af00      	add	r7, sp, #0
  40032e:	6078      	str	r0, [r7, #4]
  400330:	460b      	mov	r3, r1
  400332:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400334:	687b      	ldr	r3, [r7, #4]
  400336:	4a20      	ldr	r2, [pc, #128]	; (4003b8 <usart_serial_putchar+0x90>)
  400338:	4293      	cmp	r3, r2
  40033a:	d10a      	bne.n	400352 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40033c:	bf00      	nop
  40033e:	78fb      	ldrb	r3, [r7, #3]
  400340:	4619      	mov	r1, r3
  400342:	6878      	ldr	r0, [r7, #4]
  400344:	4b1d      	ldr	r3, [pc, #116]	; (4003bc <usart_serial_putchar+0x94>)
  400346:	4798      	blx	r3
  400348:	4603      	mov	r3, r0
  40034a:	2b00      	cmp	r3, #0
  40034c:	d1f7      	bne.n	40033e <usart_serial_putchar+0x16>
		return 1;
  40034e:	2301      	movs	r3, #1
  400350:	e02d      	b.n	4003ae <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400352:	687b      	ldr	r3, [r7, #4]
  400354:	4a1a      	ldr	r2, [pc, #104]	; (4003c0 <usart_serial_putchar+0x98>)
  400356:	4293      	cmp	r3, r2
  400358:	d10a      	bne.n	400370 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40035a:	bf00      	nop
  40035c:	78fb      	ldrb	r3, [r7, #3]
  40035e:	4619      	mov	r1, r3
  400360:	6878      	ldr	r0, [r7, #4]
  400362:	4b16      	ldr	r3, [pc, #88]	; (4003bc <usart_serial_putchar+0x94>)
  400364:	4798      	blx	r3
  400366:	4603      	mov	r3, r0
  400368:	2b00      	cmp	r3, #0
  40036a:	d1f7      	bne.n	40035c <usart_serial_putchar+0x34>
		return 1;
  40036c:	2301      	movs	r3, #1
  40036e:	e01e      	b.n	4003ae <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	4a14      	ldr	r2, [pc, #80]	; (4003c4 <usart_serial_putchar+0x9c>)
  400374:	4293      	cmp	r3, r2
  400376:	d10a      	bne.n	40038e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  400378:	bf00      	nop
  40037a:	78fb      	ldrb	r3, [r7, #3]
  40037c:	4619      	mov	r1, r3
  40037e:	6878      	ldr	r0, [r7, #4]
  400380:	4b11      	ldr	r3, [pc, #68]	; (4003c8 <usart_serial_putchar+0xa0>)
  400382:	4798      	blx	r3
  400384:	4603      	mov	r3, r0
  400386:	2b00      	cmp	r3, #0
  400388:	d1f7      	bne.n	40037a <usart_serial_putchar+0x52>
		return 1;
  40038a:	2301      	movs	r3, #1
  40038c:	e00f      	b.n	4003ae <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40038e:	687b      	ldr	r3, [r7, #4]
  400390:	4a0e      	ldr	r2, [pc, #56]	; (4003cc <usart_serial_putchar+0xa4>)
  400392:	4293      	cmp	r3, r2
  400394:	d10a      	bne.n	4003ac <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  400396:	bf00      	nop
  400398:	78fb      	ldrb	r3, [r7, #3]
  40039a:	4619      	mov	r1, r3
  40039c:	6878      	ldr	r0, [r7, #4]
  40039e:	4b0a      	ldr	r3, [pc, #40]	; (4003c8 <usart_serial_putchar+0xa0>)
  4003a0:	4798      	blx	r3
  4003a2:	4603      	mov	r3, r0
  4003a4:	2b00      	cmp	r3, #0
  4003a6:	d1f7      	bne.n	400398 <usart_serial_putchar+0x70>
		return 1;
  4003a8:	2301      	movs	r3, #1
  4003aa:	e000      	b.n	4003ae <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4003ac:	2300      	movs	r3, #0
}
  4003ae:	4618      	mov	r0, r3
  4003b0:	3708      	adds	r7, #8
  4003b2:	46bd      	mov	sp, r7
  4003b4:	bd80      	pop	{r7, pc}
  4003b6:	bf00      	nop
  4003b8:	400e0600 	.word	0x400e0600
  4003bc:	00401c2d 	.word	0x00401c2d
  4003c0:	400e0800 	.word	0x400e0800
  4003c4:	40024000 	.word	0x40024000
  4003c8:	00401ed7 	.word	0x00401ed7
  4003cc:	40028000 	.word	0x40028000

004003d0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4003d0:	b580      	push	{r7, lr}
  4003d2:	b084      	sub	sp, #16
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4003da:	2300      	movs	r3, #0
  4003dc:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4003de:	687b      	ldr	r3, [r7, #4]
  4003e0:	4a1f      	ldr	r2, [pc, #124]	; (400460 <usart_serial_getchar+0x90>)
  4003e2:	4293      	cmp	r3, r2
  4003e4:	d107      	bne.n	4003f6 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4003e6:	bf00      	nop
  4003e8:	6839      	ldr	r1, [r7, #0]
  4003ea:	6878      	ldr	r0, [r7, #4]
  4003ec:	4b1d      	ldr	r3, [pc, #116]	; (400464 <usart_serial_getchar+0x94>)
  4003ee:	4798      	blx	r3
  4003f0:	4603      	mov	r3, r0
  4003f2:	2b00      	cmp	r3, #0
  4003f4:	d1f8      	bne.n	4003e8 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4003f6:	687b      	ldr	r3, [r7, #4]
  4003f8:	4a1b      	ldr	r2, [pc, #108]	; (400468 <usart_serial_getchar+0x98>)
  4003fa:	4293      	cmp	r3, r2
  4003fc:	d107      	bne.n	40040e <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4003fe:	bf00      	nop
  400400:	6839      	ldr	r1, [r7, #0]
  400402:	6878      	ldr	r0, [r7, #4]
  400404:	4b17      	ldr	r3, [pc, #92]	; (400464 <usart_serial_getchar+0x94>)
  400406:	4798      	blx	r3
  400408:	4603      	mov	r3, r0
  40040a:	2b00      	cmp	r3, #0
  40040c:	d1f8      	bne.n	400400 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40040e:	687b      	ldr	r3, [r7, #4]
  400410:	4a16      	ldr	r2, [pc, #88]	; (40046c <usart_serial_getchar+0x9c>)
  400412:	4293      	cmp	r3, r2
  400414:	d10d      	bne.n	400432 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  400416:	bf00      	nop
  400418:	f107 030c 	add.w	r3, r7, #12
  40041c:	4619      	mov	r1, r3
  40041e:	6878      	ldr	r0, [r7, #4]
  400420:	4b13      	ldr	r3, [pc, #76]	; (400470 <usart_serial_getchar+0xa0>)
  400422:	4798      	blx	r3
  400424:	4603      	mov	r3, r0
  400426:	2b00      	cmp	r3, #0
  400428:	d1f6      	bne.n	400418 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  40042a:	68fb      	ldr	r3, [r7, #12]
  40042c:	b2da      	uxtb	r2, r3
  40042e:	683b      	ldr	r3, [r7, #0]
  400430:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400432:	687b      	ldr	r3, [r7, #4]
  400434:	4a0f      	ldr	r2, [pc, #60]	; (400474 <usart_serial_getchar+0xa4>)
  400436:	4293      	cmp	r3, r2
  400438:	d10d      	bne.n	400456 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  40043a:	bf00      	nop
  40043c:	f107 030c 	add.w	r3, r7, #12
  400440:	4619      	mov	r1, r3
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b0a      	ldr	r3, [pc, #40]	; (400470 <usart_serial_getchar+0xa0>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d1f6      	bne.n	40043c <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  40044e:	68fb      	ldr	r3, [r7, #12]
  400450:	b2da      	uxtb	r2, r3
  400452:	683b      	ldr	r3, [r7, #0]
  400454:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400456:	bf00      	nop
  400458:	3710      	adds	r7, #16
  40045a:	46bd      	mov	sp, r7
  40045c:	bd80      	pop	{r7, pc}
  40045e:	bf00      	nop
  400460:	400e0600 	.word	0x400e0600
  400464:	00401c5b 	.word	0x00401c5b
  400468:	400e0800 	.word	0x400e0800
  40046c:	40024000 	.word	0x40024000
  400470:	00401f07 	.word	0x00401f07
  400474:	40028000 	.word	0x40028000

00400478 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  400478:	b580      	push	{r7, lr}
  40047a:	b082      	sub	sp, #8
  40047c:	af00      	add	r7, sp, #0
  40047e:	6078      	str	r0, [r7, #4]
  400480:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  400482:	4a0f      	ldr	r2, [pc, #60]	; (4004c0 <stdio_serial_init+0x48>)
  400484:	687b      	ldr	r3, [r7, #4]
  400486:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400488:	4b0e      	ldr	r3, [pc, #56]	; (4004c4 <stdio_serial_init+0x4c>)
  40048a:	4a0f      	ldr	r2, [pc, #60]	; (4004c8 <stdio_serial_init+0x50>)
  40048c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40048e:	4b0f      	ldr	r3, [pc, #60]	; (4004cc <stdio_serial_init+0x54>)
  400490:	4a0f      	ldr	r2, [pc, #60]	; (4004d0 <stdio_serial_init+0x58>)
  400492:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  400494:	6839      	ldr	r1, [r7, #0]
  400496:	6878      	ldr	r0, [r7, #4]
  400498:	4b0e      	ldr	r3, [pc, #56]	; (4004d4 <stdio_serial_init+0x5c>)
  40049a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40049c:	4b0e      	ldr	r3, [pc, #56]	; (4004d8 <stdio_serial_init+0x60>)
  40049e:	681b      	ldr	r3, [r3, #0]
  4004a0:	689b      	ldr	r3, [r3, #8]
  4004a2:	2100      	movs	r1, #0
  4004a4:	4618      	mov	r0, r3
  4004a6:	4b0d      	ldr	r3, [pc, #52]	; (4004dc <stdio_serial_init+0x64>)
  4004a8:	4798      	blx	r3
	setbuf(stdin, NULL);
  4004aa:	4b0b      	ldr	r3, [pc, #44]	; (4004d8 <stdio_serial_init+0x60>)
  4004ac:	681b      	ldr	r3, [r3, #0]
  4004ae:	685b      	ldr	r3, [r3, #4]
  4004b0:	2100      	movs	r1, #0
  4004b2:	4618      	mov	r0, r3
  4004b4:	4b09      	ldr	r3, [pc, #36]	; (4004dc <stdio_serial_init+0x64>)
  4004b6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4004b8:	bf00      	nop
  4004ba:	3708      	adds	r7, #8
  4004bc:	46bd      	mov	sp, r7
  4004be:	bd80      	pop	{r7, pc}
  4004c0:	20000ea8 	.word	0x20000ea8
  4004c4:	20000ea4 	.word	0x20000ea4
  4004c8:	00400329 	.word	0x00400329
  4004cc:	20000ea0 	.word	0x20000ea0
  4004d0:	004003d1 	.word	0x004003d1
  4004d4:	00400231 	.word	0x00400231
  4004d8:	20000010 	.word	0x20000010
  4004dc:	00402dad 	.word	0x00402dad

004004e0 <Boot_Uart_Init>:

uint8_t Uart_Buffer[1029];
uint16_t Uart_Buffer_Length;
uint8_t Uart_Packet_Received_Flag;
void Boot_Uart_Init(void)
{
  4004e0:	b590      	push	{r4, r7, lr}
  4004e2:	b085      	sub	sp, #20
  4004e4:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = 
  4004e6:	4b0c      	ldr	r3, [pc, #48]	; (400518 <Boot_Uart_Init+0x38>)
  4004e8:	463c      	mov	r4, r7
  4004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4004ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits =	CONF_UART_STOP_BITS,
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(ID_UART1);
  4004f0:	2009      	movs	r0, #9
  4004f2:	4b0a      	ldr	r3, [pc, #40]	; (40051c <Boot_Uart_Init+0x3c>)
  4004f4:	4798      	blx	r3
	stdio_serial_init(UART1, &uart_serial_options);
  4004f6:	463b      	mov	r3, r7
  4004f8:	4619      	mov	r1, r3
  4004fa:	4809      	ldr	r0, [pc, #36]	; (400520 <Boot_Uart_Init+0x40>)
  4004fc:	4b09      	ldr	r3, [pc, #36]	; (400524 <Boot_Uart_Init+0x44>)
  4004fe:	4798      	blx	r3
	usart_enable_interrupt(UART1, US_IER_RXRDY); // UART RX 인터럽트 활성화
  400500:	2101      	movs	r1, #1
  400502:	4807      	ldr	r0, [pc, #28]	; (400520 <Boot_Uart_Init+0x40>)
  400504:	4b08      	ldr	r3, [pc, #32]	; (400528 <Boot_Uart_Init+0x48>)
  400506:	4798      	blx	r3
    NVIC_EnableIRQ(UART1_IRQn); // 전체 인터럽트 활성화
  400508:	2009      	movs	r0, #9
  40050a:	4b08      	ldr	r3, [pc, #32]	; (40052c <Boot_Uart_Init+0x4c>)
  40050c:	4798      	blx	r3
}
  40050e:	bf00      	nop
  400510:	3714      	adds	r7, #20
  400512:	46bd      	mov	sp, r7
  400514:	bd90      	pop	{r4, r7, pc}
  400516:	bf00      	nop
  400518:	0040537c 	.word	0x0040537c
  40051c:	00400215 	.word	0x00400215
  400520:	400e0800 	.word	0x400e0800
  400524:	00400479 	.word	0x00400479
  400528:	00401e59 	.word	0x00401e59
  40052c:	00400139 	.word	0x00400139

00400530 <uart_transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_ch(uint8_t data)
{
  400530:	b580      	push	{r7, lr}
  400532:	b084      	sub	sp, #16
  400534:	af00      	add	r7, sp, #0
  400536:	4603      	mov	r3, r0
  400538:	71fb      	strb	r3, [r7, #7]
	uart_status status = UART_ERROR;
  40053a:	23ff      	movs	r3, #255	; 0xff
  40053c:	73fb      	strb	r3, [r7, #15]

	if(uart_write(UART1,data) == 0)
  40053e:	79fb      	ldrb	r3, [r7, #7]
  400540:	4619      	mov	r1, r3
  400542:	4806      	ldr	r0, [pc, #24]	; (40055c <uart_transmit_ch+0x2c>)
  400544:	4b06      	ldr	r3, [pc, #24]	; (400560 <uart_transmit_ch+0x30>)
  400546:	4798      	blx	r3
  400548:	4603      	mov	r3, r0
  40054a:	2b00      	cmp	r3, #0
  40054c:	d101      	bne.n	400552 <uart_transmit_ch+0x22>
	{
		status = UART_OK;
  40054e:	2300      	movs	r3, #0
  400550:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  400552:	7bfb      	ldrb	r3, [r7, #15]
}
  400554:	4618      	mov	r0, r3
  400556:	3710      	adds	r7, #16
  400558:	46bd      	mov	sp, r7
  40055a:	bd80      	pop	{r7, pc}
  40055c:	400e0800 	.word	0x400e0800
  400560:	00401c2d 	.word	0x00401c2d

00400564 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
  400564:	b590      	push	{r4, r7, lr}
  400566:	b085      	sub	sp, #20
  400568:	af00      	add	r7, sp, #0
  40056a:	6078      	str	r0, [r7, #4]
	uart_status status = UART_ERROR;
  40056c:	23ff      	movs	r3, #255	; 0xff
  40056e:	737b      	strb	r3, [r7, #13]

	/* Calculate the length. */
	for(uint16_t i = 0; i < strlen(data); i++)
  400570:	2300      	movs	r3, #0
  400572:	81fb      	strh	r3, [r7, #14]
  400574:	e00e      	b.n	400594 <uart_transmit_str+0x30>
	{
		if (UART_ERROR == uart_transmit_ch(data[i]))
  400576:	89fb      	ldrh	r3, [r7, #14]
  400578:	687a      	ldr	r2, [r7, #4]
  40057a:	4413      	add	r3, r2
  40057c:	781b      	ldrb	r3, [r3, #0]
  40057e:	4618      	mov	r0, r3
  400580:	4b0b      	ldr	r3, [pc, #44]	; (4005b0 <uart_transmit_str+0x4c>)
  400582:	4798      	blx	r3
  400584:	4603      	mov	r3, r0
  400586:	2bff      	cmp	r3, #255	; 0xff
  400588:	d101      	bne.n	40058e <uart_transmit_str+0x2a>
		{
			return status;
  40058a:	7b7b      	ldrb	r3, [r7, #13]
  40058c:	e00c      	b.n	4005a8 <uart_transmit_str+0x44>
	for(uint16_t i = 0; i < strlen(data); i++)
  40058e:	89fb      	ldrh	r3, [r7, #14]
  400590:	3301      	adds	r3, #1
  400592:	81fb      	strh	r3, [r7, #14]
  400594:	89fc      	ldrh	r4, [r7, #14]
  400596:	6878      	ldr	r0, [r7, #4]
  400598:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <uart_transmit_str+0x50>)
  40059a:	4798      	blx	r3
  40059c:	4603      	mov	r3, r0
  40059e:	429c      	cmp	r4, r3
  4005a0:	d3e9      	bcc.n	400576 <uart_transmit_str+0x12>
		}
	}

	status = UART_OK;
  4005a2:	2300      	movs	r3, #0
  4005a4:	737b      	strb	r3, [r7, #13]

	return status;
  4005a6:	7b7b      	ldrb	r3, [r7, #13]
}
  4005a8:	4618      	mov	r0, r3
  4005aa:	3714      	adds	r7, #20
  4005ac:	46bd      	mov	sp, r7
  4005ae:	bd90      	pop	{r4, r7, pc}
  4005b0:	00400531 	.word	0x00400531
  4005b4:	00402f81 	.word	0x00402f81

004005b8 <uart_receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status uart_receive(uint8_t *data, uint16_t length)
{
  4005b8:	b480      	push	{r7}
  4005ba:	b085      	sub	sp, #20
  4005bc:	af00      	add	r7, sp, #0
  4005be:	6078      	str	r0, [r7, #4]
  4005c0:	460b      	mov	r3, r1
  4005c2:	807b      	strh	r3, [r7, #2]
	uart_status status = UART_ERROR;
  4005c4:	23ff      	movs	r3, #255	; 0xff
  4005c6:	73fb      	strb	r3, [r7, #15]

	if(Uart_Buffer_Length > 0)
  4005c8:	4b0f      	ldr	r3, [pc, #60]	; (400608 <uart_receive+0x50>)
  4005ca:	881b      	ldrh	r3, [r3, #0]
  4005cc:	2b00      	cmp	r3, #0
  4005ce:	d013      	beq.n	4005f8 <uart_receive+0x40>
	{
		for(uint16_t i = 0; i < length; i++)
  4005d0:	2300      	movs	r3, #0
  4005d2:	81bb      	strh	r3, [r7, #12]
  4005d4:	e009      	b.n	4005ea <uart_receive+0x32>
		{
			*(data+i) = Uart_Buffer[i];
  4005d6:	89bb      	ldrh	r3, [r7, #12]
  4005d8:	687a      	ldr	r2, [r7, #4]
  4005da:	4413      	add	r3, r2
  4005dc:	89ba      	ldrh	r2, [r7, #12]
  4005de:	490b      	ldr	r1, [pc, #44]	; (40060c <uart_receive+0x54>)
  4005e0:	5c8a      	ldrb	r2, [r1, r2]
  4005e2:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 0; i < length; i++)
  4005e4:	89bb      	ldrh	r3, [r7, #12]
  4005e6:	3301      	adds	r3, #1
  4005e8:	81bb      	strh	r3, [r7, #12]
  4005ea:	89ba      	ldrh	r2, [r7, #12]
  4005ec:	887b      	ldrh	r3, [r7, #2]
  4005ee:	429a      	cmp	r2, r3
  4005f0:	d3f1      	bcc.n	4005d6 <uart_receive+0x1e>
		}
		status = UART_OK;
  4005f2:	2300      	movs	r3, #0
  4005f4:	73fb      	strb	r3, [r7, #15]
  4005f6:	e001      	b.n	4005fc <uart_receive+0x44>
	}
	else
	{
		status = UART_ERROR;
  4005f8:	23ff      	movs	r3, #255	; 0xff
  4005fa:	73fb      	strb	r3, [r7, #15]
	}

	return status;
  4005fc:	7bfb      	ldrb	r3, [r7, #15]
}
  4005fe:	4618      	mov	r0, r3
  400600:	3714      	adds	r7, #20
  400602:	46bd      	mov	sp, r7
  400604:	bc80      	pop	{r7}
  400606:	4770      	bx	lr
  400608:	20000a96 	.word	0x20000a96
  40060c:	20000a98 	.word	0x20000a98

00400610 <UART1_Handler>:

void UART1_Handler(void)
{
  400610:	b580      	push	{r7, lr}
  400612:	af00      	add	r7, sp, #0
    if (usart_get_interrupt_mask(UART1) & US_IER_RXRDY) 
  400614:	4812      	ldr	r0, [pc, #72]	; (400660 <UART1_Handler+0x50>)
  400616:	4b13      	ldr	r3, [pc, #76]	; (400664 <UART1_Handler+0x54>)
  400618:	4798      	blx	r3
  40061a:	4603      	mov	r3, r0
  40061c:	f003 0301 	and.w	r3, r3, #1
  400620:	2b00      	cmp	r3, #0
  400622:	d01a      	beq.n	40065a <UART1_Handler+0x4a>
	{
        usart_getchar(UART1,&Uart_Buffer[Uart_Buffer_Length]); 
  400624:	4b10      	ldr	r3, [pc, #64]	; (400668 <UART1_Handler+0x58>)
  400626:	881b      	ldrh	r3, [r3, #0]
  400628:	461a      	mov	r2, r3
  40062a:	4b10      	ldr	r3, [pc, #64]	; (40066c <UART1_Handler+0x5c>)
  40062c:	4413      	add	r3, r2
  40062e:	4619      	mov	r1, r3
  400630:	480b      	ldr	r0, [pc, #44]	; (400660 <UART1_Handler+0x50>)
  400632:	4b0f      	ldr	r3, [pc, #60]	; (400670 <UART1_Handler+0x60>)
  400634:	4798      	blx	r3
		Uart_Buffer_Length++;
  400636:	4b0c      	ldr	r3, [pc, #48]	; (400668 <UART1_Handler+0x58>)
  400638:	881b      	ldrh	r3, [r3, #0]
  40063a:	3301      	adds	r3, #1
  40063c:	b29a      	uxth	r2, r3
  40063e:	4b0a      	ldr	r3, [pc, #40]	; (400668 <UART1_Handler+0x58>)
  400640:	801a      	strh	r2, [r3, #0]
		if (Uart_Buffer_Length == 1029)
  400642:	4b09      	ldr	r3, [pc, #36]	; (400668 <UART1_Handler+0x58>)
  400644:	881b      	ldrh	r3, [r3, #0]
  400646:	f240 4205 	movw	r2, #1029	; 0x405
  40064a:	4293      	cmp	r3, r2
  40064c:	d105      	bne.n	40065a <UART1_Handler+0x4a>
		{
			Uart_Packet_Received_Flag = 1;
  40064e:	4b09      	ldr	r3, [pc, #36]	; (400674 <UART1_Handler+0x64>)
  400650:	2201      	movs	r2, #1
  400652:	701a      	strb	r2, [r3, #0]
			Uart_Buffer_Length = 0;
  400654:	4b04      	ldr	r3, [pc, #16]	; (400668 <UART1_Handler+0x58>)
  400656:	2200      	movs	r2, #0
  400658:	801a      	strh	r2, [r3, #0]
		}
    }
}
  40065a:	bf00      	nop
  40065c:	bd80      	pop	{r7, pc}
  40065e:	bf00      	nop
  400660:	400e0800 	.word	0x400e0800
  400664:	00401e73 	.word	0x00401e73
  400668:	20000a96 	.word	0x20000a96
  40066c:	20000a98 	.word	0x20000a98
  400670:	00401f39 	.word	0x00401f39
  400674:	20000a94 	.word	0x20000a94

00400678 <osc_get_rate>:
{
  400678:	b480      	push	{r7}
  40067a:	b083      	sub	sp, #12
  40067c:	af00      	add	r7, sp, #0
  40067e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400680:	687b      	ldr	r3, [r7, #4]
  400682:	2b07      	cmp	r3, #7
  400684:	d825      	bhi.n	4006d2 <osc_get_rate+0x5a>
  400686:	a201      	add	r2, pc, #4	; (adr r2, 40068c <osc_get_rate+0x14>)
  400688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40068c:	004006ad 	.word	0x004006ad
  400690:	004006b3 	.word	0x004006b3
  400694:	004006b9 	.word	0x004006b9
  400698:	004006bf 	.word	0x004006bf
  40069c:	004006c3 	.word	0x004006c3
  4006a0:	004006c7 	.word	0x004006c7
  4006a4:	004006cb 	.word	0x004006cb
  4006a8:	004006cf 	.word	0x004006cf
		return OSC_SLCK_32K_RC_HZ;
  4006ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4006b0:	e010      	b.n	4006d4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4006b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006b6:	e00d      	b.n	4006d4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4006b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006bc:	e00a      	b.n	4006d4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4006be:	4b08      	ldr	r3, [pc, #32]	; (4006e0 <osc_get_rate+0x68>)
  4006c0:	e008      	b.n	4006d4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4006c2:	4b08      	ldr	r3, [pc, #32]	; (4006e4 <osc_get_rate+0x6c>)
  4006c4:	e006      	b.n	4006d4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4006c6:	4b08      	ldr	r3, [pc, #32]	; (4006e8 <osc_get_rate+0x70>)
  4006c8:	e004      	b.n	4006d4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4006ca:	4b07      	ldr	r3, [pc, #28]	; (4006e8 <osc_get_rate+0x70>)
  4006cc:	e002      	b.n	4006d4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4006ce:	4b06      	ldr	r3, [pc, #24]	; (4006e8 <osc_get_rate+0x70>)
  4006d0:	e000      	b.n	4006d4 <osc_get_rate+0x5c>
	return 0;
  4006d2:	2300      	movs	r3, #0
}
  4006d4:	4618      	mov	r0, r3
  4006d6:	370c      	adds	r7, #12
  4006d8:	46bd      	mov	sp, r7
  4006da:	bc80      	pop	{r7}
  4006dc:	4770      	bx	lr
  4006de:	bf00      	nop
  4006e0:	003d0900 	.word	0x003d0900
  4006e4:	007a1200 	.word	0x007a1200
  4006e8:	00b71b00 	.word	0x00b71b00

004006ec <sysclk_get_main_hz>:
{
  4006ec:	b580      	push	{r7, lr}
  4006ee:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4006f0:	2006      	movs	r0, #6
  4006f2:	4b04      	ldr	r3, [pc, #16]	; (400704 <sysclk_get_main_hz+0x18>)
  4006f4:	4798      	blx	r3
  4006f6:	4602      	mov	r2, r0
  4006f8:	4613      	mov	r3, r2
  4006fa:	009b      	lsls	r3, r3, #2
  4006fc:	4413      	add	r3, r2
  4006fe:	009b      	lsls	r3, r3, #2
}
  400700:	4618      	mov	r0, r3
  400702:	bd80      	pop	{r7, pc}
  400704:	00400679 	.word	0x00400679

00400708 <sysclk_get_cpu_hz>:
{
  400708:	b580      	push	{r7, lr}
  40070a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40070c:	4b02      	ldr	r3, [pc, #8]	; (400718 <sysclk_get_cpu_hz+0x10>)
  40070e:	4798      	blx	r3
  400710:	4603      	mov	r3, r0
  400712:	085b      	lsrs	r3, r3, #1
}
  400714:	4618      	mov	r0, r3
  400716:	bd80      	pop	{r7, pc}
  400718:	004006ed 	.word	0x004006ed

0040071c <xmodem_receive>:
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void xmodem_receive(void)
{
  40071c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  400720:	b082      	sub	sp, #8
  400722:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
  400724:	2300      	movs	r3, #0
  400726:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0u;
  400728:	2300      	movs	r3, #0
  40072a:	713b      	strb	r3, [r7, #4]

    x_first_packet_received = false;
  40072c:	4b68      	ldr	r3, [pc, #416]	; (4008d0 <xmodem_receive+0x1b4>)
  40072e:	2200      	movs	r2, #0
  400730:	701a      	strb	r2, [r3, #0]
    xmodem_packet_number = 1u;
  400732:	4b68      	ldr	r3, [pc, #416]	; (4008d4 <xmodem_receive+0x1b8>)
  400734:	2201      	movs	r2, #1
  400736:	701a      	strb	r2, [r3, #0]
    //xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;

    /* Loop until there isn't any error (or until we jump to the user application). */
    while (X_OK == status)
  400738:	e0bf      	b.n	4008ba <xmodem_receive+0x19e>
    {
        uint8_t header = 0x00u;
  40073a:	2300      	movs	r3, #0
  40073c:	70fb      	strb	r3, [r7, #3]

        /* Get the header from UART. */
        uart_status comm_status = uart_receive(&header, 1u);
  40073e:	1cfb      	adds	r3, r7, #3
  400740:	2101      	movs	r1, #1
  400742:	4618      	mov	r0, r3
  400744:	4b64      	ldr	r3, [pc, #400]	; (4008d8 <xmodem_receive+0x1bc>)
  400746:	4798      	blx	r3
  400748:	4603      	mov	r3, r0
  40074a:	71fb      	strb	r3, [r7, #7]

        /* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
        if (x_first_packet_received == false)
  40074c:	4b60      	ldr	r3, [pc, #384]	; (4008d0 <xmodem_receive+0x1b4>)
  40074e:	781b      	ldrb	r3, [r3, #0]
  400750:	2b00      	cmp	r3, #0
  400752:	d12e      	bne.n	4007b2 <xmodem_receive+0x96>
        {
            (void)uart_transmit_ch(X_C);
  400754:	2043      	movs	r0, #67	; 0x43
  400756:	4b61      	ldr	r3, [pc, #388]	; (4008dc <xmodem_receive+0x1c0>)
  400758:	4798      	blx	r3
            delay_ms(10);
  40075a:	4b61      	ldr	r3, [pc, #388]	; (4008e0 <xmodem_receive+0x1c4>)
  40075c:	4798      	blx	r3
  40075e:	4603      	mov	r3, r0
  400760:	4619      	mov	r1, r3
  400762:	f04f 0200 	mov.w	r2, #0
  400766:	460b      	mov	r3, r1
  400768:	4614      	mov	r4, r2
  40076a:	00a6      	lsls	r6, r4, #2
  40076c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  400770:	009d      	lsls	r5, r3, #2
  400772:	462b      	mov	r3, r5
  400774:	4634      	mov	r4, r6
  400776:	185b      	adds	r3, r3, r1
  400778:	eb44 0402 	adc.w	r4, r4, r2
  40077c:	18db      	adds	r3, r3, r3
  40077e:	eb44 0404 	adc.w	r4, r4, r4
  400782:	4619      	mov	r1, r3
  400784:	4622      	mov	r2, r4
  400786:	f243 63af 	movw	r3, #13999	; 0x36af
  40078a:	f04f 0400 	mov.w	r4, #0
  40078e:	eb11 0b03 	adds.w	fp, r1, r3
  400792:	eb42 0c04 	adc.w	ip, r2, r4
  400796:	4658      	mov	r0, fp
  400798:	4661      	mov	r1, ip
  40079a:	4c52      	ldr	r4, [pc, #328]	; (4008e4 <xmodem_receive+0x1c8>)
  40079c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4007a0:	f04f 0300 	mov.w	r3, #0
  4007a4:	47a0      	blx	r4
  4007a6:	4603      	mov	r3, r0
  4007a8:	460c      	mov	r4, r1
  4007aa:	4618      	mov	r0, r3
  4007ac:	4b4e      	ldr	r3, [pc, #312]	; (4008e8 <xmodem_receive+0x1cc>)
  4007ae:	4798      	blx	r3
  4007b0:	e008      	b.n	4007c4 <xmodem_receive+0xa8>
        }
        else
        {
            if ((header == X_SOH) || (header == X_STX))
  4007b2:	78fb      	ldrb	r3, [r7, #3]
  4007b4:	2b01      	cmp	r3, #1
  4007b6:	d002      	beq.n	4007be <xmodem_receive+0xa2>
  4007b8:	78fb      	ldrb	r3, [r7, #3]
  4007ba:	2b02      	cmp	r3, #2
  4007bc:	d102      	bne.n	4007c4 <xmodem_receive+0xa8>
            {
                x_first_packet_received = true;
  4007be:	4b44      	ldr	r3, [pc, #272]	; (4008d0 <xmodem_receive+0x1b4>)
  4007c0:	2201      	movs	r2, #1
  4007c2:	701a      	strb	r2, [r3, #0]
            }
        }

        /* The header can be: SOH, STX, EOT and CAN. */
        switch(header)
  4007c4:	78fb      	ldrb	r3, [r7, #3]
  4007c6:	3b01      	subs	r3, #1
  4007c8:	2b17      	cmp	r3, #23
  4007ca:	d86b      	bhi.n	4008a4 <xmodem_receive+0x188>
  4007cc:	a201      	add	r2, pc, #4	; (adr r2, 4007d4 <xmodem_receive+0xb8>)
  4007ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4007d2:	bf00      	nop
  4007d4:	00400835 	.word	0x00400835
  4007d8:	00400835 	.word	0x00400835
  4007dc:	004008a5 	.word	0x004008a5
  4007e0:	0040087f 	.word	0x0040087f
  4007e4:	004008a5 	.word	0x004008a5
  4007e8:	004008a5 	.word	0x004008a5
  4007ec:	004008a5 	.word	0x004008a5
  4007f0:	004008a5 	.word	0x004008a5
  4007f4:	004008a5 	.word	0x004008a5
  4007f8:	004008a5 	.word	0x004008a5
  4007fc:	004008a5 	.word	0x004008a5
  400800:	004008a5 	.word	0x004008a5
  400804:	004008a5 	.word	0x004008a5
  400808:	004008a5 	.word	0x004008a5
  40080c:	004008a5 	.word	0x004008a5
  400810:	004008a5 	.word	0x004008a5
  400814:	004008a5 	.word	0x004008a5
  400818:	004008a5 	.word	0x004008a5
  40081c:	004008a5 	.word	0x004008a5
  400820:	004008a5 	.word	0x004008a5
  400824:	004008a5 	.word	0x004008a5
  400828:	004008a5 	.word	0x004008a5
  40082c:	004008a5 	.word	0x004008a5
  400830:	00400899 	.word	0x00400899
        {
            xmodem_status packet_status = X_ERROR;
            /* 128 or 1024 bytes of data. */
            case X_SOH:
            case X_STX:
                printf("X_STX\r\n");
  400834:	482d      	ldr	r0, [pc, #180]	; (4008ec <xmodem_receive+0x1d0>)
  400836:	4b2e      	ldr	r3, [pc, #184]	; (4008f0 <xmodem_receive+0x1d4>)
  400838:	4798      	blx	r3
                /* If the handling was successful, then send an ACK. */
                packet_status = xmodem_handle_packet(header);
  40083a:	78fb      	ldrb	r3, [r7, #3]
  40083c:	4618      	mov	r0, r3
  40083e:	4b2d      	ldr	r3, [pc, #180]	; (4008f4 <xmodem_receive+0x1d8>)
  400840:	4798      	blx	r3
  400842:	4603      	mov	r3, r0
  400844:	71bb      	strb	r3, [r7, #6]
                if (X_OK == packet_status)
  400846:	79bb      	ldrb	r3, [r7, #6]
  400848:	2b00      	cmp	r3, #0
  40084a:	d103      	bne.n	400854 <xmodem_receive+0x138>
                {
                    (void)uart_transmit_ch(X_ACK);
  40084c:	2006      	movs	r0, #6
  40084e:	4b23      	ldr	r3, [pc, #140]	; (4008dc <xmodem_receive+0x1c0>)
  400850:	4798      	blx	r3
                /* Error while processing the packet, either send a NAK or do graceful abort. */
                else
                {
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
                }
            break;
  400852:	e032      	b.n	4008ba <xmodem_receive+0x19e>
                else if (X_ERROR_FLASH == packet_status)
  400854:	79bb      	ldrb	r3, [r7, #6]
  400856:	2b08      	cmp	r3, #8
  400858:	d109      	bne.n	40086e <xmodem_receive+0x152>
                    error_number = X_MAX_ERRORS;
  40085a:	2303      	movs	r3, #3
  40085c:	713b      	strb	r3, [r7, #4]
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  40085e:	1d3b      	adds	r3, r7, #4
  400860:	2103      	movs	r1, #3
  400862:	4618      	mov	r0, r3
  400864:	4b24      	ldr	r3, [pc, #144]	; (4008f8 <xmodem_receive+0x1dc>)
  400866:	4798      	blx	r3
  400868:	4603      	mov	r3, r0
  40086a:	717b      	strb	r3, [r7, #5]
            break;
  40086c:	e025      	b.n	4008ba <xmodem_receive+0x19e>
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  40086e:	1d3b      	adds	r3, r7, #4
  400870:	2103      	movs	r1, #3
  400872:	4618      	mov	r0, r3
  400874:	4b20      	ldr	r3, [pc, #128]	; (4008f8 <xmodem_receive+0x1dc>)
  400876:	4798      	blx	r3
  400878:	4603      	mov	r3, r0
  40087a:	717b      	strb	r3, [r7, #5]
            break;
  40087c:	e01d      	b.n	4008ba <xmodem_receive+0x19e>
            /* End of Transmission. */
            case X_EOT:
                printf("X_EOT\r\n");
  40087e:	481f      	ldr	r0, [pc, #124]	; (4008fc <xmodem_receive+0x1e0>)
  400880:	4b1b      	ldr	r3, [pc, #108]	; (4008f0 <xmodem_receive+0x1d4>)
  400882:	4798      	blx	r3
                /* ACK, feedback to user (as a text), then jump to user application. */
                (void)uart_transmit_ch(X_ACK);
  400884:	2006      	movs	r0, #6
  400886:	4b15      	ldr	r3, [pc, #84]	; (4008dc <xmodem_receive+0x1c0>)
  400888:	4798      	blx	r3
                (void)uart_transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
  40088a:	481d      	ldr	r0, [pc, #116]	; (400900 <xmodem_receive+0x1e4>)
  40088c:	4b1d      	ldr	r3, [pc, #116]	; (400904 <xmodem_receive+0x1e8>)
  40088e:	4798      	blx	r3
                (void)uart_transmit_str((uint8_t*)"Jumping to user application...\n\r");
  400890:	481d      	ldr	r0, [pc, #116]	; (400908 <xmodem_receive+0x1ec>)
  400892:	4b1c      	ldr	r3, [pc, #112]	; (400904 <xmodem_receive+0x1e8>)
  400894:	4798      	blx	r3
                //flash_jump_to_app();
            break;
  400896:	e010      	b.n	4008ba <xmodem_receive+0x19e>
            /* Abort from host. */
            case X_CAN:
                printf("X_CAN\r\n");
  400898:	481c      	ldr	r0, [pc, #112]	; (40090c <xmodem_receive+0x1f0>)
  40089a:	4b15      	ldr	r3, [pc, #84]	; (4008f0 <xmodem_receive+0x1d4>)
  40089c:	4798      	blx	r3
                status = X_ERROR;
  40089e:	23ff      	movs	r3, #255	; 0xff
  4008a0:	717b      	strb	r3, [r7, #5]
            break;
  4008a2:	e00a      	b.n	4008ba <xmodem_receive+0x19e>
            default:
                /* Wrong header. */
                if (UART_OK == comm_status)
  4008a4:	79fb      	ldrb	r3, [r7, #7]
  4008a6:	2b00      	cmp	r3, #0
  4008a8:	d106      	bne.n	4008b8 <xmodem_receive+0x19c>
                {
                    status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
  4008aa:	1d3b      	adds	r3, r7, #4
  4008ac:	2103      	movs	r1, #3
  4008ae:	4618      	mov	r0, r3
  4008b0:	4b11      	ldr	r3, [pc, #68]	; (4008f8 <xmodem_receive+0x1dc>)
  4008b2:	4798      	blx	r3
  4008b4:	4603      	mov	r3, r0
  4008b6:	717b      	strb	r3, [r7, #5]
                }
            break;
  4008b8:	bf00      	nop
    while (X_OK == status)
  4008ba:	797b      	ldrb	r3, [r7, #5]
  4008bc:	b2db      	uxtb	r3, r3
  4008be:	2b00      	cmp	r3, #0
  4008c0:	f43f af3b 	beq.w	40073a <xmodem_receive+0x1e>
        }
    }
}
  4008c4:	bf00      	nop
  4008c6:	3708      	adds	r7, #8
  4008c8:	46bd      	mov	sp, r7
  4008ca:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  4008ce:	bf00      	nop
  4008d0:	200009e0 	.word	0x200009e0
  4008d4:	2000000a 	.word	0x2000000a
  4008d8:	004005b9 	.word	0x004005b9
  4008dc:	00400531 	.word	0x00400531
  4008e0:	00400709 	.word	0x00400709
  4008e4:	004023dd 	.word	0x004023dd
  4008e8:	20000001 	.word	0x20000001
  4008ec:	0040538c 	.word	0x0040538c
  4008f0:	0040273d 	.word	0x0040273d
  4008f4:	00400985 	.word	0x00400985
  4008f8:	00400b11 	.word	0x00400b11
  4008fc:	00405394 	.word	0x00405394
  400900:	0040539c 	.word	0x0040539c
  400904:	00400565 	.word	0x00400565
  400908:	004053b4 	.word	0x004053b4
  40090c:	004053d8 	.word	0x004053d8

00400910 <xmodem_calc_crc>:

static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
  400910:	b480      	push	{r7}
  400912:	b085      	sub	sp, #20
  400914:	af00      	add	r7, sp, #0
  400916:	6078      	str	r0, [r7, #4]
  400918:	460b      	mov	r3, r1
  40091a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
  40091c:	2300      	movs	r3, #0
  40091e:	81fb      	strh	r3, [r7, #14]
    while (length)
  400920:	e026      	b.n	400970 <xmodem_calc_crc+0x60>
    {
        length--;
  400922:	887b      	ldrh	r3, [r7, #2]
  400924:	3b01      	subs	r3, #1
  400926:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
  400928:	687b      	ldr	r3, [r7, #4]
  40092a:	1c5a      	adds	r2, r3, #1
  40092c:	607a      	str	r2, [r7, #4]
  40092e:	781b      	ldrb	r3, [r3, #0]
  400930:	021b      	lsls	r3, r3, #8
  400932:	b21a      	sxth	r2, r3
  400934:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  400938:	4053      	eors	r3, r2
  40093a:	b21b      	sxth	r3, r3
  40093c:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
  40093e:	2300      	movs	r3, #0
  400940:	737b      	strb	r3, [r7, #13]
  400942:	e012      	b.n	40096a <xmodem_calc_crc+0x5a>
        {
            if (crc & 0x8000u)
  400944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  400948:	2b00      	cmp	r3, #0
  40094a:	da08      	bge.n	40095e <xmodem_calc_crc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
  40094c:	89fb      	ldrh	r3, [r7, #14]
  40094e:	005b      	lsls	r3, r3, #1
  400950:	b29b      	uxth	r3, r3
  400952:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
  400956:	f083 0301 	eor.w	r3, r3, #1
  40095a:	81fb      	strh	r3, [r7, #14]
  40095c:	e002      	b.n	400964 <xmodem_calc_crc+0x54>
            }
            else
            {
                crc = crc << 1u;
  40095e:	89fb      	ldrh	r3, [r7, #14]
  400960:	005b      	lsls	r3, r3, #1
  400962:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
  400964:	7b7b      	ldrb	r3, [r7, #13]
  400966:	3301      	adds	r3, #1
  400968:	737b      	strb	r3, [r7, #13]
  40096a:	7b7b      	ldrb	r3, [r7, #13]
  40096c:	2b07      	cmp	r3, #7
  40096e:	d9e9      	bls.n	400944 <xmodem_calc_crc+0x34>
    while (length)
  400970:	887b      	ldrh	r3, [r7, #2]
  400972:	2b00      	cmp	r3, #0
  400974:	d1d5      	bne.n	400922 <xmodem_calc_crc+0x12>
            }
        }
    }
    return crc;
  400976:	89fb      	ldrh	r3, [r7, #14]
}
  400978:	4618      	mov	r0, r3
  40097a:	3714      	adds	r7, #20
  40097c:	46bd      	mov	sp, r7
  40097e:	bc80      	pop	{r7}
  400980:	4770      	bx	lr
	...

00400984 <xmodem_handle_packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header)
{
  400984:	b580      	push	{r7, lr}
  400986:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
  40098a:	af00      	add	r7, sp, #0
  40098c:	4602      	mov	r2, r0
  40098e:	1dfb      	adds	r3, r7, #7
  400990:	701a      	strb	r2, [r3, #0]
    xmodem_status status = X_OK;
  400992:	2300      	movs	r3, #0
  400994:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    uint16_t size = 0u;
  400998:	2300      	movs	r3, #0
  40099a:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
    uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
    uint8_t received_packet_data[X_PACKET_1024_SIZE];
    uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

    /* Get the size of the data. */
    if (X_SOH == header)
  40099e:	1dfb      	adds	r3, r7, #7
  4009a0:	781b      	ldrb	r3, [r3, #0]
  4009a2:	2b01      	cmp	r3, #1
  4009a4:	d103      	bne.n	4009ae <xmodem_handle_packet+0x2a>
    {
        size = X_PACKET_128_SIZE;
  4009a6:	2380      	movs	r3, #128	; 0x80
  4009a8:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  4009ac:	e00b      	b.n	4009c6 <xmodem_handle_packet+0x42>
    }
    else if (X_STX == header)
  4009ae:	1dfb      	adds	r3, r7, #7
  4009b0:	781b      	ldrb	r3, [r3, #0]
  4009b2:	2b02      	cmp	r3, #2
  4009b4:	d104      	bne.n	4009c0 <xmodem_handle_packet+0x3c>
    {
        size = X_PACKET_1024_SIZE;
  4009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4009ba:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  4009be:	e002      	b.n	4009c6 <xmodem_handle_packet+0x42>
    }
    else
    {
        /* Wrong header type. This shoudn't be possible... */
        status |= X_ERROR;
  4009c0:	23ff      	movs	r3, #255	; 0xff
  4009c2:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    uart_status comm_status = UART_OK;
  4009c6:	2300      	movs	r3, #0
  4009c8:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    /* Get the packet number, data and CRC from UART. */
    comm_status |= uart_receive(&received_packet_number[0u], X_PACKET_NUMBER_SIZE);
  4009cc:	f207 430c 	addw	r3, r7, #1036	; 0x40c
  4009d0:	2102      	movs	r1, #2
  4009d2:	4618      	mov	r0, r3
  4009d4:	4b49      	ldr	r3, [pc, #292]	; (400afc <xmodem_handle_packet+0x178>)
  4009d6:	4798      	blx	r3
  4009d8:	4603      	mov	r3, r0
  4009da:	461a      	mov	r2, r3
  4009dc:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  4009e0:	4313      	orrs	r3, r2
  4009e2:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    comm_status |= uart_receive(&received_packet_data[0u], size);
  4009e6:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  4009ea:	f107 030c 	add.w	r3, r7, #12
  4009ee:	4611      	mov	r1, r2
  4009f0:	4618      	mov	r0, r3
  4009f2:	4b42      	ldr	r3, [pc, #264]	; (400afc <xmodem_handle_packet+0x178>)
  4009f4:	4798      	blx	r3
  4009f6:	4603      	mov	r3, r0
  4009f8:	461a      	mov	r2, r3
  4009fa:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  4009fe:	4313      	orrs	r3, r2
  400a00:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    comm_status |= uart_receive(&received_packet_crc[0u], X_PACKET_CRC_SIZE);
  400a04:	f107 0308 	add.w	r3, r7, #8
  400a08:	2102      	movs	r1, #2
  400a0a:	4618      	mov	r0, r3
  400a0c:	4b3b      	ldr	r3, [pc, #236]	; (400afc <xmodem_handle_packet+0x178>)
  400a0e:	4798      	blx	r3
  400a10:	4603      	mov	r3, r0
  400a12:	461a      	mov	r2, r3
  400a14:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400a18:	4313      	orrs	r3, r2
  400a1a:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
    /* Merge the two bytes of CRC. */
    uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
  400a1e:	f107 0308 	add.w	r3, r7, #8
  400a22:	781b      	ldrb	r3, [r3, #0]
  400a24:	021b      	lsls	r3, r3, #8
  400a26:	b21a      	sxth	r2, r3
  400a28:	f107 0308 	add.w	r3, r7, #8
  400a2c:	785b      	ldrb	r3, [r3, #1]
  400a2e:	b21b      	sxth	r3, r3
  400a30:	4313      	orrs	r3, r2
  400a32:	b21b      	sxth	r3, r3
  400a34:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
    /* We calculate it too. */
    uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
  400a38:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  400a3c:	f107 030c 	add.w	r3, r7, #12
  400a40:	4611      	mov	r1, r2
  400a42:	4618      	mov	r0, r3
  400a44:	4b2e      	ldr	r3, [pc, #184]	; (400b00 <xmodem_handle_packet+0x17c>)
  400a46:	4798      	blx	r3
  400a48:	4603      	mov	r3, r0
  400a4a:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e

    /* Communication error. */
    if (UART_OK != comm_status)
  400a4e:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
  400a52:	2b00      	cmp	r3, #0
  400a54:	d005      	beq.n	400a62 <xmodem_handle_packet+0xde>
    {
        status |= X_ERROR_UART;
  400a56:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400a5a:	f043 0304 	orr.w	r3, r3, #4
  400a5e:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

    /* If it is the first packet, then erase the memory. */
    if ((X_OK == status) && (false == x_first_packet_received))
  400a62:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400a66:	2b00      	cmp	r3, #0
  400a68:	d106      	bne.n	400a78 <xmodem_handle_packet+0xf4>
  400a6a:	4b26      	ldr	r3, [pc, #152]	; (400b04 <xmodem_handle_packet+0x180>)
  400a6c:	781b      	ldrb	r3, [r3, #0]
  400a6e:	2b00      	cmp	r3, #0
  400a70:	d102      	bne.n	400a78 <xmodem_handle_packet+0xf4>
    {
        if (1)//(FLASH_OK == flash_erase(FLASH_APP_START_ADDRESS))
        {
            x_first_packet_received = true;
  400a72:	4b24      	ldr	r3, [pc, #144]	; (400b04 <xmodem_handle_packet+0x180>)
  400a74:	2201      	movs	r2, #1
  400a76:	701a      	strb	r2, [r3, #0]
            status |= X_ERROR_FLASH;
        }
    }

    /* Error handling and flashing. */
    if (X_OK == status)
  400a78:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400a7c:	2b00      	cmp	r3, #0
  400a7e:	d125      	bne.n	400acc <xmodem_handle_packet+0x148>
    {
        if (xmodem_packet_number != received_packet_number[0u])
  400a80:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
  400a84:	4b20      	ldr	r3, [pc, #128]	; (400b08 <xmodem_handle_packet+0x184>)
  400a86:	781b      	ldrb	r3, [r3, #0]
  400a88:	429a      	cmp	r2, r3
  400a8a:	d005      	beq.n	400a98 <xmodem_handle_packet+0x114>
        {
            /* Packet number counter mismatch. */
            status |= X_ERROR_NUMBER;
  400a8c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400a90:	f043 0302 	orr.w	r3, r3, #2
  400a94:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
        if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
  400a98:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
  400a9c:	461a      	mov	r2, r3
  400a9e:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
  400aa2:	4413      	add	r3, r2
  400aa4:	2bff      	cmp	r3, #255	; 0xff
  400aa6:	d005      	beq.n	400ab4 <xmodem_handle_packet+0x130>
        {
            /* The sum of the packet number and packet number complement aren't 255. */
            /* The sum always has to be 255. */
            status |= X_ERROR_NUMBER;
  400aa8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400aac:	f043 0302 	orr.w	r3, r3, #2
  400ab0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        }
        if (crc_calculated != crc_received)
  400ab4:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
  400ab8:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
  400abc:	429a      	cmp	r2, r3
  400abe:	d005      	beq.n	400acc <xmodem_handle_packet+0x148>
        {
            /* The calculated and received CRC are different. */
            status |= X_ERROR_CRC;
  400ac0:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400ac4:	f043 0301 	orr.w	r3, r3, #1
  400ac8:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
            /* Flashing error. */
            status |= X_ERROR_FLASH;
        }

    /* Raise the packet number and the address counters (if there weren't any errors). */
    if (X_OK == status)
  400acc:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
  400ad0:	2b00      	cmp	r3, #0
  400ad2:	d10c      	bne.n	400aee <xmodem_handle_packet+0x16a>
    {
        xmodem_packet_number++;
  400ad4:	4b0c      	ldr	r3, [pc, #48]	; (400b08 <xmodem_handle_packet+0x184>)
  400ad6:	781b      	ldrb	r3, [r3, #0]
  400ad8:	3301      	adds	r3, #1
  400ada:	b2da      	uxtb	r2, r3
  400adc:	4b0a      	ldr	r3, [pc, #40]	; (400b08 <xmodem_handle_packet+0x184>)
  400ade:	701a      	strb	r2, [r3, #0]
        xmodem_actual_flash_address += size;
  400ae0:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
  400ae4:	4b09      	ldr	r3, [pc, #36]	; (400b0c <xmodem_handle_packet+0x188>)
  400ae6:	681b      	ldr	r3, [r3, #0]
  400ae8:	4413      	add	r3, r2
  400aea:	4a08      	ldr	r2, [pc, #32]	; (400b0c <xmodem_handle_packet+0x188>)
  400aec:	6013      	str	r3, [r2, #0]
    }

    return status;
  400aee:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
  400af2:	4618      	mov	r0, r3
  400af4:	f507 6783 	add.w	r7, r7, #1048	; 0x418
  400af8:	46bd      	mov	sp, r7
  400afa:	bd80      	pop	{r7, pc}
  400afc:	004005b9 	.word	0x004005b9
  400b00:	00400911 	.word	0x00400911
  400b04:	200009e0 	.word	0x200009e0
  400b08:	2000000a 	.word	0x2000000a
  400b0c:	200009dc 	.word	0x200009dc

00400b10 <xmodem_error_handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number)
{
  400b10:	b580      	push	{r7, lr}
  400b12:	b084      	sub	sp, #16
  400b14:	af00      	add	r7, sp, #0
  400b16:	6078      	str	r0, [r7, #4]
  400b18:	460b      	mov	r3, r1
  400b1a:	70fb      	strb	r3, [r7, #3]
    xmodem_status status = X_OK;
  400b1c:	2300      	movs	r3, #0
  400b1e:	73fb      	strb	r3, [r7, #15]
    /* Raise the error counter. */
    (*error_number)++;
  400b20:	687b      	ldr	r3, [r7, #4]
  400b22:	781b      	ldrb	r3, [r3, #0]
  400b24:	3301      	adds	r3, #1
  400b26:	b2da      	uxtb	r2, r3
  400b28:	687b      	ldr	r3, [r7, #4]
  400b2a:	701a      	strb	r2, [r3, #0]
    /* If the counter reached the max value, then abort. */
    if ((*error_number) >= max_error_number)
  400b2c:	687b      	ldr	r3, [r7, #4]
  400b2e:	781b      	ldrb	r3, [r3, #0]
  400b30:	78fa      	ldrb	r2, [r7, #3]
  400b32:	429a      	cmp	r2, r3
  400b34:	d808      	bhi.n	400b48 <xmodem_error_handler+0x38>
    {
        /* Graceful abort. */
        (void)uart_transmit_ch(X_CAN);
  400b36:	2018      	movs	r0, #24
  400b38:	4b08      	ldr	r3, [pc, #32]	; (400b5c <xmodem_error_handler+0x4c>)
  400b3a:	4798      	blx	r3
        (void)uart_transmit_ch(X_CAN);
  400b3c:	2018      	movs	r0, #24
  400b3e:	4b07      	ldr	r3, [pc, #28]	; (400b5c <xmodem_error_handler+0x4c>)
  400b40:	4798      	blx	r3
        status = X_ERROR;
  400b42:	23ff      	movs	r3, #255	; 0xff
  400b44:	73fb      	strb	r3, [r7, #15]
  400b46:	e004      	b.n	400b52 <xmodem_error_handler+0x42>
    }
    /* Otherwise send a NAK for a repeat. */
    else
    {
        (void)uart_transmit_ch(X_NAK);
  400b48:	2015      	movs	r0, #21
  400b4a:	4b04      	ldr	r3, [pc, #16]	; (400b5c <xmodem_error_handler+0x4c>)
  400b4c:	4798      	blx	r3
        status = X_OK;
  400b4e:	2300      	movs	r3, #0
  400b50:	73fb      	strb	r3, [r7, #15]
    }
    return status;
  400b52:	7bfb      	ldrb	r3, [r7, #15]
  400b54:	4618      	mov	r0, r3
  400b56:	3710      	adds	r7, #16
  400b58:	46bd      	mov	sp, r7
  400b5a:	bd80      	pop	{r7, pc}
  400b5c:	00400531 	.word	0x00400531

00400b60 <osc_enable>:
{
  400b60:	b580      	push	{r7, lr}
  400b62:	b082      	sub	sp, #8
  400b64:	af00      	add	r7, sp, #0
  400b66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b68:	687b      	ldr	r3, [r7, #4]
  400b6a:	2b07      	cmp	r3, #7
  400b6c:	d831      	bhi.n	400bd2 <osc_enable+0x72>
  400b6e:	a201      	add	r2, pc, #4	; (adr r2, 400b74 <osc_enable+0x14>)
  400b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b74:	00400bd1 	.word	0x00400bd1
  400b78:	00400b95 	.word	0x00400b95
  400b7c:	00400b9d 	.word	0x00400b9d
  400b80:	00400ba5 	.word	0x00400ba5
  400b84:	00400bad 	.word	0x00400bad
  400b88:	00400bb5 	.word	0x00400bb5
  400b8c:	00400bbd 	.word	0x00400bbd
  400b90:	00400bc7 	.word	0x00400bc7
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400b94:	2000      	movs	r0, #0
  400b96:	4b11      	ldr	r3, [pc, #68]	; (400bdc <osc_enable+0x7c>)
  400b98:	4798      	blx	r3
		break;
  400b9a:	e01a      	b.n	400bd2 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400b9c:	2001      	movs	r0, #1
  400b9e:	4b0f      	ldr	r3, [pc, #60]	; (400bdc <osc_enable+0x7c>)
  400ba0:	4798      	blx	r3
		break;
  400ba2:	e016      	b.n	400bd2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400ba4:	2000      	movs	r0, #0
  400ba6:	4b0e      	ldr	r3, [pc, #56]	; (400be0 <osc_enable+0x80>)
  400ba8:	4798      	blx	r3
		break;
  400baa:	e012      	b.n	400bd2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400bac:	2010      	movs	r0, #16
  400bae:	4b0c      	ldr	r3, [pc, #48]	; (400be0 <osc_enable+0x80>)
  400bb0:	4798      	blx	r3
		break;
  400bb2:	e00e      	b.n	400bd2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400bb4:	2020      	movs	r0, #32
  400bb6:	4b0a      	ldr	r3, [pc, #40]	; (400be0 <osc_enable+0x80>)
  400bb8:	4798      	blx	r3
		break;
  400bba:	e00a      	b.n	400bd2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400bbc:	213e      	movs	r1, #62	; 0x3e
  400bbe:	2000      	movs	r0, #0
  400bc0:	4b08      	ldr	r3, [pc, #32]	; (400be4 <osc_enable+0x84>)
  400bc2:	4798      	blx	r3
		break;
  400bc4:	e005      	b.n	400bd2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400bc6:	213e      	movs	r1, #62	; 0x3e
  400bc8:	2001      	movs	r0, #1
  400bca:	4b06      	ldr	r3, [pc, #24]	; (400be4 <osc_enable+0x84>)
  400bcc:	4798      	blx	r3
		break;
  400bce:	e000      	b.n	400bd2 <osc_enable+0x72>
		break;
  400bd0:	bf00      	nop
}
  400bd2:	bf00      	nop
  400bd4:	3708      	adds	r7, #8
  400bd6:	46bd      	mov	sp, r7
  400bd8:	bd80      	pop	{r7, pc}
  400bda:	bf00      	nop
  400bdc:	00401981 	.word	0x00401981
  400be0:	004019ed 	.word	0x004019ed
  400be4:	00401a5d 	.word	0x00401a5d

00400be8 <osc_is_ready>:
{
  400be8:	b580      	push	{r7, lr}
  400bea:	b082      	sub	sp, #8
  400bec:	af00      	add	r7, sp, #0
  400bee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400bf0:	687b      	ldr	r3, [r7, #4]
  400bf2:	2b07      	cmp	r3, #7
  400bf4:	d826      	bhi.n	400c44 <osc_is_ready+0x5c>
  400bf6:	a201      	add	r2, pc, #4	; (adr r2, 400bfc <osc_is_ready+0x14>)
  400bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400bfc:	00400c1d 	.word	0x00400c1d
  400c00:	00400c21 	.word	0x00400c21
  400c04:	00400c21 	.word	0x00400c21
  400c08:	00400c33 	.word	0x00400c33
  400c0c:	00400c33 	.word	0x00400c33
  400c10:	00400c33 	.word	0x00400c33
  400c14:	00400c33 	.word	0x00400c33
  400c18:	00400c33 	.word	0x00400c33
		return 1;
  400c1c:	2301      	movs	r3, #1
  400c1e:	e012      	b.n	400c46 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  400c20:	4b0b      	ldr	r3, [pc, #44]	; (400c50 <osc_is_ready+0x68>)
  400c22:	4798      	blx	r3
  400c24:	4603      	mov	r3, r0
  400c26:	2b00      	cmp	r3, #0
  400c28:	bf14      	ite	ne
  400c2a:	2301      	movne	r3, #1
  400c2c:	2300      	moveq	r3, #0
  400c2e:	b2db      	uxtb	r3, r3
  400c30:	e009      	b.n	400c46 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  400c32:	4b08      	ldr	r3, [pc, #32]	; (400c54 <osc_is_ready+0x6c>)
  400c34:	4798      	blx	r3
  400c36:	4603      	mov	r3, r0
  400c38:	2b00      	cmp	r3, #0
  400c3a:	bf14      	ite	ne
  400c3c:	2301      	movne	r3, #1
  400c3e:	2300      	moveq	r3, #0
  400c40:	b2db      	uxtb	r3, r3
  400c42:	e000      	b.n	400c46 <osc_is_ready+0x5e>
	return 0;
  400c44:	2300      	movs	r3, #0
}
  400c46:	4618      	mov	r0, r3
  400c48:	3708      	adds	r7, #8
  400c4a:	46bd      	mov	sp, r7
  400c4c:	bd80      	pop	{r7, pc}
  400c4e:	bf00      	nop
  400c50:	004019b9 	.word	0x004019b9
  400c54:	00401ad5 	.word	0x00401ad5

00400c58 <osc_get_rate>:
{
  400c58:	b480      	push	{r7}
  400c5a:	b083      	sub	sp, #12
  400c5c:	af00      	add	r7, sp, #0
  400c5e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c60:	687b      	ldr	r3, [r7, #4]
  400c62:	2b07      	cmp	r3, #7
  400c64:	d825      	bhi.n	400cb2 <osc_get_rate+0x5a>
  400c66:	a201      	add	r2, pc, #4	; (adr r2, 400c6c <osc_get_rate+0x14>)
  400c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c6c:	00400c8d 	.word	0x00400c8d
  400c70:	00400c93 	.word	0x00400c93
  400c74:	00400c99 	.word	0x00400c99
  400c78:	00400c9f 	.word	0x00400c9f
  400c7c:	00400ca3 	.word	0x00400ca3
  400c80:	00400ca7 	.word	0x00400ca7
  400c84:	00400cab 	.word	0x00400cab
  400c88:	00400caf 	.word	0x00400caf
		return OSC_SLCK_32K_RC_HZ;
  400c8c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400c90:	e010      	b.n	400cb4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c96:	e00d      	b.n	400cb4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c9c:	e00a      	b.n	400cb4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400c9e:	4b08      	ldr	r3, [pc, #32]	; (400cc0 <osc_get_rate+0x68>)
  400ca0:	e008      	b.n	400cb4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400ca2:	4b08      	ldr	r3, [pc, #32]	; (400cc4 <osc_get_rate+0x6c>)
  400ca4:	e006      	b.n	400cb4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400ca6:	4b08      	ldr	r3, [pc, #32]	; (400cc8 <osc_get_rate+0x70>)
  400ca8:	e004      	b.n	400cb4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400caa:	4b07      	ldr	r3, [pc, #28]	; (400cc8 <osc_get_rate+0x70>)
  400cac:	e002      	b.n	400cb4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400cae:	4b06      	ldr	r3, [pc, #24]	; (400cc8 <osc_get_rate+0x70>)
  400cb0:	e000      	b.n	400cb4 <osc_get_rate+0x5c>
	return 0;
  400cb2:	2300      	movs	r3, #0
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	370c      	adds	r7, #12
  400cb8:	46bd      	mov	sp, r7
  400cba:	bc80      	pop	{r7}
  400cbc:	4770      	bx	lr
  400cbe:	bf00      	nop
  400cc0:	003d0900 	.word	0x003d0900
  400cc4:	007a1200 	.word	0x007a1200
  400cc8:	00b71b00 	.word	0x00b71b00

00400ccc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400ccc:	b580      	push	{r7, lr}
  400cce:	b082      	sub	sp, #8
  400cd0:	af00      	add	r7, sp, #0
  400cd2:	4603      	mov	r3, r0
  400cd4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400cd6:	bf00      	nop
  400cd8:	79fb      	ldrb	r3, [r7, #7]
  400cda:	4618      	mov	r0, r3
  400cdc:	4b05      	ldr	r3, [pc, #20]	; (400cf4 <osc_wait_ready+0x28>)
  400cde:	4798      	blx	r3
  400ce0:	4603      	mov	r3, r0
  400ce2:	f083 0301 	eor.w	r3, r3, #1
  400ce6:	b2db      	uxtb	r3, r3
  400ce8:	2b00      	cmp	r3, #0
  400cea:	d1f5      	bne.n	400cd8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400cec:	bf00      	nop
  400cee:	3708      	adds	r7, #8
  400cf0:	46bd      	mov	sp, r7
  400cf2:	bd80      	pop	{r7, pc}
  400cf4:	00400be9 	.word	0x00400be9

00400cf8 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400cf8:	b580      	push	{r7, lr}
  400cfa:	b086      	sub	sp, #24
  400cfc:	af00      	add	r7, sp, #0
  400cfe:	60f8      	str	r0, [r7, #12]
  400d00:	607a      	str	r2, [r7, #4]
  400d02:	603b      	str	r3, [r7, #0]
  400d04:	460b      	mov	r3, r1
  400d06:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400d08:	7afb      	ldrb	r3, [r7, #11]
  400d0a:	4618      	mov	r0, r3
  400d0c:	4b0d      	ldr	r3, [pc, #52]	; (400d44 <pll_config_init+0x4c>)
  400d0e:	4798      	blx	r3
  400d10:	4602      	mov	r2, r0
  400d12:	687b      	ldr	r3, [r7, #4]
  400d14:	fbb2 f3f3 	udiv	r3, r2, r3
  400d18:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400d1a:	697b      	ldr	r3, [r7, #20]
  400d1c:	683a      	ldr	r2, [r7, #0]
  400d1e:	fb02 f303 	mul.w	r3, r2, r3
  400d22:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400d24:	683b      	ldr	r3, [r7, #0]
  400d26:	3b01      	subs	r3, #1
  400d28:	041a      	lsls	r2, r3, #16
  400d2a:	4b07      	ldr	r3, [pc, #28]	; (400d48 <pll_config_init+0x50>)
  400d2c:	4013      	ands	r3, r2
  400d2e:	687a      	ldr	r2, [r7, #4]
  400d30:	b2d2      	uxtb	r2, r2
  400d32:	4313      	orrs	r3, r2
  400d34:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400d38:	68fb      	ldr	r3, [r7, #12]
  400d3a:	601a      	str	r2, [r3, #0]
}
  400d3c:	bf00      	nop
  400d3e:	3718      	adds	r7, #24
  400d40:	46bd      	mov	sp, r7
  400d42:	bd80      	pop	{r7, pc}
  400d44:	00400c59 	.word	0x00400c59
  400d48:	07ff0000 	.word	0x07ff0000

00400d4c <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	b082      	sub	sp, #8
  400d50:	af00      	add	r7, sp, #0
  400d52:	6078      	str	r0, [r7, #4]
  400d54:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400d56:	683b      	ldr	r3, [r7, #0]
  400d58:	2b00      	cmp	r3, #0
  400d5a:	d108      	bne.n	400d6e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400d5c:	4b09      	ldr	r3, [pc, #36]	; (400d84 <pll_enable+0x38>)
  400d5e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400d60:	4a09      	ldr	r2, [pc, #36]	; (400d88 <pll_enable+0x3c>)
  400d62:	687b      	ldr	r3, [r7, #4]
  400d64:	681b      	ldr	r3, [r3, #0]
  400d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400d6a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400d6c:	e005      	b.n	400d7a <pll_enable+0x2e>
		pmc_disable_pllbck();
  400d6e:	4b07      	ldr	r3, [pc, #28]	; (400d8c <pll_enable+0x40>)
  400d70:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400d72:	4a05      	ldr	r2, [pc, #20]	; (400d88 <pll_enable+0x3c>)
  400d74:	687b      	ldr	r3, [r7, #4]
  400d76:	681b      	ldr	r3, [r3, #0]
  400d78:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400d7a:	bf00      	nop
  400d7c:	3708      	adds	r7, #8
  400d7e:	46bd      	mov	sp, r7
  400d80:	bd80      	pop	{r7, pc}
  400d82:	bf00      	nop
  400d84:	00401aed 	.word	0x00401aed
  400d88:	400e0400 	.word	0x400e0400
  400d8c:	00401b1d 	.word	0x00401b1d

00400d90 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400d90:	b580      	push	{r7, lr}
  400d92:	b082      	sub	sp, #8
  400d94:	af00      	add	r7, sp, #0
  400d96:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400d98:	687b      	ldr	r3, [r7, #4]
  400d9a:	2b00      	cmp	r3, #0
  400d9c:	d103      	bne.n	400da6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400d9e:	4b05      	ldr	r3, [pc, #20]	; (400db4 <pll_is_locked+0x24>)
  400da0:	4798      	blx	r3
  400da2:	4603      	mov	r3, r0
  400da4:	e002      	b.n	400dac <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400da6:	4b04      	ldr	r3, [pc, #16]	; (400db8 <pll_is_locked+0x28>)
  400da8:	4798      	blx	r3
  400daa:	4603      	mov	r3, r0
	}
}
  400dac:	4618      	mov	r0, r3
  400dae:	3708      	adds	r7, #8
  400db0:	46bd      	mov	sp, r7
  400db2:	bd80      	pop	{r7, pc}
  400db4:	00401b05 	.word	0x00401b05
  400db8:	00401b35 	.word	0x00401b35

00400dbc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400dbc:	b580      	push	{r7, lr}
  400dbe:	b082      	sub	sp, #8
  400dc0:	af00      	add	r7, sp, #0
  400dc2:	4603      	mov	r3, r0
  400dc4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400dc6:	79fb      	ldrb	r3, [r7, #7]
  400dc8:	3b03      	subs	r3, #3
  400dca:	2b04      	cmp	r3, #4
  400dcc:	d808      	bhi.n	400de0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400dce:	79fb      	ldrb	r3, [r7, #7]
  400dd0:	4618      	mov	r0, r3
  400dd2:	4b06      	ldr	r3, [pc, #24]	; (400dec <pll_enable_source+0x30>)
  400dd4:	4798      	blx	r3
		osc_wait_ready(e_src);
  400dd6:	79fb      	ldrb	r3, [r7, #7]
  400dd8:	4618      	mov	r0, r3
  400dda:	4b05      	ldr	r3, [pc, #20]	; (400df0 <pll_enable_source+0x34>)
  400ddc:	4798      	blx	r3
		break;
  400dde:	e000      	b.n	400de2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400de0:	bf00      	nop
	}
}
  400de2:	bf00      	nop
  400de4:	3708      	adds	r7, #8
  400de6:	46bd      	mov	sp, r7
  400de8:	bd80      	pop	{r7, pc}
  400dea:	bf00      	nop
  400dec:	00400b61 	.word	0x00400b61
  400df0:	00400ccd 	.word	0x00400ccd

00400df4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	b082      	sub	sp, #8
  400df8:	af00      	add	r7, sp, #0
  400dfa:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400dfc:	bf00      	nop
  400dfe:	6878      	ldr	r0, [r7, #4]
  400e00:	4b04      	ldr	r3, [pc, #16]	; (400e14 <pll_wait_for_lock+0x20>)
  400e02:	4798      	blx	r3
  400e04:	4603      	mov	r3, r0
  400e06:	2b00      	cmp	r3, #0
  400e08:	d0f9      	beq.n	400dfe <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400e0a:	2300      	movs	r3, #0
}
  400e0c:	4618      	mov	r0, r3
  400e0e:	3708      	adds	r7, #8
  400e10:	46bd      	mov	sp, r7
  400e12:	bd80      	pop	{r7, pc}
  400e14:	00400d91 	.word	0x00400d91

00400e18 <sysclk_get_main_hz>:
{
  400e18:	b580      	push	{r7, lr}
  400e1a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400e1c:	2006      	movs	r0, #6
  400e1e:	4b04      	ldr	r3, [pc, #16]	; (400e30 <sysclk_get_main_hz+0x18>)
  400e20:	4798      	blx	r3
  400e22:	4602      	mov	r2, r0
  400e24:	4613      	mov	r3, r2
  400e26:	009b      	lsls	r3, r3, #2
  400e28:	4413      	add	r3, r2
  400e2a:	009b      	lsls	r3, r3, #2
}
  400e2c:	4618      	mov	r0, r3
  400e2e:	bd80      	pop	{r7, pc}
  400e30:	00400c59 	.word	0x00400c59

00400e34 <sysclk_get_cpu_hz>:
{
  400e34:	b580      	push	{r7, lr}
  400e36:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400e38:	4b02      	ldr	r3, [pc, #8]	; (400e44 <sysclk_get_cpu_hz+0x10>)
  400e3a:	4798      	blx	r3
  400e3c:	4603      	mov	r3, r0
  400e3e:	085b      	lsrs	r3, r3, #1
}
  400e40:	4618      	mov	r0, r3
  400e42:	bd80      	pop	{r7, pc}
  400e44:	00400e19 	.word	0x00400e19

00400e48 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e48:	b590      	push	{r4, r7, lr}
  400e4a:	b083      	sub	sp, #12
  400e4c:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e4e:	4811      	ldr	r0, [pc, #68]	; (400e94 <sysclk_init+0x4c>)
  400e50:	4b11      	ldr	r3, [pc, #68]	; (400e98 <sysclk_init+0x50>)
  400e52:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400e54:	2006      	movs	r0, #6
  400e56:	4b11      	ldr	r3, [pc, #68]	; (400e9c <sysclk_init+0x54>)
  400e58:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400e5a:	1d38      	adds	r0, r7, #4
  400e5c:	2314      	movs	r3, #20
  400e5e:	2201      	movs	r2, #1
  400e60:	2106      	movs	r1, #6
  400e62:	4c0f      	ldr	r4, [pc, #60]	; (400ea0 <sysclk_init+0x58>)
  400e64:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400e66:	1d3b      	adds	r3, r7, #4
  400e68:	2100      	movs	r1, #0
  400e6a:	4618      	mov	r0, r3
  400e6c:	4b0d      	ldr	r3, [pc, #52]	; (400ea4 <sysclk_init+0x5c>)
  400e6e:	4798      	blx	r3
		pll_wait_for_lock(0);
  400e70:	2000      	movs	r0, #0
  400e72:	4b0d      	ldr	r3, [pc, #52]	; (400ea8 <sysclk_init+0x60>)
  400e74:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400e76:	2010      	movs	r0, #16
  400e78:	4b0c      	ldr	r3, [pc, #48]	; (400eac <sysclk_init+0x64>)
  400e7a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400e7c:	4b0c      	ldr	r3, [pc, #48]	; (400eb0 <sysclk_init+0x68>)
  400e7e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400e80:	4b0c      	ldr	r3, [pc, #48]	; (400eb4 <sysclk_init+0x6c>)
  400e82:	4798      	blx	r3
  400e84:	4603      	mov	r3, r0
  400e86:	4618      	mov	r0, r3
  400e88:	4b03      	ldr	r3, [pc, #12]	; (400e98 <sysclk_init+0x50>)
  400e8a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400e8c:	bf00      	nop
  400e8e:	370c      	adds	r7, #12
  400e90:	46bd      	mov	sp, r7
  400e92:	bd90      	pop	{r4, r7, pc}
  400e94:	07270e00 	.word	0x07270e00
  400e98:	0040220d 	.word	0x0040220d
  400e9c:	00400dbd 	.word	0x00400dbd
  400ea0:	00400cf9 	.word	0x00400cf9
  400ea4:	00400d4d 	.word	0x00400d4d
  400ea8:	00400df5 	.word	0x00400df5
  400eac:	00401901 	.word	0x00401901
  400eb0:	00402075 	.word	0x00402075
  400eb4:	00400e35 	.word	0x00400e35

00400eb8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400eb8:	b580      	push	{r7, lr}
  400eba:	b086      	sub	sp, #24
  400ebc:	af00      	add	r7, sp, #0
  400ebe:	60f8      	str	r0, [r7, #12]
  400ec0:	60b9      	str	r1, [r7, #8]
  400ec2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400ec4:	2300      	movs	r3, #0
  400ec6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400ec8:	68fb      	ldr	r3, [r7, #12]
  400eca:	2b00      	cmp	r3, #0
  400ecc:	d012      	beq.n	400ef4 <_read+0x3c>
		return -1;
  400ece:	f04f 33ff 	mov.w	r3, #4294967295
  400ed2:	e013      	b.n	400efc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400ed4:	4b0b      	ldr	r3, [pc, #44]	; (400f04 <_read+0x4c>)
  400ed6:	681b      	ldr	r3, [r3, #0]
  400ed8:	4a0b      	ldr	r2, [pc, #44]	; (400f08 <_read+0x50>)
  400eda:	6812      	ldr	r2, [r2, #0]
  400edc:	68b9      	ldr	r1, [r7, #8]
  400ede:	4610      	mov	r0, r2
  400ee0:	4798      	blx	r3
		ptr++;
  400ee2:	68bb      	ldr	r3, [r7, #8]
  400ee4:	3301      	adds	r3, #1
  400ee6:	60bb      	str	r3, [r7, #8]
		nChars++;
  400ee8:	697b      	ldr	r3, [r7, #20]
  400eea:	3301      	adds	r3, #1
  400eec:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  400eee:	687b      	ldr	r3, [r7, #4]
  400ef0:	3b01      	subs	r3, #1
  400ef2:	607b      	str	r3, [r7, #4]
  400ef4:	687b      	ldr	r3, [r7, #4]
  400ef6:	2b00      	cmp	r3, #0
  400ef8:	dcec      	bgt.n	400ed4 <_read+0x1c>
	}
	return nChars;
  400efa:	697b      	ldr	r3, [r7, #20]
}
  400efc:	4618      	mov	r0, r3
  400efe:	3718      	adds	r7, #24
  400f00:	46bd      	mov	sp, r7
  400f02:	bd80      	pop	{r7, pc}
  400f04:	20000ea0 	.word	0x20000ea0
  400f08:	20000ea8 	.word	0x20000ea8

00400f0c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400f0c:	b580      	push	{r7, lr}
  400f0e:	b086      	sub	sp, #24
  400f10:	af00      	add	r7, sp, #0
  400f12:	60f8      	str	r0, [r7, #12]
  400f14:	60b9      	str	r1, [r7, #8]
  400f16:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400f18:	2300      	movs	r3, #0
  400f1a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400f1c:	68fb      	ldr	r3, [r7, #12]
  400f1e:	2b01      	cmp	r3, #1
  400f20:	d01e      	beq.n	400f60 <_write+0x54>
  400f22:	68fb      	ldr	r3, [r7, #12]
  400f24:	2b02      	cmp	r3, #2
  400f26:	d01b      	beq.n	400f60 <_write+0x54>
  400f28:	68fb      	ldr	r3, [r7, #12]
  400f2a:	2b03      	cmp	r3, #3
  400f2c:	d018      	beq.n	400f60 <_write+0x54>
		return -1;
  400f2e:	f04f 33ff 	mov.w	r3, #4294967295
  400f32:	e019      	b.n	400f68 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400f34:	4b0e      	ldr	r3, [pc, #56]	; (400f70 <_write+0x64>)
  400f36:	681a      	ldr	r2, [r3, #0]
  400f38:	4b0e      	ldr	r3, [pc, #56]	; (400f74 <_write+0x68>)
  400f3a:	6818      	ldr	r0, [r3, #0]
  400f3c:	68bb      	ldr	r3, [r7, #8]
  400f3e:	1c59      	adds	r1, r3, #1
  400f40:	60b9      	str	r1, [r7, #8]
  400f42:	781b      	ldrb	r3, [r3, #0]
  400f44:	4619      	mov	r1, r3
  400f46:	4790      	blx	r2
  400f48:	4603      	mov	r3, r0
  400f4a:	2b00      	cmp	r3, #0
  400f4c:	da02      	bge.n	400f54 <_write+0x48>
			return -1;
  400f4e:	f04f 33ff 	mov.w	r3, #4294967295
  400f52:	e009      	b.n	400f68 <_write+0x5c>
		}
		++nChars;
  400f54:	697b      	ldr	r3, [r7, #20]
  400f56:	3301      	adds	r3, #1
  400f58:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  400f5a:	687b      	ldr	r3, [r7, #4]
  400f5c:	3b01      	subs	r3, #1
  400f5e:	607b      	str	r3, [r7, #4]
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	2b00      	cmp	r3, #0
  400f64:	d1e6      	bne.n	400f34 <_write+0x28>
	}
	return nChars;
  400f66:	697b      	ldr	r3, [r7, #20]
}
  400f68:	4618      	mov	r0, r3
  400f6a:	3718      	adds	r7, #24
  400f6c:	46bd      	mov	sp, r7
  400f6e:	bd80      	pop	{r7, pc}
  400f70:	20000ea4 	.word	0x20000ea4
  400f74:	20000ea8 	.word	0x20000ea8

00400f78 <sysclk_enable_peripheral_clock>:
{
  400f78:	b580      	push	{r7, lr}
  400f7a:	b082      	sub	sp, #8
  400f7c:	af00      	add	r7, sp, #0
  400f7e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400f80:	6878      	ldr	r0, [r7, #4]
  400f82:	4b03      	ldr	r3, [pc, #12]	; (400f90 <sysclk_enable_peripheral_clock+0x18>)
  400f84:	4798      	blx	r3
}
  400f86:	bf00      	nop
  400f88:	3708      	adds	r7, #8
  400f8a:	46bd      	mov	sp, r7
  400f8c:	bd80      	pop	{r7, pc}
  400f8e:	bf00      	nop
  400f90:	00401b4d 	.word	0x00401b4d

00400f94 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400f94:	b580      	push	{r7, lr}
  400f96:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400f98:	200b      	movs	r0, #11
  400f9a:	4b05      	ldr	r3, [pc, #20]	; (400fb0 <ioport_init+0x1c>)
  400f9c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400f9e:	200c      	movs	r0, #12
  400fa0:	4b03      	ldr	r3, [pc, #12]	; (400fb0 <ioport_init+0x1c>)
  400fa2:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400fa4:	200d      	movs	r0, #13
  400fa6:	4b02      	ldr	r3, [pc, #8]	; (400fb0 <ioport_init+0x1c>)
  400fa8:	4798      	blx	r3
	arch_ioport_init();
}
  400faa:	bf00      	nop
  400fac:	bd80      	pop	{r7, pc}
  400fae:	bf00      	nop
  400fb0:	00400f79 	.word	0x00400f79

00400fb4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400fb4:	b480      	push	{r7}
  400fb6:	b08d      	sub	sp, #52	; 0x34
  400fb8:	af00      	add	r7, sp, #0
  400fba:	6078      	str	r0, [r7, #4]
  400fbc:	6039      	str	r1, [r7, #0]
  400fbe:	687b      	ldr	r3, [r7, #4]
  400fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  400fc2:	683b      	ldr	r3, [r7, #0]
  400fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  400fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fc8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fcc:	095a      	lsrs	r2, r3, #5
  400fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fd0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400fd2:	6a3b      	ldr	r3, [r7, #32]
  400fd4:	f003 031f 	and.w	r3, r3, #31
  400fd8:	2101      	movs	r1, #1
  400fda:	fa01 f303 	lsl.w	r3, r1, r3
  400fde:	61fa      	str	r2, [r7, #28]
  400fe0:	61bb      	str	r3, [r7, #24]
  400fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400fe4:	617b      	str	r3, [r7, #20]
  400fe6:	69fb      	ldr	r3, [r7, #28]
  400fe8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400fea:	693b      	ldr	r3, [r7, #16]
  400fec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400ff0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400ff4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400ff6:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400ff8:	697b      	ldr	r3, [r7, #20]
  400ffa:	f003 0308 	and.w	r3, r3, #8
  400ffe:	2b00      	cmp	r3, #0
  401000:	d003      	beq.n	40100a <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  401002:	68fb      	ldr	r3, [r7, #12]
  401004:	69ba      	ldr	r2, [r7, #24]
  401006:	665a      	str	r2, [r3, #100]	; 0x64
  401008:	e002      	b.n	401010 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  40100a:	68fb      	ldr	r3, [r7, #12]
  40100c:	69ba      	ldr	r2, [r7, #24]
  40100e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  401010:	697b      	ldr	r3, [r7, #20]
  401012:	f003 0310 	and.w	r3, r3, #16
  401016:	2b00      	cmp	r3, #0
  401018:	d004      	beq.n	401024 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40101a:	68fb      	ldr	r3, [r7, #12]
  40101c:	69ba      	ldr	r2, [r7, #24]
  40101e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401022:	e003      	b.n	40102c <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  401024:	68fb      	ldr	r3, [r7, #12]
  401026:	69ba      	ldr	r2, [r7, #24]
  401028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40102c:	697b      	ldr	r3, [r7, #20]
  40102e:	f003 0320 	and.w	r3, r3, #32
  401032:	2b00      	cmp	r3, #0
  401034:	d003      	beq.n	40103e <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401036:	68fb      	ldr	r3, [r7, #12]
  401038:	69ba      	ldr	r2, [r7, #24]
  40103a:	651a      	str	r2, [r3, #80]	; 0x50
  40103c:	e002      	b.n	401044 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  40103e:	68fb      	ldr	r3, [r7, #12]
  401040:	69ba      	ldr	r2, [r7, #24]
  401042:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401044:	697b      	ldr	r3, [r7, #20]
  401046:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40104a:	2b00      	cmp	r3, #0
  40104c:	d003      	beq.n	401056 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  40104e:	68fb      	ldr	r3, [r7, #12]
  401050:	69ba      	ldr	r2, [r7, #24]
  401052:	621a      	str	r2, [r3, #32]
  401054:	e002      	b.n	40105c <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  401056:	68fb      	ldr	r3, [r7, #12]
  401058:	69ba      	ldr	r2, [r7, #24]
  40105a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40105c:	697b      	ldr	r3, [r7, #20]
  40105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401062:	2b00      	cmp	r3, #0
  401064:	d004      	beq.n	401070 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  401066:	68fb      	ldr	r3, [r7, #12]
  401068:	69ba      	ldr	r2, [r7, #24]
  40106a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40106e:	e003      	b.n	401078 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401070:	68fb      	ldr	r3, [r7, #12]
  401072:	69ba      	ldr	r2, [r7, #24]
  401074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401078:	697b      	ldr	r3, [r7, #20]
  40107a:	f003 0301 	and.w	r3, r3, #1
  40107e:	2b00      	cmp	r3, #0
  401080:	d006      	beq.n	401090 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  401082:	68fb      	ldr	r3, [r7, #12]
  401084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401086:	69bb      	ldr	r3, [r7, #24]
  401088:	431a      	orrs	r2, r3
  40108a:	68fb      	ldr	r3, [r7, #12]
  40108c:	671a      	str	r2, [r3, #112]	; 0x70
  40108e:	e006      	b.n	40109e <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401090:	68fb      	ldr	r3, [r7, #12]
  401092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401094:	69bb      	ldr	r3, [r7, #24]
  401096:	43db      	mvns	r3, r3
  401098:	401a      	ands	r2, r3
  40109a:	68fb      	ldr	r3, [r7, #12]
  40109c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40109e:	697b      	ldr	r3, [r7, #20]
  4010a0:	f003 0302 	and.w	r3, r3, #2
  4010a4:	2b00      	cmp	r3, #0
  4010a6:	d006      	beq.n	4010b6 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4010a8:	68fb      	ldr	r3, [r7, #12]
  4010aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4010ac:	69bb      	ldr	r3, [r7, #24]
  4010ae:	431a      	orrs	r2, r3
  4010b0:	68fb      	ldr	r3, [r7, #12]
  4010b2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4010b4:	e006      	b.n	4010c4 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4010b6:	68fb      	ldr	r3, [r7, #12]
  4010b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4010ba:	69bb      	ldr	r3, [r7, #24]
  4010bc:	43db      	mvns	r3, r3
  4010be:	401a      	ands	r2, r3
  4010c0:	68fb      	ldr	r3, [r7, #12]
  4010c2:	675a      	str	r2, [r3, #116]	; 0x74
  4010c4:	bf00      	nop
  4010c6:	3734      	adds	r7, #52	; 0x34
  4010c8:	46bd      	mov	sp, r7
  4010ca:	bc80      	pop	{r7}
  4010cc:	4770      	bx	lr

004010ce <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4010ce:	b480      	push	{r7}
  4010d0:	b08d      	sub	sp, #52	; 0x34
  4010d2:	af00      	add	r7, sp, #0
  4010d4:	6078      	str	r0, [r7, #4]
  4010d6:	460b      	mov	r3, r1
  4010d8:	70fb      	strb	r3, [r7, #3]
  4010da:	687b      	ldr	r3, [r7, #4]
  4010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  4010de:	78fb      	ldrb	r3, [r7, #3]
  4010e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4010e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010e6:	627b      	str	r3, [r7, #36]	; 0x24
  4010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010ea:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4010ec:	6a3b      	ldr	r3, [r7, #32]
  4010ee:	095b      	lsrs	r3, r3, #5
  4010f0:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4010f2:	69fb      	ldr	r3, [r7, #28]
  4010f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4010f8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4010fc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4010fe:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401104:	2b01      	cmp	r3, #1
  401106:	d109      	bne.n	40111c <ioport_set_pin_dir+0x4e>
  401108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40110a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40110c:	697b      	ldr	r3, [r7, #20]
  40110e:	f003 031f 	and.w	r3, r3, #31
  401112:	2201      	movs	r2, #1
  401114:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401116:	69bb      	ldr	r3, [r7, #24]
  401118:	611a      	str	r2, [r3, #16]
  40111a:	e00c      	b.n	401136 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40111c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401120:	2b00      	cmp	r3, #0
  401122:	d108      	bne.n	401136 <ioport_set_pin_dir+0x68>
  401124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401126:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401128:	693b      	ldr	r3, [r7, #16]
  40112a:	f003 031f 	and.w	r3, r3, #31
  40112e:	2201      	movs	r2, #1
  401130:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401132:	69bb      	ldr	r3, [r7, #24]
  401134:	615a      	str	r2, [r3, #20]
  401136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401138:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40113a:	68fb      	ldr	r3, [r7, #12]
  40113c:	f003 031f 	and.w	r3, r3, #31
  401140:	2201      	movs	r2, #1
  401142:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401144:	69bb      	ldr	r3, [r7, #24]
  401146:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40114a:	bf00      	nop
  40114c:	3734      	adds	r7, #52	; 0x34
  40114e:	46bd      	mov	sp, r7
  401150:	bc80      	pop	{r7}
  401152:	4770      	bx	lr

00401154 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401154:	b480      	push	{r7}
  401156:	b08b      	sub	sp, #44	; 0x2c
  401158:	af00      	add	r7, sp, #0
  40115a:	6078      	str	r0, [r7, #4]
  40115c:	460b      	mov	r3, r1
  40115e:	70fb      	strb	r3, [r7, #3]
  401160:	687b      	ldr	r3, [r7, #4]
  401162:	627b      	str	r3, [r7, #36]	; 0x24
  401164:	78fb      	ldrb	r3, [r7, #3]
  401166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40116c:	61fb      	str	r3, [r7, #28]
  40116e:	69fb      	ldr	r3, [r7, #28]
  401170:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401172:	69bb      	ldr	r3, [r7, #24]
  401174:	095b      	lsrs	r3, r3, #5
  401176:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401178:	697b      	ldr	r3, [r7, #20]
  40117a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40117e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401182:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401184:	613b      	str	r3, [r7, #16]

	if (level) {
  401186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40118a:	2b00      	cmp	r3, #0
  40118c:	d009      	beq.n	4011a2 <ioport_set_pin_level+0x4e>
  40118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401190:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401192:	68fb      	ldr	r3, [r7, #12]
  401194:	f003 031f 	and.w	r3, r3, #31
  401198:	2201      	movs	r2, #1
  40119a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40119c:	693b      	ldr	r3, [r7, #16]
  40119e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4011a0:	e008      	b.n	4011b4 <ioport_set_pin_level+0x60>
  4011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4011a4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4011a6:	68bb      	ldr	r3, [r7, #8]
  4011a8:	f003 031f 	and.w	r3, r3, #31
  4011ac:	2201      	movs	r2, #1
  4011ae:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4011b0:	693b      	ldr	r3, [r7, #16]
  4011b2:	635a      	str	r2, [r3, #52]	; 0x34
  4011b4:	bf00      	nop
  4011b6:	372c      	adds	r7, #44	; 0x2c
  4011b8:	46bd      	mov	sp, r7
  4011ba:	bc80      	pop	{r7}
  4011bc:	4770      	bx	lr
	...

004011c0 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4011c0:	b580      	push	{r7, lr}
  4011c2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4011c4:	4824      	ldr	r0, [pc, #144]	; (401258 <board_init+0x98>)
  4011c6:	4b25      	ldr	r3, [pc, #148]	; (40125c <board_init+0x9c>)
  4011c8:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  4011ca:	4b25      	ldr	r3, [pc, #148]	; (401260 <board_init+0xa0>)
  4011cc:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  4011ce:	2101      	movs	r1, #1
  4011d0:	2057      	movs	r0, #87	; 0x57
  4011d2:	4b24      	ldr	r3, [pc, #144]	; (401264 <board_init+0xa4>)
  4011d4:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  4011d6:	2101      	movs	r1, #1
  4011d8:	2057      	movs	r0, #87	; 0x57
  4011da:	4b23      	ldr	r3, [pc, #140]	; (401268 <board_init+0xa8>)
  4011dc:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  4011de:	2100      	movs	r1, #0
  4011e0:	2002      	movs	r0, #2
  4011e2:	4b21      	ldr	r3, [pc, #132]	; (401268 <board_init+0xa8>)
  4011e4:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  4011e6:	2108      	movs	r1, #8
  4011e8:	2002      	movs	r0, #2
  4011ea:	4b20      	ldr	r3, [pc, #128]	; (40126c <board_init+0xac>)
  4011ec:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  4011ee:	2101      	movs	r1, #1
  4011f0:	2054      	movs	r0, #84	; 0x54
  4011f2:	4b1c      	ldr	r3, [pc, #112]	; (401264 <board_init+0xa4>)
  4011f4:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  4011f6:	2101      	movs	r1, #1
  4011f8:	2054      	movs	r0, #84	; 0x54
  4011fa:	4b1b      	ldr	r3, [pc, #108]	; (401268 <board_init+0xa8>)
  4011fc:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  4011fe:	2101      	movs	r1, #1
  401200:	2010      	movs	r0, #16
  401202:	4b18      	ldr	r3, [pc, #96]	; (401264 <board_init+0xa4>)
  401204:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  401206:	2101      	movs	r1, #1
  401208:	2010      	movs	r0, #16
  40120a:	4b17      	ldr	r3, [pc, #92]	; (401268 <board_init+0xa8>)
  40120c:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  40120e:	2101      	movs	r1, #1
  401210:	2056      	movs	r0, #86	; 0x56
  401212:	4b14      	ldr	r3, [pc, #80]	; (401264 <board_init+0xa4>)
  401214:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  401216:	2101      	movs	r1, #1
  401218:	2056      	movs	r0, #86	; 0x56
  40121a:	4b13      	ldr	r3, [pc, #76]	; (401268 <board_init+0xa8>)
  40121c:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40121e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401222:	210c      	movs	r1, #12
  401224:	4812      	ldr	r0, [pc, #72]	; (401270 <board_init+0xb0>)
  401226:	4b13      	ldr	r3, [pc, #76]	; (401274 <board_init+0xb4>)
  401228:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  40122a:	4913      	ldr	r1, [pc, #76]	; (401278 <board_init+0xb8>)
  40122c:	200c      	movs	r0, #12
  40122e:	4b13      	ldr	r3, [pc, #76]	; (40127c <board_init+0xbc>)
  401230:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  401232:	4911      	ldr	r1, [pc, #68]	; (401278 <board_init+0xb8>)
  401234:	200d      	movs	r0, #13
  401236:	4b11      	ldr	r3, [pc, #68]	; (40127c <board_init+0xbc>)
  401238:	4798      	blx	r3
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  40123a:	490f      	ldr	r1, [pc, #60]	; (401278 <board_init+0xb8>)
  40123c:	200e      	movs	r0, #14
  40123e:	4b0f      	ldr	r3, [pc, #60]	; (40127c <board_init+0xbc>)
  401240:	4798      	blx	r3
	 * Depending on the application requirements, the default PIN may not be available.
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */
#ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  401242:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401246:	200b      	movs	r0, #11
  401248:	4b0c      	ldr	r3, [pc, #48]	; (40127c <board_init+0xbc>)
  40124a:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  40124c:	2108      	movs	r1, #8
  40124e:	2002      	movs	r0, #2
  401250:	4b06      	ldr	r3, [pc, #24]	; (40126c <board_init+0xac>)
  401252:	4798      	blx	r3

#endif



}
  401254:	bf00      	nop
  401256:	bd80      	pop	{r7, pc}
  401258:	400e1450 	.word	0x400e1450
  40125c:	00401f89 	.word	0x00401f89
  401260:	00400f95 	.word	0x00400f95
  401264:	00401155 	.word	0x00401155
  401268:	004010cf 	.word	0x004010cf
  40126c:	00400fb5 	.word	0x00400fb5
  401270:	400e1000 	.word	0x400e1000
  401274:	00401695 	.word	0x00401695
  401278:	08000001 	.word	0x08000001
  40127c:	004014e5 	.word	0x004014e5

00401280 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401280:	b480      	push	{r7}
  401282:	b085      	sub	sp, #20
  401284:	af00      	add	r7, sp, #0
  401286:	60f8      	str	r0, [r7, #12]
  401288:	60b9      	str	r1, [r7, #8]
  40128a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40128c:	687b      	ldr	r3, [r7, #4]
  40128e:	2b00      	cmp	r3, #0
  401290:	d003      	beq.n	40129a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401292:	68fb      	ldr	r3, [r7, #12]
  401294:	68ba      	ldr	r2, [r7, #8]
  401296:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401298:	e002      	b.n	4012a0 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  40129a:	68fb      	ldr	r3, [r7, #12]
  40129c:	68ba      	ldr	r2, [r7, #8]
  40129e:	661a      	str	r2, [r3, #96]	; 0x60
}
  4012a0:	bf00      	nop
  4012a2:	3714      	adds	r7, #20
  4012a4:	46bd      	mov	sp, r7
  4012a6:	bc80      	pop	{r7}
  4012a8:	4770      	bx	lr

004012aa <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4012aa:	b480      	push	{r7}
  4012ac:	b087      	sub	sp, #28
  4012ae:	af00      	add	r7, sp, #0
  4012b0:	60f8      	str	r0, [r7, #12]
  4012b2:	60b9      	str	r1, [r7, #8]
  4012b4:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4012b6:	68fb      	ldr	r3, [r7, #12]
  4012b8:	687a      	ldr	r2, [r7, #4]
  4012ba:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4012bc:	68bb      	ldr	r3, [r7, #8]
  4012be:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4012c2:	d04a      	beq.n	40135a <pio_set_peripheral+0xb0>
  4012c4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4012c8:	d808      	bhi.n	4012dc <pio_set_peripheral+0x32>
  4012ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4012ce:	d016      	beq.n	4012fe <pio_set_peripheral+0x54>
  4012d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4012d4:	d02c      	beq.n	401330 <pio_set_peripheral+0x86>
  4012d6:	2b00      	cmp	r3, #0
  4012d8:	d069      	beq.n	4013ae <pio_set_peripheral+0x104>
  4012da:	e064      	b.n	4013a6 <pio_set_peripheral+0xfc>
  4012dc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4012e0:	d065      	beq.n	4013ae <pio_set_peripheral+0x104>
  4012e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4012e6:	d803      	bhi.n	4012f0 <pio_set_peripheral+0x46>
  4012e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4012ec:	d04a      	beq.n	401384 <pio_set_peripheral+0xda>
  4012ee:	e05a      	b.n	4013a6 <pio_set_peripheral+0xfc>
  4012f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4012f4:	d05b      	beq.n	4013ae <pio_set_peripheral+0x104>
  4012f6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4012fa:	d058      	beq.n	4013ae <pio_set_peripheral+0x104>
  4012fc:	e053      	b.n	4013a6 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4012fe:	68fb      	ldr	r3, [r7, #12]
  401300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401302:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401304:	68fb      	ldr	r3, [r7, #12]
  401306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401308:	687b      	ldr	r3, [r7, #4]
  40130a:	43d9      	mvns	r1, r3
  40130c:	697b      	ldr	r3, [r7, #20]
  40130e:	400b      	ands	r3, r1
  401310:	401a      	ands	r2, r3
  401312:	68fb      	ldr	r3, [r7, #12]
  401314:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401316:	68fb      	ldr	r3, [r7, #12]
  401318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40131a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40131c:	68fb      	ldr	r3, [r7, #12]
  40131e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401320:	687b      	ldr	r3, [r7, #4]
  401322:	43d9      	mvns	r1, r3
  401324:	697b      	ldr	r3, [r7, #20]
  401326:	400b      	ands	r3, r1
  401328:	401a      	ands	r2, r3
  40132a:	68fb      	ldr	r3, [r7, #12]
  40132c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40132e:	e03a      	b.n	4013a6 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401330:	68fb      	ldr	r3, [r7, #12]
  401332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401334:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401336:	687a      	ldr	r2, [r7, #4]
  401338:	697b      	ldr	r3, [r7, #20]
  40133a:	431a      	orrs	r2, r3
  40133c:	68fb      	ldr	r3, [r7, #12]
  40133e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401340:	68fb      	ldr	r3, [r7, #12]
  401342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401344:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401346:	68fb      	ldr	r3, [r7, #12]
  401348:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40134a:	687b      	ldr	r3, [r7, #4]
  40134c:	43d9      	mvns	r1, r3
  40134e:	697b      	ldr	r3, [r7, #20]
  401350:	400b      	ands	r3, r1
  401352:	401a      	ands	r2, r3
  401354:	68fb      	ldr	r3, [r7, #12]
  401356:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401358:	e025      	b.n	4013a6 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40135a:	68fb      	ldr	r3, [r7, #12]
  40135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40135e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401360:	68fb      	ldr	r3, [r7, #12]
  401362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401364:	687b      	ldr	r3, [r7, #4]
  401366:	43d9      	mvns	r1, r3
  401368:	697b      	ldr	r3, [r7, #20]
  40136a:	400b      	ands	r3, r1
  40136c:	401a      	ands	r2, r3
  40136e:	68fb      	ldr	r3, [r7, #12]
  401370:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401372:	68fb      	ldr	r3, [r7, #12]
  401374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401376:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401378:	687a      	ldr	r2, [r7, #4]
  40137a:	697b      	ldr	r3, [r7, #20]
  40137c:	431a      	orrs	r2, r3
  40137e:	68fb      	ldr	r3, [r7, #12]
  401380:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401382:	e010      	b.n	4013a6 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401384:	68fb      	ldr	r3, [r7, #12]
  401386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401388:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40138a:	687a      	ldr	r2, [r7, #4]
  40138c:	697b      	ldr	r3, [r7, #20]
  40138e:	431a      	orrs	r2, r3
  401390:	68fb      	ldr	r3, [r7, #12]
  401392:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401394:	68fb      	ldr	r3, [r7, #12]
  401396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401398:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40139a:	687a      	ldr	r2, [r7, #4]
  40139c:	697b      	ldr	r3, [r7, #20]
  40139e:	431a      	orrs	r2, r3
  4013a0:	68fb      	ldr	r3, [r7, #12]
  4013a2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013a4:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4013a6:	68fb      	ldr	r3, [r7, #12]
  4013a8:	687a      	ldr	r2, [r7, #4]
  4013aa:	605a      	str	r2, [r3, #4]
  4013ac:	e000      	b.n	4013b0 <pio_set_peripheral+0x106>
		return;
  4013ae:	bf00      	nop
}
  4013b0:	371c      	adds	r7, #28
  4013b2:	46bd      	mov	sp, r7
  4013b4:	bc80      	pop	{r7}
  4013b6:	4770      	bx	lr

004013b8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4013b8:	b580      	push	{r7, lr}
  4013ba:	b084      	sub	sp, #16
  4013bc:	af00      	add	r7, sp, #0
  4013be:	60f8      	str	r0, [r7, #12]
  4013c0:	60b9      	str	r1, [r7, #8]
  4013c2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4013c4:	68b9      	ldr	r1, [r7, #8]
  4013c6:	68f8      	ldr	r0, [r7, #12]
  4013c8:	4b19      	ldr	r3, [pc, #100]	; (401430 <pio_set_input+0x78>)
  4013ca:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	f003 0301 	and.w	r3, r3, #1
  4013d2:	461a      	mov	r2, r3
  4013d4:	68b9      	ldr	r1, [r7, #8]
  4013d6:	68f8      	ldr	r0, [r7, #12]
  4013d8:	4b16      	ldr	r3, [pc, #88]	; (401434 <pio_set_input+0x7c>)
  4013da:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4013dc:	687b      	ldr	r3, [r7, #4]
  4013de:	f003 030a 	and.w	r3, r3, #10
  4013e2:	2b00      	cmp	r3, #0
  4013e4:	d003      	beq.n	4013ee <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4013e6:	68fb      	ldr	r3, [r7, #12]
  4013e8:	68ba      	ldr	r2, [r7, #8]
  4013ea:	621a      	str	r2, [r3, #32]
  4013ec:	e002      	b.n	4013f4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4013ee:	68fb      	ldr	r3, [r7, #12]
  4013f0:	68ba      	ldr	r2, [r7, #8]
  4013f2:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4013f4:	687b      	ldr	r3, [r7, #4]
  4013f6:	f003 0302 	and.w	r3, r3, #2
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d004      	beq.n	401408 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4013fe:	68fb      	ldr	r3, [r7, #12]
  401400:	68ba      	ldr	r2, [r7, #8]
  401402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401406:	e008      	b.n	40141a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401408:	687b      	ldr	r3, [r7, #4]
  40140a:	f003 0308 	and.w	r3, r3, #8
  40140e:	2b00      	cmp	r3, #0
  401410:	d003      	beq.n	40141a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401412:	68fb      	ldr	r3, [r7, #12]
  401414:	68ba      	ldr	r2, [r7, #8]
  401416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40141a:	68fb      	ldr	r3, [r7, #12]
  40141c:	68ba      	ldr	r2, [r7, #8]
  40141e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401420:	68fb      	ldr	r3, [r7, #12]
  401422:	68ba      	ldr	r2, [r7, #8]
  401424:	601a      	str	r2, [r3, #0]
}
  401426:	bf00      	nop
  401428:	3710      	adds	r7, #16
  40142a:	46bd      	mov	sp, r7
  40142c:	bd80      	pop	{r7, pc}
  40142e:	bf00      	nop
  401430:	0040149d 	.word	0x0040149d
  401434:	00401281 	.word	0x00401281

00401438 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401438:	b580      	push	{r7, lr}
  40143a:	b084      	sub	sp, #16
  40143c:	af00      	add	r7, sp, #0
  40143e:	60f8      	str	r0, [r7, #12]
  401440:	60b9      	str	r1, [r7, #8]
  401442:	607a      	str	r2, [r7, #4]
  401444:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401446:	68b9      	ldr	r1, [r7, #8]
  401448:	68f8      	ldr	r0, [r7, #12]
  40144a:	4b12      	ldr	r3, [pc, #72]	; (401494 <pio_set_output+0x5c>)
  40144c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40144e:	69ba      	ldr	r2, [r7, #24]
  401450:	68b9      	ldr	r1, [r7, #8]
  401452:	68f8      	ldr	r0, [r7, #12]
  401454:	4b10      	ldr	r3, [pc, #64]	; (401498 <pio_set_output+0x60>)
  401456:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401458:	683b      	ldr	r3, [r7, #0]
  40145a:	2b00      	cmp	r3, #0
  40145c:	d003      	beq.n	401466 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40145e:	68fb      	ldr	r3, [r7, #12]
  401460:	68ba      	ldr	r2, [r7, #8]
  401462:	651a      	str	r2, [r3, #80]	; 0x50
  401464:	e002      	b.n	40146c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401466:	68fb      	ldr	r3, [r7, #12]
  401468:	68ba      	ldr	r2, [r7, #8]
  40146a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40146c:	687b      	ldr	r3, [r7, #4]
  40146e:	2b00      	cmp	r3, #0
  401470:	d003      	beq.n	40147a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401472:	68fb      	ldr	r3, [r7, #12]
  401474:	68ba      	ldr	r2, [r7, #8]
  401476:	631a      	str	r2, [r3, #48]	; 0x30
  401478:	e002      	b.n	401480 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40147a:	68fb      	ldr	r3, [r7, #12]
  40147c:	68ba      	ldr	r2, [r7, #8]
  40147e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401480:	68fb      	ldr	r3, [r7, #12]
  401482:	68ba      	ldr	r2, [r7, #8]
  401484:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401486:	68fb      	ldr	r3, [r7, #12]
  401488:	68ba      	ldr	r2, [r7, #8]
  40148a:	601a      	str	r2, [r3, #0]
}
  40148c:	bf00      	nop
  40148e:	3710      	adds	r7, #16
  401490:	46bd      	mov	sp, r7
  401492:	bd80      	pop	{r7, pc}
  401494:	0040149d 	.word	0x0040149d
  401498:	00401281 	.word	0x00401281

0040149c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40149c:	b480      	push	{r7}
  40149e:	b083      	sub	sp, #12
  4014a0:	af00      	add	r7, sp, #0
  4014a2:	6078      	str	r0, [r7, #4]
  4014a4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4014a6:	687b      	ldr	r3, [r7, #4]
  4014a8:	683a      	ldr	r2, [r7, #0]
  4014aa:	645a      	str	r2, [r3, #68]	; 0x44
}
  4014ac:	bf00      	nop
  4014ae:	370c      	adds	r7, #12
  4014b0:	46bd      	mov	sp, r7
  4014b2:	bc80      	pop	{r7}
  4014b4:	4770      	bx	lr

004014b6 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4014b6:	b480      	push	{r7}
  4014b8:	b083      	sub	sp, #12
  4014ba:	af00      	add	r7, sp, #0
  4014bc:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4014be:	687b      	ldr	r3, [r7, #4]
  4014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4014c2:	4618      	mov	r0, r3
  4014c4:	370c      	adds	r7, #12
  4014c6:	46bd      	mov	sp, r7
  4014c8:	bc80      	pop	{r7}
  4014ca:	4770      	bx	lr

004014cc <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4014cc:	b480      	push	{r7}
  4014ce:	b083      	sub	sp, #12
  4014d0:	af00      	add	r7, sp, #0
  4014d2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4014d4:	687b      	ldr	r3, [r7, #4]
  4014d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4014d8:	4618      	mov	r0, r3
  4014da:	370c      	adds	r7, #12
  4014dc:	46bd      	mov	sp, r7
  4014de:	bc80      	pop	{r7}
  4014e0:	4770      	bx	lr
	...

004014e4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4014e4:	b590      	push	{r4, r7, lr}
  4014e6:	b087      	sub	sp, #28
  4014e8:	af02      	add	r7, sp, #8
  4014ea:	6078      	str	r0, [r7, #4]
  4014ec:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4014ee:	6878      	ldr	r0, [r7, #4]
  4014f0:	4b63      	ldr	r3, [pc, #396]	; (401680 <pio_configure_pin+0x19c>)
  4014f2:	4798      	blx	r3
  4014f4:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4014f6:	683b      	ldr	r3, [r7, #0]
  4014f8:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4014fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401500:	d067      	beq.n	4015d2 <pio_configure_pin+0xee>
  401502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401506:	d809      	bhi.n	40151c <pio_configure_pin+0x38>
  401508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40150c:	d02b      	beq.n	401566 <pio_configure_pin+0x82>
  40150e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401512:	d043      	beq.n	40159c <pio_configure_pin+0xb8>
  401514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401518:	d00a      	beq.n	401530 <pio_configure_pin+0x4c>
  40151a:	e0a9      	b.n	401670 <pio_configure_pin+0x18c>
  40151c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401520:	d07e      	beq.n	401620 <pio_configure_pin+0x13c>
  401522:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401526:	d07b      	beq.n	401620 <pio_configure_pin+0x13c>
  401528:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40152c:	d06c      	beq.n	401608 <pio_configure_pin+0x124>
  40152e:	e09f      	b.n	401670 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401530:	687b      	ldr	r3, [r7, #4]
  401532:	f003 031f 	and.w	r3, r3, #31
  401536:	2201      	movs	r2, #1
  401538:	fa02 f303 	lsl.w	r3, r2, r3
  40153c:	461a      	mov	r2, r3
  40153e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401542:	68f8      	ldr	r0, [r7, #12]
  401544:	4b4f      	ldr	r3, [pc, #316]	; (401684 <pio_configure_pin+0x1a0>)
  401546:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401548:	687b      	ldr	r3, [r7, #4]
  40154a:	f003 031f 	and.w	r3, r3, #31
  40154e:	2201      	movs	r2, #1
  401550:	fa02 f303 	lsl.w	r3, r2, r3
  401554:	4619      	mov	r1, r3
  401556:	683b      	ldr	r3, [r7, #0]
  401558:	f003 0301 	and.w	r3, r3, #1
  40155c:	461a      	mov	r2, r3
  40155e:	68f8      	ldr	r0, [r7, #12]
  401560:	4b49      	ldr	r3, [pc, #292]	; (401688 <pio_configure_pin+0x1a4>)
  401562:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401564:	e086      	b.n	401674 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401566:	687b      	ldr	r3, [r7, #4]
  401568:	f003 031f 	and.w	r3, r3, #31
  40156c:	2201      	movs	r2, #1
  40156e:	fa02 f303 	lsl.w	r3, r2, r3
  401572:	461a      	mov	r2, r3
  401574:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401578:	68f8      	ldr	r0, [r7, #12]
  40157a:	4b42      	ldr	r3, [pc, #264]	; (401684 <pio_configure_pin+0x1a0>)
  40157c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40157e:	687b      	ldr	r3, [r7, #4]
  401580:	f003 031f 	and.w	r3, r3, #31
  401584:	2201      	movs	r2, #1
  401586:	fa02 f303 	lsl.w	r3, r2, r3
  40158a:	4619      	mov	r1, r3
  40158c:	683b      	ldr	r3, [r7, #0]
  40158e:	f003 0301 	and.w	r3, r3, #1
  401592:	461a      	mov	r2, r3
  401594:	68f8      	ldr	r0, [r7, #12]
  401596:	4b3c      	ldr	r3, [pc, #240]	; (401688 <pio_configure_pin+0x1a4>)
  401598:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40159a:	e06b      	b.n	401674 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40159c:	687b      	ldr	r3, [r7, #4]
  40159e:	f003 031f 	and.w	r3, r3, #31
  4015a2:	2201      	movs	r2, #1
  4015a4:	fa02 f303 	lsl.w	r3, r2, r3
  4015a8:	461a      	mov	r2, r3
  4015aa:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4015ae:	68f8      	ldr	r0, [r7, #12]
  4015b0:	4b34      	ldr	r3, [pc, #208]	; (401684 <pio_configure_pin+0x1a0>)
  4015b2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4015b4:	687b      	ldr	r3, [r7, #4]
  4015b6:	f003 031f 	and.w	r3, r3, #31
  4015ba:	2201      	movs	r2, #1
  4015bc:	fa02 f303 	lsl.w	r3, r2, r3
  4015c0:	4619      	mov	r1, r3
  4015c2:	683b      	ldr	r3, [r7, #0]
  4015c4:	f003 0301 	and.w	r3, r3, #1
  4015c8:	461a      	mov	r2, r3
  4015ca:	68f8      	ldr	r0, [r7, #12]
  4015cc:	4b2e      	ldr	r3, [pc, #184]	; (401688 <pio_configure_pin+0x1a4>)
  4015ce:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4015d0:	e050      	b.n	401674 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4015d2:	687b      	ldr	r3, [r7, #4]
  4015d4:	f003 031f 	and.w	r3, r3, #31
  4015d8:	2201      	movs	r2, #1
  4015da:	fa02 f303 	lsl.w	r3, r2, r3
  4015de:	461a      	mov	r2, r3
  4015e0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4015e4:	68f8      	ldr	r0, [r7, #12]
  4015e6:	4b27      	ldr	r3, [pc, #156]	; (401684 <pio_configure_pin+0x1a0>)
  4015e8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4015ea:	687b      	ldr	r3, [r7, #4]
  4015ec:	f003 031f 	and.w	r3, r3, #31
  4015f0:	2201      	movs	r2, #1
  4015f2:	fa02 f303 	lsl.w	r3, r2, r3
  4015f6:	4619      	mov	r1, r3
  4015f8:	683b      	ldr	r3, [r7, #0]
  4015fa:	f003 0301 	and.w	r3, r3, #1
  4015fe:	461a      	mov	r2, r3
  401600:	68f8      	ldr	r0, [r7, #12]
  401602:	4b21      	ldr	r3, [pc, #132]	; (401688 <pio_configure_pin+0x1a4>)
  401604:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401606:	e035      	b.n	401674 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401608:	687b      	ldr	r3, [r7, #4]
  40160a:	f003 031f 	and.w	r3, r3, #31
  40160e:	2201      	movs	r2, #1
  401610:	fa02 f303 	lsl.w	r3, r2, r3
  401614:	683a      	ldr	r2, [r7, #0]
  401616:	4619      	mov	r1, r3
  401618:	68f8      	ldr	r0, [r7, #12]
  40161a:	4b1c      	ldr	r3, [pc, #112]	; (40168c <pio_configure_pin+0x1a8>)
  40161c:	4798      	blx	r3
		break;
  40161e:	e029      	b.n	401674 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401620:	687b      	ldr	r3, [r7, #4]
  401622:	f003 031f 	and.w	r3, r3, #31
  401626:	2201      	movs	r2, #1
  401628:	fa02 f303 	lsl.w	r3, r2, r3
  40162c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40162e:	683b      	ldr	r3, [r7, #0]
  401630:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401634:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401638:	bf0c      	ite	eq
  40163a:	2301      	moveq	r3, #1
  40163c:	2300      	movne	r3, #0
  40163e:	b2db      	uxtb	r3, r3
  401640:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401642:	683b      	ldr	r3, [r7, #0]
  401644:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401648:	2b00      	cmp	r3, #0
  40164a:	bf14      	ite	ne
  40164c:	2301      	movne	r3, #1
  40164e:	2300      	moveq	r3, #0
  401650:	b2db      	uxtb	r3, r3
  401652:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401654:	683b      	ldr	r3, [r7, #0]
  401656:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40165a:	2b00      	cmp	r3, #0
  40165c:	bf14      	ite	ne
  40165e:	2301      	movne	r3, #1
  401660:	2300      	moveq	r3, #0
  401662:	b2db      	uxtb	r3, r3
  401664:	9300      	str	r3, [sp, #0]
  401666:	4603      	mov	r3, r0
  401668:	68f8      	ldr	r0, [r7, #12]
  40166a:	4c09      	ldr	r4, [pc, #36]	; (401690 <pio_configure_pin+0x1ac>)
  40166c:	47a0      	blx	r4
		break;
  40166e:	e001      	b.n	401674 <pio_configure_pin+0x190>

	default:
		return 0;
  401670:	2300      	movs	r3, #0
  401672:	e000      	b.n	401676 <pio_configure_pin+0x192>
	}

	return 1;
  401674:	2301      	movs	r3, #1
}
  401676:	4618      	mov	r0, r3
  401678:	3714      	adds	r7, #20
  40167a:	46bd      	mov	sp, r7
  40167c:	bd90      	pop	{r4, r7, pc}
  40167e:	bf00      	nop
  401680:	004017c1 	.word	0x004017c1
  401684:	004012ab 	.word	0x004012ab
  401688:	00401281 	.word	0x00401281
  40168c:	004013b9 	.word	0x004013b9
  401690:	00401439 	.word	0x00401439

00401694 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401694:	b590      	push	{r4, r7, lr}
  401696:	b087      	sub	sp, #28
  401698:	af02      	add	r7, sp, #8
  40169a:	60f8      	str	r0, [r7, #12]
  40169c:	60b9      	str	r1, [r7, #8]
  40169e:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4016a0:	687b      	ldr	r3, [r7, #4]
  4016a2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4016a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016aa:	d043      	beq.n	401734 <pio_configure_pin_group+0xa0>
  4016ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016b0:	d809      	bhi.n	4016c6 <pio_configure_pin_group+0x32>
  4016b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4016b6:	d01f      	beq.n	4016f8 <pio_configure_pin_group+0x64>
  4016b8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4016bc:	d02b      	beq.n	401716 <pio_configure_pin_group+0x82>
  4016be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4016c2:	d00a      	beq.n	4016da <pio_configure_pin_group+0x46>
  4016c4:	e06d      	b.n	4017a2 <pio_configure_pin_group+0x10e>
  4016c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4016ca:	d048      	beq.n	40175e <pio_configure_pin_group+0xca>
  4016cc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4016d0:	d045      	beq.n	40175e <pio_configure_pin_group+0xca>
  4016d2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4016d6:	d03c      	beq.n	401752 <pio_configure_pin_group+0xbe>
  4016d8:	e063      	b.n	4017a2 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4016da:	68ba      	ldr	r2, [r7, #8]
  4016dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4016e0:	68f8      	ldr	r0, [r7, #12]
  4016e2:	4b33      	ldr	r3, [pc, #204]	; (4017b0 <pio_configure_pin_group+0x11c>)
  4016e4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4016e6:	687b      	ldr	r3, [r7, #4]
  4016e8:	f003 0301 	and.w	r3, r3, #1
  4016ec:	461a      	mov	r2, r3
  4016ee:	68b9      	ldr	r1, [r7, #8]
  4016f0:	68f8      	ldr	r0, [r7, #12]
  4016f2:	4b30      	ldr	r3, [pc, #192]	; (4017b4 <pio_configure_pin_group+0x120>)
  4016f4:	4798      	blx	r3
		break;
  4016f6:	e056      	b.n	4017a6 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4016f8:	68ba      	ldr	r2, [r7, #8]
  4016fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4016fe:	68f8      	ldr	r0, [r7, #12]
  401700:	4b2b      	ldr	r3, [pc, #172]	; (4017b0 <pio_configure_pin_group+0x11c>)
  401702:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	f003 0301 	and.w	r3, r3, #1
  40170a:	461a      	mov	r2, r3
  40170c:	68b9      	ldr	r1, [r7, #8]
  40170e:	68f8      	ldr	r0, [r7, #12]
  401710:	4b28      	ldr	r3, [pc, #160]	; (4017b4 <pio_configure_pin_group+0x120>)
  401712:	4798      	blx	r3
		break;
  401714:	e047      	b.n	4017a6 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401716:	68ba      	ldr	r2, [r7, #8]
  401718:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40171c:	68f8      	ldr	r0, [r7, #12]
  40171e:	4b24      	ldr	r3, [pc, #144]	; (4017b0 <pio_configure_pin_group+0x11c>)
  401720:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401722:	687b      	ldr	r3, [r7, #4]
  401724:	f003 0301 	and.w	r3, r3, #1
  401728:	461a      	mov	r2, r3
  40172a:	68b9      	ldr	r1, [r7, #8]
  40172c:	68f8      	ldr	r0, [r7, #12]
  40172e:	4b21      	ldr	r3, [pc, #132]	; (4017b4 <pio_configure_pin_group+0x120>)
  401730:	4798      	blx	r3
		break;
  401732:	e038      	b.n	4017a6 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401734:	68ba      	ldr	r2, [r7, #8]
  401736:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40173a:	68f8      	ldr	r0, [r7, #12]
  40173c:	4b1c      	ldr	r3, [pc, #112]	; (4017b0 <pio_configure_pin_group+0x11c>)
  40173e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401740:	687b      	ldr	r3, [r7, #4]
  401742:	f003 0301 	and.w	r3, r3, #1
  401746:	461a      	mov	r2, r3
  401748:	68b9      	ldr	r1, [r7, #8]
  40174a:	68f8      	ldr	r0, [r7, #12]
  40174c:	4b19      	ldr	r3, [pc, #100]	; (4017b4 <pio_configure_pin_group+0x120>)
  40174e:	4798      	blx	r3
		break;
  401750:	e029      	b.n	4017a6 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401752:	687a      	ldr	r2, [r7, #4]
  401754:	68b9      	ldr	r1, [r7, #8]
  401756:	68f8      	ldr	r0, [r7, #12]
  401758:	4b17      	ldr	r3, [pc, #92]	; (4017b8 <pio_configure_pin_group+0x124>)
  40175a:	4798      	blx	r3
		break;
  40175c:	e023      	b.n	4017a6 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40175e:	687b      	ldr	r3, [r7, #4]
  401760:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  401764:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401768:	bf0c      	ite	eq
  40176a:	2301      	moveq	r3, #1
  40176c:	2300      	movne	r3, #0
  40176e:	b2db      	uxtb	r3, r3
  401770:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401772:	687b      	ldr	r3, [r7, #4]
  401774:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
  401778:	2b00      	cmp	r3, #0
  40177a:	bf14      	ite	ne
  40177c:	2301      	movne	r3, #1
  40177e:	2300      	moveq	r3, #0
  401780:	b2db      	uxtb	r3, r3
  401782:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401784:	687b      	ldr	r3, [r7, #4]
  401786:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
  40178a:	2b00      	cmp	r3, #0
  40178c:	bf14      	ite	ne
  40178e:	2301      	movne	r3, #1
  401790:	2300      	moveq	r3, #0
  401792:	b2db      	uxtb	r3, r3
  401794:	9300      	str	r3, [sp, #0]
  401796:	460b      	mov	r3, r1
  401798:	68b9      	ldr	r1, [r7, #8]
  40179a:	68f8      	ldr	r0, [r7, #12]
  40179c:	4c07      	ldr	r4, [pc, #28]	; (4017bc <pio_configure_pin_group+0x128>)
  40179e:	47a0      	blx	r4
		break;
  4017a0:	e001      	b.n	4017a6 <pio_configure_pin_group+0x112>

	default:
		return 0;
  4017a2:	2300      	movs	r3, #0
  4017a4:	e000      	b.n	4017a8 <pio_configure_pin_group+0x114>
	}

	return 1;
  4017a6:	2301      	movs	r3, #1
}
  4017a8:	4618      	mov	r0, r3
  4017aa:	3714      	adds	r7, #20
  4017ac:	46bd      	mov	sp, r7
  4017ae:	bd90      	pop	{r4, r7, pc}
  4017b0:	004012ab 	.word	0x004012ab
  4017b4:	00401281 	.word	0x00401281
  4017b8:	004013b9 	.word	0x004013b9
  4017bc:	00401439 	.word	0x00401439

004017c0 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4017c0:	b480      	push	{r7}
  4017c2:	b085      	sub	sp, #20
  4017c4:	af00      	add	r7, sp, #0
  4017c6:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4017c8:	687b      	ldr	r3, [r7, #4]
  4017ca:	095b      	lsrs	r3, r3, #5
  4017cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4017d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4017d4:	025b      	lsls	r3, r3, #9
  4017d6:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4017d8:	68fb      	ldr	r3, [r7, #12]
}
  4017da:	4618      	mov	r0, r3
  4017dc:	3714      	adds	r7, #20
  4017de:	46bd      	mov	sp, r7
  4017e0:	bc80      	pop	{r7}
  4017e2:	4770      	bx	lr

004017e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4017e4:	b580      	push	{r7, lr}
  4017e6:	b084      	sub	sp, #16
  4017e8:	af00      	add	r7, sp, #0
  4017ea:	6078      	str	r0, [r7, #4]
  4017ec:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4017ee:	6878      	ldr	r0, [r7, #4]
  4017f0:	4b2c      	ldr	r3, [pc, #176]	; (4018a4 <pio_handler_process+0xc0>)
  4017f2:	4798      	blx	r3
  4017f4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4017f6:	6878      	ldr	r0, [r7, #4]
  4017f8:	4b2b      	ldr	r3, [pc, #172]	; (4018a8 <pio_handler_process+0xc4>)
  4017fa:	4798      	blx	r3
  4017fc:	4602      	mov	r2, r0
  4017fe:	68fb      	ldr	r3, [r7, #12]
  401800:	4013      	ands	r3, r2
  401802:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401804:	68fb      	ldr	r3, [r7, #12]
  401806:	2b00      	cmp	r3, #0
  401808:	d03c      	beq.n	401884 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40180a:	2300      	movs	r3, #0
  40180c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40180e:	e034      	b.n	40187a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401810:	4a26      	ldr	r2, [pc, #152]	; (4018ac <pio_handler_process+0xc8>)
  401812:	68bb      	ldr	r3, [r7, #8]
  401814:	011b      	lsls	r3, r3, #4
  401816:	4413      	add	r3, r2
  401818:	681a      	ldr	r2, [r3, #0]
  40181a:	683b      	ldr	r3, [r7, #0]
  40181c:	429a      	cmp	r2, r3
  40181e:	d126      	bne.n	40186e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401820:	4a22      	ldr	r2, [pc, #136]	; (4018ac <pio_handler_process+0xc8>)
  401822:	68bb      	ldr	r3, [r7, #8]
  401824:	011b      	lsls	r3, r3, #4
  401826:	4413      	add	r3, r2
  401828:	3304      	adds	r3, #4
  40182a:	681a      	ldr	r2, [r3, #0]
  40182c:	68fb      	ldr	r3, [r7, #12]
  40182e:	4013      	ands	r3, r2
  401830:	2b00      	cmp	r3, #0
  401832:	d01c      	beq.n	40186e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401834:	4a1d      	ldr	r2, [pc, #116]	; (4018ac <pio_handler_process+0xc8>)
  401836:	68bb      	ldr	r3, [r7, #8]
  401838:	011b      	lsls	r3, r3, #4
  40183a:	4413      	add	r3, r2
  40183c:	330c      	adds	r3, #12
  40183e:	681b      	ldr	r3, [r3, #0]
  401840:	491a      	ldr	r1, [pc, #104]	; (4018ac <pio_handler_process+0xc8>)
  401842:	68ba      	ldr	r2, [r7, #8]
  401844:	0112      	lsls	r2, r2, #4
  401846:	440a      	add	r2, r1
  401848:	6810      	ldr	r0, [r2, #0]
  40184a:	4918      	ldr	r1, [pc, #96]	; (4018ac <pio_handler_process+0xc8>)
  40184c:	68ba      	ldr	r2, [r7, #8]
  40184e:	0112      	lsls	r2, r2, #4
  401850:	440a      	add	r2, r1
  401852:	3204      	adds	r2, #4
  401854:	6812      	ldr	r2, [r2, #0]
  401856:	4611      	mov	r1, r2
  401858:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40185a:	4a14      	ldr	r2, [pc, #80]	; (4018ac <pio_handler_process+0xc8>)
  40185c:	68bb      	ldr	r3, [r7, #8]
  40185e:	011b      	lsls	r3, r3, #4
  401860:	4413      	add	r3, r2
  401862:	3304      	adds	r3, #4
  401864:	681b      	ldr	r3, [r3, #0]
  401866:	43db      	mvns	r3, r3
  401868:	68fa      	ldr	r2, [r7, #12]
  40186a:	4013      	ands	r3, r2
  40186c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40186e:	68bb      	ldr	r3, [r7, #8]
  401870:	3301      	adds	r3, #1
  401872:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  401874:	68bb      	ldr	r3, [r7, #8]
  401876:	2b06      	cmp	r3, #6
  401878:	d803      	bhi.n	401882 <pio_handler_process+0x9e>
		while (status != 0) {
  40187a:	68fb      	ldr	r3, [r7, #12]
  40187c:	2b00      	cmp	r3, #0
  40187e:	d1c7      	bne.n	401810 <pio_handler_process+0x2c>
  401880:	e000      	b.n	401884 <pio_handler_process+0xa0>
				break;
  401882:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401884:	4b0a      	ldr	r3, [pc, #40]	; (4018b0 <pio_handler_process+0xcc>)
  401886:	681b      	ldr	r3, [r3, #0]
  401888:	2b00      	cmp	r3, #0
  40188a:	d007      	beq.n	40189c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  40188c:	4b09      	ldr	r3, [pc, #36]	; (4018b4 <pio_handler_process+0xd0>)
  40188e:	681b      	ldr	r3, [r3, #0]
  401890:	2b00      	cmp	r3, #0
  401892:	d003      	beq.n	40189c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  401894:	4b07      	ldr	r3, [pc, #28]	; (4018b4 <pio_handler_process+0xd0>)
  401896:	681b      	ldr	r3, [r3, #0]
  401898:	6878      	ldr	r0, [r7, #4]
  40189a:	4798      	blx	r3
		}
	}
#endif
}
  40189c:	bf00      	nop
  40189e:	3710      	adds	r7, #16
  4018a0:	46bd      	mov	sp, r7
  4018a2:	bd80      	pop	{r7, pc}
  4018a4:	004014b7 	.word	0x004014b7
  4018a8:	004014cd 	.word	0x004014cd
  4018ac:	200009e4 	.word	0x200009e4
  4018b0:	20000eac 	.word	0x20000eac
  4018b4:	20000a54 	.word	0x20000a54

004018b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4018b8:	b580      	push	{r7, lr}
  4018ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4018bc:	210b      	movs	r1, #11
  4018be:	4802      	ldr	r0, [pc, #8]	; (4018c8 <PIOA_Handler+0x10>)
  4018c0:	4b02      	ldr	r3, [pc, #8]	; (4018cc <PIOA_Handler+0x14>)
  4018c2:	4798      	blx	r3
}
  4018c4:	bf00      	nop
  4018c6:	bd80      	pop	{r7, pc}
  4018c8:	400e0e00 	.word	0x400e0e00
  4018cc:	004017e5 	.word	0x004017e5

004018d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4018d0:	b580      	push	{r7, lr}
  4018d2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4018d4:	210c      	movs	r1, #12
  4018d6:	4802      	ldr	r0, [pc, #8]	; (4018e0 <PIOB_Handler+0x10>)
  4018d8:	4b02      	ldr	r3, [pc, #8]	; (4018e4 <PIOB_Handler+0x14>)
  4018da:	4798      	blx	r3
}
  4018dc:	bf00      	nop
  4018de:	bd80      	pop	{r7, pc}
  4018e0:	400e1000 	.word	0x400e1000
  4018e4:	004017e5 	.word	0x004017e5

004018e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4018e8:	b580      	push	{r7, lr}
  4018ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4018ec:	210d      	movs	r1, #13
  4018ee:	4802      	ldr	r0, [pc, #8]	; (4018f8 <PIOC_Handler+0x10>)
  4018f0:	4b02      	ldr	r3, [pc, #8]	; (4018fc <PIOC_Handler+0x14>)
  4018f2:	4798      	blx	r3
}
  4018f4:	bf00      	nop
  4018f6:	bd80      	pop	{r7, pc}
  4018f8:	400e1200 	.word	0x400e1200
  4018fc:	004017e5 	.word	0x004017e5

00401900 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401900:	b480      	push	{r7}
  401902:	b085      	sub	sp, #20
  401904:	af00      	add	r7, sp, #0
  401906:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401908:	491c      	ldr	r1, [pc, #112]	; (40197c <pmc_switch_mck_to_pllack+0x7c>)
  40190a:	4b1c      	ldr	r3, [pc, #112]	; (40197c <pmc_switch_mck_to_pllack+0x7c>)
  40190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40190e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401912:	687b      	ldr	r3, [r7, #4]
  401914:	4313      	orrs	r3, r2
  401916:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401918:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40191c:	60fb      	str	r3, [r7, #12]
  40191e:	e007      	b.n	401930 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401920:	68fb      	ldr	r3, [r7, #12]
  401922:	2b00      	cmp	r3, #0
  401924:	d101      	bne.n	40192a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401926:	2301      	movs	r3, #1
  401928:	e023      	b.n	401972 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40192a:	68fb      	ldr	r3, [r7, #12]
  40192c:	3b01      	subs	r3, #1
  40192e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401930:	4b12      	ldr	r3, [pc, #72]	; (40197c <pmc_switch_mck_to_pllack+0x7c>)
  401932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401934:	f003 0308 	and.w	r3, r3, #8
  401938:	2b00      	cmp	r3, #0
  40193a:	d0f1      	beq.n	401920 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40193c:	4a0f      	ldr	r2, [pc, #60]	; (40197c <pmc_switch_mck_to_pllack+0x7c>)
  40193e:	4b0f      	ldr	r3, [pc, #60]	; (40197c <pmc_switch_mck_to_pllack+0x7c>)
  401940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401942:	f023 0303 	bic.w	r3, r3, #3
  401946:	f043 0302 	orr.w	r3, r3, #2
  40194a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40194c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401950:	60fb      	str	r3, [r7, #12]
  401952:	e007      	b.n	401964 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401954:	68fb      	ldr	r3, [r7, #12]
  401956:	2b00      	cmp	r3, #0
  401958:	d101      	bne.n	40195e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40195a:	2301      	movs	r3, #1
  40195c:	e009      	b.n	401972 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40195e:	68fb      	ldr	r3, [r7, #12]
  401960:	3b01      	subs	r3, #1
  401962:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401964:	4b05      	ldr	r3, [pc, #20]	; (40197c <pmc_switch_mck_to_pllack+0x7c>)
  401966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401968:	f003 0308 	and.w	r3, r3, #8
  40196c:	2b00      	cmp	r3, #0
  40196e:	d0f1      	beq.n	401954 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401970:	2300      	movs	r3, #0
}
  401972:	4618      	mov	r0, r3
  401974:	3714      	adds	r7, #20
  401976:	46bd      	mov	sp, r7
  401978:	bc80      	pop	{r7}
  40197a:	4770      	bx	lr
  40197c:	400e0400 	.word	0x400e0400

00401980 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401980:	b480      	push	{r7}
  401982:	b083      	sub	sp, #12
  401984:	af00      	add	r7, sp, #0
  401986:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401988:	687b      	ldr	r3, [r7, #4]
  40198a:	2b01      	cmp	r3, #1
  40198c:	d107      	bne.n	40199e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40198e:	4a08      	ldr	r2, [pc, #32]	; (4019b0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401990:	4b07      	ldr	r3, [pc, #28]	; (4019b0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401992:	689b      	ldr	r3, [r3, #8]
  401994:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40199c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40199e:	4b04      	ldr	r3, [pc, #16]	; (4019b0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4019a0:	4a04      	ldr	r2, [pc, #16]	; (4019b4 <pmc_switch_sclk_to_32kxtal+0x34>)
  4019a2:	601a      	str	r2, [r3, #0]
}
  4019a4:	bf00      	nop
  4019a6:	370c      	adds	r7, #12
  4019a8:	46bd      	mov	sp, r7
  4019aa:	bc80      	pop	{r7}
  4019ac:	4770      	bx	lr
  4019ae:	bf00      	nop
  4019b0:	400e1410 	.word	0x400e1410
  4019b4:	a5000008 	.word	0xa5000008

004019b8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4019b8:	b480      	push	{r7}
  4019ba:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4019bc:	4b09      	ldr	r3, [pc, #36]	; (4019e4 <pmc_osc_is_ready_32kxtal+0x2c>)
  4019be:	695b      	ldr	r3, [r3, #20]
  4019c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4019c4:	2b00      	cmp	r3, #0
  4019c6:	d007      	beq.n	4019d8 <pmc_osc_is_ready_32kxtal+0x20>
  4019c8:	4b07      	ldr	r3, [pc, #28]	; (4019e8 <pmc_osc_is_ready_32kxtal+0x30>)
  4019ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4019d0:	2b00      	cmp	r3, #0
  4019d2:	d001      	beq.n	4019d8 <pmc_osc_is_ready_32kxtal+0x20>
  4019d4:	2301      	movs	r3, #1
  4019d6:	e000      	b.n	4019da <pmc_osc_is_ready_32kxtal+0x22>
  4019d8:	2300      	movs	r3, #0
}
  4019da:	4618      	mov	r0, r3
  4019dc:	46bd      	mov	sp, r7
  4019de:	bc80      	pop	{r7}
  4019e0:	4770      	bx	lr
  4019e2:	bf00      	nop
  4019e4:	400e1410 	.word	0x400e1410
  4019e8:	400e0400 	.word	0x400e0400

004019ec <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4019ec:	b480      	push	{r7}
  4019ee:	b083      	sub	sp, #12
  4019f0:	af00      	add	r7, sp, #0
  4019f2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4019f4:	4a18      	ldr	r2, [pc, #96]	; (401a58 <pmc_switch_mainck_to_fastrc+0x6c>)
  4019f6:	4b18      	ldr	r3, [pc, #96]	; (401a58 <pmc_switch_mainck_to_fastrc+0x6c>)
  4019f8:	6a1b      	ldr	r3, [r3, #32]
  4019fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4019fe:	f043 0308 	orr.w	r3, r3, #8
  401a02:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401a04:	bf00      	nop
  401a06:	4b14      	ldr	r3, [pc, #80]	; (401a58 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401a0e:	2b00      	cmp	r3, #0
  401a10:	d0f9      	beq.n	401a06 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401a12:	4911      	ldr	r1, [pc, #68]	; (401a58 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a14:	4b10      	ldr	r3, [pc, #64]	; (401a58 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a16:	6a1b      	ldr	r3, [r3, #32]
  401a18:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401a20:	687a      	ldr	r2, [r7, #4]
  401a22:	4313      	orrs	r3, r2
  401a24:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401a28:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401a2a:	bf00      	nop
  401a2c:	4b0a      	ldr	r3, [pc, #40]	; (401a58 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401a34:	2b00      	cmp	r3, #0
  401a36:	d0f9      	beq.n	401a2c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401a38:	4a07      	ldr	r2, [pc, #28]	; (401a58 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a3a:	4b07      	ldr	r3, [pc, #28]	; (401a58 <pmc_switch_mainck_to_fastrc+0x6c>)
  401a3c:	6a1b      	ldr	r3, [r3, #32]
  401a3e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401a46:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401a4a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401a4c:	bf00      	nop
  401a4e:	370c      	adds	r7, #12
  401a50:	46bd      	mov	sp, r7
  401a52:	bc80      	pop	{r7}
  401a54:	4770      	bx	lr
  401a56:	bf00      	nop
  401a58:	400e0400 	.word	0x400e0400

00401a5c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401a5c:	b480      	push	{r7}
  401a5e:	b083      	sub	sp, #12
  401a60:	af00      	add	r7, sp, #0
  401a62:	6078      	str	r0, [r7, #4]
  401a64:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401a66:	687b      	ldr	r3, [r7, #4]
  401a68:	2b00      	cmp	r3, #0
  401a6a:	d008      	beq.n	401a7e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401a6c:	4916      	ldr	r1, [pc, #88]	; (401ac8 <pmc_switch_mainck_to_xtal+0x6c>)
  401a6e:	4b16      	ldr	r3, [pc, #88]	; (401ac8 <pmc_switch_mainck_to_xtal+0x6c>)
  401a70:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401a72:	4a16      	ldr	r2, [pc, #88]	; (401acc <pmc_switch_mainck_to_xtal+0x70>)
  401a74:	401a      	ands	r2, r3
  401a76:	4b16      	ldr	r3, [pc, #88]	; (401ad0 <pmc_switch_mainck_to_xtal+0x74>)
  401a78:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401a7a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401a7c:	e01e      	b.n	401abc <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401a7e:	4912      	ldr	r1, [pc, #72]	; (401ac8 <pmc_switch_mainck_to_xtal+0x6c>)
  401a80:	4b11      	ldr	r3, [pc, #68]	; (401ac8 <pmc_switch_mainck_to_xtal+0x6c>)
  401a82:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401a84:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401a88:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401a8c:	683a      	ldr	r2, [r7, #0]
  401a8e:	0212      	lsls	r2, r2, #8
  401a90:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401a92:	4313      	orrs	r3, r2
  401a94:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401a98:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401a9c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401a9e:	bf00      	nop
  401aa0:	4b09      	ldr	r3, [pc, #36]	; (401ac8 <pmc_switch_mainck_to_xtal+0x6c>)
  401aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401aa4:	f003 0301 	and.w	r3, r3, #1
  401aa8:	2b00      	cmp	r3, #0
  401aaa:	d0f9      	beq.n	401aa0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401aac:	4a06      	ldr	r2, [pc, #24]	; (401ac8 <pmc_switch_mainck_to_xtal+0x6c>)
  401aae:	4b06      	ldr	r3, [pc, #24]	; (401ac8 <pmc_switch_mainck_to_xtal+0x6c>)
  401ab0:	6a1b      	ldr	r3, [r3, #32]
  401ab2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401aba:	6213      	str	r3, [r2, #32]
}
  401abc:	bf00      	nop
  401abe:	370c      	adds	r7, #12
  401ac0:	46bd      	mov	sp, r7
  401ac2:	bc80      	pop	{r7}
  401ac4:	4770      	bx	lr
  401ac6:	bf00      	nop
  401ac8:	400e0400 	.word	0x400e0400
  401acc:	fec8fffc 	.word	0xfec8fffc
  401ad0:	01370002 	.word	0x01370002

00401ad4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401ad4:	b480      	push	{r7}
  401ad6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401ad8:	4b03      	ldr	r3, [pc, #12]	; (401ae8 <pmc_osc_is_ready_mainck+0x14>)
  401ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401ae0:	4618      	mov	r0, r3
  401ae2:	46bd      	mov	sp, r7
  401ae4:	bc80      	pop	{r7}
  401ae6:	4770      	bx	lr
  401ae8:	400e0400 	.word	0x400e0400

00401aec <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401aec:	b480      	push	{r7}
  401aee:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401af0:	4b03      	ldr	r3, [pc, #12]	; (401b00 <pmc_disable_pllack+0x14>)
  401af2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401af6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401af8:	bf00      	nop
  401afa:	46bd      	mov	sp, r7
  401afc:	bc80      	pop	{r7}
  401afe:	4770      	bx	lr
  401b00:	400e0400 	.word	0x400e0400

00401b04 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401b04:	b480      	push	{r7}
  401b06:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401b08:	4b03      	ldr	r3, [pc, #12]	; (401b18 <pmc_is_locked_pllack+0x14>)
  401b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b0c:	f003 0302 	and.w	r3, r3, #2
}
  401b10:	4618      	mov	r0, r3
  401b12:	46bd      	mov	sp, r7
  401b14:	bc80      	pop	{r7}
  401b16:	4770      	bx	lr
  401b18:	400e0400 	.word	0x400e0400

00401b1c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401b1c:	b480      	push	{r7}
  401b1e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401b20:	4b03      	ldr	r3, [pc, #12]	; (401b30 <pmc_disable_pllbck+0x14>)
  401b22:	2200      	movs	r2, #0
  401b24:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401b26:	bf00      	nop
  401b28:	46bd      	mov	sp, r7
  401b2a:	bc80      	pop	{r7}
  401b2c:	4770      	bx	lr
  401b2e:	bf00      	nop
  401b30:	400e0400 	.word	0x400e0400

00401b34 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401b34:	b480      	push	{r7}
  401b36:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401b38:	4b03      	ldr	r3, [pc, #12]	; (401b48 <pmc_is_locked_pllbck+0x14>)
  401b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401b3c:	f003 0304 	and.w	r3, r3, #4
}
  401b40:	4618      	mov	r0, r3
  401b42:	46bd      	mov	sp, r7
  401b44:	bc80      	pop	{r7}
  401b46:	4770      	bx	lr
  401b48:	400e0400 	.word	0x400e0400

00401b4c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401b4c:	b480      	push	{r7}
  401b4e:	b083      	sub	sp, #12
  401b50:	af00      	add	r7, sp, #0
  401b52:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401b54:	687b      	ldr	r3, [r7, #4]
  401b56:	2b22      	cmp	r3, #34	; 0x22
  401b58:	d901      	bls.n	401b5e <pmc_enable_periph_clk+0x12>
		return 1;
  401b5a:	2301      	movs	r3, #1
  401b5c:	e02f      	b.n	401bbe <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401b5e:	687b      	ldr	r3, [r7, #4]
  401b60:	2b1f      	cmp	r3, #31
  401b62:	d813      	bhi.n	401b8c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401b64:	4b18      	ldr	r3, [pc, #96]	; (401bc8 <pmc_enable_periph_clk+0x7c>)
  401b66:	699a      	ldr	r2, [r3, #24]
  401b68:	2101      	movs	r1, #1
  401b6a:	687b      	ldr	r3, [r7, #4]
  401b6c:	fa01 f303 	lsl.w	r3, r1, r3
  401b70:	401a      	ands	r2, r3
  401b72:	2101      	movs	r1, #1
  401b74:	687b      	ldr	r3, [r7, #4]
  401b76:	fa01 f303 	lsl.w	r3, r1, r3
  401b7a:	429a      	cmp	r2, r3
  401b7c:	d01e      	beq.n	401bbc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401b7e:	4a12      	ldr	r2, [pc, #72]	; (401bc8 <pmc_enable_periph_clk+0x7c>)
  401b80:	2101      	movs	r1, #1
  401b82:	687b      	ldr	r3, [r7, #4]
  401b84:	fa01 f303 	lsl.w	r3, r1, r3
  401b88:	6113      	str	r3, [r2, #16]
  401b8a:	e017      	b.n	401bbc <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	3b20      	subs	r3, #32
  401b90:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401b92:	4b0d      	ldr	r3, [pc, #52]	; (401bc8 <pmc_enable_periph_clk+0x7c>)
  401b94:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401b98:	2101      	movs	r1, #1
  401b9a:	687b      	ldr	r3, [r7, #4]
  401b9c:	fa01 f303 	lsl.w	r3, r1, r3
  401ba0:	401a      	ands	r2, r3
  401ba2:	2101      	movs	r1, #1
  401ba4:	687b      	ldr	r3, [r7, #4]
  401ba6:	fa01 f303 	lsl.w	r3, r1, r3
  401baa:	429a      	cmp	r2, r3
  401bac:	d006      	beq.n	401bbc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401bae:	4a06      	ldr	r2, [pc, #24]	; (401bc8 <pmc_enable_periph_clk+0x7c>)
  401bb0:	2101      	movs	r1, #1
  401bb2:	687b      	ldr	r3, [r7, #4]
  401bb4:	fa01 f303 	lsl.w	r3, r1, r3
  401bb8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401bbc:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401bbe:	4618      	mov	r0, r3
  401bc0:	370c      	adds	r7, #12
  401bc2:	46bd      	mov	sp, r7
  401bc4:	bc80      	pop	{r7}
  401bc6:	4770      	bx	lr
  401bc8:	400e0400 	.word	0x400e0400

00401bcc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401bcc:	b480      	push	{r7}
  401bce:	b085      	sub	sp, #20
  401bd0:	af00      	add	r7, sp, #0
  401bd2:	6078      	str	r0, [r7, #4]
  401bd4:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401bd6:	2300      	movs	r3, #0
  401bd8:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401bda:	687b      	ldr	r3, [r7, #4]
  401bdc:	22ac      	movs	r2, #172	; 0xac
  401bde:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401be0:	683b      	ldr	r3, [r7, #0]
  401be2:	681a      	ldr	r2, [r3, #0]
  401be4:	683b      	ldr	r3, [r7, #0]
  401be6:	685b      	ldr	r3, [r3, #4]
  401be8:	fbb2 f3f3 	udiv	r3, r2, r3
  401bec:	091b      	lsrs	r3, r3, #4
  401bee:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401bf0:	68fb      	ldr	r3, [r7, #12]
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	d003      	beq.n	401bfe <uart_init+0x32>
  401bf6:	68fb      	ldr	r3, [r7, #12]
  401bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401bfc:	d301      	bcc.n	401c02 <uart_init+0x36>
		return 1;
  401bfe:	2301      	movs	r3, #1
  401c00:	e00f      	b.n	401c22 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  401c02:	687b      	ldr	r3, [r7, #4]
  401c04:	68fa      	ldr	r2, [r7, #12]
  401c06:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401c08:	683b      	ldr	r3, [r7, #0]
  401c0a:	689a      	ldr	r2, [r3, #8]
  401c0c:	687b      	ldr	r3, [r7, #4]
  401c0e:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401c10:	687b      	ldr	r3, [r7, #4]
  401c12:	f240 2202 	movw	r2, #514	; 0x202
  401c16:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401c1a:	687b      	ldr	r3, [r7, #4]
  401c1c:	2250      	movs	r2, #80	; 0x50
  401c1e:	601a      	str	r2, [r3, #0]

	return 0;
  401c20:	2300      	movs	r3, #0
}
  401c22:	4618      	mov	r0, r3
  401c24:	3714      	adds	r7, #20
  401c26:	46bd      	mov	sp, r7
  401c28:	bc80      	pop	{r7}
  401c2a:	4770      	bx	lr

00401c2c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401c2c:	b480      	push	{r7}
  401c2e:	b083      	sub	sp, #12
  401c30:	af00      	add	r7, sp, #0
  401c32:	6078      	str	r0, [r7, #4]
  401c34:	460b      	mov	r3, r1
  401c36:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401c38:	687b      	ldr	r3, [r7, #4]
  401c3a:	695b      	ldr	r3, [r3, #20]
  401c3c:	f003 0302 	and.w	r3, r3, #2
  401c40:	2b00      	cmp	r3, #0
  401c42:	d101      	bne.n	401c48 <uart_write+0x1c>
		return 1;
  401c44:	2301      	movs	r3, #1
  401c46:	e003      	b.n	401c50 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401c48:	78fa      	ldrb	r2, [r7, #3]
  401c4a:	687b      	ldr	r3, [r7, #4]
  401c4c:	61da      	str	r2, [r3, #28]
	return 0;
  401c4e:	2300      	movs	r3, #0
}
  401c50:	4618      	mov	r0, r3
  401c52:	370c      	adds	r7, #12
  401c54:	46bd      	mov	sp, r7
  401c56:	bc80      	pop	{r7}
  401c58:	4770      	bx	lr

00401c5a <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401c5a:	b480      	push	{r7}
  401c5c:	b083      	sub	sp, #12
  401c5e:	af00      	add	r7, sp, #0
  401c60:	6078      	str	r0, [r7, #4]
  401c62:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401c64:	687b      	ldr	r3, [r7, #4]
  401c66:	695b      	ldr	r3, [r3, #20]
  401c68:	f003 0301 	and.w	r3, r3, #1
  401c6c:	2b00      	cmp	r3, #0
  401c6e:	d101      	bne.n	401c74 <uart_read+0x1a>
		return 1;
  401c70:	2301      	movs	r3, #1
  401c72:	e005      	b.n	401c80 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401c74:	687b      	ldr	r3, [r7, #4]
  401c76:	699b      	ldr	r3, [r3, #24]
  401c78:	b2da      	uxtb	r2, r3
  401c7a:	683b      	ldr	r3, [r7, #0]
  401c7c:	701a      	strb	r2, [r3, #0]
	return 0;
  401c7e:	2300      	movs	r3, #0
}
  401c80:	4618      	mov	r0, r3
  401c82:	370c      	adds	r7, #12
  401c84:	46bd      	mov	sp, r7
  401c86:	bc80      	pop	{r7}
  401c88:	4770      	bx	lr

00401c8a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401c8a:	b480      	push	{r7}
  401c8c:	b089      	sub	sp, #36	; 0x24
  401c8e:	af00      	add	r7, sp, #0
  401c90:	60f8      	str	r0, [r7, #12]
  401c92:	60b9      	str	r1, [r7, #8]
  401c94:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401c96:	68bb      	ldr	r3, [r7, #8]
  401c98:	011a      	lsls	r2, r3, #4
  401c9a:	687b      	ldr	r3, [r7, #4]
  401c9c:	429a      	cmp	r2, r3
  401c9e:	d802      	bhi.n	401ca6 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401ca0:	2310      	movs	r3, #16
  401ca2:	61fb      	str	r3, [r7, #28]
  401ca4:	e001      	b.n	401caa <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401ca6:	2308      	movs	r3, #8
  401ca8:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401caa:	687b      	ldr	r3, [r7, #4]
  401cac:	00da      	lsls	r2, r3, #3
  401cae:	69fb      	ldr	r3, [r7, #28]
  401cb0:	68b9      	ldr	r1, [r7, #8]
  401cb2:	fb01 f303 	mul.w	r3, r1, r3
  401cb6:	085b      	lsrs	r3, r3, #1
  401cb8:	441a      	add	r2, r3
  401cba:	69fb      	ldr	r3, [r7, #28]
  401cbc:	68b9      	ldr	r1, [r7, #8]
  401cbe:	fb01 f303 	mul.w	r3, r1, r3
  401cc2:	fbb2 f3f3 	udiv	r3, r2, r3
  401cc6:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401cc8:	69bb      	ldr	r3, [r7, #24]
  401cca:	08db      	lsrs	r3, r3, #3
  401ccc:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401cce:	69bb      	ldr	r3, [r7, #24]
  401cd0:	f003 0307 	and.w	r3, r3, #7
  401cd4:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401cd6:	697b      	ldr	r3, [r7, #20]
  401cd8:	2b00      	cmp	r3, #0
  401cda:	d003      	beq.n	401ce4 <usart_set_async_baudrate+0x5a>
  401cdc:	697b      	ldr	r3, [r7, #20]
  401cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401ce2:	d301      	bcc.n	401ce8 <usart_set_async_baudrate+0x5e>
		return 1;
  401ce4:	2301      	movs	r3, #1
  401ce6:	e00f      	b.n	401d08 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401ce8:	69fb      	ldr	r3, [r7, #28]
  401cea:	2b08      	cmp	r3, #8
  401cec:	d105      	bne.n	401cfa <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401cee:	68fb      	ldr	r3, [r7, #12]
  401cf0:	685b      	ldr	r3, [r3, #4]
  401cf2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401cf6:	68fb      	ldr	r3, [r7, #12]
  401cf8:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401cfa:	693b      	ldr	r3, [r7, #16]
  401cfc:	041a      	lsls	r2, r3, #16
  401cfe:	697b      	ldr	r3, [r7, #20]
  401d00:	431a      	orrs	r2, r3
  401d02:	68fb      	ldr	r3, [r7, #12]
  401d04:	621a      	str	r2, [r3, #32]

	return 0;
  401d06:	2300      	movs	r3, #0
}
  401d08:	4618      	mov	r0, r3
  401d0a:	3724      	adds	r7, #36	; 0x24
  401d0c:	46bd      	mov	sp, r7
  401d0e:	bc80      	pop	{r7}
  401d10:	4770      	bx	lr
	...

00401d14 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401d14:	b580      	push	{r7, lr}
  401d16:	b082      	sub	sp, #8
  401d18:	af00      	add	r7, sp, #0
  401d1a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401d1c:	6878      	ldr	r0, [r7, #4]
  401d1e:	4b0f      	ldr	r3, [pc, #60]	; (401d5c <usart_reset+0x48>)
  401d20:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401d22:	687b      	ldr	r3, [r7, #4]
  401d24:	2200      	movs	r2, #0
  401d26:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401d28:	687b      	ldr	r3, [r7, #4]
  401d2a:	2200      	movs	r2, #0
  401d2c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401d2e:	687b      	ldr	r3, [r7, #4]
  401d30:	2200      	movs	r2, #0
  401d32:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401d34:	6878      	ldr	r0, [r7, #4]
  401d36:	4b0a      	ldr	r3, [pc, #40]	; (401d60 <usart_reset+0x4c>)
  401d38:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401d3a:	6878      	ldr	r0, [r7, #4]
  401d3c:	4b09      	ldr	r3, [pc, #36]	; (401d64 <usart_reset+0x50>)
  401d3e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401d40:	6878      	ldr	r0, [r7, #4]
  401d42:	4b09      	ldr	r3, [pc, #36]	; (401d68 <usart_reset+0x54>)
  401d44:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401d46:	6878      	ldr	r0, [r7, #4]
  401d48:	4b08      	ldr	r3, [pc, #32]	; (401d6c <usart_reset+0x58>)
  401d4a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  401d4c:	6878      	ldr	r0, [r7, #4]
  401d4e:	4b08      	ldr	r3, [pc, #32]	; (401d70 <usart_reset+0x5c>)
  401d50:	4798      	blx	r3
#endif
}
  401d52:	bf00      	nop
  401d54:	3708      	adds	r7, #8
  401d56:	46bd      	mov	sp, r7
  401d58:	bd80      	pop	{r7, pc}
  401d5a:	bf00      	nop
  401d5c:	00401f69 	.word	0x00401f69
  401d60:	00401e11 	.word	0x00401e11
  401d64:	00401e41 	.word	0x00401e41
  401d68:	00401e89 	.word	0x00401e89
  401d6c:	00401ebd 	.word	0x00401ebd
  401d70:	00401ea3 	.word	0x00401ea3

00401d74 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401d74:	b580      	push	{r7, lr}
  401d76:	b084      	sub	sp, #16
  401d78:	af00      	add	r7, sp, #0
  401d7a:	60f8      	str	r0, [r7, #12]
  401d7c:	60b9      	str	r1, [r7, #8]
  401d7e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401d80:	68f8      	ldr	r0, [r7, #12]
  401d82:	4b1a      	ldr	r3, [pc, #104]	; (401dec <usart_init_rs232+0x78>)
  401d84:	4798      	blx	r3

	ul_reg_val = 0;
  401d86:	4b1a      	ldr	r3, [pc, #104]	; (401df0 <usart_init_rs232+0x7c>)
  401d88:	2200      	movs	r2, #0
  401d8a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401d8c:	68bb      	ldr	r3, [r7, #8]
  401d8e:	2b00      	cmp	r3, #0
  401d90:	d009      	beq.n	401da6 <usart_init_rs232+0x32>
  401d92:	68bb      	ldr	r3, [r7, #8]
  401d94:	681b      	ldr	r3, [r3, #0]
  401d96:	687a      	ldr	r2, [r7, #4]
  401d98:	4619      	mov	r1, r3
  401d9a:	68f8      	ldr	r0, [r7, #12]
  401d9c:	4b15      	ldr	r3, [pc, #84]	; (401df4 <usart_init_rs232+0x80>)
  401d9e:	4798      	blx	r3
  401da0:	4603      	mov	r3, r0
  401da2:	2b00      	cmp	r3, #0
  401da4:	d001      	beq.n	401daa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401da6:	2301      	movs	r3, #1
  401da8:	e01b      	b.n	401de2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401daa:	68bb      	ldr	r3, [r7, #8]
  401dac:	685a      	ldr	r2, [r3, #4]
  401dae:	68bb      	ldr	r3, [r7, #8]
  401db0:	689b      	ldr	r3, [r3, #8]
  401db2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401db4:	68bb      	ldr	r3, [r7, #8]
  401db6:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401db8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401dba:	68bb      	ldr	r3, [r7, #8]
  401dbc:	68db      	ldr	r3, [r3, #12]
  401dbe:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401dc0:	4b0b      	ldr	r3, [pc, #44]	; (401df0 <usart_init_rs232+0x7c>)
  401dc2:	681b      	ldr	r3, [r3, #0]
  401dc4:	4313      	orrs	r3, r2
  401dc6:	4a0a      	ldr	r2, [pc, #40]	; (401df0 <usart_init_rs232+0x7c>)
  401dc8:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401dca:	4b09      	ldr	r3, [pc, #36]	; (401df0 <usart_init_rs232+0x7c>)
  401dcc:	681b      	ldr	r3, [r3, #0]
  401dce:	4a08      	ldr	r2, [pc, #32]	; (401df0 <usart_init_rs232+0x7c>)
  401dd0:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401dd2:	68fb      	ldr	r3, [r7, #12]
  401dd4:	685a      	ldr	r2, [r3, #4]
  401dd6:	4b06      	ldr	r3, [pc, #24]	; (401df0 <usart_init_rs232+0x7c>)
  401dd8:	681b      	ldr	r3, [r3, #0]
  401dda:	431a      	orrs	r2, r3
  401ddc:	68fb      	ldr	r3, [r7, #12]
  401dde:	605a      	str	r2, [r3, #4]

	return 0;
  401de0:	2300      	movs	r3, #0
}
  401de2:	4618      	mov	r0, r3
  401de4:	3710      	adds	r7, #16
  401de6:	46bd      	mov	sp, r7
  401de8:	bd80      	pop	{r7, pc}
  401dea:	bf00      	nop
  401dec:	00401d15 	.word	0x00401d15
  401df0:	20000a58 	.word	0x20000a58
  401df4:	00401c8b 	.word	0x00401c8b

00401df8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401df8:	b480      	push	{r7}
  401dfa:	b083      	sub	sp, #12
  401dfc:	af00      	add	r7, sp, #0
  401dfe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401e00:	687b      	ldr	r3, [r7, #4]
  401e02:	2240      	movs	r2, #64	; 0x40
  401e04:	601a      	str	r2, [r3, #0]
}
  401e06:	bf00      	nop
  401e08:	370c      	adds	r7, #12
  401e0a:	46bd      	mov	sp, r7
  401e0c:	bc80      	pop	{r7}
  401e0e:	4770      	bx	lr

00401e10 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401e10:	b480      	push	{r7}
  401e12:	b083      	sub	sp, #12
  401e14:	af00      	add	r7, sp, #0
  401e16:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401e18:	687b      	ldr	r3, [r7, #4]
  401e1a:	2288      	movs	r2, #136	; 0x88
  401e1c:	601a      	str	r2, [r3, #0]
}
  401e1e:	bf00      	nop
  401e20:	370c      	adds	r7, #12
  401e22:	46bd      	mov	sp, r7
  401e24:	bc80      	pop	{r7}
  401e26:	4770      	bx	lr

00401e28 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401e28:	b480      	push	{r7}
  401e2a:	b083      	sub	sp, #12
  401e2c:	af00      	add	r7, sp, #0
  401e2e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401e30:	687b      	ldr	r3, [r7, #4]
  401e32:	2210      	movs	r2, #16
  401e34:	601a      	str	r2, [r3, #0]
}
  401e36:	bf00      	nop
  401e38:	370c      	adds	r7, #12
  401e3a:	46bd      	mov	sp, r7
  401e3c:	bc80      	pop	{r7}
  401e3e:	4770      	bx	lr

00401e40 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401e40:	b480      	push	{r7}
  401e42:	b083      	sub	sp, #12
  401e44:	af00      	add	r7, sp, #0
  401e46:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401e48:	687b      	ldr	r3, [r7, #4]
  401e4a:	2224      	movs	r2, #36	; 0x24
  401e4c:	601a      	str	r2, [r3, #0]
}
  401e4e:	bf00      	nop
  401e50:	370c      	adds	r7, #12
  401e52:	46bd      	mov	sp, r7
  401e54:	bc80      	pop	{r7}
  401e56:	4770      	bx	lr

00401e58 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401e58:	b480      	push	{r7}
  401e5a:	b083      	sub	sp, #12
  401e5c:	af00      	add	r7, sp, #0
  401e5e:	6078      	str	r0, [r7, #4]
  401e60:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  401e62:	687b      	ldr	r3, [r7, #4]
  401e64:	683a      	ldr	r2, [r7, #0]
  401e66:	609a      	str	r2, [r3, #8]
}
  401e68:	bf00      	nop
  401e6a:	370c      	adds	r7, #12
  401e6c:	46bd      	mov	sp, r7
  401e6e:	bc80      	pop	{r7}
  401e70:	4770      	bx	lr

00401e72 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  401e72:	b480      	push	{r7}
  401e74:	b083      	sub	sp, #12
  401e76:	af00      	add	r7, sp, #0
  401e78:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  401e7a:	687b      	ldr	r3, [r7, #4]
  401e7c:	691b      	ldr	r3, [r3, #16]
}
  401e7e:	4618      	mov	r0, r3
  401e80:	370c      	adds	r7, #12
  401e82:	46bd      	mov	sp, r7
  401e84:	bc80      	pop	{r7}
  401e86:	4770      	bx	lr

00401e88 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401e88:	b480      	push	{r7}
  401e8a:	b083      	sub	sp, #12
  401e8c:	af00      	add	r7, sp, #0
  401e8e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401e90:	687b      	ldr	r3, [r7, #4]
  401e92:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e96:	601a      	str	r2, [r3, #0]
}
  401e98:	bf00      	nop
  401e9a:	370c      	adds	r7, #12
  401e9c:	46bd      	mov	sp, r7
  401e9e:	bc80      	pop	{r7}
  401ea0:	4770      	bx	lr

00401ea2 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  401ea2:	b480      	push	{r7}
  401ea4:	b083      	sub	sp, #12
  401ea6:	af00      	add	r7, sp, #0
  401ea8:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  401eaa:	687b      	ldr	r3, [r7, #4]
  401eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401eb0:	601a      	str	r2, [r3, #0]
}
  401eb2:	bf00      	nop
  401eb4:	370c      	adds	r7, #12
  401eb6:	46bd      	mov	sp, r7
  401eb8:	bc80      	pop	{r7}
  401eba:	4770      	bx	lr

00401ebc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401ebc:	b480      	push	{r7}
  401ebe:	b083      	sub	sp, #12
  401ec0:	af00      	add	r7, sp, #0
  401ec2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401ec4:	687b      	ldr	r3, [r7, #4]
  401ec6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401eca:	601a      	str	r2, [r3, #0]
}
  401ecc:	bf00      	nop
  401ece:	370c      	adds	r7, #12
  401ed0:	46bd      	mov	sp, r7
  401ed2:	bc80      	pop	{r7}
  401ed4:	4770      	bx	lr

00401ed6 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401ed6:	b480      	push	{r7}
  401ed8:	b083      	sub	sp, #12
  401eda:	af00      	add	r7, sp, #0
  401edc:	6078      	str	r0, [r7, #4]
  401ede:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401ee0:	687b      	ldr	r3, [r7, #4]
  401ee2:	695b      	ldr	r3, [r3, #20]
  401ee4:	f003 0302 	and.w	r3, r3, #2
  401ee8:	2b00      	cmp	r3, #0
  401eea:	d101      	bne.n	401ef0 <usart_write+0x1a>
		return 1;
  401eec:	2301      	movs	r3, #1
  401eee:	e005      	b.n	401efc <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401ef0:	683b      	ldr	r3, [r7, #0]
  401ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401ef6:	687b      	ldr	r3, [r7, #4]
  401ef8:	61da      	str	r2, [r3, #28]
	return 0;
  401efa:	2300      	movs	r3, #0
}
  401efc:	4618      	mov	r0, r3
  401efe:	370c      	adds	r7, #12
  401f00:	46bd      	mov	sp, r7
  401f02:	bc80      	pop	{r7}
  401f04:	4770      	bx	lr

00401f06 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401f06:	b480      	push	{r7}
  401f08:	b083      	sub	sp, #12
  401f0a:	af00      	add	r7, sp, #0
  401f0c:	6078      	str	r0, [r7, #4]
  401f0e:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f10:	687b      	ldr	r3, [r7, #4]
  401f12:	695b      	ldr	r3, [r3, #20]
  401f14:	f003 0301 	and.w	r3, r3, #1
  401f18:	2b00      	cmp	r3, #0
  401f1a:	d101      	bne.n	401f20 <usart_read+0x1a>
		return 1;
  401f1c:	2301      	movs	r3, #1
  401f1e:	e006      	b.n	401f2e <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401f20:	687b      	ldr	r3, [r7, #4]
  401f22:	699b      	ldr	r3, [r3, #24]
  401f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401f28:	683b      	ldr	r3, [r7, #0]
  401f2a:	601a      	str	r2, [r3, #0]

	return 0;
  401f2c:	2300      	movs	r3, #0
}
  401f2e:	4618      	mov	r0, r3
  401f30:	370c      	adds	r7, #12
  401f32:	46bd      	mov	sp, r7
  401f34:	bc80      	pop	{r7}
  401f36:	4770      	bx	lr

00401f38 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  401f38:	b480      	push	{r7}
  401f3a:	b083      	sub	sp, #12
  401f3c:	af00      	add	r7, sp, #0
  401f3e:	6078      	str	r0, [r7, #4]
  401f40:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f42:	bf00      	nop
  401f44:	687b      	ldr	r3, [r7, #4]
  401f46:	695b      	ldr	r3, [r3, #20]
  401f48:	f003 0301 	and.w	r3, r3, #1
  401f4c:	2b00      	cmp	r3, #0
  401f4e:	d0f9      	beq.n	401f44 <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401f50:	687b      	ldr	r3, [r7, #4]
  401f52:	699b      	ldr	r3, [r3, #24]
  401f54:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401f58:	683b      	ldr	r3, [r7, #0]
  401f5a:	601a      	str	r2, [r3, #0]

	return 0;
  401f5c:	2300      	movs	r3, #0
}
  401f5e:	4618      	mov	r0, r3
  401f60:	370c      	adds	r7, #12
  401f62:	46bd      	mov	sp, r7
  401f64:	bc80      	pop	{r7}
  401f66:	4770      	bx	lr

00401f68 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401f68:	b480      	push	{r7}
  401f6a:	b083      	sub	sp, #12
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401f70:	687b      	ldr	r3, [r7, #4]
  401f72:	4a04      	ldr	r2, [pc, #16]	; (401f84 <usart_disable_writeprotect+0x1c>)
  401f74:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401f78:	bf00      	nop
  401f7a:	370c      	adds	r7, #12
  401f7c:	46bd      	mov	sp, r7
  401f7e:	bc80      	pop	{r7}
  401f80:	4770      	bx	lr
  401f82:	bf00      	nop
  401f84:	55534100 	.word	0x55534100

00401f88 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401f88:	b480      	push	{r7}
  401f8a:	b083      	sub	sp, #12
  401f8c:	af00      	add	r7, sp, #0
  401f8e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401f90:	687b      	ldr	r3, [r7, #4]
  401f92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401f96:	605a      	str	r2, [r3, #4]

}
  401f98:	bf00      	nop
  401f9a:	370c      	adds	r7, #12
  401f9c:	46bd      	mov	sp, r7
  401f9e:	bc80      	pop	{r7}
  401fa0:	4770      	bx	lr
	...

00401fa4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401fa4:	b580      	push	{r7, lr}
  401fa6:	b084      	sub	sp, #16
  401fa8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401faa:	4b27      	ldr	r3, [pc, #156]	; (402048 <Reset_Handler+0xa4>)
  401fac:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401fae:	4b27      	ldr	r3, [pc, #156]	; (40204c <Reset_Handler+0xa8>)
  401fb0:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401fb2:	68fa      	ldr	r2, [r7, #12]
  401fb4:	68bb      	ldr	r3, [r7, #8]
  401fb6:	429a      	cmp	r2, r3
  401fb8:	d90d      	bls.n	401fd6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401fba:	e007      	b.n	401fcc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401fbc:	68bb      	ldr	r3, [r7, #8]
  401fbe:	1d1a      	adds	r2, r3, #4
  401fc0:	60ba      	str	r2, [r7, #8]
  401fc2:	68fa      	ldr	r2, [r7, #12]
  401fc4:	1d11      	adds	r1, r2, #4
  401fc6:	60f9      	str	r1, [r7, #12]
  401fc8:	6812      	ldr	r2, [r2, #0]
  401fca:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401fcc:	68bb      	ldr	r3, [r7, #8]
  401fce:	4a20      	ldr	r2, [pc, #128]	; (402050 <Reset_Handler+0xac>)
  401fd0:	4293      	cmp	r3, r2
  401fd2:	d3f3      	bcc.n	401fbc <Reset_Handler+0x18>
  401fd4:	e020      	b.n	402018 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  401fd6:	68fa      	ldr	r2, [r7, #12]
  401fd8:	68bb      	ldr	r3, [r7, #8]
  401fda:	429a      	cmp	r2, r3
  401fdc:	d21c      	bcs.n	402018 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401fde:	4a1c      	ldr	r2, [pc, #112]	; (402050 <Reset_Handler+0xac>)
  401fe0:	4b1a      	ldr	r3, [pc, #104]	; (40204c <Reset_Handler+0xa8>)
  401fe2:	1ad3      	subs	r3, r2, r3
  401fe4:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401fe6:	68fa      	ldr	r2, [r7, #12]
  401fe8:	687b      	ldr	r3, [r7, #4]
  401fea:	4413      	add	r3, r2
  401fec:	3b04      	subs	r3, #4
  401fee:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401ff0:	68ba      	ldr	r2, [r7, #8]
  401ff2:	687b      	ldr	r3, [r7, #4]
  401ff4:	4413      	add	r3, r2
  401ff6:	3b04      	subs	r3, #4
  401ff8:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401ffa:	e00a      	b.n	402012 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401ffc:	68bb      	ldr	r3, [r7, #8]
  401ffe:	1f1a      	subs	r2, r3, #4
  402000:	60ba      	str	r2, [r7, #8]
  402002:	68fa      	ldr	r2, [r7, #12]
  402004:	1f11      	subs	r1, r2, #4
  402006:	60f9      	str	r1, [r7, #12]
  402008:	6812      	ldr	r2, [r2, #0]
  40200a:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  40200c:	687b      	ldr	r3, [r7, #4]
  40200e:	3b04      	subs	r3, #4
  402010:	607b      	str	r3, [r7, #4]
  402012:	687b      	ldr	r3, [r7, #4]
  402014:	2b00      	cmp	r3, #0
  402016:	d1f1      	bne.n	401ffc <Reset_Handler+0x58>
		}
	}
	__NOP();
  402018:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40201a:	4b0e      	ldr	r3, [pc, #56]	; (402054 <Reset_Handler+0xb0>)
  40201c:	60bb      	str	r3, [r7, #8]
  40201e:	e004      	b.n	40202a <Reset_Handler+0x86>
		*pDest++ = 0;
  402020:	68bb      	ldr	r3, [r7, #8]
  402022:	1d1a      	adds	r2, r3, #4
  402024:	60ba      	str	r2, [r7, #8]
  402026:	2200      	movs	r2, #0
  402028:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  40202a:	68bb      	ldr	r3, [r7, #8]
  40202c:	4a0a      	ldr	r2, [pc, #40]	; (402058 <Reset_Handler+0xb4>)
  40202e:	4293      	cmp	r3, r2
  402030:	d3f6      	bcc.n	402020 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402032:	4b0a      	ldr	r3, [pc, #40]	; (40205c <Reset_Handler+0xb8>)
  402034:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402036:	4a0a      	ldr	r2, [pc, #40]	; (402060 <Reset_Handler+0xbc>)
  402038:	68fb      	ldr	r3, [r7, #12]
  40203a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  40203c:	4b09      	ldr	r3, [pc, #36]	; (402064 <Reset_Handler+0xc0>)
  40203e:	4798      	blx	r3

	/* Branch to main function */
	main();
  402040:	4b09      	ldr	r3, [pc, #36]	; (402068 <Reset_Handler+0xc4>)
  402042:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402044:	e7fe      	b.n	402044 <Reset_Handler+0xa0>
  402046:	bf00      	nop
  402048:	0040563c 	.word	0x0040563c
  40204c:	20000000 	.word	0x20000000
  402050:	200009c0 	.word	0x200009c0
  402054:	200009c0 	.word	0x200009c0
  402058:	20000ed8 	.word	0x20000ed8
  40205c:	00400000 	.word	0x00400000
  402060:	e000ed00 	.word	0xe000ed00
  402064:	004026ed 	.word	0x004026ed
  402068:	00402385 	.word	0x00402385

0040206c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40206c:	b480      	push	{r7}
  40206e:	af00      	add	r7, sp, #0
	while (1) {
  402070:	e7fe      	b.n	402070 <Dummy_Handler+0x4>
	...

00402074 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402074:	b480      	push	{r7}
  402076:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402078:	4b5d      	ldr	r3, [pc, #372]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  40207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40207c:	f003 0303 	and.w	r3, r3, #3
  402080:	2b03      	cmp	r3, #3
  402082:	f200 8096 	bhi.w	4021b2 <SystemCoreClockUpdate+0x13e>
  402086:	a201      	add	r2, pc, #4	; (adr r2, 40208c <SystemCoreClockUpdate+0x18>)
  402088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40208c:	0040209d 	.word	0x0040209d
  402090:	004020bd 	.word	0x004020bd
  402094:	00402107 	.word	0x00402107
  402098:	00402107 	.word	0x00402107
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40209c:	4b55      	ldr	r3, [pc, #340]	; (4021f4 <SystemCoreClockUpdate+0x180>)
  40209e:	695b      	ldr	r3, [r3, #20]
  4020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4020a4:	2b00      	cmp	r3, #0
  4020a6:	d004      	beq.n	4020b2 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4020a8:	4b53      	ldr	r3, [pc, #332]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4020aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4020ae:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4020b0:	e080      	b.n	4021b4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4020b2:	4b51      	ldr	r3, [pc, #324]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4020b4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4020b8:	601a      	str	r2, [r3, #0]
		break;
  4020ba:	e07b      	b.n	4021b4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4020bc:	4b4c      	ldr	r3, [pc, #304]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  4020be:	6a1b      	ldr	r3, [r3, #32]
  4020c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4020c4:	2b00      	cmp	r3, #0
  4020c6:	d003      	beq.n	4020d0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4020c8:	4b4b      	ldr	r3, [pc, #300]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4020ca:	4a4c      	ldr	r2, [pc, #304]	; (4021fc <SystemCoreClockUpdate+0x188>)
  4020cc:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4020ce:	e071      	b.n	4021b4 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020d0:	4b49      	ldr	r3, [pc, #292]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4020d2:	4a4b      	ldr	r2, [pc, #300]	; (402200 <SystemCoreClockUpdate+0x18c>)
  4020d4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4020d6:	4b46      	ldr	r3, [pc, #280]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  4020d8:	6a1b      	ldr	r3, [r3, #32]
  4020da:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020de:	2b10      	cmp	r3, #16
  4020e0:	d008      	beq.n	4020f4 <SystemCoreClockUpdate+0x80>
  4020e2:	2b20      	cmp	r3, #32
  4020e4:	d00a      	beq.n	4020fc <SystemCoreClockUpdate+0x88>
  4020e6:	2b00      	cmp	r3, #0
  4020e8:	d000      	beq.n	4020ec <SystemCoreClockUpdate+0x78>
			break;
  4020ea:	e00b      	b.n	402104 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020ec:	4b42      	ldr	r3, [pc, #264]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4020ee:	4a44      	ldr	r2, [pc, #272]	; (402200 <SystemCoreClockUpdate+0x18c>)
  4020f0:	601a      	str	r2, [r3, #0]
			break;
  4020f2:	e007      	b.n	402104 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4020f4:	4b40      	ldr	r3, [pc, #256]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4020f6:	4a43      	ldr	r2, [pc, #268]	; (402204 <SystemCoreClockUpdate+0x190>)
  4020f8:	601a      	str	r2, [r3, #0]
			break;
  4020fa:	e003      	b.n	402104 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4020fc:	4b3e      	ldr	r3, [pc, #248]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4020fe:	4a3f      	ldr	r2, [pc, #252]	; (4021fc <SystemCoreClockUpdate+0x188>)
  402100:	601a      	str	r2, [r3, #0]
			break;
  402102:	bf00      	nop
		break;
  402104:	e056      	b.n	4021b4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402106:	4b3a      	ldr	r3, [pc, #232]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  402108:	6a1b      	ldr	r3, [r3, #32]
  40210a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40210e:	2b00      	cmp	r3, #0
  402110:	d003      	beq.n	40211a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402112:	4b39      	ldr	r3, [pc, #228]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  402114:	4a39      	ldr	r2, [pc, #228]	; (4021fc <SystemCoreClockUpdate+0x188>)
  402116:	601a      	str	r2, [r3, #0]
  402118:	e019      	b.n	40214e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40211a:	4b37      	ldr	r3, [pc, #220]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  40211c:	4a38      	ldr	r2, [pc, #224]	; (402200 <SystemCoreClockUpdate+0x18c>)
  40211e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402120:	4b33      	ldr	r3, [pc, #204]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  402122:	6a1b      	ldr	r3, [r3, #32]
  402124:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402128:	2b10      	cmp	r3, #16
  40212a:	d008      	beq.n	40213e <SystemCoreClockUpdate+0xca>
  40212c:	2b20      	cmp	r3, #32
  40212e:	d00a      	beq.n	402146 <SystemCoreClockUpdate+0xd2>
  402130:	2b00      	cmp	r3, #0
  402132:	d000      	beq.n	402136 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402134:	e00b      	b.n	40214e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402136:	4b30      	ldr	r3, [pc, #192]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  402138:	4a31      	ldr	r2, [pc, #196]	; (402200 <SystemCoreClockUpdate+0x18c>)
  40213a:	601a      	str	r2, [r3, #0]
					break;
  40213c:	e007      	b.n	40214e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40213e:	4b2e      	ldr	r3, [pc, #184]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  402140:	4a30      	ldr	r2, [pc, #192]	; (402204 <SystemCoreClockUpdate+0x190>)
  402142:	601a      	str	r2, [r3, #0]
					break;
  402144:	e003      	b.n	40214e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402146:	4b2c      	ldr	r3, [pc, #176]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  402148:	4a2c      	ldr	r2, [pc, #176]	; (4021fc <SystemCoreClockUpdate+0x188>)
  40214a:	601a      	str	r2, [r3, #0]
					break;
  40214c:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40214e:	4b28      	ldr	r3, [pc, #160]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  402150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402152:	f003 0303 	and.w	r3, r3, #3
  402156:	2b02      	cmp	r3, #2
  402158:	d115      	bne.n	402186 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40215a:	4b25      	ldr	r3, [pc, #148]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  40215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40215e:	0c1b      	lsrs	r3, r3, #16
  402160:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402164:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402166:	4a24      	ldr	r2, [pc, #144]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  402168:	6812      	ldr	r2, [r2, #0]
  40216a:	fb02 f303 	mul.w	r3, r2, r3
  40216e:	4a22      	ldr	r2, [pc, #136]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  402170:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402172:	4b1f      	ldr	r3, [pc, #124]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  402174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402176:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402178:	4a1f      	ldr	r2, [pc, #124]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  40217a:	6812      	ldr	r2, [r2, #0]
  40217c:	fbb2 f3f3 	udiv	r3, r2, r3
  402180:	4a1d      	ldr	r2, [pc, #116]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  402182:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402184:	e016      	b.n	4021b4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402186:	4b1a      	ldr	r3, [pc, #104]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  402188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40218a:	0c1b      	lsrs	r3, r3, #16
  40218c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402190:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402192:	4a19      	ldr	r2, [pc, #100]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  402194:	6812      	ldr	r2, [r2, #0]
  402196:	fb02 f303 	mul.w	r3, r2, r3
  40219a:	4a17      	ldr	r2, [pc, #92]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  40219c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40219e:	4b14      	ldr	r3, [pc, #80]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  4021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4021a2:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4021a4:	4a14      	ldr	r2, [pc, #80]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4021a6:	6812      	ldr	r2, [r2, #0]
  4021a8:	fbb2 f3f3 	udiv	r3, r2, r3
  4021ac:	4a12      	ldr	r2, [pc, #72]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4021ae:	6013      	str	r3, [r2, #0]
		break;
  4021b0:	e000      	b.n	4021b4 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4021b2:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4021b4:	4b0e      	ldr	r3, [pc, #56]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  4021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021bc:	2b70      	cmp	r3, #112	; 0x70
  4021be:	d108      	bne.n	4021d2 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4021c0:	4b0d      	ldr	r3, [pc, #52]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4021c2:	681b      	ldr	r3, [r3, #0]
  4021c4:	4a10      	ldr	r2, [pc, #64]	; (402208 <SystemCoreClockUpdate+0x194>)
  4021c6:	fba2 2303 	umull	r2, r3, r2, r3
  4021ca:	085b      	lsrs	r3, r3, #1
  4021cc:	4a0a      	ldr	r2, [pc, #40]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4021ce:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4021d0:	e00a      	b.n	4021e8 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4021d2:	4b07      	ldr	r3, [pc, #28]	; (4021f0 <SystemCoreClockUpdate+0x17c>)
  4021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021d6:	091b      	lsrs	r3, r3, #4
  4021d8:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4021dc:	4a06      	ldr	r2, [pc, #24]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4021de:	6812      	ldr	r2, [r2, #0]
  4021e0:	fa22 f303 	lsr.w	r3, r2, r3
  4021e4:	4a04      	ldr	r2, [pc, #16]	; (4021f8 <SystemCoreClockUpdate+0x184>)
  4021e6:	6013      	str	r3, [r2, #0]
}
  4021e8:	bf00      	nop
  4021ea:	46bd      	mov	sp, r7
  4021ec:	bc80      	pop	{r7}
  4021ee:	4770      	bx	lr
  4021f0:	400e0400 	.word	0x400e0400
  4021f4:	400e1410 	.word	0x400e1410
  4021f8:	2000000c 	.word	0x2000000c
  4021fc:	00b71b00 	.word	0x00b71b00
  402200:	003d0900 	.word	0x003d0900
  402204:	007a1200 	.word	0x007a1200
  402208:	aaaaaaab 	.word	0xaaaaaaab

0040220c <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  40220c:	b480      	push	{r7}
  40220e:	b083      	sub	sp, #12
  402210:	af00      	add	r7, sp, #0
  402212:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402214:	687b      	ldr	r3, [r7, #4]
  402216:	4a22      	ldr	r2, [pc, #136]	; (4022a0 <system_init_flash+0x94>)
  402218:	4293      	cmp	r3, r2
  40221a:	d808      	bhi.n	40222e <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40221c:	4b21      	ldr	r3, [pc, #132]	; (4022a4 <system_init_flash+0x98>)
  40221e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402222:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402224:	4b20      	ldr	r3, [pc, #128]	; (4022a8 <system_init_flash+0x9c>)
  402226:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40222a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40222c:	e033      	b.n	402296 <system_init_flash+0x8a>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40222e:	687b      	ldr	r3, [r7, #4]
  402230:	4a1e      	ldr	r2, [pc, #120]	; (4022ac <system_init_flash+0xa0>)
  402232:	4293      	cmp	r3, r2
  402234:	d806      	bhi.n	402244 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402236:	4b1b      	ldr	r3, [pc, #108]	; (4022a4 <system_init_flash+0x98>)
  402238:	4a1d      	ldr	r2, [pc, #116]	; (4022b0 <system_init_flash+0xa4>)
  40223a:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40223c:	4b1a      	ldr	r3, [pc, #104]	; (4022a8 <system_init_flash+0x9c>)
  40223e:	4a1c      	ldr	r2, [pc, #112]	; (4022b0 <system_init_flash+0xa4>)
  402240:	601a      	str	r2, [r3, #0]
}
  402242:	e028      	b.n	402296 <system_init_flash+0x8a>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402244:	687b      	ldr	r3, [r7, #4]
  402246:	4a1b      	ldr	r2, [pc, #108]	; (4022b4 <system_init_flash+0xa8>)
  402248:	4293      	cmp	r3, r2
  40224a:	d806      	bhi.n	40225a <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40224c:	4b15      	ldr	r3, [pc, #84]	; (4022a4 <system_init_flash+0x98>)
  40224e:	4a1a      	ldr	r2, [pc, #104]	; (4022b8 <system_init_flash+0xac>)
  402250:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402252:	4b15      	ldr	r3, [pc, #84]	; (4022a8 <system_init_flash+0x9c>)
  402254:	4a18      	ldr	r2, [pc, #96]	; (4022b8 <system_init_flash+0xac>)
  402256:	601a      	str	r2, [r3, #0]
}
  402258:	e01d      	b.n	402296 <system_init_flash+0x8a>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40225a:	687b      	ldr	r3, [r7, #4]
  40225c:	4a17      	ldr	r2, [pc, #92]	; (4022bc <system_init_flash+0xb0>)
  40225e:	4293      	cmp	r3, r2
  402260:	d806      	bhi.n	402270 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402262:	4b10      	ldr	r3, [pc, #64]	; (4022a4 <system_init_flash+0x98>)
  402264:	4a16      	ldr	r2, [pc, #88]	; (4022c0 <system_init_flash+0xb4>)
  402266:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402268:	4b0f      	ldr	r3, [pc, #60]	; (4022a8 <system_init_flash+0x9c>)
  40226a:	4a15      	ldr	r2, [pc, #84]	; (4022c0 <system_init_flash+0xb4>)
  40226c:	601a      	str	r2, [r3, #0]
}
  40226e:	e012      	b.n	402296 <system_init_flash+0x8a>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402270:	687b      	ldr	r3, [r7, #4]
  402272:	4a14      	ldr	r2, [pc, #80]	; (4022c4 <system_init_flash+0xb8>)
  402274:	4293      	cmp	r3, r2
  402276:	d808      	bhi.n	40228a <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402278:	4b0a      	ldr	r3, [pc, #40]	; (4022a4 <system_init_flash+0x98>)
  40227a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40227e:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402280:	4b09      	ldr	r3, [pc, #36]	; (4022a8 <system_init_flash+0x9c>)
  402282:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402286:	601a      	str	r2, [r3, #0]
}
  402288:	e005      	b.n	402296 <system_init_flash+0x8a>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40228a:	4b06      	ldr	r3, [pc, #24]	; (4022a4 <system_init_flash+0x98>)
  40228c:	4a0e      	ldr	r2, [pc, #56]	; (4022c8 <system_init_flash+0xbc>)
  40228e:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402290:	4b05      	ldr	r3, [pc, #20]	; (4022a8 <system_init_flash+0x9c>)
  402292:	4a0d      	ldr	r2, [pc, #52]	; (4022c8 <system_init_flash+0xbc>)
  402294:	601a      	str	r2, [r3, #0]
}
  402296:	bf00      	nop
  402298:	370c      	adds	r7, #12
  40229a:	46bd      	mov	sp, r7
  40229c:	bc80      	pop	{r7}
  40229e:	4770      	bx	lr
  4022a0:	01312cff 	.word	0x01312cff
  4022a4:	400e0a00 	.word	0x400e0a00
  4022a8:	400e0c00 	.word	0x400e0c00
  4022ac:	026259ff 	.word	0x026259ff
  4022b0:	04000100 	.word	0x04000100
  4022b4:	039386ff 	.word	0x039386ff
  4022b8:	04000200 	.word	0x04000200
  4022bc:	04c4b3ff 	.word	0x04c4b3ff
  4022c0:	04000300 	.word	0x04000300
  4022c4:	05f5e0ff 	.word	0x05f5e0ff
  4022c8:	04000500 	.word	0x04000500

004022cc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4022cc:	b480      	push	{r7}
  4022ce:	b085      	sub	sp, #20
  4022d0:	af00      	add	r7, sp, #0
  4022d2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4022d4:	4b10      	ldr	r3, [pc, #64]	; (402318 <_sbrk+0x4c>)
  4022d6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4022d8:	4b10      	ldr	r3, [pc, #64]	; (40231c <_sbrk+0x50>)
  4022da:	681b      	ldr	r3, [r3, #0]
  4022dc:	2b00      	cmp	r3, #0
  4022de:	d102      	bne.n	4022e6 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4022e0:	4b0e      	ldr	r3, [pc, #56]	; (40231c <_sbrk+0x50>)
  4022e2:	4a0f      	ldr	r2, [pc, #60]	; (402320 <_sbrk+0x54>)
  4022e4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4022e6:	4b0d      	ldr	r3, [pc, #52]	; (40231c <_sbrk+0x50>)
  4022e8:	681b      	ldr	r3, [r3, #0]
  4022ea:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4022ec:	68ba      	ldr	r2, [r7, #8]
  4022ee:	687b      	ldr	r3, [r7, #4]
  4022f0:	441a      	add	r2, r3
  4022f2:	68fb      	ldr	r3, [r7, #12]
  4022f4:	429a      	cmp	r2, r3
  4022f6:	dd02      	ble.n	4022fe <_sbrk+0x32>
		return (caddr_t) -1;	
  4022f8:	f04f 33ff 	mov.w	r3, #4294967295
  4022fc:	e006      	b.n	40230c <_sbrk+0x40>
	}

	heap += incr;
  4022fe:	4b07      	ldr	r3, [pc, #28]	; (40231c <_sbrk+0x50>)
  402300:	681a      	ldr	r2, [r3, #0]
  402302:	687b      	ldr	r3, [r7, #4]
  402304:	4413      	add	r3, r2
  402306:	4a05      	ldr	r2, [pc, #20]	; (40231c <_sbrk+0x50>)
  402308:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40230a:	68bb      	ldr	r3, [r7, #8]
}
  40230c:	4618      	mov	r0, r3
  40230e:	3714      	adds	r7, #20
  402310:	46bd      	mov	sp, r7
  402312:	bc80      	pop	{r7}
  402314:	4770      	bx	lr
  402316:	bf00      	nop
  402318:	20027ffc 	.word	0x20027ffc
  40231c:	20000a5c 	.word	0x20000a5c
  402320:	20003ed8 	.word	0x20003ed8

00402324 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402324:	b480      	push	{r7}
  402326:	b083      	sub	sp, #12
  402328:	af00      	add	r7, sp, #0
  40232a:	6078      	str	r0, [r7, #4]
	return -1;
  40232c:	f04f 33ff 	mov.w	r3, #4294967295
}
  402330:	4618      	mov	r0, r3
  402332:	370c      	adds	r7, #12
  402334:	46bd      	mov	sp, r7
  402336:	bc80      	pop	{r7}
  402338:	4770      	bx	lr

0040233a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40233a:	b480      	push	{r7}
  40233c:	b083      	sub	sp, #12
  40233e:	af00      	add	r7, sp, #0
  402340:	6078      	str	r0, [r7, #4]
  402342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402344:	683b      	ldr	r3, [r7, #0]
  402346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40234a:	605a      	str	r2, [r3, #4]

	return 0;
  40234c:	2300      	movs	r3, #0
}
  40234e:	4618      	mov	r0, r3
  402350:	370c      	adds	r7, #12
  402352:	46bd      	mov	sp, r7
  402354:	bc80      	pop	{r7}
  402356:	4770      	bx	lr

00402358 <_isatty>:

extern int _isatty(int file)
{
  402358:	b480      	push	{r7}
  40235a:	b083      	sub	sp, #12
  40235c:	af00      	add	r7, sp, #0
  40235e:	6078      	str	r0, [r7, #4]
	return 1;
  402360:	2301      	movs	r3, #1
}
  402362:	4618      	mov	r0, r3
  402364:	370c      	adds	r7, #12
  402366:	46bd      	mov	sp, r7
  402368:	bc80      	pop	{r7}
  40236a:	4770      	bx	lr

0040236c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40236c:	b480      	push	{r7}
  40236e:	b085      	sub	sp, #20
  402370:	af00      	add	r7, sp, #0
  402372:	60f8      	str	r0, [r7, #12]
  402374:	60b9      	str	r1, [r7, #8]
  402376:	607a      	str	r2, [r7, #4]
	return 0;
  402378:	2300      	movs	r3, #0
}
  40237a:	4618      	mov	r0, r3
  40237c:	3714      	adds	r7, #20
  40237e:	46bd      	mov	sp, r7
  402380:	bc80      	pop	{r7}
  402382:	4770      	bx	lr

00402384 <main>:
﻿#include "main.h"
#include "boot_uart.h"
#include "xmodem.h"

int main(void)
{
  402384:	b580      	push	{r7, lr}
  402386:	af00      	add	r7, sp, #0
	/* Initialize the board. */
	sysclk_init();
  402388:	4b0b      	ldr	r3, [pc, #44]	; (4023b8 <main+0x34>)
  40238a:	4798      	blx	r3
	board_init();
  40238c:	4b0b      	ldr	r3, [pc, #44]	; (4023bc <main+0x38>)
  40238e:	4798      	blx	r3

	/* Initialize the UART console. */
	Boot_Uart_Init();
  402390:	4b0b      	ldr	r3, [pc, #44]	; (4023c0 <main+0x3c>)
  402392:	4798      	blx	r3

	printf("========================================\r\n");
  402394:	480b      	ldr	r0, [pc, #44]	; (4023c4 <main+0x40>)
  402396:	4b0c      	ldr	r3, [pc, #48]	; (4023c8 <main+0x44>)
  402398:	4798      	blx	r3
	printf("=  ATSAM4S Firmware Update Bootloader  =\r\n");
  40239a:	480c      	ldr	r0, [pc, #48]	; (4023cc <main+0x48>)
  40239c:	4b0a      	ldr	r3, [pc, #40]	; (4023c8 <main+0x44>)
  40239e:	4798      	blx	r3
	printf("========================================\r\n");
  4023a0:	4808      	ldr	r0, [pc, #32]	; (4023c4 <main+0x40>)
  4023a2:	4b09      	ldr	r3, [pc, #36]	; (4023c8 <main+0x44>)
  4023a4:	4798      	blx	r3

	while(1)
	{
		printf("Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
  4023a6:	480a      	ldr	r0, [pc, #40]	; (4023d0 <main+0x4c>)
  4023a8:	4b07      	ldr	r3, [pc, #28]	; (4023c8 <main+0x44>)
  4023aa:	4798      	blx	r3
		xmodem_receive();
  4023ac:	4b09      	ldr	r3, [pc, #36]	; (4023d4 <main+0x50>)
  4023ae:	4798      	blx	r3
    	printf("\n\rFailed... Please try again.\n\r");
  4023b0:	4809      	ldr	r0, [pc, #36]	; (4023d8 <main+0x54>)
  4023b2:	4b05      	ldr	r3, [pc, #20]	; (4023c8 <main+0x44>)
  4023b4:	4798      	blx	r3
		printf("Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
  4023b6:	e7f6      	b.n	4023a6 <main+0x22>
  4023b8:	00400e49 	.word	0x00400e49
  4023bc:	004011c1 	.word	0x004011c1
  4023c0:	004004e1 	.word	0x004004e1
  4023c4:	004053e0 	.word	0x004053e0
  4023c8:	0040273d 	.word	0x0040273d
  4023cc:	0040540c 	.word	0x0040540c
  4023d0:	00405438 	.word	0x00405438
  4023d4:	0040071d 	.word	0x0040071d
  4023d8:	00405488 	.word	0x00405488

004023dc <__aeabi_uldivmod>:
  4023dc:	b953      	cbnz	r3, 4023f4 <__aeabi_uldivmod+0x18>
  4023de:	b94a      	cbnz	r2, 4023f4 <__aeabi_uldivmod+0x18>
  4023e0:	2900      	cmp	r1, #0
  4023e2:	bf08      	it	eq
  4023e4:	2800      	cmpeq	r0, #0
  4023e6:	bf1c      	itt	ne
  4023e8:	f04f 31ff 	movne.w	r1, #4294967295
  4023ec:	f04f 30ff 	movne.w	r0, #4294967295
  4023f0:	f000 b97a 	b.w	4026e8 <__aeabi_idiv0>
  4023f4:	f1ad 0c08 	sub.w	ip, sp, #8
  4023f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4023fc:	f000 f806 	bl	40240c <__udivmoddi4>
  402400:	f8dd e004 	ldr.w	lr, [sp, #4]
  402404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402408:	b004      	add	sp, #16
  40240a:	4770      	bx	lr

0040240c <__udivmoddi4>:
  40240c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402410:	468c      	mov	ip, r1
  402412:	460d      	mov	r5, r1
  402414:	4604      	mov	r4, r0
  402416:	9e08      	ldr	r6, [sp, #32]
  402418:	2b00      	cmp	r3, #0
  40241a:	d151      	bne.n	4024c0 <__udivmoddi4+0xb4>
  40241c:	428a      	cmp	r2, r1
  40241e:	4617      	mov	r7, r2
  402420:	d96d      	bls.n	4024fe <__udivmoddi4+0xf2>
  402422:	fab2 fe82 	clz	lr, r2
  402426:	f1be 0f00 	cmp.w	lr, #0
  40242a:	d00b      	beq.n	402444 <__udivmoddi4+0x38>
  40242c:	f1ce 0c20 	rsb	ip, lr, #32
  402430:	fa01 f50e 	lsl.w	r5, r1, lr
  402434:	fa20 fc0c 	lsr.w	ip, r0, ip
  402438:	fa02 f70e 	lsl.w	r7, r2, lr
  40243c:	ea4c 0c05 	orr.w	ip, ip, r5
  402440:	fa00 f40e 	lsl.w	r4, r0, lr
  402444:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402448:	0c25      	lsrs	r5, r4, #16
  40244a:	fbbc f8fa 	udiv	r8, ip, sl
  40244e:	fa1f f987 	uxth.w	r9, r7
  402452:	fb0a cc18 	mls	ip, sl, r8, ip
  402456:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40245a:	fb08 f309 	mul.w	r3, r8, r9
  40245e:	42ab      	cmp	r3, r5
  402460:	d90a      	bls.n	402478 <__udivmoddi4+0x6c>
  402462:	19ed      	adds	r5, r5, r7
  402464:	f108 32ff 	add.w	r2, r8, #4294967295
  402468:	f080 8123 	bcs.w	4026b2 <__udivmoddi4+0x2a6>
  40246c:	42ab      	cmp	r3, r5
  40246e:	f240 8120 	bls.w	4026b2 <__udivmoddi4+0x2a6>
  402472:	f1a8 0802 	sub.w	r8, r8, #2
  402476:	443d      	add	r5, r7
  402478:	1aed      	subs	r5, r5, r3
  40247a:	b2a4      	uxth	r4, r4
  40247c:	fbb5 f0fa 	udiv	r0, r5, sl
  402480:	fb0a 5510 	mls	r5, sl, r0, r5
  402484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402488:	fb00 f909 	mul.w	r9, r0, r9
  40248c:	45a1      	cmp	r9, r4
  40248e:	d909      	bls.n	4024a4 <__udivmoddi4+0x98>
  402490:	19e4      	adds	r4, r4, r7
  402492:	f100 33ff 	add.w	r3, r0, #4294967295
  402496:	f080 810a 	bcs.w	4026ae <__udivmoddi4+0x2a2>
  40249a:	45a1      	cmp	r9, r4
  40249c:	f240 8107 	bls.w	4026ae <__udivmoddi4+0x2a2>
  4024a0:	3802      	subs	r0, #2
  4024a2:	443c      	add	r4, r7
  4024a4:	eba4 0409 	sub.w	r4, r4, r9
  4024a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4024ac:	2100      	movs	r1, #0
  4024ae:	2e00      	cmp	r6, #0
  4024b0:	d061      	beq.n	402576 <__udivmoddi4+0x16a>
  4024b2:	fa24 f40e 	lsr.w	r4, r4, lr
  4024b6:	2300      	movs	r3, #0
  4024b8:	6034      	str	r4, [r6, #0]
  4024ba:	6073      	str	r3, [r6, #4]
  4024bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024c0:	428b      	cmp	r3, r1
  4024c2:	d907      	bls.n	4024d4 <__udivmoddi4+0xc8>
  4024c4:	2e00      	cmp	r6, #0
  4024c6:	d054      	beq.n	402572 <__udivmoddi4+0x166>
  4024c8:	2100      	movs	r1, #0
  4024ca:	e886 0021 	stmia.w	r6, {r0, r5}
  4024ce:	4608      	mov	r0, r1
  4024d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024d4:	fab3 f183 	clz	r1, r3
  4024d8:	2900      	cmp	r1, #0
  4024da:	f040 808e 	bne.w	4025fa <__udivmoddi4+0x1ee>
  4024de:	42ab      	cmp	r3, r5
  4024e0:	d302      	bcc.n	4024e8 <__udivmoddi4+0xdc>
  4024e2:	4282      	cmp	r2, r0
  4024e4:	f200 80fa 	bhi.w	4026dc <__udivmoddi4+0x2d0>
  4024e8:	1a84      	subs	r4, r0, r2
  4024ea:	eb65 0503 	sbc.w	r5, r5, r3
  4024ee:	2001      	movs	r0, #1
  4024f0:	46ac      	mov	ip, r5
  4024f2:	2e00      	cmp	r6, #0
  4024f4:	d03f      	beq.n	402576 <__udivmoddi4+0x16a>
  4024f6:	e886 1010 	stmia.w	r6, {r4, ip}
  4024fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024fe:	b912      	cbnz	r2, 402506 <__udivmoddi4+0xfa>
  402500:	2701      	movs	r7, #1
  402502:	fbb7 f7f2 	udiv	r7, r7, r2
  402506:	fab7 fe87 	clz	lr, r7
  40250a:	f1be 0f00 	cmp.w	lr, #0
  40250e:	d134      	bne.n	40257a <__udivmoddi4+0x16e>
  402510:	1beb      	subs	r3, r5, r7
  402512:	0c3a      	lsrs	r2, r7, #16
  402514:	fa1f fc87 	uxth.w	ip, r7
  402518:	2101      	movs	r1, #1
  40251a:	fbb3 f8f2 	udiv	r8, r3, r2
  40251e:	0c25      	lsrs	r5, r4, #16
  402520:	fb02 3318 	mls	r3, r2, r8, r3
  402524:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402528:	fb0c f308 	mul.w	r3, ip, r8
  40252c:	42ab      	cmp	r3, r5
  40252e:	d907      	bls.n	402540 <__udivmoddi4+0x134>
  402530:	19ed      	adds	r5, r5, r7
  402532:	f108 30ff 	add.w	r0, r8, #4294967295
  402536:	d202      	bcs.n	40253e <__udivmoddi4+0x132>
  402538:	42ab      	cmp	r3, r5
  40253a:	f200 80d1 	bhi.w	4026e0 <__udivmoddi4+0x2d4>
  40253e:	4680      	mov	r8, r0
  402540:	1aed      	subs	r5, r5, r3
  402542:	b2a3      	uxth	r3, r4
  402544:	fbb5 f0f2 	udiv	r0, r5, r2
  402548:	fb02 5510 	mls	r5, r2, r0, r5
  40254c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402550:	fb0c fc00 	mul.w	ip, ip, r0
  402554:	45a4      	cmp	ip, r4
  402556:	d907      	bls.n	402568 <__udivmoddi4+0x15c>
  402558:	19e4      	adds	r4, r4, r7
  40255a:	f100 33ff 	add.w	r3, r0, #4294967295
  40255e:	d202      	bcs.n	402566 <__udivmoddi4+0x15a>
  402560:	45a4      	cmp	ip, r4
  402562:	f200 80b8 	bhi.w	4026d6 <__udivmoddi4+0x2ca>
  402566:	4618      	mov	r0, r3
  402568:	eba4 040c 	sub.w	r4, r4, ip
  40256c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402570:	e79d      	b.n	4024ae <__udivmoddi4+0xa2>
  402572:	4631      	mov	r1, r6
  402574:	4630      	mov	r0, r6
  402576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40257a:	f1ce 0420 	rsb	r4, lr, #32
  40257e:	fa05 f30e 	lsl.w	r3, r5, lr
  402582:	fa07 f70e 	lsl.w	r7, r7, lr
  402586:	fa20 f804 	lsr.w	r8, r0, r4
  40258a:	0c3a      	lsrs	r2, r7, #16
  40258c:	fa25 f404 	lsr.w	r4, r5, r4
  402590:	ea48 0803 	orr.w	r8, r8, r3
  402594:	fbb4 f1f2 	udiv	r1, r4, r2
  402598:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40259c:	fb02 4411 	mls	r4, r2, r1, r4
  4025a0:	fa1f fc87 	uxth.w	ip, r7
  4025a4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4025a8:	fb01 f30c 	mul.w	r3, r1, ip
  4025ac:	42ab      	cmp	r3, r5
  4025ae:	fa00 f40e 	lsl.w	r4, r0, lr
  4025b2:	d909      	bls.n	4025c8 <__udivmoddi4+0x1bc>
  4025b4:	19ed      	adds	r5, r5, r7
  4025b6:	f101 30ff 	add.w	r0, r1, #4294967295
  4025ba:	f080 808a 	bcs.w	4026d2 <__udivmoddi4+0x2c6>
  4025be:	42ab      	cmp	r3, r5
  4025c0:	f240 8087 	bls.w	4026d2 <__udivmoddi4+0x2c6>
  4025c4:	3902      	subs	r1, #2
  4025c6:	443d      	add	r5, r7
  4025c8:	1aeb      	subs	r3, r5, r3
  4025ca:	fa1f f588 	uxth.w	r5, r8
  4025ce:	fbb3 f0f2 	udiv	r0, r3, r2
  4025d2:	fb02 3310 	mls	r3, r2, r0, r3
  4025d6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4025da:	fb00 f30c 	mul.w	r3, r0, ip
  4025de:	42ab      	cmp	r3, r5
  4025e0:	d907      	bls.n	4025f2 <__udivmoddi4+0x1e6>
  4025e2:	19ed      	adds	r5, r5, r7
  4025e4:	f100 38ff 	add.w	r8, r0, #4294967295
  4025e8:	d26f      	bcs.n	4026ca <__udivmoddi4+0x2be>
  4025ea:	42ab      	cmp	r3, r5
  4025ec:	d96d      	bls.n	4026ca <__udivmoddi4+0x2be>
  4025ee:	3802      	subs	r0, #2
  4025f0:	443d      	add	r5, r7
  4025f2:	1aeb      	subs	r3, r5, r3
  4025f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4025f8:	e78f      	b.n	40251a <__udivmoddi4+0x10e>
  4025fa:	f1c1 0720 	rsb	r7, r1, #32
  4025fe:	fa22 f807 	lsr.w	r8, r2, r7
  402602:	408b      	lsls	r3, r1
  402604:	fa05 f401 	lsl.w	r4, r5, r1
  402608:	ea48 0303 	orr.w	r3, r8, r3
  40260c:	fa20 fe07 	lsr.w	lr, r0, r7
  402610:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402614:	40fd      	lsrs	r5, r7
  402616:	ea4e 0e04 	orr.w	lr, lr, r4
  40261a:	fbb5 f9fc 	udiv	r9, r5, ip
  40261e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402622:	fb0c 5519 	mls	r5, ip, r9, r5
  402626:	fa1f f883 	uxth.w	r8, r3
  40262a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40262e:	fb09 f408 	mul.w	r4, r9, r8
  402632:	42ac      	cmp	r4, r5
  402634:	fa02 f201 	lsl.w	r2, r2, r1
  402638:	fa00 fa01 	lsl.w	sl, r0, r1
  40263c:	d908      	bls.n	402650 <__udivmoddi4+0x244>
  40263e:	18ed      	adds	r5, r5, r3
  402640:	f109 30ff 	add.w	r0, r9, #4294967295
  402644:	d243      	bcs.n	4026ce <__udivmoddi4+0x2c2>
  402646:	42ac      	cmp	r4, r5
  402648:	d941      	bls.n	4026ce <__udivmoddi4+0x2c2>
  40264a:	f1a9 0902 	sub.w	r9, r9, #2
  40264e:	441d      	add	r5, r3
  402650:	1b2d      	subs	r5, r5, r4
  402652:	fa1f fe8e 	uxth.w	lr, lr
  402656:	fbb5 f0fc 	udiv	r0, r5, ip
  40265a:	fb0c 5510 	mls	r5, ip, r0, r5
  40265e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402662:	fb00 f808 	mul.w	r8, r0, r8
  402666:	45a0      	cmp	r8, r4
  402668:	d907      	bls.n	40267a <__udivmoddi4+0x26e>
  40266a:	18e4      	adds	r4, r4, r3
  40266c:	f100 35ff 	add.w	r5, r0, #4294967295
  402670:	d229      	bcs.n	4026c6 <__udivmoddi4+0x2ba>
  402672:	45a0      	cmp	r8, r4
  402674:	d927      	bls.n	4026c6 <__udivmoddi4+0x2ba>
  402676:	3802      	subs	r0, #2
  402678:	441c      	add	r4, r3
  40267a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40267e:	eba4 0408 	sub.w	r4, r4, r8
  402682:	fba0 8902 	umull	r8, r9, r0, r2
  402686:	454c      	cmp	r4, r9
  402688:	46c6      	mov	lr, r8
  40268a:	464d      	mov	r5, r9
  40268c:	d315      	bcc.n	4026ba <__udivmoddi4+0x2ae>
  40268e:	d012      	beq.n	4026b6 <__udivmoddi4+0x2aa>
  402690:	b156      	cbz	r6, 4026a8 <__udivmoddi4+0x29c>
  402692:	ebba 030e 	subs.w	r3, sl, lr
  402696:	eb64 0405 	sbc.w	r4, r4, r5
  40269a:	fa04 f707 	lsl.w	r7, r4, r7
  40269e:	40cb      	lsrs	r3, r1
  4026a0:	431f      	orrs	r7, r3
  4026a2:	40cc      	lsrs	r4, r1
  4026a4:	6037      	str	r7, [r6, #0]
  4026a6:	6074      	str	r4, [r6, #4]
  4026a8:	2100      	movs	r1, #0
  4026aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026ae:	4618      	mov	r0, r3
  4026b0:	e6f8      	b.n	4024a4 <__udivmoddi4+0x98>
  4026b2:	4690      	mov	r8, r2
  4026b4:	e6e0      	b.n	402478 <__udivmoddi4+0x6c>
  4026b6:	45c2      	cmp	sl, r8
  4026b8:	d2ea      	bcs.n	402690 <__udivmoddi4+0x284>
  4026ba:	ebb8 0e02 	subs.w	lr, r8, r2
  4026be:	eb69 0503 	sbc.w	r5, r9, r3
  4026c2:	3801      	subs	r0, #1
  4026c4:	e7e4      	b.n	402690 <__udivmoddi4+0x284>
  4026c6:	4628      	mov	r0, r5
  4026c8:	e7d7      	b.n	40267a <__udivmoddi4+0x26e>
  4026ca:	4640      	mov	r0, r8
  4026cc:	e791      	b.n	4025f2 <__udivmoddi4+0x1e6>
  4026ce:	4681      	mov	r9, r0
  4026d0:	e7be      	b.n	402650 <__udivmoddi4+0x244>
  4026d2:	4601      	mov	r1, r0
  4026d4:	e778      	b.n	4025c8 <__udivmoddi4+0x1bc>
  4026d6:	3802      	subs	r0, #2
  4026d8:	443c      	add	r4, r7
  4026da:	e745      	b.n	402568 <__udivmoddi4+0x15c>
  4026dc:	4608      	mov	r0, r1
  4026de:	e708      	b.n	4024f2 <__udivmoddi4+0xe6>
  4026e0:	f1a8 0802 	sub.w	r8, r8, #2
  4026e4:	443d      	add	r5, r7
  4026e6:	e72b      	b.n	402540 <__udivmoddi4+0x134>

004026e8 <__aeabi_idiv0>:
  4026e8:	4770      	bx	lr
  4026ea:	bf00      	nop

004026ec <__libc_init_array>:
  4026ec:	b570      	push	{r4, r5, r6, lr}
  4026ee:	4e0f      	ldr	r6, [pc, #60]	; (40272c <__libc_init_array+0x40>)
  4026f0:	4d0f      	ldr	r5, [pc, #60]	; (402730 <__libc_init_array+0x44>)
  4026f2:	1b76      	subs	r6, r6, r5
  4026f4:	10b6      	asrs	r6, r6, #2
  4026f6:	bf18      	it	ne
  4026f8:	2400      	movne	r4, #0
  4026fa:	d005      	beq.n	402708 <__libc_init_array+0x1c>
  4026fc:	3401      	adds	r4, #1
  4026fe:	f855 3b04 	ldr.w	r3, [r5], #4
  402702:	4798      	blx	r3
  402704:	42a6      	cmp	r6, r4
  402706:	d1f9      	bne.n	4026fc <__libc_init_array+0x10>
  402708:	4e0a      	ldr	r6, [pc, #40]	; (402734 <__libc_init_array+0x48>)
  40270a:	4d0b      	ldr	r5, [pc, #44]	; (402738 <__libc_init_array+0x4c>)
  40270c:	1b76      	subs	r6, r6, r5
  40270e:	f002 ff7f 	bl	405610 <_init>
  402712:	10b6      	asrs	r6, r6, #2
  402714:	bf18      	it	ne
  402716:	2400      	movne	r4, #0
  402718:	d006      	beq.n	402728 <__libc_init_array+0x3c>
  40271a:	3401      	adds	r4, #1
  40271c:	f855 3b04 	ldr.w	r3, [r5], #4
  402720:	4798      	blx	r3
  402722:	42a6      	cmp	r6, r4
  402724:	d1f9      	bne.n	40271a <__libc_init_array+0x2e>
  402726:	bd70      	pop	{r4, r5, r6, pc}
  402728:	bd70      	pop	{r4, r5, r6, pc}
  40272a:	bf00      	nop
  40272c:	0040561c 	.word	0x0040561c
  402730:	0040561c 	.word	0x0040561c
  402734:	00405624 	.word	0x00405624
  402738:	0040561c 	.word	0x0040561c

0040273c <iprintf>:
  40273c:	b40f      	push	{r0, r1, r2, r3}
  40273e:	b500      	push	{lr}
  402740:	4907      	ldr	r1, [pc, #28]	; (402760 <iprintf+0x24>)
  402742:	b083      	sub	sp, #12
  402744:	ab04      	add	r3, sp, #16
  402746:	6808      	ldr	r0, [r1, #0]
  402748:	f853 2b04 	ldr.w	r2, [r3], #4
  40274c:	6881      	ldr	r1, [r0, #8]
  40274e:	9301      	str	r3, [sp, #4]
  402750:	f000 fcc4 	bl	4030dc <_vfiprintf_r>
  402754:	b003      	add	sp, #12
  402756:	f85d eb04 	ldr.w	lr, [sp], #4
  40275a:	b004      	add	sp, #16
  40275c:	4770      	bx	lr
  40275e:	bf00      	nop
  402760:	20000010 	.word	0x20000010

00402764 <malloc>:
  402764:	4b02      	ldr	r3, [pc, #8]	; (402770 <malloc+0xc>)
  402766:	4601      	mov	r1, r0
  402768:	6818      	ldr	r0, [r3, #0]
  40276a:	f000 b803 	b.w	402774 <_malloc_r>
  40276e:	bf00      	nop
  402770:	20000010 	.word	0x20000010

00402774 <_malloc_r>:
  402774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402778:	f101 060b 	add.w	r6, r1, #11
  40277c:	2e16      	cmp	r6, #22
  40277e:	b083      	sub	sp, #12
  402780:	4605      	mov	r5, r0
  402782:	f240 809e 	bls.w	4028c2 <_malloc_r+0x14e>
  402786:	f036 0607 	bics.w	r6, r6, #7
  40278a:	f100 80bd 	bmi.w	402908 <_malloc_r+0x194>
  40278e:	42b1      	cmp	r1, r6
  402790:	f200 80ba 	bhi.w	402908 <_malloc_r+0x194>
  402794:	f000 faec 	bl	402d70 <__malloc_lock>
  402798:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40279c:	f0c0 8293 	bcc.w	402cc6 <_malloc_r+0x552>
  4027a0:	0a73      	lsrs	r3, r6, #9
  4027a2:	f000 80b8 	beq.w	402916 <_malloc_r+0x1a2>
  4027a6:	2b04      	cmp	r3, #4
  4027a8:	f200 8179 	bhi.w	402a9e <_malloc_r+0x32a>
  4027ac:	09b3      	lsrs	r3, r6, #6
  4027ae:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4027b2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4027b6:	00c3      	lsls	r3, r0, #3
  4027b8:	4fbf      	ldr	r7, [pc, #764]	; (402ab8 <_malloc_r+0x344>)
  4027ba:	443b      	add	r3, r7
  4027bc:	f1a3 0108 	sub.w	r1, r3, #8
  4027c0:	685c      	ldr	r4, [r3, #4]
  4027c2:	42a1      	cmp	r1, r4
  4027c4:	d106      	bne.n	4027d4 <_malloc_r+0x60>
  4027c6:	e00c      	b.n	4027e2 <_malloc_r+0x6e>
  4027c8:	2a00      	cmp	r2, #0
  4027ca:	f280 80aa 	bge.w	402922 <_malloc_r+0x1ae>
  4027ce:	68e4      	ldr	r4, [r4, #12]
  4027d0:	42a1      	cmp	r1, r4
  4027d2:	d006      	beq.n	4027e2 <_malloc_r+0x6e>
  4027d4:	6863      	ldr	r3, [r4, #4]
  4027d6:	f023 0303 	bic.w	r3, r3, #3
  4027da:	1b9a      	subs	r2, r3, r6
  4027dc:	2a0f      	cmp	r2, #15
  4027de:	ddf3      	ble.n	4027c8 <_malloc_r+0x54>
  4027e0:	4670      	mov	r0, lr
  4027e2:	693c      	ldr	r4, [r7, #16]
  4027e4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402acc <_malloc_r+0x358>
  4027e8:	4574      	cmp	r4, lr
  4027ea:	f000 81ab 	beq.w	402b44 <_malloc_r+0x3d0>
  4027ee:	6863      	ldr	r3, [r4, #4]
  4027f0:	f023 0303 	bic.w	r3, r3, #3
  4027f4:	1b9a      	subs	r2, r3, r6
  4027f6:	2a0f      	cmp	r2, #15
  4027f8:	f300 8190 	bgt.w	402b1c <_malloc_r+0x3a8>
  4027fc:	2a00      	cmp	r2, #0
  4027fe:	f8c7 e014 	str.w	lr, [r7, #20]
  402802:	f8c7 e010 	str.w	lr, [r7, #16]
  402806:	f280 809d 	bge.w	402944 <_malloc_r+0x1d0>
  40280a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40280e:	f080 8161 	bcs.w	402ad4 <_malloc_r+0x360>
  402812:	08db      	lsrs	r3, r3, #3
  402814:	f103 0c01 	add.w	ip, r3, #1
  402818:	1099      	asrs	r1, r3, #2
  40281a:	687a      	ldr	r2, [r7, #4]
  40281c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402820:	f8c4 8008 	str.w	r8, [r4, #8]
  402824:	2301      	movs	r3, #1
  402826:	408b      	lsls	r3, r1
  402828:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40282c:	4313      	orrs	r3, r2
  40282e:	3908      	subs	r1, #8
  402830:	60e1      	str	r1, [r4, #12]
  402832:	607b      	str	r3, [r7, #4]
  402834:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402838:	f8c8 400c 	str.w	r4, [r8, #12]
  40283c:	1082      	asrs	r2, r0, #2
  40283e:	2401      	movs	r4, #1
  402840:	4094      	lsls	r4, r2
  402842:	429c      	cmp	r4, r3
  402844:	f200 808b 	bhi.w	40295e <_malloc_r+0x1ea>
  402848:	421c      	tst	r4, r3
  40284a:	d106      	bne.n	40285a <_malloc_r+0xe6>
  40284c:	f020 0003 	bic.w	r0, r0, #3
  402850:	0064      	lsls	r4, r4, #1
  402852:	421c      	tst	r4, r3
  402854:	f100 0004 	add.w	r0, r0, #4
  402858:	d0fa      	beq.n	402850 <_malloc_r+0xdc>
  40285a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40285e:	46cc      	mov	ip, r9
  402860:	4680      	mov	r8, r0
  402862:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402866:	459c      	cmp	ip, r3
  402868:	d107      	bne.n	40287a <_malloc_r+0x106>
  40286a:	e16d      	b.n	402b48 <_malloc_r+0x3d4>
  40286c:	2a00      	cmp	r2, #0
  40286e:	f280 817b 	bge.w	402b68 <_malloc_r+0x3f4>
  402872:	68db      	ldr	r3, [r3, #12]
  402874:	459c      	cmp	ip, r3
  402876:	f000 8167 	beq.w	402b48 <_malloc_r+0x3d4>
  40287a:	6859      	ldr	r1, [r3, #4]
  40287c:	f021 0103 	bic.w	r1, r1, #3
  402880:	1b8a      	subs	r2, r1, r6
  402882:	2a0f      	cmp	r2, #15
  402884:	ddf2      	ble.n	40286c <_malloc_r+0xf8>
  402886:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40288a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40288e:	9300      	str	r3, [sp, #0]
  402890:	199c      	adds	r4, r3, r6
  402892:	4628      	mov	r0, r5
  402894:	f046 0601 	orr.w	r6, r6, #1
  402898:	f042 0501 	orr.w	r5, r2, #1
  40289c:	605e      	str	r6, [r3, #4]
  40289e:	f8c8 c00c 	str.w	ip, [r8, #12]
  4028a2:	f8cc 8008 	str.w	r8, [ip, #8]
  4028a6:	617c      	str	r4, [r7, #20]
  4028a8:	613c      	str	r4, [r7, #16]
  4028aa:	f8c4 e00c 	str.w	lr, [r4, #12]
  4028ae:	f8c4 e008 	str.w	lr, [r4, #8]
  4028b2:	6065      	str	r5, [r4, #4]
  4028b4:	505a      	str	r2, [r3, r1]
  4028b6:	f000 fa61 	bl	402d7c <__malloc_unlock>
  4028ba:	9b00      	ldr	r3, [sp, #0]
  4028bc:	f103 0408 	add.w	r4, r3, #8
  4028c0:	e01e      	b.n	402900 <_malloc_r+0x18c>
  4028c2:	2910      	cmp	r1, #16
  4028c4:	d820      	bhi.n	402908 <_malloc_r+0x194>
  4028c6:	f000 fa53 	bl	402d70 <__malloc_lock>
  4028ca:	2610      	movs	r6, #16
  4028cc:	2318      	movs	r3, #24
  4028ce:	2002      	movs	r0, #2
  4028d0:	4f79      	ldr	r7, [pc, #484]	; (402ab8 <_malloc_r+0x344>)
  4028d2:	443b      	add	r3, r7
  4028d4:	f1a3 0208 	sub.w	r2, r3, #8
  4028d8:	685c      	ldr	r4, [r3, #4]
  4028da:	4294      	cmp	r4, r2
  4028dc:	f000 813d 	beq.w	402b5a <_malloc_r+0x3e6>
  4028e0:	6863      	ldr	r3, [r4, #4]
  4028e2:	68e1      	ldr	r1, [r4, #12]
  4028e4:	68a6      	ldr	r6, [r4, #8]
  4028e6:	f023 0303 	bic.w	r3, r3, #3
  4028ea:	4423      	add	r3, r4
  4028ec:	4628      	mov	r0, r5
  4028ee:	685a      	ldr	r2, [r3, #4]
  4028f0:	60f1      	str	r1, [r6, #12]
  4028f2:	f042 0201 	orr.w	r2, r2, #1
  4028f6:	608e      	str	r6, [r1, #8]
  4028f8:	605a      	str	r2, [r3, #4]
  4028fa:	f000 fa3f 	bl	402d7c <__malloc_unlock>
  4028fe:	3408      	adds	r4, #8
  402900:	4620      	mov	r0, r4
  402902:	b003      	add	sp, #12
  402904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402908:	2400      	movs	r4, #0
  40290a:	230c      	movs	r3, #12
  40290c:	4620      	mov	r0, r4
  40290e:	602b      	str	r3, [r5, #0]
  402910:	b003      	add	sp, #12
  402912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402916:	2040      	movs	r0, #64	; 0x40
  402918:	f44f 7300 	mov.w	r3, #512	; 0x200
  40291c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402920:	e74a      	b.n	4027b8 <_malloc_r+0x44>
  402922:	4423      	add	r3, r4
  402924:	68e1      	ldr	r1, [r4, #12]
  402926:	685a      	ldr	r2, [r3, #4]
  402928:	68a6      	ldr	r6, [r4, #8]
  40292a:	f042 0201 	orr.w	r2, r2, #1
  40292e:	60f1      	str	r1, [r6, #12]
  402930:	4628      	mov	r0, r5
  402932:	608e      	str	r6, [r1, #8]
  402934:	605a      	str	r2, [r3, #4]
  402936:	f000 fa21 	bl	402d7c <__malloc_unlock>
  40293a:	3408      	adds	r4, #8
  40293c:	4620      	mov	r0, r4
  40293e:	b003      	add	sp, #12
  402940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402944:	4423      	add	r3, r4
  402946:	4628      	mov	r0, r5
  402948:	685a      	ldr	r2, [r3, #4]
  40294a:	f042 0201 	orr.w	r2, r2, #1
  40294e:	605a      	str	r2, [r3, #4]
  402950:	f000 fa14 	bl	402d7c <__malloc_unlock>
  402954:	3408      	adds	r4, #8
  402956:	4620      	mov	r0, r4
  402958:	b003      	add	sp, #12
  40295a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40295e:	68bc      	ldr	r4, [r7, #8]
  402960:	6863      	ldr	r3, [r4, #4]
  402962:	f023 0803 	bic.w	r8, r3, #3
  402966:	45b0      	cmp	r8, r6
  402968:	d304      	bcc.n	402974 <_malloc_r+0x200>
  40296a:	eba8 0306 	sub.w	r3, r8, r6
  40296e:	2b0f      	cmp	r3, #15
  402970:	f300 8085 	bgt.w	402a7e <_malloc_r+0x30a>
  402974:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402ad0 <_malloc_r+0x35c>
  402978:	4b50      	ldr	r3, [pc, #320]	; (402abc <_malloc_r+0x348>)
  40297a:	f8d9 2000 	ldr.w	r2, [r9]
  40297e:	681b      	ldr	r3, [r3, #0]
  402980:	3201      	adds	r2, #1
  402982:	4433      	add	r3, r6
  402984:	eb04 0a08 	add.w	sl, r4, r8
  402988:	f000 8155 	beq.w	402c36 <_malloc_r+0x4c2>
  40298c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402990:	330f      	adds	r3, #15
  402992:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402996:	f02b 0b0f 	bic.w	fp, fp, #15
  40299a:	4659      	mov	r1, fp
  40299c:	4628      	mov	r0, r5
  40299e:	f000 f9f3 	bl	402d88 <_sbrk_r>
  4029a2:	1c41      	adds	r1, r0, #1
  4029a4:	4602      	mov	r2, r0
  4029a6:	f000 80fc 	beq.w	402ba2 <_malloc_r+0x42e>
  4029aa:	4582      	cmp	sl, r0
  4029ac:	f200 80f7 	bhi.w	402b9e <_malloc_r+0x42a>
  4029b0:	4b43      	ldr	r3, [pc, #268]	; (402ac0 <_malloc_r+0x34c>)
  4029b2:	6819      	ldr	r1, [r3, #0]
  4029b4:	4459      	add	r1, fp
  4029b6:	6019      	str	r1, [r3, #0]
  4029b8:	f000 814d 	beq.w	402c56 <_malloc_r+0x4e2>
  4029bc:	f8d9 0000 	ldr.w	r0, [r9]
  4029c0:	3001      	adds	r0, #1
  4029c2:	bf1b      	ittet	ne
  4029c4:	eba2 0a0a 	subne.w	sl, r2, sl
  4029c8:	4451      	addne	r1, sl
  4029ca:	f8c9 2000 	streq.w	r2, [r9]
  4029ce:	6019      	strne	r1, [r3, #0]
  4029d0:	f012 0107 	ands.w	r1, r2, #7
  4029d4:	f000 8115 	beq.w	402c02 <_malloc_r+0x48e>
  4029d8:	f1c1 0008 	rsb	r0, r1, #8
  4029dc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4029e0:	4402      	add	r2, r0
  4029e2:	3108      	adds	r1, #8
  4029e4:	eb02 090b 	add.w	r9, r2, fp
  4029e8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4029ec:	eba1 0909 	sub.w	r9, r1, r9
  4029f0:	4649      	mov	r1, r9
  4029f2:	4628      	mov	r0, r5
  4029f4:	9301      	str	r3, [sp, #4]
  4029f6:	9200      	str	r2, [sp, #0]
  4029f8:	f000 f9c6 	bl	402d88 <_sbrk_r>
  4029fc:	1c43      	adds	r3, r0, #1
  4029fe:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402a02:	f000 8143 	beq.w	402c8c <_malloc_r+0x518>
  402a06:	1a80      	subs	r0, r0, r2
  402a08:	4448      	add	r0, r9
  402a0a:	f040 0001 	orr.w	r0, r0, #1
  402a0e:	6819      	ldr	r1, [r3, #0]
  402a10:	60ba      	str	r2, [r7, #8]
  402a12:	4449      	add	r1, r9
  402a14:	42bc      	cmp	r4, r7
  402a16:	6050      	str	r0, [r2, #4]
  402a18:	6019      	str	r1, [r3, #0]
  402a1a:	d017      	beq.n	402a4c <_malloc_r+0x2d8>
  402a1c:	f1b8 0f0f 	cmp.w	r8, #15
  402a20:	f240 80fb 	bls.w	402c1a <_malloc_r+0x4a6>
  402a24:	6860      	ldr	r0, [r4, #4]
  402a26:	f1a8 020c 	sub.w	r2, r8, #12
  402a2a:	f022 0207 	bic.w	r2, r2, #7
  402a2e:	eb04 0e02 	add.w	lr, r4, r2
  402a32:	f000 0001 	and.w	r0, r0, #1
  402a36:	f04f 0c05 	mov.w	ip, #5
  402a3a:	4310      	orrs	r0, r2
  402a3c:	2a0f      	cmp	r2, #15
  402a3e:	6060      	str	r0, [r4, #4]
  402a40:	f8ce c004 	str.w	ip, [lr, #4]
  402a44:	f8ce c008 	str.w	ip, [lr, #8]
  402a48:	f200 8117 	bhi.w	402c7a <_malloc_r+0x506>
  402a4c:	4b1d      	ldr	r3, [pc, #116]	; (402ac4 <_malloc_r+0x350>)
  402a4e:	68bc      	ldr	r4, [r7, #8]
  402a50:	681a      	ldr	r2, [r3, #0]
  402a52:	4291      	cmp	r1, r2
  402a54:	bf88      	it	hi
  402a56:	6019      	strhi	r1, [r3, #0]
  402a58:	4b1b      	ldr	r3, [pc, #108]	; (402ac8 <_malloc_r+0x354>)
  402a5a:	681a      	ldr	r2, [r3, #0]
  402a5c:	4291      	cmp	r1, r2
  402a5e:	6862      	ldr	r2, [r4, #4]
  402a60:	bf88      	it	hi
  402a62:	6019      	strhi	r1, [r3, #0]
  402a64:	f022 0203 	bic.w	r2, r2, #3
  402a68:	4296      	cmp	r6, r2
  402a6a:	eba2 0306 	sub.w	r3, r2, r6
  402a6e:	d801      	bhi.n	402a74 <_malloc_r+0x300>
  402a70:	2b0f      	cmp	r3, #15
  402a72:	dc04      	bgt.n	402a7e <_malloc_r+0x30a>
  402a74:	4628      	mov	r0, r5
  402a76:	f000 f981 	bl	402d7c <__malloc_unlock>
  402a7a:	2400      	movs	r4, #0
  402a7c:	e740      	b.n	402900 <_malloc_r+0x18c>
  402a7e:	19a2      	adds	r2, r4, r6
  402a80:	f043 0301 	orr.w	r3, r3, #1
  402a84:	f046 0601 	orr.w	r6, r6, #1
  402a88:	6066      	str	r6, [r4, #4]
  402a8a:	4628      	mov	r0, r5
  402a8c:	60ba      	str	r2, [r7, #8]
  402a8e:	6053      	str	r3, [r2, #4]
  402a90:	f000 f974 	bl	402d7c <__malloc_unlock>
  402a94:	3408      	adds	r4, #8
  402a96:	4620      	mov	r0, r4
  402a98:	b003      	add	sp, #12
  402a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a9e:	2b14      	cmp	r3, #20
  402aa0:	d971      	bls.n	402b86 <_malloc_r+0x412>
  402aa2:	2b54      	cmp	r3, #84	; 0x54
  402aa4:	f200 80a3 	bhi.w	402bee <_malloc_r+0x47a>
  402aa8:	0b33      	lsrs	r3, r6, #12
  402aaa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402aae:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402ab2:	00c3      	lsls	r3, r0, #3
  402ab4:	e680      	b.n	4027b8 <_malloc_r+0x44>
  402ab6:	bf00      	nop
  402ab8:	20000440 	.word	0x20000440
  402abc:	20000a90 	.word	0x20000a90
  402ac0:	20000a60 	.word	0x20000a60
  402ac4:	20000a88 	.word	0x20000a88
  402ac8:	20000a8c 	.word	0x20000a8c
  402acc:	20000448 	.word	0x20000448
  402ad0:	20000848 	.word	0x20000848
  402ad4:	0a5a      	lsrs	r2, r3, #9
  402ad6:	2a04      	cmp	r2, #4
  402ad8:	d95b      	bls.n	402b92 <_malloc_r+0x41e>
  402ada:	2a14      	cmp	r2, #20
  402adc:	f200 80ae 	bhi.w	402c3c <_malloc_r+0x4c8>
  402ae0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402ae4:	00c9      	lsls	r1, r1, #3
  402ae6:	325b      	adds	r2, #91	; 0x5b
  402ae8:	eb07 0c01 	add.w	ip, r7, r1
  402aec:	5879      	ldr	r1, [r7, r1]
  402aee:	f1ac 0c08 	sub.w	ip, ip, #8
  402af2:	458c      	cmp	ip, r1
  402af4:	f000 8088 	beq.w	402c08 <_malloc_r+0x494>
  402af8:	684a      	ldr	r2, [r1, #4]
  402afa:	f022 0203 	bic.w	r2, r2, #3
  402afe:	4293      	cmp	r3, r2
  402b00:	d273      	bcs.n	402bea <_malloc_r+0x476>
  402b02:	6889      	ldr	r1, [r1, #8]
  402b04:	458c      	cmp	ip, r1
  402b06:	d1f7      	bne.n	402af8 <_malloc_r+0x384>
  402b08:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402b0c:	687b      	ldr	r3, [r7, #4]
  402b0e:	60e2      	str	r2, [r4, #12]
  402b10:	f8c4 c008 	str.w	ip, [r4, #8]
  402b14:	6094      	str	r4, [r2, #8]
  402b16:	f8cc 400c 	str.w	r4, [ip, #12]
  402b1a:	e68f      	b.n	40283c <_malloc_r+0xc8>
  402b1c:	19a1      	adds	r1, r4, r6
  402b1e:	f046 0c01 	orr.w	ip, r6, #1
  402b22:	f042 0601 	orr.w	r6, r2, #1
  402b26:	f8c4 c004 	str.w	ip, [r4, #4]
  402b2a:	4628      	mov	r0, r5
  402b2c:	6179      	str	r1, [r7, #20]
  402b2e:	6139      	str	r1, [r7, #16]
  402b30:	f8c1 e00c 	str.w	lr, [r1, #12]
  402b34:	f8c1 e008 	str.w	lr, [r1, #8]
  402b38:	604e      	str	r6, [r1, #4]
  402b3a:	50e2      	str	r2, [r4, r3]
  402b3c:	f000 f91e 	bl	402d7c <__malloc_unlock>
  402b40:	3408      	adds	r4, #8
  402b42:	e6dd      	b.n	402900 <_malloc_r+0x18c>
  402b44:	687b      	ldr	r3, [r7, #4]
  402b46:	e679      	b.n	40283c <_malloc_r+0xc8>
  402b48:	f108 0801 	add.w	r8, r8, #1
  402b4c:	f018 0f03 	tst.w	r8, #3
  402b50:	f10c 0c08 	add.w	ip, ip, #8
  402b54:	f47f ae85 	bne.w	402862 <_malloc_r+0xee>
  402b58:	e02d      	b.n	402bb6 <_malloc_r+0x442>
  402b5a:	68dc      	ldr	r4, [r3, #12]
  402b5c:	42a3      	cmp	r3, r4
  402b5e:	bf08      	it	eq
  402b60:	3002      	addeq	r0, #2
  402b62:	f43f ae3e 	beq.w	4027e2 <_malloc_r+0x6e>
  402b66:	e6bb      	b.n	4028e0 <_malloc_r+0x16c>
  402b68:	4419      	add	r1, r3
  402b6a:	461c      	mov	r4, r3
  402b6c:	684a      	ldr	r2, [r1, #4]
  402b6e:	68db      	ldr	r3, [r3, #12]
  402b70:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402b74:	f042 0201 	orr.w	r2, r2, #1
  402b78:	604a      	str	r2, [r1, #4]
  402b7a:	4628      	mov	r0, r5
  402b7c:	60f3      	str	r3, [r6, #12]
  402b7e:	609e      	str	r6, [r3, #8]
  402b80:	f000 f8fc 	bl	402d7c <__malloc_unlock>
  402b84:	e6bc      	b.n	402900 <_malloc_r+0x18c>
  402b86:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402b8a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402b8e:	00c3      	lsls	r3, r0, #3
  402b90:	e612      	b.n	4027b8 <_malloc_r+0x44>
  402b92:	099a      	lsrs	r2, r3, #6
  402b94:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402b98:	00c9      	lsls	r1, r1, #3
  402b9a:	3238      	adds	r2, #56	; 0x38
  402b9c:	e7a4      	b.n	402ae8 <_malloc_r+0x374>
  402b9e:	42bc      	cmp	r4, r7
  402ba0:	d054      	beq.n	402c4c <_malloc_r+0x4d8>
  402ba2:	68bc      	ldr	r4, [r7, #8]
  402ba4:	6862      	ldr	r2, [r4, #4]
  402ba6:	f022 0203 	bic.w	r2, r2, #3
  402baa:	e75d      	b.n	402a68 <_malloc_r+0x2f4>
  402bac:	f859 3908 	ldr.w	r3, [r9], #-8
  402bb0:	4599      	cmp	r9, r3
  402bb2:	f040 8086 	bne.w	402cc2 <_malloc_r+0x54e>
  402bb6:	f010 0f03 	tst.w	r0, #3
  402bba:	f100 30ff 	add.w	r0, r0, #4294967295
  402bbe:	d1f5      	bne.n	402bac <_malloc_r+0x438>
  402bc0:	687b      	ldr	r3, [r7, #4]
  402bc2:	ea23 0304 	bic.w	r3, r3, r4
  402bc6:	607b      	str	r3, [r7, #4]
  402bc8:	0064      	lsls	r4, r4, #1
  402bca:	429c      	cmp	r4, r3
  402bcc:	f63f aec7 	bhi.w	40295e <_malloc_r+0x1ea>
  402bd0:	2c00      	cmp	r4, #0
  402bd2:	f43f aec4 	beq.w	40295e <_malloc_r+0x1ea>
  402bd6:	421c      	tst	r4, r3
  402bd8:	4640      	mov	r0, r8
  402bda:	f47f ae3e 	bne.w	40285a <_malloc_r+0xe6>
  402bde:	0064      	lsls	r4, r4, #1
  402be0:	421c      	tst	r4, r3
  402be2:	f100 0004 	add.w	r0, r0, #4
  402be6:	d0fa      	beq.n	402bde <_malloc_r+0x46a>
  402be8:	e637      	b.n	40285a <_malloc_r+0xe6>
  402bea:	468c      	mov	ip, r1
  402bec:	e78c      	b.n	402b08 <_malloc_r+0x394>
  402bee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402bf2:	d815      	bhi.n	402c20 <_malloc_r+0x4ac>
  402bf4:	0bf3      	lsrs	r3, r6, #15
  402bf6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402bfa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402bfe:	00c3      	lsls	r3, r0, #3
  402c00:	e5da      	b.n	4027b8 <_malloc_r+0x44>
  402c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402c06:	e6ed      	b.n	4029e4 <_malloc_r+0x270>
  402c08:	687b      	ldr	r3, [r7, #4]
  402c0a:	1092      	asrs	r2, r2, #2
  402c0c:	2101      	movs	r1, #1
  402c0e:	fa01 f202 	lsl.w	r2, r1, r2
  402c12:	4313      	orrs	r3, r2
  402c14:	607b      	str	r3, [r7, #4]
  402c16:	4662      	mov	r2, ip
  402c18:	e779      	b.n	402b0e <_malloc_r+0x39a>
  402c1a:	2301      	movs	r3, #1
  402c1c:	6053      	str	r3, [r2, #4]
  402c1e:	e729      	b.n	402a74 <_malloc_r+0x300>
  402c20:	f240 5254 	movw	r2, #1364	; 0x554
  402c24:	4293      	cmp	r3, r2
  402c26:	d822      	bhi.n	402c6e <_malloc_r+0x4fa>
  402c28:	0cb3      	lsrs	r3, r6, #18
  402c2a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402c2e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402c32:	00c3      	lsls	r3, r0, #3
  402c34:	e5c0      	b.n	4027b8 <_malloc_r+0x44>
  402c36:	f103 0b10 	add.w	fp, r3, #16
  402c3a:	e6ae      	b.n	40299a <_malloc_r+0x226>
  402c3c:	2a54      	cmp	r2, #84	; 0x54
  402c3e:	d829      	bhi.n	402c94 <_malloc_r+0x520>
  402c40:	0b1a      	lsrs	r2, r3, #12
  402c42:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402c46:	00c9      	lsls	r1, r1, #3
  402c48:	326e      	adds	r2, #110	; 0x6e
  402c4a:	e74d      	b.n	402ae8 <_malloc_r+0x374>
  402c4c:	4b20      	ldr	r3, [pc, #128]	; (402cd0 <_malloc_r+0x55c>)
  402c4e:	6819      	ldr	r1, [r3, #0]
  402c50:	4459      	add	r1, fp
  402c52:	6019      	str	r1, [r3, #0]
  402c54:	e6b2      	b.n	4029bc <_malloc_r+0x248>
  402c56:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402c5a:	2800      	cmp	r0, #0
  402c5c:	f47f aeae 	bne.w	4029bc <_malloc_r+0x248>
  402c60:	eb08 030b 	add.w	r3, r8, fp
  402c64:	68ba      	ldr	r2, [r7, #8]
  402c66:	f043 0301 	orr.w	r3, r3, #1
  402c6a:	6053      	str	r3, [r2, #4]
  402c6c:	e6ee      	b.n	402a4c <_malloc_r+0x2d8>
  402c6e:	207f      	movs	r0, #127	; 0x7f
  402c70:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402c74:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402c78:	e59e      	b.n	4027b8 <_malloc_r+0x44>
  402c7a:	f104 0108 	add.w	r1, r4, #8
  402c7e:	4628      	mov	r0, r5
  402c80:	9300      	str	r3, [sp, #0]
  402c82:	f001 fb47 	bl	404314 <_free_r>
  402c86:	9b00      	ldr	r3, [sp, #0]
  402c88:	6819      	ldr	r1, [r3, #0]
  402c8a:	e6df      	b.n	402a4c <_malloc_r+0x2d8>
  402c8c:	2001      	movs	r0, #1
  402c8e:	f04f 0900 	mov.w	r9, #0
  402c92:	e6bc      	b.n	402a0e <_malloc_r+0x29a>
  402c94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402c98:	d805      	bhi.n	402ca6 <_malloc_r+0x532>
  402c9a:	0bda      	lsrs	r2, r3, #15
  402c9c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402ca0:	00c9      	lsls	r1, r1, #3
  402ca2:	3277      	adds	r2, #119	; 0x77
  402ca4:	e720      	b.n	402ae8 <_malloc_r+0x374>
  402ca6:	f240 5154 	movw	r1, #1364	; 0x554
  402caa:	428a      	cmp	r2, r1
  402cac:	d805      	bhi.n	402cba <_malloc_r+0x546>
  402cae:	0c9a      	lsrs	r2, r3, #18
  402cb0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402cb4:	00c9      	lsls	r1, r1, #3
  402cb6:	327c      	adds	r2, #124	; 0x7c
  402cb8:	e716      	b.n	402ae8 <_malloc_r+0x374>
  402cba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402cbe:	227e      	movs	r2, #126	; 0x7e
  402cc0:	e712      	b.n	402ae8 <_malloc_r+0x374>
  402cc2:	687b      	ldr	r3, [r7, #4]
  402cc4:	e780      	b.n	402bc8 <_malloc_r+0x454>
  402cc6:	08f0      	lsrs	r0, r6, #3
  402cc8:	f106 0308 	add.w	r3, r6, #8
  402ccc:	e600      	b.n	4028d0 <_malloc_r+0x15c>
  402cce:	bf00      	nop
  402cd0:	20000a60 	.word	0x20000a60

00402cd4 <memset>:
  402cd4:	b470      	push	{r4, r5, r6}
  402cd6:	0786      	lsls	r6, r0, #30
  402cd8:	d046      	beq.n	402d68 <memset+0x94>
  402cda:	1e54      	subs	r4, r2, #1
  402cdc:	2a00      	cmp	r2, #0
  402cde:	d041      	beq.n	402d64 <memset+0x90>
  402ce0:	b2ca      	uxtb	r2, r1
  402ce2:	4603      	mov	r3, r0
  402ce4:	e002      	b.n	402cec <memset+0x18>
  402ce6:	f114 34ff 	adds.w	r4, r4, #4294967295
  402cea:	d33b      	bcc.n	402d64 <memset+0x90>
  402cec:	f803 2b01 	strb.w	r2, [r3], #1
  402cf0:	079d      	lsls	r5, r3, #30
  402cf2:	d1f8      	bne.n	402ce6 <memset+0x12>
  402cf4:	2c03      	cmp	r4, #3
  402cf6:	d92e      	bls.n	402d56 <memset+0x82>
  402cf8:	b2cd      	uxtb	r5, r1
  402cfa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402cfe:	2c0f      	cmp	r4, #15
  402d00:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402d04:	d919      	bls.n	402d3a <memset+0x66>
  402d06:	f103 0210 	add.w	r2, r3, #16
  402d0a:	4626      	mov	r6, r4
  402d0c:	3e10      	subs	r6, #16
  402d0e:	2e0f      	cmp	r6, #15
  402d10:	f842 5c10 	str.w	r5, [r2, #-16]
  402d14:	f842 5c0c 	str.w	r5, [r2, #-12]
  402d18:	f842 5c08 	str.w	r5, [r2, #-8]
  402d1c:	f842 5c04 	str.w	r5, [r2, #-4]
  402d20:	f102 0210 	add.w	r2, r2, #16
  402d24:	d8f2      	bhi.n	402d0c <memset+0x38>
  402d26:	f1a4 0210 	sub.w	r2, r4, #16
  402d2a:	f022 020f 	bic.w	r2, r2, #15
  402d2e:	f004 040f 	and.w	r4, r4, #15
  402d32:	3210      	adds	r2, #16
  402d34:	2c03      	cmp	r4, #3
  402d36:	4413      	add	r3, r2
  402d38:	d90d      	bls.n	402d56 <memset+0x82>
  402d3a:	461e      	mov	r6, r3
  402d3c:	4622      	mov	r2, r4
  402d3e:	3a04      	subs	r2, #4
  402d40:	2a03      	cmp	r2, #3
  402d42:	f846 5b04 	str.w	r5, [r6], #4
  402d46:	d8fa      	bhi.n	402d3e <memset+0x6a>
  402d48:	1f22      	subs	r2, r4, #4
  402d4a:	f022 0203 	bic.w	r2, r2, #3
  402d4e:	3204      	adds	r2, #4
  402d50:	4413      	add	r3, r2
  402d52:	f004 0403 	and.w	r4, r4, #3
  402d56:	b12c      	cbz	r4, 402d64 <memset+0x90>
  402d58:	b2c9      	uxtb	r1, r1
  402d5a:	441c      	add	r4, r3
  402d5c:	f803 1b01 	strb.w	r1, [r3], #1
  402d60:	429c      	cmp	r4, r3
  402d62:	d1fb      	bne.n	402d5c <memset+0x88>
  402d64:	bc70      	pop	{r4, r5, r6}
  402d66:	4770      	bx	lr
  402d68:	4614      	mov	r4, r2
  402d6a:	4603      	mov	r3, r0
  402d6c:	e7c2      	b.n	402cf4 <memset+0x20>
  402d6e:	bf00      	nop

00402d70 <__malloc_lock>:
  402d70:	4801      	ldr	r0, [pc, #4]	; (402d78 <__malloc_lock+0x8>)
  402d72:	f001 bd69 	b.w	404848 <__retarget_lock_acquire_recursive>
  402d76:	bf00      	nop
  402d78:	20000ec0 	.word	0x20000ec0

00402d7c <__malloc_unlock>:
  402d7c:	4801      	ldr	r0, [pc, #4]	; (402d84 <__malloc_unlock+0x8>)
  402d7e:	f001 bd65 	b.w	40484c <__retarget_lock_release_recursive>
  402d82:	bf00      	nop
  402d84:	20000ec0 	.word	0x20000ec0

00402d88 <_sbrk_r>:
  402d88:	b538      	push	{r3, r4, r5, lr}
  402d8a:	4c07      	ldr	r4, [pc, #28]	; (402da8 <_sbrk_r+0x20>)
  402d8c:	2300      	movs	r3, #0
  402d8e:	4605      	mov	r5, r0
  402d90:	4608      	mov	r0, r1
  402d92:	6023      	str	r3, [r4, #0]
  402d94:	f7ff fa9a 	bl	4022cc <_sbrk>
  402d98:	1c43      	adds	r3, r0, #1
  402d9a:	d000      	beq.n	402d9e <_sbrk_r+0x16>
  402d9c:	bd38      	pop	{r3, r4, r5, pc}
  402d9e:	6823      	ldr	r3, [r4, #0]
  402da0:	2b00      	cmp	r3, #0
  402da2:	d0fb      	beq.n	402d9c <_sbrk_r+0x14>
  402da4:	602b      	str	r3, [r5, #0]
  402da6:	bd38      	pop	{r3, r4, r5, pc}
  402da8:	20000ed4 	.word	0x20000ed4

00402dac <setbuf>:
  402dac:	2900      	cmp	r1, #0
  402dae:	bf0c      	ite	eq
  402db0:	2202      	moveq	r2, #2
  402db2:	2200      	movne	r2, #0
  402db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402db8:	f000 b800 	b.w	402dbc <setvbuf>

00402dbc <setvbuf>:
  402dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402dc0:	4c61      	ldr	r4, [pc, #388]	; (402f48 <setvbuf+0x18c>)
  402dc2:	6825      	ldr	r5, [r4, #0]
  402dc4:	b083      	sub	sp, #12
  402dc6:	4604      	mov	r4, r0
  402dc8:	460f      	mov	r7, r1
  402dca:	4690      	mov	r8, r2
  402dcc:	461e      	mov	r6, r3
  402dce:	b115      	cbz	r5, 402dd6 <setvbuf+0x1a>
  402dd0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402dd2:	2b00      	cmp	r3, #0
  402dd4:	d064      	beq.n	402ea0 <setvbuf+0xe4>
  402dd6:	f1b8 0f02 	cmp.w	r8, #2
  402dda:	d006      	beq.n	402dea <setvbuf+0x2e>
  402ddc:	f1b8 0f01 	cmp.w	r8, #1
  402de0:	f200 809f 	bhi.w	402f22 <setvbuf+0x166>
  402de4:	2e00      	cmp	r6, #0
  402de6:	f2c0 809c 	blt.w	402f22 <setvbuf+0x166>
  402dea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402dec:	07d8      	lsls	r0, r3, #31
  402dee:	d534      	bpl.n	402e5a <setvbuf+0x9e>
  402df0:	4621      	mov	r1, r4
  402df2:	4628      	mov	r0, r5
  402df4:	f001 f910 	bl	404018 <_fflush_r>
  402df8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402dfa:	b141      	cbz	r1, 402e0e <setvbuf+0x52>
  402dfc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402e00:	4299      	cmp	r1, r3
  402e02:	d002      	beq.n	402e0a <setvbuf+0x4e>
  402e04:	4628      	mov	r0, r5
  402e06:	f001 fa85 	bl	404314 <_free_r>
  402e0a:	2300      	movs	r3, #0
  402e0c:	6323      	str	r3, [r4, #48]	; 0x30
  402e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e12:	2200      	movs	r2, #0
  402e14:	61a2      	str	r2, [r4, #24]
  402e16:	6062      	str	r2, [r4, #4]
  402e18:	061a      	lsls	r2, r3, #24
  402e1a:	d43a      	bmi.n	402e92 <setvbuf+0xd6>
  402e1c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402e20:	f023 0303 	bic.w	r3, r3, #3
  402e24:	f1b8 0f02 	cmp.w	r8, #2
  402e28:	81a3      	strh	r3, [r4, #12]
  402e2a:	d01d      	beq.n	402e68 <setvbuf+0xac>
  402e2c:	ab01      	add	r3, sp, #4
  402e2e:	466a      	mov	r2, sp
  402e30:	4621      	mov	r1, r4
  402e32:	4628      	mov	r0, r5
  402e34:	f001 fd0c 	bl	404850 <__swhatbuf_r>
  402e38:	89a3      	ldrh	r3, [r4, #12]
  402e3a:	4318      	orrs	r0, r3
  402e3c:	81a0      	strh	r0, [r4, #12]
  402e3e:	2e00      	cmp	r6, #0
  402e40:	d132      	bne.n	402ea8 <setvbuf+0xec>
  402e42:	9e00      	ldr	r6, [sp, #0]
  402e44:	4630      	mov	r0, r6
  402e46:	f7ff fc8d 	bl	402764 <malloc>
  402e4a:	4607      	mov	r7, r0
  402e4c:	2800      	cmp	r0, #0
  402e4e:	d06b      	beq.n	402f28 <setvbuf+0x16c>
  402e50:	89a3      	ldrh	r3, [r4, #12]
  402e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402e56:	81a3      	strh	r3, [r4, #12]
  402e58:	e028      	b.n	402eac <setvbuf+0xf0>
  402e5a:	89a3      	ldrh	r3, [r4, #12]
  402e5c:	0599      	lsls	r1, r3, #22
  402e5e:	d4c7      	bmi.n	402df0 <setvbuf+0x34>
  402e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402e62:	f001 fcf1 	bl	404848 <__retarget_lock_acquire_recursive>
  402e66:	e7c3      	b.n	402df0 <setvbuf+0x34>
  402e68:	2500      	movs	r5, #0
  402e6a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402e6c:	2600      	movs	r6, #0
  402e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402e72:	f043 0302 	orr.w	r3, r3, #2
  402e76:	2001      	movs	r0, #1
  402e78:	60a6      	str	r6, [r4, #8]
  402e7a:	07ce      	lsls	r6, r1, #31
  402e7c:	81a3      	strh	r3, [r4, #12]
  402e7e:	6022      	str	r2, [r4, #0]
  402e80:	6122      	str	r2, [r4, #16]
  402e82:	6160      	str	r0, [r4, #20]
  402e84:	d401      	bmi.n	402e8a <setvbuf+0xce>
  402e86:	0598      	lsls	r0, r3, #22
  402e88:	d53e      	bpl.n	402f08 <setvbuf+0x14c>
  402e8a:	4628      	mov	r0, r5
  402e8c:	b003      	add	sp, #12
  402e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402e92:	6921      	ldr	r1, [r4, #16]
  402e94:	4628      	mov	r0, r5
  402e96:	f001 fa3d 	bl	404314 <_free_r>
  402e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e9e:	e7bd      	b.n	402e1c <setvbuf+0x60>
  402ea0:	4628      	mov	r0, r5
  402ea2:	f001 f911 	bl	4040c8 <__sinit>
  402ea6:	e796      	b.n	402dd6 <setvbuf+0x1a>
  402ea8:	2f00      	cmp	r7, #0
  402eaa:	d0cb      	beq.n	402e44 <setvbuf+0x88>
  402eac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402eae:	2b00      	cmp	r3, #0
  402eb0:	d033      	beq.n	402f1a <setvbuf+0x15e>
  402eb2:	9b00      	ldr	r3, [sp, #0]
  402eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402eb8:	6027      	str	r7, [r4, #0]
  402eba:	429e      	cmp	r6, r3
  402ebc:	bf1c      	itt	ne
  402ebe:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402ec2:	81a2      	strhne	r2, [r4, #12]
  402ec4:	f1b8 0f01 	cmp.w	r8, #1
  402ec8:	bf04      	itt	eq
  402eca:	f042 0201 	orreq.w	r2, r2, #1
  402ece:	81a2      	strheq	r2, [r4, #12]
  402ed0:	b292      	uxth	r2, r2
  402ed2:	f012 0308 	ands.w	r3, r2, #8
  402ed6:	6127      	str	r7, [r4, #16]
  402ed8:	6166      	str	r6, [r4, #20]
  402eda:	d00e      	beq.n	402efa <setvbuf+0x13e>
  402edc:	07d1      	lsls	r1, r2, #31
  402ede:	d51a      	bpl.n	402f16 <setvbuf+0x15a>
  402ee0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402ee2:	4276      	negs	r6, r6
  402ee4:	2300      	movs	r3, #0
  402ee6:	f015 0501 	ands.w	r5, r5, #1
  402eea:	61a6      	str	r6, [r4, #24]
  402eec:	60a3      	str	r3, [r4, #8]
  402eee:	d009      	beq.n	402f04 <setvbuf+0x148>
  402ef0:	2500      	movs	r5, #0
  402ef2:	4628      	mov	r0, r5
  402ef4:	b003      	add	sp, #12
  402ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402efa:	60a3      	str	r3, [r4, #8]
  402efc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402efe:	f015 0501 	ands.w	r5, r5, #1
  402f02:	d1f5      	bne.n	402ef0 <setvbuf+0x134>
  402f04:	0593      	lsls	r3, r2, #22
  402f06:	d4c0      	bmi.n	402e8a <setvbuf+0xce>
  402f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402f0a:	f001 fc9f 	bl	40484c <__retarget_lock_release_recursive>
  402f0e:	4628      	mov	r0, r5
  402f10:	b003      	add	sp, #12
  402f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402f16:	60a6      	str	r6, [r4, #8]
  402f18:	e7f0      	b.n	402efc <setvbuf+0x140>
  402f1a:	4628      	mov	r0, r5
  402f1c:	f001 f8d4 	bl	4040c8 <__sinit>
  402f20:	e7c7      	b.n	402eb2 <setvbuf+0xf6>
  402f22:	f04f 35ff 	mov.w	r5, #4294967295
  402f26:	e7b0      	b.n	402e8a <setvbuf+0xce>
  402f28:	f8dd 9000 	ldr.w	r9, [sp]
  402f2c:	45b1      	cmp	r9, r6
  402f2e:	d004      	beq.n	402f3a <setvbuf+0x17e>
  402f30:	4648      	mov	r0, r9
  402f32:	f7ff fc17 	bl	402764 <malloc>
  402f36:	4607      	mov	r7, r0
  402f38:	b920      	cbnz	r0, 402f44 <setvbuf+0x188>
  402f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f3e:	f04f 35ff 	mov.w	r5, #4294967295
  402f42:	e792      	b.n	402e6a <setvbuf+0xae>
  402f44:	464e      	mov	r6, r9
  402f46:	e783      	b.n	402e50 <setvbuf+0x94>
  402f48:	20000010 	.word	0x20000010
	...

00402f80 <strlen>:
  402f80:	f890 f000 	pld	[r0]
  402f84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402f88:	f020 0107 	bic.w	r1, r0, #7
  402f8c:	f06f 0c00 	mvn.w	ip, #0
  402f90:	f010 0407 	ands.w	r4, r0, #7
  402f94:	f891 f020 	pld	[r1, #32]
  402f98:	f040 8049 	bne.w	40302e <strlen+0xae>
  402f9c:	f04f 0400 	mov.w	r4, #0
  402fa0:	f06f 0007 	mvn.w	r0, #7
  402fa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402fa8:	f891 f040 	pld	[r1, #64]	; 0x40
  402fac:	f100 0008 	add.w	r0, r0, #8
  402fb0:	fa82 f24c 	uadd8	r2, r2, ip
  402fb4:	faa4 f28c 	sel	r2, r4, ip
  402fb8:	fa83 f34c 	uadd8	r3, r3, ip
  402fbc:	faa2 f38c 	sel	r3, r2, ip
  402fc0:	bb4b      	cbnz	r3, 403016 <strlen+0x96>
  402fc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402fc6:	fa82 f24c 	uadd8	r2, r2, ip
  402fca:	f100 0008 	add.w	r0, r0, #8
  402fce:	faa4 f28c 	sel	r2, r4, ip
  402fd2:	fa83 f34c 	uadd8	r3, r3, ip
  402fd6:	faa2 f38c 	sel	r3, r2, ip
  402fda:	b9e3      	cbnz	r3, 403016 <strlen+0x96>
  402fdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402fe0:	fa82 f24c 	uadd8	r2, r2, ip
  402fe4:	f100 0008 	add.w	r0, r0, #8
  402fe8:	faa4 f28c 	sel	r2, r4, ip
  402fec:	fa83 f34c 	uadd8	r3, r3, ip
  402ff0:	faa2 f38c 	sel	r3, r2, ip
  402ff4:	b97b      	cbnz	r3, 403016 <strlen+0x96>
  402ff6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402ffa:	f101 0120 	add.w	r1, r1, #32
  402ffe:	fa82 f24c 	uadd8	r2, r2, ip
  403002:	f100 0008 	add.w	r0, r0, #8
  403006:	faa4 f28c 	sel	r2, r4, ip
  40300a:	fa83 f34c 	uadd8	r3, r3, ip
  40300e:	faa2 f38c 	sel	r3, r2, ip
  403012:	2b00      	cmp	r3, #0
  403014:	d0c6      	beq.n	402fa4 <strlen+0x24>
  403016:	2a00      	cmp	r2, #0
  403018:	bf04      	itt	eq
  40301a:	3004      	addeq	r0, #4
  40301c:	461a      	moveq	r2, r3
  40301e:	ba12      	rev	r2, r2
  403020:	fab2 f282 	clz	r2, r2
  403024:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403028:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40302c:	4770      	bx	lr
  40302e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403032:	f004 0503 	and.w	r5, r4, #3
  403036:	f1c4 0000 	rsb	r0, r4, #0
  40303a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40303e:	f014 0f04 	tst.w	r4, #4
  403042:	f891 f040 	pld	[r1, #64]	; 0x40
  403046:	fa0c f505 	lsl.w	r5, ip, r5
  40304a:	ea62 0205 	orn	r2, r2, r5
  40304e:	bf1c      	itt	ne
  403050:	ea63 0305 	ornne	r3, r3, r5
  403054:	4662      	movne	r2, ip
  403056:	f04f 0400 	mov.w	r4, #0
  40305a:	e7a9      	b.n	402fb0 <strlen+0x30>

0040305c <__sprint_r.part.0>:
  40305c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403060:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403062:	049c      	lsls	r4, r3, #18
  403064:	4693      	mov	fp, r2
  403066:	d52f      	bpl.n	4030c8 <__sprint_r.part.0+0x6c>
  403068:	6893      	ldr	r3, [r2, #8]
  40306a:	6812      	ldr	r2, [r2, #0]
  40306c:	b353      	cbz	r3, 4030c4 <__sprint_r.part.0+0x68>
  40306e:	460e      	mov	r6, r1
  403070:	4607      	mov	r7, r0
  403072:	f102 0908 	add.w	r9, r2, #8
  403076:	e919 0420 	ldmdb	r9, {r5, sl}
  40307a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40307e:	d017      	beq.n	4030b0 <__sprint_r.part.0+0x54>
  403080:	3d04      	subs	r5, #4
  403082:	2400      	movs	r4, #0
  403084:	e001      	b.n	40308a <__sprint_r.part.0+0x2e>
  403086:	45a0      	cmp	r8, r4
  403088:	d010      	beq.n	4030ac <__sprint_r.part.0+0x50>
  40308a:	4632      	mov	r2, r6
  40308c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403090:	4638      	mov	r0, r7
  403092:	f001 f8bb 	bl	40420c <_fputwc_r>
  403096:	1c43      	adds	r3, r0, #1
  403098:	f104 0401 	add.w	r4, r4, #1
  40309c:	d1f3      	bne.n	403086 <__sprint_r.part.0+0x2a>
  40309e:	2300      	movs	r3, #0
  4030a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4030a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4030a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4030b0:	f02a 0a03 	bic.w	sl, sl, #3
  4030b4:	eba3 030a 	sub.w	r3, r3, sl
  4030b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4030bc:	f109 0908 	add.w	r9, r9, #8
  4030c0:	2b00      	cmp	r3, #0
  4030c2:	d1d8      	bne.n	403076 <__sprint_r.part.0+0x1a>
  4030c4:	2000      	movs	r0, #0
  4030c6:	e7ea      	b.n	40309e <__sprint_r.part.0+0x42>
  4030c8:	f001 fa0a 	bl	4044e0 <__sfvwrite_r>
  4030cc:	2300      	movs	r3, #0
  4030ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4030d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4030d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030da:	bf00      	nop

004030dc <_vfiprintf_r>:
  4030dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030e0:	b0ad      	sub	sp, #180	; 0xb4
  4030e2:	461d      	mov	r5, r3
  4030e4:	468b      	mov	fp, r1
  4030e6:	4690      	mov	r8, r2
  4030e8:	9307      	str	r3, [sp, #28]
  4030ea:	9006      	str	r0, [sp, #24]
  4030ec:	b118      	cbz	r0, 4030f6 <_vfiprintf_r+0x1a>
  4030ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4030f0:	2b00      	cmp	r3, #0
  4030f2:	f000 80f3 	beq.w	4032dc <_vfiprintf_r+0x200>
  4030f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4030fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4030fe:	07df      	lsls	r7, r3, #31
  403100:	b281      	uxth	r1, r0
  403102:	d402      	bmi.n	40310a <_vfiprintf_r+0x2e>
  403104:	058e      	lsls	r6, r1, #22
  403106:	f140 80fc 	bpl.w	403302 <_vfiprintf_r+0x226>
  40310a:	048c      	lsls	r4, r1, #18
  40310c:	d40a      	bmi.n	403124 <_vfiprintf_r+0x48>
  40310e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403112:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40311a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40311e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403122:	b289      	uxth	r1, r1
  403124:	0708      	lsls	r0, r1, #28
  403126:	f140 80b3 	bpl.w	403290 <_vfiprintf_r+0x1b4>
  40312a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40312e:	2b00      	cmp	r3, #0
  403130:	f000 80ae 	beq.w	403290 <_vfiprintf_r+0x1b4>
  403134:	f001 031a 	and.w	r3, r1, #26
  403138:	2b0a      	cmp	r3, #10
  40313a:	f000 80b5 	beq.w	4032a8 <_vfiprintf_r+0x1cc>
  40313e:	2300      	movs	r3, #0
  403140:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403144:	930b      	str	r3, [sp, #44]	; 0x2c
  403146:	9311      	str	r3, [sp, #68]	; 0x44
  403148:	9310      	str	r3, [sp, #64]	; 0x40
  40314a:	9303      	str	r3, [sp, #12]
  40314c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403150:	46ca      	mov	sl, r9
  403152:	f8cd b010 	str.w	fp, [sp, #16]
  403156:	f898 3000 	ldrb.w	r3, [r8]
  40315a:	4644      	mov	r4, r8
  40315c:	b1fb      	cbz	r3, 40319e <_vfiprintf_r+0xc2>
  40315e:	2b25      	cmp	r3, #37	; 0x25
  403160:	d102      	bne.n	403168 <_vfiprintf_r+0x8c>
  403162:	e01c      	b.n	40319e <_vfiprintf_r+0xc2>
  403164:	2b25      	cmp	r3, #37	; 0x25
  403166:	d003      	beq.n	403170 <_vfiprintf_r+0x94>
  403168:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40316c:	2b00      	cmp	r3, #0
  40316e:	d1f9      	bne.n	403164 <_vfiprintf_r+0x88>
  403170:	eba4 0508 	sub.w	r5, r4, r8
  403174:	b19d      	cbz	r5, 40319e <_vfiprintf_r+0xc2>
  403176:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403178:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40317a:	f8ca 8000 	str.w	r8, [sl]
  40317e:	3301      	adds	r3, #1
  403180:	442a      	add	r2, r5
  403182:	2b07      	cmp	r3, #7
  403184:	f8ca 5004 	str.w	r5, [sl, #4]
  403188:	9211      	str	r2, [sp, #68]	; 0x44
  40318a:	9310      	str	r3, [sp, #64]	; 0x40
  40318c:	dd7a      	ble.n	403284 <_vfiprintf_r+0x1a8>
  40318e:	2a00      	cmp	r2, #0
  403190:	f040 84b0 	bne.w	403af4 <_vfiprintf_r+0xa18>
  403194:	9b03      	ldr	r3, [sp, #12]
  403196:	9210      	str	r2, [sp, #64]	; 0x40
  403198:	442b      	add	r3, r5
  40319a:	46ca      	mov	sl, r9
  40319c:	9303      	str	r3, [sp, #12]
  40319e:	7823      	ldrb	r3, [r4, #0]
  4031a0:	2b00      	cmp	r3, #0
  4031a2:	f000 83e0 	beq.w	403966 <_vfiprintf_r+0x88a>
  4031a6:	2000      	movs	r0, #0
  4031a8:	f04f 0300 	mov.w	r3, #0
  4031ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4031b0:	f104 0801 	add.w	r8, r4, #1
  4031b4:	7862      	ldrb	r2, [r4, #1]
  4031b6:	4605      	mov	r5, r0
  4031b8:	4606      	mov	r6, r0
  4031ba:	4603      	mov	r3, r0
  4031bc:	f04f 34ff 	mov.w	r4, #4294967295
  4031c0:	f108 0801 	add.w	r8, r8, #1
  4031c4:	f1a2 0120 	sub.w	r1, r2, #32
  4031c8:	2958      	cmp	r1, #88	; 0x58
  4031ca:	f200 82de 	bhi.w	40378a <_vfiprintf_r+0x6ae>
  4031ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4031d2:	0221      	.short	0x0221
  4031d4:	02dc02dc 	.word	0x02dc02dc
  4031d8:	02dc0229 	.word	0x02dc0229
  4031dc:	02dc02dc 	.word	0x02dc02dc
  4031e0:	02dc02dc 	.word	0x02dc02dc
  4031e4:	028902dc 	.word	0x028902dc
  4031e8:	02dc0295 	.word	0x02dc0295
  4031ec:	02bd00a2 	.word	0x02bd00a2
  4031f0:	019f02dc 	.word	0x019f02dc
  4031f4:	01a401a4 	.word	0x01a401a4
  4031f8:	01a401a4 	.word	0x01a401a4
  4031fc:	01a401a4 	.word	0x01a401a4
  403200:	01a401a4 	.word	0x01a401a4
  403204:	02dc01a4 	.word	0x02dc01a4
  403208:	02dc02dc 	.word	0x02dc02dc
  40320c:	02dc02dc 	.word	0x02dc02dc
  403210:	02dc02dc 	.word	0x02dc02dc
  403214:	02dc02dc 	.word	0x02dc02dc
  403218:	01b202dc 	.word	0x01b202dc
  40321c:	02dc02dc 	.word	0x02dc02dc
  403220:	02dc02dc 	.word	0x02dc02dc
  403224:	02dc02dc 	.word	0x02dc02dc
  403228:	02dc02dc 	.word	0x02dc02dc
  40322c:	02dc02dc 	.word	0x02dc02dc
  403230:	02dc0197 	.word	0x02dc0197
  403234:	02dc02dc 	.word	0x02dc02dc
  403238:	02dc02dc 	.word	0x02dc02dc
  40323c:	02dc019b 	.word	0x02dc019b
  403240:	025302dc 	.word	0x025302dc
  403244:	02dc02dc 	.word	0x02dc02dc
  403248:	02dc02dc 	.word	0x02dc02dc
  40324c:	02dc02dc 	.word	0x02dc02dc
  403250:	02dc02dc 	.word	0x02dc02dc
  403254:	02dc02dc 	.word	0x02dc02dc
  403258:	021b025a 	.word	0x021b025a
  40325c:	02dc02dc 	.word	0x02dc02dc
  403260:	026e02dc 	.word	0x026e02dc
  403264:	02dc021b 	.word	0x02dc021b
  403268:	027302dc 	.word	0x027302dc
  40326c:	01f502dc 	.word	0x01f502dc
  403270:	02090182 	.word	0x02090182
  403274:	02dc02d7 	.word	0x02dc02d7
  403278:	02dc029a 	.word	0x02dc029a
  40327c:	02dc00a7 	.word	0x02dc00a7
  403280:	022e02dc 	.word	0x022e02dc
  403284:	f10a 0a08 	add.w	sl, sl, #8
  403288:	9b03      	ldr	r3, [sp, #12]
  40328a:	442b      	add	r3, r5
  40328c:	9303      	str	r3, [sp, #12]
  40328e:	e786      	b.n	40319e <_vfiprintf_r+0xc2>
  403290:	4659      	mov	r1, fp
  403292:	9806      	ldr	r0, [sp, #24]
  403294:	f000 fdac 	bl	403df0 <__swsetup_r>
  403298:	bb18      	cbnz	r0, 4032e2 <_vfiprintf_r+0x206>
  40329a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40329e:	f001 031a 	and.w	r3, r1, #26
  4032a2:	2b0a      	cmp	r3, #10
  4032a4:	f47f af4b 	bne.w	40313e <_vfiprintf_r+0x62>
  4032a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4032ac:	2b00      	cmp	r3, #0
  4032ae:	f6ff af46 	blt.w	40313e <_vfiprintf_r+0x62>
  4032b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4032b6:	07db      	lsls	r3, r3, #31
  4032b8:	d405      	bmi.n	4032c6 <_vfiprintf_r+0x1ea>
  4032ba:	058f      	lsls	r7, r1, #22
  4032bc:	d403      	bmi.n	4032c6 <_vfiprintf_r+0x1ea>
  4032be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4032c2:	f001 fac3 	bl	40484c <__retarget_lock_release_recursive>
  4032c6:	462b      	mov	r3, r5
  4032c8:	4642      	mov	r2, r8
  4032ca:	4659      	mov	r1, fp
  4032cc:	9806      	ldr	r0, [sp, #24]
  4032ce:	f000 fd4d 	bl	403d6c <__sbprintf>
  4032d2:	9003      	str	r0, [sp, #12]
  4032d4:	9803      	ldr	r0, [sp, #12]
  4032d6:	b02d      	add	sp, #180	; 0xb4
  4032d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032dc:	f000 fef4 	bl	4040c8 <__sinit>
  4032e0:	e709      	b.n	4030f6 <_vfiprintf_r+0x1a>
  4032e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4032e6:	07d9      	lsls	r1, r3, #31
  4032e8:	d404      	bmi.n	4032f4 <_vfiprintf_r+0x218>
  4032ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4032ee:	059a      	lsls	r2, r3, #22
  4032f0:	f140 84aa 	bpl.w	403c48 <_vfiprintf_r+0xb6c>
  4032f4:	f04f 33ff 	mov.w	r3, #4294967295
  4032f8:	9303      	str	r3, [sp, #12]
  4032fa:	9803      	ldr	r0, [sp, #12]
  4032fc:	b02d      	add	sp, #180	; 0xb4
  4032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403302:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403306:	f001 fa9f 	bl	404848 <__retarget_lock_acquire_recursive>
  40330a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40330e:	b281      	uxth	r1, r0
  403310:	e6fb      	b.n	40310a <_vfiprintf_r+0x2e>
  403312:	4276      	negs	r6, r6
  403314:	9207      	str	r2, [sp, #28]
  403316:	f043 0304 	orr.w	r3, r3, #4
  40331a:	f898 2000 	ldrb.w	r2, [r8]
  40331e:	e74f      	b.n	4031c0 <_vfiprintf_r+0xe4>
  403320:	9608      	str	r6, [sp, #32]
  403322:	069e      	lsls	r6, r3, #26
  403324:	f100 8450 	bmi.w	403bc8 <_vfiprintf_r+0xaec>
  403328:	9907      	ldr	r1, [sp, #28]
  40332a:	06dd      	lsls	r5, r3, #27
  40332c:	460a      	mov	r2, r1
  40332e:	f100 83ef 	bmi.w	403b10 <_vfiprintf_r+0xa34>
  403332:	0658      	lsls	r0, r3, #25
  403334:	f140 83ec 	bpl.w	403b10 <_vfiprintf_r+0xa34>
  403338:	880e      	ldrh	r6, [r1, #0]
  40333a:	3104      	adds	r1, #4
  40333c:	2700      	movs	r7, #0
  40333e:	2201      	movs	r2, #1
  403340:	9107      	str	r1, [sp, #28]
  403342:	f04f 0100 	mov.w	r1, #0
  403346:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40334a:	2500      	movs	r5, #0
  40334c:	1c61      	adds	r1, r4, #1
  40334e:	f000 8116 	beq.w	40357e <_vfiprintf_r+0x4a2>
  403352:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403356:	9102      	str	r1, [sp, #8]
  403358:	ea56 0107 	orrs.w	r1, r6, r7
  40335c:	f040 8114 	bne.w	403588 <_vfiprintf_r+0x4ac>
  403360:	2c00      	cmp	r4, #0
  403362:	f040 835c 	bne.w	403a1e <_vfiprintf_r+0x942>
  403366:	2a00      	cmp	r2, #0
  403368:	f040 83b7 	bne.w	403ada <_vfiprintf_r+0x9fe>
  40336c:	f013 0301 	ands.w	r3, r3, #1
  403370:	9305      	str	r3, [sp, #20]
  403372:	f000 8457 	beq.w	403c24 <_vfiprintf_r+0xb48>
  403376:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40337a:	2330      	movs	r3, #48	; 0x30
  40337c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403380:	9b05      	ldr	r3, [sp, #20]
  403382:	42a3      	cmp	r3, r4
  403384:	bfb8      	it	lt
  403386:	4623      	movlt	r3, r4
  403388:	9301      	str	r3, [sp, #4]
  40338a:	b10d      	cbz	r5, 403390 <_vfiprintf_r+0x2b4>
  40338c:	3301      	adds	r3, #1
  40338e:	9301      	str	r3, [sp, #4]
  403390:	9b02      	ldr	r3, [sp, #8]
  403392:	f013 0302 	ands.w	r3, r3, #2
  403396:	9309      	str	r3, [sp, #36]	; 0x24
  403398:	d002      	beq.n	4033a0 <_vfiprintf_r+0x2c4>
  40339a:	9b01      	ldr	r3, [sp, #4]
  40339c:	3302      	adds	r3, #2
  40339e:	9301      	str	r3, [sp, #4]
  4033a0:	9b02      	ldr	r3, [sp, #8]
  4033a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4033a6:	930a      	str	r3, [sp, #40]	; 0x28
  4033a8:	f040 8217 	bne.w	4037da <_vfiprintf_r+0x6fe>
  4033ac:	9b08      	ldr	r3, [sp, #32]
  4033ae:	9a01      	ldr	r2, [sp, #4]
  4033b0:	1a9d      	subs	r5, r3, r2
  4033b2:	2d00      	cmp	r5, #0
  4033b4:	f340 8211 	ble.w	4037da <_vfiprintf_r+0x6fe>
  4033b8:	2d10      	cmp	r5, #16
  4033ba:	f340 8490 	ble.w	403cde <_vfiprintf_r+0xc02>
  4033be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4033c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4033c2:	4ec4      	ldr	r6, [pc, #784]	; (4036d4 <_vfiprintf_r+0x5f8>)
  4033c4:	46d6      	mov	lr, sl
  4033c6:	2710      	movs	r7, #16
  4033c8:	46a2      	mov	sl, r4
  4033ca:	4619      	mov	r1, r3
  4033cc:	9c06      	ldr	r4, [sp, #24]
  4033ce:	e007      	b.n	4033e0 <_vfiprintf_r+0x304>
  4033d0:	f101 0c02 	add.w	ip, r1, #2
  4033d4:	f10e 0e08 	add.w	lr, lr, #8
  4033d8:	4601      	mov	r1, r0
  4033da:	3d10      	subs	r5, #16
  4033dc:	2d10      	cmp	r5, #16
  4033de:	dd11      	ble.n	403404 <_vfiprintf_r+0x328>
  4033e0:	1c48      	adds	r0, r1, #1
  4033e2:	3210      	adds	r2, #16
  4033e4:	2807      	cmp	r0, #7
  4033e6:	9211      	str	r2, [sp, #68]	; 0x44
  4033e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4033ec:	9010      	str	r0, [sp, #64]	; 0x40
  4033ee:	ddef      	ble.n	4033d0 <_vfiprintf_r+0x2f4>
  4033f0:	2a00      	cmp	r2, #0
  4033f2:	f040 81e4 	bne.w	4037be <_vfiprintf_r+0x6e2>
  4033f6:	3d10      	subs	r5, #16
  4033f8:	2d10      	cmp	r5, #16
  4033fa:	4611      	mov	r1, r2
  4033fc:	f04f 0c01 	mov.w	ip, #1
  403400:	46ce      	mov	lr, r9
  403402:	dced      	bgt.n	4033e0 <_vfiprintf_r+0x304>
  403404:	4654      	mov	r4, sl
  403406:	4661      	mov	r1, ip
  403408:	46f2      	mov	sl, lr
  40340a:	442a      	add	r2, r5
  40340c:	2907      	cmp	r1, #7
  40340e:	9211      	str	r2, [sp, #68]	; 0x44
  403410:	f8ca 6000 	str.w	r6, [sl]
  403414:	f8ca 5004 	str.w	r5, [sl, #4]
  403418:	9110      	str	r1, [sp, #64]	; 0x40
  40341a:	f300 82ec 	bgt.w	4039f6 <_vfiprintf_r+0x91a>
  40341e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403422:	f10a 0a08 	add.w	sl, sl, #8
  403426:	1c48      	adds	r0, r1, #1
  403428:	2d00      	cmp	r5, #0
  40342a:	f040 81de 	bne.w	4037ea <_vfiprintf_r+0x70e>
  40342e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403430:	2b00      	cmp	r3, #0
  403432:	f000 81f8 	beq.w	403826 <_vfiprintf_r+0x74a>
  403436:	3202      	adds	r2, #2
  403438:	a90e      	add	r1, sp, #56	; 0x38
  40343a:	2302      	movs	r3, #2
  40343c:	2807      	cmp	r0, #7
  40343e:	9211      	str	r2, [sp, #68]	; 0x44
  403440:	9010      	str	r0, [sp, #64]	; 0x40
  403442:	e88a 000a 	stmia.w	sl, {r1, r3}
  403446:	f340 81ea 	ble.w	40381e <_vfiprintf_r+0x742>
  40344a:	2a00      	cmp	r2, #0
  40344c:	f040 838c 	bne.w	403b68 <_vfiprintf_r+0xa8c>
  403450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403452:	2b80      	cmp	r3, #128	; 0x80
  403454:	f04f 0001 	mov.w	r0, #1
  403458:	4611      	mov	r1, r2
  40345a:	46ca      	mov	sl, r9
  40345c:	f040 81e7 	bne.w	40382e <_vfiprintf_r+0x752>
  403460:	9b08      	ldr	r3, [sp, #32]
  403462:	9d01      	ldr	r5, [sp, #4]
  403464:	1b5e      	subs	r6, r3, r5
  403466:	2e00      	cmp	r6, #0
  403468:	f340 81e1 	ble.w	40382e <_vfiprintf_r+0x752>
  40346c:	2e10      	cmp	r6, #16
  40346e:	4d9a      	ldr	r5, [pc, #616]	; (4036d8 <_vfiprintf_r+0x5fc>)
  403470:	f340 8450 	ble.w	403d14 <_vfiprintf_r+0xc38>
  403474:	46d4      	mov	ip, sl
  403476:	2710      	movs	r7, #16
  403478:	46a2      	mov	sl, r4
  40347a:	9c06      	ldr	r4, [sp, #24]
  40347c:	e007      	b.n	40348e <_vfiprintf_r+0x3b2>
  40347e:	f101 0e02 	add.w	lr, r1, #2
  403482:	f10c 0c08 	add.w	ip, ip, #8
  403486:	4601      	mov	r1, r0
  403488:	3e10      	subs	r6, #16
  40348a:	2e10      	cmp	r6, #16
  40348c:	dd11      	ble.n	4034b2 <_vfiprintf_r+0x3d6>
  40348e:	1c48      	adds	r0, r1, #1
  403490:	3210      	adds	r2, #16
  403492:	2807      	cmp	r0, #7
  403494:	9211      	str	r2, [sp, #68]	; 0x44
  403496:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40349a:	9010      	str	r0, [sp, #64]	; 0x40
  40349c:	ddef      	ble.n	40347e <_vfiprintf_r+0x3a2>
  40349e:	2a00      	cmp	r2, #0
  4034a0:	f040 829d 	bne.w	4039de <_vfiprintf_r+0x902>
  4034a4:	3e10      	subs	r6, #16
  4034a6:	2e10      	cmp	r6, #16
  4034a8:	f04f 0e01 	mov.w	lr, #1
  4034ac:	4611      	mov	r1, r2
  4034ae:	46cc      	mov	ip, r9
  4034b0:	dced      	bgt.n	40348e <_vfiprintf_r+0x3b2>
  4034b2:	4654      	mov	r4, sl
  4034b4:	46e2      	mov	sl, ip
  4034b6:	4432      	add	r2, r6
  4034b8:	f1be 0f07 	cmp.w	lr, #7
  4034bc:	9211      	str	r2, [sp, #68]	; 0x44
  4034be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4034c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4034c6:	f300 8369 	bgt.w	403b9c <_vfiprintf_r+0xac0>
  4034ca:	f10a 0a08 	add.w	sl, sl, #8
  4034ce:	f10e 0001 	add.w	r0, lr, #1
  4034d2:	4671      	mov	r1, lr
  4034d4:	e1ab      	b.n	40382e <_vfiprintf_r+0x752>
  4034d6:	9608      	str	r6, [sp, #32]
  4034d8:	f013 0220 	ands.w	r2, r3, #32
  4034dc:	f040 838c 	bne.w	403bf8 <_vfiprintf_r+0xb1c>
  4034e0:	f013 0110 	ands.w	r1, r3, #16
  4034e4:	f040 831a 	bne.w	403b1c <_vfiprintf_r+0xa40>
  4034e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4034ec:	f000 8316 	beq.w	403b1c <_vfiprintf_r+0xa40>
  4034f0:	9807      	ldr	r0, [sp, #28]
  4034f2:	460a      	mov	r2, r1
  4034f4:	4601      	mov	r1, r0
  4034f6:	3104      	adds	r1, #4
  4034f8:	8806      	ldrh	r6, [r0, #0]
  4034fa:	9107      	str	r1, [sp, #28]
  4034fc:	2700      	movs	r7, #0
  4034fe:	e720      	b.n	403342 <_vfiprintf_r+0x266>
  403500:	9608      	str	r6, [sp, #32]
  403502:	f043 0310 	orr.w	r3, r3, #16
  403506:	e7e7      	b.n	4034d8 <_vfiprintf_r+0x3fc>
  403508:	9608      	str	r6, [sp, #32]
  40350a:	f043 0310 	orr.w	r3, r3, #16
  40350e:	e708      	b.n	403322 <_vfiprintf_r+0x246>
  403510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403514:	f898 2000 	ldrb.w	r2, [r8]
  403518:	e652      	b.n	4031c0 <_vfiprintf_r+0xe4>
  40351a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40351e:	2600      	movs	r6, #0
  403520:	f818 2b01 	ldrb.w	r2, [r8], #1
  403524:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403528:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40352c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403530:	2909      	cmp	r1, #9
  403532:	d9f5      	bls.n	403520 <_vfiprintf_r+0x444>
  403534:	e646      	b.n	4031c4 <_vfiprintf_r+0xe8>
  403536:	9608      	str	r6, [sp, #32]
  403538:	2800      	cmp	r0, #0
  40353a:	f040 8408 	bne.w	403d4e <_vfiprintf_r+0xc72>
  40353e:	f043 0310 	orr.w	r3, r3, #16
  403542:	069e      	lsls	r6, r3, #26
  403544:	f100 834c 	bmi.w	403be0 <_vfiprintf_r+0xb04>
  403548:	06dd      	lsls	r5, r3, #27
  40354a:	f100 82f3 	bmi.w	403b34 <_vfiprintf_r+0xa58>
  40354e:	0658      	lsls	r0, r3, #25
  403550:	f140 82f0 	bpl.w	403b34 <_vfiprintf_r+0xa58>
  403554:	9d07      	ldr	r5, [sp, #28]
  403556:	f9b5 6000 	ldrsh.w	r6, [r5]
  40355a:	462a      	mov	r2, r5
  40355c:	17f7      	asrs	r7, r6, #31
  40355e:	3204      	adds	r2, #4
  403560:	4630      	mov	r0, r6
  403562:	4639      	mov	r1, r7
  403564:	9207      	str	r2, [sp, #28]
  403566:	2800      	cmp	r0, #0
  403568:	f171 0200 	sbcs.w	r2, r1, #0
  40356c:	f2c0 835d 	blt.w	403c2a <_vfiprintf_r+0xb4e>
  403570:	1c61      	adds	r1, r4, #1
  403572:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403576:	f04f 0201 	mov.w	r2, #1
  40357a:	f47f aeea 	bne.w	403352 <_vfiprintf_r+0x276>
  40357e:	ea56 0107 	orrs.w	r1, r6, r7
  403582:	f000 824d 	beq.w	403a20 <_vfiprintf_r+0x944>
  403586:	9302      	str	r3, [sp, #8]
  403588:	2a01      	cmp	r2, #1
  40358a:	f000 828c 	beq.w	403aa6 <_vfiprintf_r+0x9ca>
  40358e:	2a02      	cmp	r2, #2
  403590:	f040 825c 	bne.w	403a4c <_vfiprintf_r+0x970>
  403594:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403596:	46cb      	mov	fp, r9
  403598:	0933      	lsrs	r3, r6, #4
  40359a:	f006 010f 	and.w	r1, r6, #15
  40359e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4035a2:	093a      	lsrs	r2, r7, #4
  4035a4:	461e      	mov	r6, r3
  4035a6:	4617      	mov	r7, r2
  4035a8:	5c43      	ldrb	r3, [r0, r1]
  4035aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4035ae:	ea56 0307 	orrs.w	r3, r6, r7
  4035b2:	d1f1      	bne.n	403598 <_vfiprintf_r+0x4bc>
  4035b4:	eba9 030b 	sub.w	r3, r9, fp
  4035b8:	9305      	str	r3, [sp, #20]
  4035ba:	e6e1      	b.n	403380 <_vfiprintf_r+0x2a4>
  4035bc:	2800      	cmp	r0, #0
  4035be:	f040 83c0 	bne.w	403d42 <_vfiprintf_r+0xc66>
  4035c2:	0699      	lsls	r1, r3, #26
  4035c4:	f100 8367 	bmi.w	403c96 <_vfiprintf_r+0xbba>
  4035c8:	06da      	lsls	r2, r3, #27
  4035ca:	f100 80f1 	bmi.w	4037b0 <_vfiprintf_r+0x6d4>
  4035ce:	065b      	lsls	r3, r3, #25
  4035d0:	f140 80ee 	bpl.w	4037b0 <_vfiprintf_r+0x6d4>
  4035d4:	9a07      	ldr	r2, [sp, #28]
  4035d6:	6813      	ldr	r3, [r2, #0]
  4035d8:	3204      	adds	r2, #4
  4035da:	9207      	str	r2, [sp, #28]
  4035dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4035e0:	801a      	strh	r2, [r3, #0]
  4035e2:	e5b8      	b.n	403156 <_vfiprintf_r+0x7a>
  4035e4:	9807      	ldr	r0, [sp, #28]
  4035e6:	4a3d      	ldr	r2, [pc, #244]	; (4036dc <_vfiprintf_r+0x600>)
  4035e8:	9608      	str	r6, [sp, #32]
  4035ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4035ec:	6806      	ldr	r6, [r0, #0]
  4035ee:	2278      	movs	r2, #120	; 0x78
  4035f0:	2130      	movs	r1, #48	; 0x30
  4035f2:	3004      	adds	r0, #4
  4035f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4035f8:	f043 0302 	orr.w	r3, r3, #2
  4035fc:	9007      	str	r0, [sp, #28]
  4035fe:	2700      	movs	r7, #0
  403600:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403604:	2202      	movs	r2, #2
  403606:	e69c      	b.n	403342 <_vfiprintf_r+0x266>
  403608:	9608      	str	r6, [sp, #32]
  40360a:	2800      	cmp	r0, #0
  40360c:	d099      	beq.n	403542 <_vfiprintf_r+0x466>
  40360e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403612:	e796      	b.n	403542 <_vfiprintf_r+0x466>
  403614:	f898 2000 	ldrb.w	r2, [r8]
  403618:	2d00      	cmp	r5, #0
  40361a:	f47f add1 	bne.w	4031c0 <_vfiprintf_r+0xe4>
  40361e:	2001      	movs	r0, #1
  403620:	2520      	movs	r5, #32
  403622:	e5cd      	b.n	4031c0 <_vfiprintf_r+0xe4>
  403624:	f043 0301 	orr.w	r3, r3, #1
  403628:	f898 2000 	ldrb.w	r2, [r8]
  40362c:	e5c8      	b.n	4031c0 <_vfiprintf_r+0xe4>
  40362e:	9608      	str	r6, [sp, #32]
  403630:	2800      	cmp	r0, #0
  403632:	f040 8393 	bne.w	403d5c <_vfiprintf_r+0xc80>
  403636:	4929      	ldr	r1, [pc, #164]	; (4036dc <_vfiprintf_r+0x600>)
  403638:	910b      	str	r1, [sp, #44]	; 0x2c
  40363a:	069f      	lsls	r7, r3, #26
  40363c:	f100 82e8 	bmi.w	403c10 <_vfiprintf_r+0xb34>
  403640:	9807      	ldr	r0, [sp, #28]
  403642:	06de      	lsls	r6, r3, #27
  403644:	4601      	mov	r1, r0
  403646:	f100 8270 	bmi.w	403b2a <_vfiprintf_r+0xa4e>
  40364a:	065d      	lsls	r5, r3, #25
  40364c:	f140 826d 	bpl.w	403b2a <_vfiprintf_r+0xa4e>
  403650:	3104      	adds	r1, #4
  403652:	8806      	ldrh	r6, [r0, #0]
  403654:	9107      	str	r1, [sp, #28]
  403656:	2700      	movs	r7, #0
  403658:	07d8      	lsls	r0, r3, #31
  40365a:	f140 8222 	bpl.w	403aa2 <_vfiprintf_r+0x9c6>
  40365e:	ea56 0107 	orrs.w	r1, r6, r7
  403662:	f000 821e 	beq.w	403aa2 <_vfiprintf_r+0x9c6>
  403666:	2130      	movs	r1, #48	; 0x30
  403668:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40366c:	f043 0302 	orr.w	r3, r3, #2
  403670:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403674:	2202      	movs	r2, #2
  403676:	e664      	b.n	403342 <_vfiprintf_r+0x266>
  403678:	9608      	str	r6, [sp, #32]
  40367a:	2800      	cmp	r0, #0
  40367c:	f040 836b 	bne.w	403d56 <_vfiprintf_r+0xc7a>
  403680:	4917      	ldr	r1, [pc, #92]	; (4036e0 <_vfiprintf_r+0x604>)
  403682:	910b      	str	r1, [sp, #44]	; 0x2c
  403684:	e7d9      	b.n	40363a <_vfiprintf_r+0x55e>
  403686:	9907      	ldr	r1, [sp, #28]
  403688:	9608      	str	r6, [sp, #32]
  40368a:	680a      	ldr	r2, [r1, #0]
  40368c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403690:	f04f 0000 	mov.w	r0, #0
  403694:	460a      	mov	r2, r1
  403696:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40369a:	3204      	adds	r2, #4
  40369c:	2001      	movs	r0, #1
  40369e:	9001      	str	r0, [sp, #4]
  4036a0:	9207      	str	r2, [sp, #28]
  4036a2:	9005      	str	r0, [sp, #20]
  4036a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4036a8:	9302      	str	r3, [sp, #8]
  4036aa:	2400      	movs	r4, #0
  4036ac:	e670      	b.n	403390 <_vfiprintf_r+0x2b4>
  4036ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4036b2:	f898 2000 	ldrb.w	r2, [r8]
  4036b6:	e583      	b.n	4031c0 <_vfiprintf_r+0xe4>
  4036b8:	f898 2000 	ldrb.w	r2, [r8]
  4036bc:	2a6c      	cmp	r2, #108	; 0x6c
  4036be:	bf03      	ittte	eq
  4036c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4036c4:	f043 0320 	orreq.w	r3, r3, #32
  4036c8:	f108 0801 	addeq.w	r8, r8, #1
  4036cc:	f043 0310 	orrne.w	r3, r3, #16
  4036d0:	e576      	b.n	4031c0 <_vfiprintf_r+0xe4>
  4036d2:	bf00      	nop
  4036d4:	004054dc 	.word	0x004054dc
  4036d8:	004054ec 	.word	0x004054ec
  4036dc:	004054c0 	.word	0x004054c0
  4036e0:	004054ac 	.word	0x004054ac
  4036e4:	9907      	ldr	r1, [sp, #28]
  4036e6:	680e      	ldr	r6, [r1, #0]
  4036e8:	460a      	mov	r2, r1
  4036ea:	2e00      	cmp	r6, #0
  4036ec:	f102 0204 	add.w	r2, r2, #4
  4036f0:	f6ff ae0f 	blt.w	403312 <_vfiprintf_r+0x236>
  4036f4:	9207      	str	r2, [sp, #28]
  4036f6:	f898 2000 	ldrb.w	r2, [r8]
  4036fa:	e561      	b.n	4031c0 <_vfiprintf_r+0xe4>
  4036fc:	f898 2000 	ldrb.w	r2, [r8]
  403700:	2001      	movs	r0, #1
  403702:	252b      	movs	r5, #43	; 0x2b
  403704:	e55c      	b.n	4031c0 <_vfiprintf_r+0xe4>
  403706:	9907      	ldr	r1, [sp, #28]
  403708:	9608      	str	r6, [sp, #32]
  40370a:	f8d1 b000 	ldr.w	fp, [r1]
  40370e:	f04f 0200 	mov.w	r2, #0
  403712:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403716:	1d0e      	adds	r6, r1, #4
  403718:	f1bb 0f00 	cmp.w	fp, #0
  40371c:	f000 82e5 	beq.w	403cea <_vfiprintf_r+0xc0e>
  403720:	1c67      	adds	r7, r4, #1
  403722:	f000 82c4 	beq.w	403cae <_vfiprintf_r+0xbd2>
  403726:	4622      	mov	r2, r4
  403728:	2100      	movs	r1, #0
  40372a:	4658      	mov	r0, fp
  40372c:	9301      	str	r3, [sp, #4]
  40372e:	f001 f91f 	bl	404970 <memchr>
  403732:	9b01      	ldr	r3, [sp, #4]
  403734:	2800      	cmp	r0, #0
  403736:	f000 82e5 	beq.w	403d04 <_vfiprintf_r+0xc28>
  40373a:	eba0 020b 	sub.w	r2, r0, fp
  40373e:	9205      	str	r2, [sp, #20]
  403740:	9607      	str	r6, [sp, #28]
  403742:	9302      	str	r3, [sp, #8]
  403744:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403748:	2400      	movs	r4, #0
  40374a:	e619      	b.n	403380 <_vfiprintf_r+0x2a4>
  40374c:	f898 2000 	ldrb.w	r2, [r8]
  403750:	2a2a      	cmp	r2, #42	; 0x2a
  403752:	f108 0701 	add.w	r7, r8, #1
  403756:	f000 82e9 	beq.w	403d2c <_vfiprintf_r+0xc50>
  40375a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40375e:	2909      	cmp	r1, #9
  403760:	46b8      	mov	r8, r7
  403762:	f04f 0400 	mov.w	r4, #0
  403766:	f63f ad2d 	bhi.w	4031c4 <_vfiprintf_r+0xe8>
  40376a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40376e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403772:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  403776:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40377a:	2909      	cmp	r1, #9
  40377c:	d9f5      	bls.n	40376a <_vfiprintf_r+0x68e>
  40377e:	e521      	b.n	4031c4 <_vfiprintf_r+0xe8>
  403780:	f043 0320 	orr.w	r3, r3, #32
  403784:	f898 2000 	ldrb.w	r2, [r8]
  403788:	e51a      	b.n	4031c0 <_vfiprintf_r+0xe4>
  40378a:	9608      	str	r6, [sp, #32]
  40378c:	2800      	cmp	r0, #0
  40378e:	f040 82db 	bne.w	403d48 <_vfiprintf_r+0xc6c>
  403792:	2a00      	cmp	r2, #0
  403794:	f000 80e7 	beq.w	403966 <_vfiprintf_r+0x88a>
  403798:	2101      	movs	r1, #1
  40379a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40379e:	f04f 0200 	mov.w	r2, #0
  4037a2:	9101      	str	r1, [sp, #4]
  4037a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4037a8:	9105      	str	r1, [sp, #20]
  4037aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4037ae:	e77b      	b.n	4036a8 <_vfiprintf_r+0x5cc>
  4037b0:	9a07      	ldr	r2, [sp, #28]
  4037b2:	6813      	ldr	r3, [r2, #0]
  4037b4:	3204      	adds	r2, #4
  4037b6:	9207      	str	r2, [sp, #28]
  4037b8:	9a03      	ldr	r2, [sp, #12]
  4037ba:	601a      	str	r2, [r3, #0]
  4037bc:	e4cb      	b.n	403156 <_vfiprintf_r+0x7a>
  4037be:	aa0f      	add	r2, sp, #60	; 0x3c
  4037c0:	9904      	ldr	r1, [sp, #16]
  4037c2:	4620      	mov	r0, r4
  4037c4:	f7ff fc4a 	bl	40305c <__sprint_r.part.0>
  4037c8:	2800      	cmp	r0, #0
  4037ca:	f040 8139 	bne.w	403a40 <_vfiprintf_r+0x964>
  4037ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4037d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037d2:	f101 0c01 	add.w	ip, r1, #1
  4037d6:	46ce      	mov	lr, r9
  4037d8:	e5ff      	b.n	4033da <_vfiprintf_r+0x2fe>
  4037da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4037dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037de:	1c48      	adds	r0, r1, #1
  4037e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4037e4:	2d00      	cmp	r5, #0
  4037e6:	f43f ae22 	beq.w	40342e <_vfiprintf_r+0x352>
  4037ea:	3201      	adds	r2, #1
  4037ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4037f0:	2101      	movs	r1, #1
  4037f2:	2807      	cmp	r0, #7
  4037f4:	9211      	str	r2, [sp, #68]	; 0x44
  4037f6:	9010      	str	r0, [sp, #64]	; 0x40
  4037f8:	f8ca 5000 	str.w	r5, [sl]
  4037fc:	f8ca 1004 	str.w	r1, [sl, #4]
  403800:	f340 8108 	ble.w	403a14 <_vfiprintf_r+0x938>
  403804:	2a00      	cmp	r2, #0
  403806:	f040 81bc 	bne.w	403b82 <_vfiprintf_r+0xaa6>
  40380a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40380c:	2b00      	cmp	r3, #0
  40380e:	f43f ae1f 	beq.w	403450 <_vfiprintf_r+0x374>
  403812:	ab0e      	add	r3, sp, #56	; 0x38
  403814:	2202      	movs	r2, #2
  403816:	4608      	mov	r0, r1
  403818:	931c      	str	r3, [sp, #112]	; 0x70
  40381a:	921d      	str	r2, [sp, #116]	; 0x74
  40381c:	46ca      	mov	sl, r9
  40381e:	4601      	mov	r1, r0
  403820:	f10a 0a08 	add.w	sl, sl, #8
  403824:	3001      	adds	r0, #1
  403826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403828:	2b80      	cmp	r3, #128	; 0x80
  40382a:	f43f ae19 	beq.w	403460 <_vfiprintf_r+0x384>
  40382e:	9b05      	ldr	r3, [sp, #20]
  403830:	1ae4      	subs	r4, r4, r3
  403832:	2c00      	cmp	r4, #0
  403834:	dd2e      	ble.n	403894 <_vfiprintf_r+0x7b8>
  403836:	2c10      	cmp	r4, #16
  403838:	4db3      	ldr	r5, [pc, #716]	; (403b08 <_vfiprintf_r+0xa2c>)
  40383a:	dd1e      	ble.n	40387a <_vfiprintf_r+0x79e>
  40383c:	46d6      	mov	lr, sl
  40383e:	2610      	movs	r6, #16
  403840:	9f06      	ldr	r7, [sp, #24]
  403842:	f8dd a010 	ldr.w	sl, [sp, #16]
  403846:	e006      	b.n	403856 <_vfiprintf_r+0x77a>
  403848:	1c88      	adds	r0, r1, #2
  40384a:	f10e 0e08 	add.w	lr, lr, #8
  40384e:	4619      	mov	r1, r3
  403850:	3c10      	subs	r4, #16
  403852:	2c10      	cmp	r4, #16
  403854:	dd10      	ble.n	403878 <_vfiprintf_r+0x79c>
  403856:	1c4b      	adds	r3, r1, #1
  403858:	3210      	adds	r2, #16
  40385a:	2b07      	cmp	r3, #7
  40385c:	9211      	str	r2, [sp, #68]	; 0x44
  40385e:	e88e 0060 	stmia.w	lr, {r5, r6}
  403862:	9310      	str	r3, [sp, #64]	; 0x40
  403864:	ddf0      	ble.n	403848 <_vfiprintf_r+0x76c>
  403866:	2a00      	cmp	r2, #0
  403868:	d165      	bne.n	403936 <_vfiprintf_r+0x85a>
  40386a:	3c10      	subs	r4, #16
  40386c:	2c10      	cmp	r4, #16
  40386e:	f04f 0001 	mov.w	r0, #1
  403872:	4611      	mov	r1, r2
  403874:	46ce      	mov	lr, r9
  403876:	dcee      	bgt.n	403856 <_vfiprintf_r+0x77a>
  403878:	46f2      	mov	sl, lr
  40387a:	4422      	add	r2, r4
  40387c:	2807      	cmp	r0, #7
  40387e:	9211      	str	r2, [sp, #68]	; 0x44
  403880:	f8ca 5000 	str.w	r5, [sl]
  403884:	f8ca 4004 	str.w	r4, [sl, #4]
  403888:	9010      	str	r0, [sp, #64]	; 0x40
  40388a:	f300 8085 	bgt.w	403998 <_vfiprintf_r+0x8bc>
  40388e:	f10a 0a08 	add.w	sl, sl, #8
  403892:	3001      	adds	r0, #1
  403894:	9905      	ldr	r1, [sp, #20]
  403896:	f8ca b000 	str.w	fp, [sl]
  40389a:	440a      	add	r2, r1
  40389c:	2807      	cmp	r0, #7
  40389e:	9211      	str	r2, [sp, #68]	; 0x44
  4038a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4038a4:	9010      	str	r0, [sp, #64]	; 0x40
  4038a6:	f340 8082 	ble.w	4039ae <_vfiprintf_r+0x8d2>
  4038aa:	2a00      	cmp	r2, #0
  4038ac:	f040 8118 	bne.w	403ae0 <_vfiprintf_r+0xa04>
  4038b0:	9b02      	ldr	r3, [sp, #8]
  4038b2:	9210      	str	r2, [sp, #64]	; 0x40
  4038b4:	0758      	lsls	r0, r3, #29
  4038b6:	d535      	bpl.n	403924 <_vfiprintf_r+0x848>
  4038b8:	9b08      	ldr	r3, [sp, #32]
  4038ba:	9901      	ldr	r1, [sp, #4]
  4038bc:	1a5c      	subs	r4, r3, r1
  4038be:	2c00      	cmp	r4, #0
  4038c0:	f340 80e7 	ble.w	403a92 <_vfiprintf_r+0x9b6>
  4038c4:	46ca      	mov	sl, r9
  4038c6:	2c10      	cmp	r4, #16
  4038c8:	f340 8218 	ble.w	403cfc <_vfiprintf_r+0xc20>
  4038cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4038ce:	4e8f      	ldr	r6, [pc, #572]	; (403b0c <_vfiprintf_r+0xa30>)
  4038d0:	9f06      	ldr	r7, [sp, #24]
  4038d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4038d6:	2510      	movs	r5, #16
  4038d8:	e006      	b.n	4038e8 <_vfiprintf_r+0x80c>
  4038da:	1c88      	adds	r0, r1, #2
  4038dc:	f10a 0a08 	add.w	sl, sl, #8
  4038e0:	4619      	mov	r1, r3
  4038e2:	3c10      	subs	r4, #16
  4038e4:	2c10      	cmp	r4, #16
  4038e6:	dd11      	ble.n	40390c <_vfiprintf_r+0x830>
  4038e8:	1c4b      	adds	r3, r1, #1
  4038ea:	3210      	adds	r2, #16
  4038ec:	2b07      	cmp	r3, #7
  4038ee:	9211      	str	r2, [sp, #68]	; 0x44
  4038f0:	f8ca 6000 	str.w	r6, [sl]
  4038f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4038f8:	9310      	str	r3, [sp, #64]	; 0x40
  4038fa:	ddee      	ble.n	4038da <_vfiprintf_r+0x7fe>
  4038fc:	bb42      	cbnz	r2, 403950 <_vfiprintf_r+0x874>
  4038fe:	3c10      	subs	r4, #16
  403900:	2c10      	cmp	r4, #16
  403902:	f04f 0001 	mov.w	r0, #1
  403906:	4611      	mov	r1, r2
  403908:	46ca      	mov	sl, r9
  40390a:	dced      	bgt.n	4038e8 <_vfiprintf_r+0x80c>
  40390c:	4422      	add	r2, r4
  40390e:	2807      	cmp	r0, #7
  403910:	9211      	str	r2, [sp, #68]	; 0x44
  403912:	f8ca 6000 	str.w	r6, [sl]
  403916:	f8ca 4004 	str.w	r4, [sl, #4]
  40391a:	9010      	str	r0, [sp, #64]	; 0x40
  40391c:	dd51      	ble.n	4039c2 <_vfiprintf_r+0x8e6>
  40391e:	2a00      	cmp	r2, #0
  403920:	f040 819b 	bne.w	403c5a <_vfiprintf_r+0xb7e>
  403924:	9b03      	ldr	r3, [sp, #12]
  403926:	9a08      	ldr	r2, [sp, #32]
  403928:	9901      	ldr	r1, [sp, #4]
  40392a:	428a      	cmp	r2, r1
  40392c:	bfac      	ite	ge
  40392e:	189b      	addge	r3, r3, r2
  403930:	185b      	addlt	r3, r3, r1
  403932:	9303      	str	r3, [sp, #12]
  403934:	e04e      	b.n	4039d4 <_vfiprintf_r+0x8f8>
  403936:	aa0f      	add	r2, sp, #60	; 0x3c
  403938:	4651      	mov	r1, sl
  40393a:	4638      	mov	r0, r7
  40393c:	f7ff fb8e 	bl	40305c <__sprint_r.part.0>
  403940:	2800      	cmp	r0, #0
  403942:	f040 813f 	bne.w	403bc4 <_vfiprintf_r+0xae8>
  403946:	9910      	ldr	r1, [sp, #64]	; 0x40
  403948:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40394a:	1c48      	adds	r0, r1, #1
  40394c:	46ce      	mov	lr, r9
  40394e:	e77f      	b.n	403850 <_vfiprintf_r+0x774>
  403950:	aa0f      	add	r2, sp, #60	; 0x3c
  403952:	4659      	mov	r1, fp
  403954:	4638      	mov	r0, r7
  403956:	f7ff fb81 	bl	40305c <__sprint_r.part.0>
  40395a:	b960      	cbnz	r0, 403976 <_vfiprintf_r+0x89a>
  40395c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40395e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403960:	1c48      	adds	r0, r1, #1
  403962:	46ca      	mov	sl, r9
  403964:	e7bd      	b.n	4038e2 <_vfiprintf_r+0x806>
  403966:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403968:	f8dd b010 	ldr.w	fp, [sp, #16]
  40396c:	2b00      	cmp	r3, #0
  40396e:	f040 81d4 	bne.w	403d1a <_vfiprintf_r+0xc3e>
  403972:	2300      	movs	r3, #0
  403974:	9310      	str	r3, [sp, #64]	; 0x40
  403976:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40397a:	f013 0f01 	tst.w	r3, #1
  40397e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403982:	d102      	bne.n	40398a <_vfiprintf_r+0x8ae>
  403984:	059a      	lsls	r2, r3, #22
  403986:	f140 80de 	bpl.w	403b46 <_vfiprintf_r+0xa6a>
  40398a:	065b      	lsls	r3, r3, #25
  40398c:	f53f acb2 	bmi.w	4032f4 <_vfiprintf_r+0x218>
  403990:	9803      	ldr	r0, [sp, #12]
  403992:	b02d      	add	sp, #180	; 0xb4
  403994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403998:	2a00      	cmp	r2, #0
  40399a:	f040 8106 	bne.w	403baa <_vfiprintf_r+0xace>
  40399e:	9a05      	ldr	r2, [sp, #20]
  4039a0:	921d      	str	r2, [sp, #116]	; 0x74
  4039a2:	2301      	movs	r3, #1
  4039a4:	9211      	str	r2, [sp, #68]	; 0x44
  4039a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4039aa:	9310      	str	r3, [sp, #64]	; 0x40
  4039ac:	46ca      	mov	sl, r9
  4039ae:	f10a 0a08 	add.w	sl, sl, #8
  4039b2:	9b02      	ldr	r3, [sp, #8]
  4039b4:	0759      	lsls	r1, r3, #29
  4039b6:	d504      	bpl.n	4039c2 <_vfiprintf_r+0x8e6>
  4039b8:	9b08      	ldr	r3, [sp, #32]
  4039ba:	9901      	ldr	r1, [sp, #4]
  4039bc:	1a5c      	subs	r4, r3, r1
  4039be:	2c00      	cmp	r4, #0
  4039c0:	dc81      	bgt.n	4038c6 <_vfiprintf_r+0x7ea>
  4039c2:	9b03      	ldr	r3, [sp, #12]
  4039c4:	9908      	ldr	r1, [sp, #32]
  4039c6:	9801      	ldr	r0, [sp, #4]
  4039c8:	4281      	cmp	r1, r0
  4039ca:	bfac      	ite	ge
  4039cc:	185b      	addge	r3, r3, r1
  4039ce:	181b      	addlt	r3, r3, r0
  4039d0:	9303      	str	r3, [sp, #12]
  4039d2:	bb72      	cbnz	r2, 403a32 <_vfiprintf_r+0x956>
  4039d4:	2300      	movs	r3, #0
  4039d6:	9310      	str	r3, [sp, #64]	; 0x40
  4039d8:	46ca      	mov	sl, r9
  4039da:	f7ff bbbc 	b.w	403156 <_vfiprintf_r+0x7a>
  4039de:	aa0f      	add	r2, sp, #60	; 0x3c
  4039e0:	9904      	ldr	r1, [sp, #16]
  4039e2:	4620      	mov	r0, r4
  4039e4:	f7ff fb3a 	bl	40305c <__sprint_r.part.0>
  4039e8:	bb50      	cbnz	r0, 403a40 <_vfiprintf_r+0x964>
  4039ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4039ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4039ee:	f101 0e01 	add.w	lr, r1, #1
  4039f2:	46cc      	mov	ip, r9
  4039f4:	e548      	b.n	403488 <_vfiprintf_r+0x3ac>
  4039f6:	2a00      	cmp	r2, #0
  4039f8:	f040 8140 	bne.w	403c7c <_vfiprintf_r+0xba0>
  4039fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403a00:	2900      	cmp	r1, #0
  403a02:	f000 811b 	beq.w	403c3c <_vfiprintf_r+0xb60>
  403a06:	2201      	movs	r2, #1
  403a08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  403a0c:	4610      	mov	r0, r2
  403a0e:	921d      	str	r2, [sp, #116]	; 0x74
  403a10:	911c      	str	r1, [sp, #112]	; 0x70
  403a12:	46ca      	mov	sl, r9
  403a14:	4601      	mov	r1, r0
  403a16:	f10a 0a08 	add.w	sl, sl, #8
  403a1a:	3001      	adds	r0, #1
  403a1c:	e507      	b.n	40342e <_vfiprintf_r+0x352>
  403a1e:	9b02      	ldr	r3, [sp, #8]
  403a20:	2a01      	cmp	r2, #1
  403a22:	f000 8098 	beq.w	403b56 <_vfiprintf_r+0xa7a>
  403a26:	2a02      	cmp	r2, #2
  403a28:	d10d      	bne.n	403a46 <_vfiprintf_r+0x96a>
  403a2a:	9302      	str	r3, [sp, #8]
  403a2c:	2600      	movs	r6, #0
  403a2e:	2700      	movs	r7, #0
  403a30:	e5b0      	b.n	403594 <_vfiprintf_r+0x4b8>
  403a32:	aa0f      	add	r2, sp, #60	; 0x3c
  403a34:	9904      	ldr	r1, [sp, #16]
  403a36:	9806      	ldr	r0, [sp, #24]
  403a38:	f7ff fb10 	bl	40305c <__sprint_r.part.0>
  403a3c:	2800      	cmp	r0, #0
  403a3e:	d0c9      	beq.n	4039d4 <_vfiprintf_r+0x8f8>
  403a40:	f8dd b010 	ldr.w	fp, [sp, #16]
  403a44:	e797      	b.n	403976 <_vfiprintf_r+0x89a>
  403a46:	9302      	str	r3, [sp, #8]
  403a48:	2600      	movs	r6, #0
  403a4a:	2700      	movs	r7, #0
  403a4c:	4649      	mov	r1, r9
  403a4e:	e000      	b.n	403a52 <_vfiprintf_r+0x976>
  403a50:	4659      	mov	r1, fp
  403a52:	08f2      	lsrs	r2, r6, #3
  403a54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403a58:	08f8      	lsrs	r0, r7, #3
  403a5a:	f006 0307 	and.w	r3, r6, #7
  403a5e:	4607      	mov	r7, r0
  403a60:	4616      	mov	r6, r2
  403a62:	3330      	adds	r3, #48	; 0x30
  403a64:	ea56 0207 	orrs.w	r2, r6, r7
  403a68:	f801 3c01 	strb.w	r3, [r1, #-1]
  403a6c:	f101 3bff 	add.w	fp, r1, #4294967295
  403a70:	d1ee      	bne.n	403a50 <_vfiprintf_r+0x974>
  403a72:	9a02      	ldr	r2, [sp, #8]
  403a74:	07d6      	lsls	r6, r2, #31
  403a76:	f57f ad9d 	bpl.w	4035b4 <_vfiprintf_r+0x4d8>
  403a7a:	2b30      	cmp	r3, #48	; 0x30
  403a7c:	f43f ad9a 	beq.w	4035b4 <_vfiprintf_r+0x4d8>
  403a80:	3902      	subs	r1, #2
  403a82:	2330      	movs	r3, #48	; 0x30
  403a84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403a88:	eba9 0301 	sub.w	r3, r9, r1
  403a8c:	9305      	str	r3, [sp, #20]
  403a8e:	468b      	mov	fp, r1
  403a90:	e476      	b.n	403380 <_vfiprintf_r+0x2a4>
  403a92:	9b03      	ldr	r3, [sp, #12]
  403a94:	9a08      	ldr	r2, [sp, #32]
  403a96:	428a      	cmp	r2, r1
  403a98:	bfac      	ite	ge
  403a9a:	189b      	addge	r3, r3, r2
  403a9c:	185b      	addlt	r3, r3, r1
  403a9e:	9303      	str	r3, [sp, #12]
  403aa0:	e798      	b.n	4039d4 <_vfiprintf_r+0x8f8>
  403aa2:	2202      	movs	r2, #2
  403aa4:	e44d      	b.n	403342 <_vfiprintf_r+0x266>
  403aa6:	2f00      	cmp	r7, #0
  403aa8:	bf08      	it	eq
  403aaa:	2e0a      	cmpeq	r6, #10
  403aac:	d352      	bcc.n	403b54 <_vfiprintf_r+0xa78>
  403aae:	46cb      	mov	fp, r9
  403ab0:	4630      	mov	r0, r6
  403ab2:	4639      	mov	r1, r7
  403ab4:	220a      	movs	r2, #10
  403ab6:	2300      	movs	r3, #0
  403ab8:	f7fe fc90 	bl	4023dc <__aeabi_uldivmod>
  403abc:	3230      	adds	r2, #48	; 0x30
  403abe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403ac2:	4630      	mov	r0, r6
  403ac4:	4639      	mov	r1, r7
  403ac6:	2300      	movs	r3, #0
  403ac8:	220a      	movs	r2, #10
  403aca:	f7fe fc87 	bl	4023dc <__aeabi_uldivmod>
  403ace:	4606      	mov	r6, r0
  403ad0:	460f      	mov	r7, r1
  403ad2:	ea56 0307 	orrs.w	r3, r6, r7
  403ad6:	d1eb      	bne.n	403ab0 <_vfiprintf_r+0x9d4>
  403ad8:	e56c      	b.n	4035b4 <_vfiprintf_r+0x4d8>
  403ada:	9405      	str	r4, [sp, #20]
  403adc:	46cb      	mov	fp, r9
  403ade:	e44f      	b.n	403380 <_vfiprintf_r+0x2a4>
  403ae0:	aa0f      	add	r2, sp, #60	; 0x3c
  403ae2:	9904      	ldr	r1, [sp, #16]
  403ae4:	9806      	ldr	r0, [sp, #24]
  403ae6:	f7ff fab9 	bl	40305c <__sprint_r.part.0>
  403aea:	2800      	cmp	r0, #0
  403aec:	d1a8      	bne.n	403a40 <_vfiprintf_r+0x964>
  403aee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403af0:	46ca      	mov	sl, r9
  403af2:	e75e      	b.n	4039b2 <_vfiprintf_r+0x8d6>
  403af4:	aa0f      	add	r2, sp, #60	; 0x3c
  403af6:	9904      	ldr	r1, [sp, #16]
  403af8:	9806      	ldr	r0, [sp, #24]
  403afa:	f7ff faaf 	bl	40305c <__sprint_r.part.0>
  403afe:	2800      	cmp	r0, #0
  403b00:	d19e      	bne.n	403a40 <_vfiprintf_r+0x964>
  403b02:	46ca      	mov	sl, r9
  403b04:	f7ff bbc0 	b.w	403288 <_vfiprintf_r+0x1ac>
  403b08:	004054ec 	.word	0x004054ec
  403b0c:	004054dc 	.word	0x004054dc
  403b10:	3104      	adds	r1, #4
  403b12:	6816      	ldr	r6, [r2, #0]
  403b14:	9107      	str	r1, [sp, #28]
  403b16:	2201      	movs	r2, #1
  403b18:	2700      	movs	r7, #0
  403b1a:	e412      	b.n	403342 <_vfiprintf_r+0x266>
  403b1c:	9807      	ldr	r0, [sp, #28]
  403b1e:	4601      	mov	r1, r0
  403b20:	3104      	adds	r1, #4
  403b22:	6806      	ldr	r6, [r0, #0]
  403b24:	9107      	str	r1, [sp, #28]
  403b26:	2700      	movs	r7, #0
  403b28:	e40b      	b.n	403342 <_vfiprintf_r+0x266>
  403b2a:	680e      	ldr	r6, [r1, #0]
  403b2c:	3104      	adds	r1, #4
  403b2e:	9107      	str	r1, [sp, #28]
  403b30:	2700      	movs	r7, #0
  403b32:	e591      	b.n	403658 <_vfiprintf_r+0x57c>
  403b34:	9907      	ldr	r1, [sp, #28]
  403b36:	680e      	ldr	r6, [r1, #0]
  403b38:	460a      	mov	r2, r1
  403b3a:	17f7      	asrs	r7, r6, #31
  403b3c:	3204      	adds	r2, #4
  403b3e:	9207      	str	r2, [sp, #28]
  403b40:	4630      	mov	r0, r6
  403b42:	4639      	mov	r1, r7
  403b44:	e50f      	b.n	403566 <_vfiprintf_r+0x48a>
  403b46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403b4a:	f000 fe7f 	bl	40484c <__retarget_lock_release_recursive>
  403b4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403b52:	e71a      	b.n	40398a <_vfiprintf_r+0x8ae>
  403b54:	9b02      	ldr	r3, [sp, #8]
  403b56:	9302      	str	r3, [sp, #8]
  403b58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403b5c:	3630      	adds	r6, #48	; 0x30
  403b5e:	2301      	movs	r3, #1
  403b60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  403b64:	9305      	str	r3, [sp, #20]
  403b66:	e40b      	b.n	403380 <_vfiprintf_r+0x2a4>
  403b68:	aa0f      	add	r2, sp, #60	; 0x3c
  403b6a:	9904      	ldr	r1, [sp, #16]
  403b6c:	9806      	ldr	r0, [sp, #24]
  403b6e:	f7ff fa75 	bl	40305c <__sprint_r.part.0>
  403b72:	2800      	cmp	r0, #0
  403b74:	f47f af64 	bne.w	403a40 <_vfiprintf_r+0x964>
  403b78:	9910      	ldr	r1, [sp, #64]	; 0x40
  403b7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b7c:	1c48      	adds	r0, r1, #1
  403b7e:	46ca      	mov	sl, r9
  403b80:	e651      	b.n	403826 <_vfiprintf_r+0x74a>
  403b82:	aa0f      	add	r2, sp, #60	; 0x3c
  403b84:	9904      	ldr	r1, [sp, #16]
  403b86:	9806      	ldr	r0, [sp, #24]
  403b88:	f7ff fa68 	bl	40305c <__sprint_r.part.0>
  403b8c:	2800      	cmp	r0, #0
  403b8e:	f47f af57 	bne.w	403a40 <_vfiprintf_r+0x964>
  403b92:	9910      	ldr	r1, [sp, #64]	; 0x40
  403b94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b96:	1c48      	adds	r0, r1, #1
  403b98:	46ca      	mov	sl, r9
  403b9a:	e448      	b.n	40342e <_vfiprintf_r+0x352>
  403b9c:	2a00      	cmp	r2, #0
  403b9e:	f040 8091 	bne.w	403cc4 <_vfiprintf_r+0xbe8>
  403ba2:	2001      	movs	r0, #1
  403ba4:	4611      	mov	r1, r2
  403ba6:	46ca      	mov	sl, r9
  403ba8:	e641      	b.n	40382e <_vfiprintf_r+0x752>
  403baa:	aa0f      	add	r2, sp, #60	; 0x3c
  403bac:	9904      	ldr	r1, [sp, #16]
  403bae:	9806      	ldr	r0, [sp, #24]
  403bb0:	f7ff fa54 	bl	40305c <__sprint_r.part.0>
  403bb4:	2800      	cmp	r0, #0
  403bb6:	f47f af43 	bne.w	403a40 <_vfiprintf_r+0x964>
  403bba:	9810      	ldr	r0, [sp, #64]	; 0x40
  403bbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403bbe:	3001      	adds	r0, #1
  403bc0:	46ca      	mov	sl, r9
  403bc2:	e667      	b.n	403894 <_vfiprintf_r+0x7b8>
  403bc4:	46d3      	mov	fp, sl
  403bc6:	e6d6      	b.n	403976 <_vfiprintf_r+0x89a>
  403bc8:	9e07      	ldr	r6, [sp, #28]
  403bca:	3607      	adds	r6, #7
  403bcc:	f026 0207 	bic.w	r2, r6, #7
  403bd0:	f102 0108 	add.w	r1, r2, #8
  403bd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  403bd8:	9107      	str	r1, [sp, #28]
  403bda:	2201      	movs	r2, #1
  403bdc:	f7ff bbb1 	b.w	403342 <_vfiprintf_r+0x266>
  403be0:	9e07      	ldr	r6, [sp, #28]
  403be2:	3607      	adds	r6, #7
  403be4:	f026 0607 	bic.w	r6, r6, #7
  403be8:	e9d6 0100 	ldrd	r0, r1, [r6]
  403bec:	f106 0208 	add.w	r2, r6, #8
  403bf0:	9207      	str	r2, [sp, #28]
  403bf2:	4606      	mov	r6, r0
  403bf4:	460f      	mov	r7, r1
  403bf6:	e4b6      	b.n	403566 <_vfiprintf_r+0x48a>
  403bf8:	9e07      	ldr	r6, [sp, #28]
  403bfa:	3607      	adds	r6, #7
  403bfc:	f026 0207 	bic.w	r2, r6, #7
  403c00:	f102 0108 	add.w	r1, r2, #8
  403c04:	e9d2 6700 	ldrd	r6, r7, [r2]
  403c08:	9107      	str	r1, [sp, #28]
  403c0a:	2200      	movs	r2, #0
  403c0c:	f7ff bb99 	b.w	403342 <_vfiprintf_r+0x266>
  403c10:	9e07      	ldr	r6, [sp, #28]
  403c12:	3607      	adds	r6, #7
  403c14:	f026 0107 	bic.w	r1, r6, #7
  403c18:	f101 0008 	add.w	r0, r1, #8
  403c1c:	9007      	str	r0, [sp, #28]
  403c1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  403c22:	e519      	b.n	403658 <_vfiprintf_r+0x57c>
  403c24:	46cb      	mov	fp, r9
  403c26:	f7ff bbab 	b.w	403380 <_vfiprintf_r+0x2a4>
  403c2a:	252d      	movs	r5, #45	; 0x2d
  403c2c:	4276      	negs	r6, r6
  403c2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403c32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403c36:	2201      	movs	r2, #1
  403c38:	f7ff bb88 	b.w	40334c <_vfiprintf_r+0x270>
  403c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c3e:	b9b3      	cbnz	r3, 403c6e <_vfiprintf_r+0xb92>
  403c40:	4611      	mov	r1, r2
  403c42:	2001      	movs	r0, #1
  403c44:	46ca      	mov	sl, r9
  403c46:	e5f2      	b.n	40382e <_vfiprintf_r+0x752>
  403c48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403c4c:	f000 fdfe 	bl	40484c <__retarget_lock_release_recursive>
  403c50:	f04f 33ff 	mov.w	r3, #4294967295
  403c54:	9303      	str	r3, [sp, #12]
  403c56:	f7ff bb50 	b.w	4032fa <_vfiprintf_r+0x21e>
  403c5a:	aa0f      	add	r2, sp, #60	; 0x3c
  403c5c:	9904      	ldr	r1, [sp, #16]
  403c5e:	9806      	ldr	r0, [sp, #24]
  403c60:	f7ff f9fc 	bl	40305c <__sprint_r.part.0>
  403c64:	2800      	cmp	r0, #0
  403c66:	f47f aeeb 	bne.w	403a40 <_vfiprintf_r+0x964>
  403c6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403c6c:	e6a9      	b.n	4039c2 <_vfiprintf_r+0x8e6>
  403c6e:	ab0e      	add	r3, sp, #56	; 0x38
  403c70:	2202      	movs	r2, #2
  403c72:	931c      	str	r3, [sp, #112]	; 0x70
  403c74:	921d      	str	r2, [sp, #116]	; 0x74
  403c76:	2001      	movs	r0, #1
  403c78:	46ca      	mov	sl, r9
  403c7a:	e5d0      	b.n	40381e <_vfiprintf_r+0x742>
  403c7c:	aa0f      	add	r2, sp, #60	; 0x3c
  403c7e:	9904      	ldr	r1, [sp, #16]
  403c80:	9806      	ldr	r0, [sp, #24]
  403c82:	f7ff f9eb 	bl	40305c <__sprint_r.part.0>
  403c86:	2800      	cmp	r0, #0
  403c88:	f47f aeda 	bne.w	403a40 <_vfiprintf_r+0x964>
  403c8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403c8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403c90:	1c48      	adds	r0, r1, #1
  403c92:	46ca      	mov	sl, r9
  403c94:	e5a4      	b.n	4037e0 <_vfiprintf_r+0x704>
  403c96:	9a07      	ldr	r2, [sp, #28]
  403c98:	9903      	ldr	r1, [sp, #12]
  403c9a:	6813      	ldr	r3, [r2, #0]
  403c9c:	17cd      	asrs	r5, r1, #31
  403c9e:	4608      	mov	r0, r1
  403ca0:	3204      	adds	r2, #4
  403ca2:	4629      	mov	r1, r5
  403ca4:	9207      	str	r2, [sp, #28]
  403ca6:	e9c3 0100 	strd	r0, r1, [r3]
  403caa:	f7ff ba54 	b.w	403156 <_vfiprintf_r+0x7a>
  403cae:	4658      	mov	r0, fp
  403cb0:	9607      	str	r6, [sp, #28]
  403cb2:	9302      	str	r3, [sp, #8]
  403cb4:	f7ff f964 	bl	402f80 <strlen>
  403cb8:	2400      	movs	r4, #0
  403cba:	9005      	str	r0, [sp, #20]
  403cbc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403cc0:	f7ff bb5e 	b.w	403380 <_vfiprintf_r+0x2a4>
  403cc4:	aa0f      	add	r2, sp, #60	; 0x3c
  403cc6:	9904      	ldr	r1, [sp, #16]
  403cc8:	9806      	ldr	r0, [sp, #24]
  403cca:	f7ff f9c7 	bl	40305c <__sprint_r.part.0>
  403cce:	2800      	cmp	r0, #0
  403cd0:	f47f aeb6 	bne.w	403a40 <_vfiprintf_r+0x964>
  403cd4:	9910      	ldr	r1, [sp, #64]	; 0x40
  403cd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403cd8:	1c48      	adds	r0, r1, #1
  403cda:	46ca      	mov	sl, r9
  403cdc:	e5a7      	b.n	40382e <_vfiprintf_r+0x752>
  403cde:	9910      	ldr	r1, [sp, #64]	; 0x40
  403ce0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ce2:	4e20      	ldr	r6, [pc, #128]	; (403d64 <_vfiprintf_r+0xc88>)
  403ce4:	3101      	adds	r1, #1
  403ce6:	f7ff bb90 	b.w	40340a <_vfiprintf_r+0x32e>
  403cea:	2c06      	cmp	r4, #6
  403cec:	bf28      	it	cs
  403cee:	2406      	movcs	r4, #6
  403cf0:	9405      	str	r4, [sp, #20]
  403cf2:	9607      	str	r6, [sp, #28]
  403cf4:	9401      	str	r4, [sp, #4]
  403cf6:	f8df b070 	ldr.w	fp, [pc, #112]	; 403d68 <_vfiprintf_r+0xc8c>
  403cfa:	e4d5      	b.n	4036a8 <_vfiprintf_r+0x5cc>
  403cfc:	9810      	ldr	r0, [sp, #64]	; 0x40
  403cfe:	4e19      	ldr	r6, [pc, #100]	; (403d64 <_vfiprintf_r+0xc88>)
  403d00:	3001      	adds	r0, #1
  403d02:	e603      	b.n	40390c <_vfiprintf_r+0x830>
  403d04:	9405      	str	r4, [sp, #20]
  403d06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403d0a:	9607      	str	r6, [sp, #28]
  403d0c:	9302      	str	r3, [sp, #8]
  403d0e:	4604      	mov	r4, r0
  403d10:	f7ff bb36 	b.w	403380 <_vfiprintf_r+0x2a4>
  403d14:	4686      	mov	lr, r0
  403d16:	f7ff bbce 	b.w	4034b6 <_vfiprintf_r+0x3da>
  403d1a:	9806      	ldr	r0, [sp, #24]
  403d1c:	aa0f      	add	r2, sp, #60	; 0x3c
  403d1e:	4659      	mov	r1, fp
  403d20:	f7ff f99c 	bl	40305c <__sprint_r.part.0>
  403d24:	2800      	cmp	r0, #0
  403d26:	f43f ae24 	beq.w	403972 <_vfiprintf_r+0x896>
  403d2a:	e624      	b.n	403976 <_vfiprintf_r+0x89a>
  403d2c:	9907      	ldr	r1, [sp, #28]
  403d2e:	f898 2001 	ldrb.w	r2, [r8, #1]
  403d32:	680c      	ldr	r4, [r1, #0]
  403d34:	3104      	adds	r1, #4
  403d36:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  403d3a:	46b8      	mov	r8, r7
  403d3c:	9107      	str	r1, [sp, #28]
  403d3e:	f7ff ba3f 	b.w	4031c0 <_vfiprintf_r+0xe4>
  403d42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d46:	e43c      	b.n	4035c2 <_vfiprintf_r+0x4e6>
  403d48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d4c:	e521      	b.n	403792 <_vfiprintf_r+0x6b6>
  403d4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d52:	f7ff bbf4 	b.w	40353e <_vfiprintf_r+0x462>
  403d56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d5a:	e491      	b.n	403680 <_vfiprintf_r+0x5a4>
  403d5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d60:	e469      	b.n	403636 <_vfiprintf_r+0x55a>
  403d62:	bf00      	nop
  403d64:	004054dc 	.word	0x004054dc
  403d68:	004054d4 	.word	0x004054d4

00403d6c <__sbprintf>:
  403d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d70:	460c      	mov	r4, r1
  403d72:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403d76:	8989      	ldrh	r1, [r1, #12]
  403d78:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403d7a:	89e5      	ldrh	r5, [r4, #14]
  403d7c:	9619      	str	r6, [sp, #100]	; 0x64
  403d7e:	f021 0102 	bic.w	r1, r1, #2
  403d82:	4606      	mov	r6, r0
  403d84:	69e0      	ldr	r0, [r4, #28]
  403d86:	f8ad 100c 	strh.w	r1, [sp, #12]
  403d8a:	4617      	mov	r7, r2
  403d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403d90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403d92:	f8ad 500e 	strh.w	r5, [sp, #14]
  403d96:	4698      	mov	r8, r3
  403d98:	ad1a      	add	r5, sp, #104	; 0x68
  403d9a:	2300      	movs	r3, #0
  403d9c:	9007      	str	r0, [sp, #28]
  403d9e:	a816      	add	r0, sp, #88	; 0x58
  403da0:	9209      	str	r2, [sp, #36]	; 0x24
  403da2:	9306      	str	r3, [sp, #24]
  403da4:	9500      	str	r5, [sp, #0]
  403da6:	9504      	str	r5, [sp, #16]
  403da8:	9102      	str	r1, [sp, #8]
  403daa:	9105      	str	r1, [sp, #20]
  403dac:	f000 fd48 	bl	404840 <__retarget_lock_init_recursive>
  403db0:	4643      	mov	r3, r8
  403db2:	463a      	mov	r2, r7
  403db4:	4669      	mov	r1, sp
  403db6:	4630      	mov	r0, r6
  403db8:	f7ff f990 	bl	4030dc <_vfiprintf_r>
  403dbc:	1e05      	subs	r5, r0, #0
  403dbe:	db07      	blt.n	403dd0 <__sbprintf+0x64>
  403dc0:	4630      	mov	r0, r6
  403dc2:	4669      	mov	r1, sp
  403dc4:	f000 f928 	bl	404018 <_fflush_r>
  403dc8:	2800      	cmp	r0, #0
  403dca:	bf18      	it	ne
  403dcc:	f04f 35ff 	movne.w	r5, #4294967295
  403dd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403dd4:	065b      	lsls	r3, r3, #25
  403dd6:	d503      	bpl.n	403de0 <__sbprintf+0x74>
  403dd8:	89a3      	ldrh	r3, [r4, #12]
  403dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403dde:	81a3      	strh	r3, [r4, #12]
  403de0:	9816      	ldr	r0, [sp, #88]	; 0x58
  403de2:	f000 fd2f 	bl	404844 <__retarget_lock_close_recursive>
  403de6:	4628      	mov	r0, r5
  403de8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403df0 <__swsetup_r>:
  403df0:	b538      	push	{r3, r4, r5, lr}
  403df2:	4b30      	ldr	r3, [pc, #192]	; (403eb4 <__swsetup_r+0xc4>)
  403df4:	681b      	ldr	r3, [r3, #0]
  403df6:	4605      	mov	r5, r0
  403df8:	460c      	mov	r4, r1
  403dfa:	b113      	cbz	r3, 403e02 <__swsetup_r+0x12>
  403dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403dfe:	2a00      	cmp	r2, #0
  403e00:	d038      	beq.n	403e74 <__swsetup_r+0x84>
  403e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403e06:	b293      	uxth	r3, r2
  403e08:	0718      	lsls	r0, r3, #28
  403e0a:	d50c      	bpl.n	403e26 <__swsetup_r+0x36>
  403e0c:	6920      	ldr	r0, [r4, #16]
  403e0e:	b1a8      	cbz	r0, 403e3c <__swsetup_r+0x4c>
  403e10:	f013 0201 	ands.w	r2, r3, #1
  403e14:	d01e      	beq.n	403e54 <__swsetup_r+0x64>
  403e16:	6963      	ldr	r3, [r4, #20]
  403e18:	2200      	movs	r2, #0
  403e1a:	425b      	negs	r3, r3
  403e1c:	61a3      	str	r3, [r4, #24]
  403e1e:	60a2      	str	r2, [r4, #8]
  403e20:	b1f0      	cbz	r0, 403e60 <__swsetup_r+0x70>
  403e22:	2000      	movs	r0, #0
  403e24:	bd38      	pop	{r3, r4, r5, pc}
  403e26:	06d9      	lsls	r1, r3, #27
  403e28:	d53c      	bpl.n	403ea4 <__swsetup_r+0xb4>
  403e2a:	0758      	lsls	r0, r3, #29
  403e2c:	d426      	bmi.n	403e7c <__swsetup_r+0x8c>
  403e2e:	6920      	ldr	r0, [r4, #16]
  403e30:	f042 0308 	orr.w	r3, r2, #8
  403e34:	81a3      	strh	r3, [r4, #12]
  403e36:	b29b      	uxth	r3, r3
  403e38:	2800      	cmp	r0, #0
  403e3a:	d1e9      	bne.n	403e10 <__swsetup_r+0x20>
  403e3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403e40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403e44:	d0e4      	beq.n	403e10 <__swsetup_r+0x20>
  403e46:	4628      	mov	r0, r5
  403e48:	4621      	mov	r1, r4
  403e4a:	f000 fd2f 	bl	4048ac <__smakebuf_r>
  403e4e:	89a3      	ldrh	r3, [r4, #12]
  403e50:	6920      	ldr	r0, [r4, #16]
  403e52:	e7dd      	b.n	403e10 <__swsetup_r+0x20>
  403e54:	0799      	lsls	r1, r3, #30
  403e56:	bf58      	it	pl
  403e58:	6962      	ldrpl	r2, [r4, #20]
  403e5a:	60a2      	str	r2, [r4, #8]
  403e5c:	2800      	cmp	r0, #0
  403e5e:	d1e0      	bne.n	403e22 <__swsetup_r+0x32>
  403e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403e64:	061a      	lsls	r2, r3, #24
  403e66:	d5dd      	bpl.n	403e24 <__swsetup_r+0x34>
  403e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e6c:	81a3      	strh	r3, [r4, #12]
  403e6e:	f04f 30ff 	mov.w	r0, #4294967295
  403e72:	bd38      	pop	{r3, r4, r5, pc}
  403e74:	4618      	mov	r0, r3
  403e76:	f000 f927 	bl	4040c8 <__sinit>
  403e7a:	e7c2      	b.n	403e02 <__swsetup_r+0x12>
  403e7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403e7e:	b151      	cbz	r1, 403e96 <__swsetup_r+0xa6>
  403e80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403e84:	4299      	cmp	r1, r3
  403e86:	d004      	beq.n	403e92 <__swsetup_r+0xa2>
  403e88:	4628      	mov	r0, r5
  403e8a:	f000 fa43 	bl	404314 <_free_r>
  403e8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403e92:	2300      	movs	r3, #0
  403e94:	6323      	str	r3, [r4, #48]	; 0x30
  403e96:	2300      	movs	r3, #0
  403e98:	6920      	ldr	r0, [r4, #16]
  403e9a:	6063      	str	r3, [r4, #4]
  403e9c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403ea0:	6020      	str	r0, [r4, #0]
  403ea2:	e7c5      	b.n	403e30 <__swsetup_r+0x40>
  403ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403ea8:	2309      	movs	r3, #9
  403eaa:	602b      	str	r3, [r5, #0]
  403eac:	f04f 30ff 	mov.w	r0, #4294967295
  403eb0:	81a2      	strh	r2, [r4, #12]
  403eb2:	bd38      	pop	{r3, r4, r5, pc}
  403eb4:	20000010 	.word	0x20000010

00403eb8 <register_fini>:
  403eb8:	4b02      	ldr	r3, [pc, #8]	; (403ec4 <register_fini+0xc>)
  403eba:	b113      	cbz	r3, 403ec2 <register_fini+0xa>
  403ebc:	4802      	ldr	r0, [pc, #8]	; (403ec8 <register_fini+0x10>)
  403ebe:	f000 b805 	b.w	403ecc <atexit>
  403ec2:	4770      	bx	lr
  403ec4:	00000000 	.word	0x00000000
  403ec8:	00404139 	.word	0x00404139

00403ecc <atexit>:
  403ecc:	2300      	movs	r3, #0
  403ece:	4601      	mov	r1, r0
  403ed0:	461a      	mov	r2, r3
  403ed2:	4618      	mov	r0, r3
  403ed4:	f001 b92a 	b.w	40512c <__register_exitproc>

00403ed8 <__sflush_r>:
  403ed8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403edc:	b29a      	uxth	r2, r3
  403ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ee2:	460d      	mov	r5, r1
  403ee4:	0711      	lsls	r1, r2, #28
  403ee6:	4680      	mov	r8, r0
  403ee8:	d43a      	bmi.n	403f60 <__sflush_r+0x88>
  403eea:	686a      	ldr	r2, [r5, #4]
  403eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403ef0:	2a00      	cmp	r2, #0
  403ef2:	81ab      	strh	r3, [r5, #12]
  403ef4:	dd6f      	ble.n	403fd6 <__sflush_r+0xfe>
  403ef6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403ef8:	2c00      	cmp	r4, #0
  403efa:	d049      	beq.n	403f90 <__sflush_r+0xb8>
  403efc:	2200      	movs	r2, #0
  403efe:	b29b      	uxth	r3, r3
  403f00:	f8d8 6000 	ldr.w	r6, [r8]
  403f04:	f8c8 2000 	str.w	r2, [r8]
  403f08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403f0c:	d067      	beq.n	403fde <__sflush_r+0x106>
  403f0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403f10:	075f      	lsls	r7, r3, #29
  403f12:	d505      	bpl.n	403f20 <__sflush_r+0x48>
  403f14:	6869      	ldr	r1, [r5, #4]
  403f16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403f18:	1a52      	subs	r2, r2, r1
  403f1a:	b10b      	cbz	r3, 403f20 <__sflush_r+0x48>
  403f1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403f1e:	1ad2      	subs	r2, r2, r3
  403f20:	2300      	movs	r3, #0
  403f22:	69e9      	ldr	r1, [r5, #28]
  403f24:	4640      	mov	r0, r8
  403f26:	47a0      	blx	r4
  403f28:	1c44      	adds	r4, r0, #1
  403f2a:	d03c      	beq.n	403fa6 <__sflush_r+0xce>
  403f2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403f30:	692a      	ldr	r2, [r5, #16]
  403f32:	602a      	str	r2, [r5, #0]
  403f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403f38:	2200      	movs	r2, #0
  403f3a:	81ab      	strh	r3, [r5, #12]
  403f3c:	04db      	lsls	r3, r3, #19
  403f3e:	606a      	str	r2, [r5, #4]
  403f40:	d447      	bmi.n	403fd2 <__sflush_r+0xfa>
  403f42:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403f44:	f8c8 6000 	str.w	r6, [r8]
  403f48:	b311      	cbz	r1, 403f90 <__sflush_r+0xb8>
  403f4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403f4e:	4299      	cmp	r1, r3
  403f50:	d002      	beq.n	403f58 <__sflush_r+0x80>
  403f52:	4640      	mov	r0, r8
  403f54:	f000 f9de 	bl	404314 <_free_r>
  403f58:	2000      	movs	r0, #0
  403f5a:	6328      	str	r0, [r5, #48]	; 0x30
  403f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f60:	692e      	ldr	r6, [r5, #16]
  403f62:	b1ae      	cbz	r6, 403f90 <__sflush_r+0xb8>
  403f64:	682c      	ldr	r4, [r5, #0]
  403f66:	602e      	str	r6, [r5, #0]
  403f68:	0791      	lsls	r1, r2, #30
  403f6a:	bf0c      	ite	eq
  403f6c:	696b      	ldreq	r3, [r5, #20]
  403f6e:	2300      	movne	r3, #0
  403f70:	1ba4      	subs	r4, r4, r6
  403f72:	60ab      	str	r3, [r5, #8]
  403f74:	e00a      	b.n	403f8c <__sflush_r+0xb4>
  403f76:	4623      	mov	r3, r4
  403f78:	4632      	mov	r2, r6
  403f7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403f7c:	69e9      	ldr	r1, [r5, #28]
  403f7e:	4640      	mov	r0, r8
  403f80:	47b8      	blx	r7
  403f82:	2800      	cmp	r0, #0
  403f84:	eba4 0400 	sub.w	r4, r4, r0
  403f88:	4406      	add	r6, r0
  403f8a:	dd04      	ble.n	403f96 <__sflush_r+0xbe>
  403f8c:	2c00      	cmp	r4, #0
  403f8e:	dcf2      	bgt.n	403f76 <__sflush_r+0x9e>
  403f90:	2000      	movs	r0, #0
  403f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f96:	89ab      	ldrh	r3, [r5, #12]
  403f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403f9c:	81ab      	strh	r3, [r5, #12]
  403f9e:	f04f 30ff 	mov.w	r0, #4294967295
  403fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fa6:	f8d8 4000 	ldr.w	r4, [r8]
  403faa:	2c1d      	cmp	r4, #29
  403fac:	d8f3      	bhi.n	403f96 <__sflush_r+0xbe>
  403fae:	4b19      	ldr	r3, [pc, #100]	; (404014 <__sflush_r+0x13c>)
  403fb0:	40e3      	lsrs	r3, r4
  403fb2:	43db      	mvns	r3, r3
  403fb4:	f013 0301 	ands.w	r3, r3, #1
  403fb8:	d1ed      	bne.n	403f96 <__sflush_r+0xbe>
  403fba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403fbe:	606b      	str	r3, [r5, #4]
  403fc0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403fc4:	6929      	ldr	r1, [r5, #16]
  403fc6:	81ab      	strh	r3, [r5, #12]
  403fc8:	04da      	lsls	r2, r3, #19
  403fca:	6029      	str	r1, [r5, #0]
  403fcc:	d5b9      	bpl.n	403f42 <__sflush_r+0x6a>
  403fce:	2c00      	cmp	r4, #0
  403fd0:	d1b7      	bne.n	403f42 <__sflush_r+0x6a>
  403fd2:	6528      	str	r0, [r5, #80]	; 0x50
  403fd4:	e7b5      	b.n	403f42 <__sflush_r+0x6a>
  403fd6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403fd8:	2a00      	cmp	r2, #0
  403fda:	dc8c      	bgt.n	403ef6 <__sflush_r+0x1e>
  403fdc:	e7d8      	b.n	403f90 <__sflush_r+0xb8>
  403fde:	2301      	movs	r3, #1
  403fe0:	69e9      	ldr	r1, [r5, #28]
  403fe2:	4640      	mov	r0, r8
  403fe4:	47a0      	blx	r4
  403fe6:	1c43      	adds	r3, r0, #1
  403fe8:	4602      	mov	r2, r0
  403fea:	d002      	beq.n	403ff2 <__sflush_r+0x11a>
  403fec:	89ab      	ldrh	r3, [r5, #12]
  403fee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403ff0:	e78e      	b.n	403f10 <__sflush_r+0x38>
  403ff2:	f8d8 3000 	ldr.w	r3, [r8]
  403ff6:	2b00      	cmp	r3, #0
  403ff8:	d0f8      	beq.n	403fec <__sflush_r+0x114>
  403ffa:	2b1d      	cmp	r3, #29
  403ffc:	d001      	beq.n	404002 <__sflush_r+0x12a>
  403ffe:	2b16      	cmp	r3, #22
  404000:	d102      	bne.n	404008 <__sflush_r+0x130>
  404002:	f8c8 6000 	str.w	r6, [r8]
  404006:	e7c3      	b.n	403f90 <__sflush_r+0xb8>
  404008:	89ab      	ldrh	r3, [r5, #12]
  40400a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40400e:	81ab      	strh	r3, [r5, #12]
  404010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404014:	20400001 	.word	0x20400001

00404018 <_fflush_r>:
  404018:	b538      	push	{r3, r4, r5, lr}
  40401a:	460d      	mov	r5, r1
  40401c:	4604      	mov	r4, r0
  40401e:	b108      	cbz	r0, 404024 <_fflush_r+0xc>
  404020:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404022:	b1bb      	cbz	r3, 404054 <_fflush_r+0x3c>
  404024:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404028:	b188      	cbz	r0, 40404e <_fflush_r+0x36>
  40402a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40402c:	07db      	lsls	r3, r3, #31
  40402e:	d401      	bmi.n	404034 <_fflush_r+0x1c>
  404030:	0581      	lsls	r1, r0, #22
  404032:	d517      	bpl.n	404064 <_fflush_r+0x4c>
  404034:	4620      	mov	r0, r4
  404036:	4629      	mov	r1, r5
  404038:	f7ff ff4e 	bl	403ed8 <__sflush_r>
  40403c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40403e:	07da      	lsls	r2, r3, #31
  404040:	4604      	mov	r4, r0
  404042:	d402      	bmi.n	40404a <_fflush_r+0x32>
  404044:	89ab      	ldrh	r3, [r5, #12]
  404046:	059b      	lsls	r3, r3, #22
  404048:	d507      	bpl.n	40405a <_fflush_r+0x42>
  40404a:	4620      	mov	r0, r4
  40404c:	bd38      	pop	{r3, r4, r5, pc}
  40404e:	4604      	mov	r4, r0
  404050:	4620      	mov	r0, r4
  404052:	bd38      	pop	{r3, r4, r5, pc}
  404054:	f000 f838 	bl	4040c8 <__sinit>
  404058:	e7e4      	b.n	404024 <_fflush_r+0xc>
  40405a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40405c:	f000 fbf6 	bl	40484c <__retarget_lock_release_recursive>
  404060:	4620      	mov	r0, r4
  404062:	bd38      	pop	{r3, r4, r5, pc}
  404064:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404066:	f000 fbef 	bl	404848 <__retarget_lock_acquire_recursive>
  40406a:	e7e3      	b.n	404034 <_fflush_r+0x1c>

0040406c <_cleanup_r>:
  40406c:	4901      	ldr	r1, [pc, #4]	; (404074 <_cleanup_r+0x8>)
  40406e:	f000 bbaf 	b.w	4047d0 <_fwalk_reent>
  404072:	bf00      	nop
  404074:	00405215 	.word	0x00405215

00404078 <std.isra.0>:
  404078:	b510      	push	{r4, lr}
  40407a:	2300      	movs	r3, #0
  40407c:	4604      	mov	r4, r0
  40407e:	8181      	strh	r1, [r0, #12]
  404080:	81c2      	strh	r2, [r0, #14]
  404082:	6003      	str	r3, [r0, #0]
  404084:	6043      	str	r3, [r0, #4]
  404086:	6083      	str	r3, [r0, #8]
  404088:	6643      	str	r3, [r0, #100]	; 0x64
  40408a:	6103      	str	r3, [r0, #16]
  40408c:	6143      	str	r3, [r0, #20]
  40408e:	6183      	str	r3, [r0, #24]
  404090:	4619      	mov	r1, r3
  404092:	2208      	movs	r2, #8
  404094:	305c      	adds	r0, #92	; 0x5c
  404096:	f7fe fe1d 	bl	402cd4 <memset>
  40409a:	4807      	ldr	r0, [pc, #28]	; (4040b8 <std.isra.0+0x40>)
  40409c:	4907      	ldr	r1, [pc, #28]	; (4040bc <std.isra.0+0x44>)
  40409e:	4a08      	ldr	r2, [pc, #32]	; (4040c0 <std.isra.0+0x48>)
  4040a0:	4b08      	ldr	r3, [pc, #32]	; (4040c4 <std.isra.0+0x4c>)
  4040a2:	6220      	str	r0, [r4, #32]
  4040a4:	61e4      	str	r4, [r4, #28]
  4040a6:	6261      	str	r1, [r4, #36]	; 0x24
  4040a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4040aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4040ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4040b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4040b4:	f000 bbc4 	b.w	404840 <__retarget_lock_init_recursive>
  4040b8:	00404f59 	.word	0x00404f59
  4040bc:	00404f7d 	.word	0x00404f7d
  4040c0:	00404fb9 	.word	0x00404fb9
  4040c4:	00404fd9 	.word	0x00404fd9

004040c8 <__sinit>:
  4040c8:	b510      	push	{r4, lr}
  4040ca:	4604      	mov	r4, r0
  4040cc:	4812      	ldr	r0, [pc, #72]	; (404118 <__sinit+0x50>)
  4040ce:	f000 fbbb 	bl	404848 <__retarget_lock_acquire_recursive>
  4040d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4040d4:	b9d2      	cbnz	r2, 40410c <__sinit+0x44>
  4040d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4040da:	4810      	ldr	r0, [pc, #64]	; (40411c <__sinit+0x54>)
  4040dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4040e0:	2103      	movs	r1, #3
  4040e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4040e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4040e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4040ec:	6860      	ldr	r0, [r4, #4]
  4040ee:	2104      	movs	r1, #4
  4040f0:	f7ff ffc2 	bl	404078 <std.isra.0>
  4040f4:	2201      	movs	r2, #1
  4040f6:	2109      	movs	r1, #9
  4040f8:	68a0      	ldr	r0, [r4, #8]
  4040fa:	f7ff ffbd 	bl	404078 <std.isra.0>
  4040fe:	2202      	movs	r2, #2
  404100:	2112      	movs	r1, #18
  404102:	68e0      	ldr	r0, [r4, #12]
  404104:	f7ff ffb8 	bl	404078 <std.isra.0>
  404108:	2301      	movs	r3, #1
  40410a:	63a3      	str	r3, [r4, #56]	; 0x38
  40410c:	4802      	ldr	r0, [pc, #8]	; (404118 <__sinit+0x50>)
  40410e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404112:	f000 bb9b 	b.w	40484c <__retarget_lock_release_recursive>
  404116:	bf00      	nop
  404118:	20000ebc 	.word	0x20000ebc
  40411c:	0040406d 	.word	0x0040406d

00404120 <__sfp_lock_acquire>:
  404120:	4801      	ldr	r0, [pc, #4]	; (404128 <__sfp_lock_acquire+0x8>)
  404122:	f000 bb91 	b.w	404848 <__retarget_lock_acquire_recursive>
  404126:	bf00      	nop
  404128:	20000ed0 	.word	0x20000ed0

0040412c <__sfp_lock_release>:
  40412c:	4801      	ldr	r0, [pc, #4]	; (404134 <__sfp_lock_release+0x8>)
  40412e:	f000 bb8d 	b.w	40484c <__retarget_lock_release_recursive>
  404132:	bf00      	nop
  404134:	20000ed0 	.word	0x20000ed0

00404138 <__libc_fini_array>:
  404138:	b538      	push	{r3, r4, r5, lr}
  40413a:	4c0a      	ldr	r4, [pc, #40]	; (404164 <__libc_fini_array+0x2c>)
  40413c:	4d0a      	ldr	r5, [pc, #40]	; (404168 <__libc_fini_array+0x30>)
  40413e:	1b64      	subs	r4, r4, r5
  404140:	10a4      	asrs	r4, r4, #2
  404142:	d00a      	beq.n	40415a <__libc_fini_array+0x22>
  404144:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404148:	3b01      	subs	r3, #1
  40414a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40414e:	3c01      	subs	r4, #1
  404150:	f855 3904 	ldr.w	r3, [r5], #-4
  404154:	4798      	blx	r3
  404156:	2c00      	cmp	r4, #0
  404158:	d1f9      	bne.n	40414e <__libc_fini_array+0x16>
  40415a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40415e:	f001 ba61 	b.w	405624 <_fini>
  404162:	bf00      	nop
  404164:	00405634 	.word	0x00405634
  404168:	00405630 	.word	0x00405630

0040416c <__fputwc>:
  40416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404170:	b082      	sub	sp, #8
  404172:	4680      	mov	r8, r0
  404174:	4689      	mov	r9, r1
  404176:	4614      	mov	r4, r2
  404178:	f000 fb54 	bl	404824 <__locale_mb_cur_max>
  40417c:	2801      	cmp	r0, #1
  40417e:	d036      	beq.n	4041ee <__fputwc+0x82>
  404180:	464a      	mov	r2, r9
  404182:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404186:	a901      	add	r1, sp, #4
  404188:	4640      	mov	r0, r8
  40418a:	f000 ff81 	bl	405090 <_wcrtomb_r>
  40418e:	1c42      	adds	r2, r0, #1
  404190:	4606      	mov	r6, r0
  404192:	d025      	beq.n	4041e0 <__fputwc+0x74>
  404194:	b3a8      	cbz	r0, 404202 <__fputwc+0x96>
  404196:	f89d e004 	ldrb.w	lr, [sp, #4]
  40419a:	2500      	movs	r5, #0
  40419c:	f10d 0a04 	add.w	sl, sp, #4
  4041a0:	e009      	b.n	4041b6 <__fputwc+0x4a>
  4041a2:	6823      	ldr	r3, [r4, #0]
  4041a4:	1c5a      	adds	r2, r3, #1
  4041a6:	6022      	str	r2, [r4, #0]
  4041a8:	f883 e000 	strb.w	lr, [r3]
  4041ac:	3501      	adds	r5, #1
  4041ae:	42b5      	cmp	r5, r6
  4041b0:	d227      	bcs.n	404202 <__fputwc+0x96>
  4041b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4041b6:	68a3      	ldr	r3, [r4, #8]
  4041b8:	3b01      	subs	r3, #1
  4041ba:	2b00      	cmp	r3, #0
  4041bc:	60a3      	str	r3, [r4, #8]
  4041be:	daf0      	bge.n	4041a2 <__fputwc+0x36>
  4041c0:	69a7      	ldr	r7, [r4, #24]
  4041c2:	42bb      	cmp	r3, r7
  4041c4:	4671      	mov	r1, lr
  4041c6:	4622      	mov	r2, r4
  4041c8:	4640      	mov	r0, r8
  4041ca:	db02      	blt.n	4041d2 <__fputwc+0x66>
  4041cc:	f1be 0f0a 	cmp.w	lr, #10
  4041d0:	d1e7      	bne.n	4041a2 <__fputwc+0x36>
  4041d2:	f000 ff05 	bl	404fe0 <__swbuf_r>
  4041d6:	1c43      	adds	r3, r0, #1
  4041d8:	d1e8      	bne.n	4041ac <__fputwc+0x40>
  4041da:	b002      	add	sp, #8
  4041dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4041e0:	89a3      	ldrh	r3, [r4, #12]
  4041e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4041e6:	81a3      	strh	r3, [r4, #12]
  4041e8:	b002      	add	sp, #8
  4041ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4041ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4041f2:	2bfe      	cmp	r3, #254	; 0xfe
  4041f4:	d8c4      	bhi.n	404180 <__fputwc+0x14>
  4041f6:	fa5f fe89 	uxtb.w	lr, r9
  4041fa:	4606      	mov	r6, r0
  4041fc:	f88d e004 	strb.w	lr, [sp, #4]
  404200:	e7cb      	b.n	40419a <__fputwc+0x2e>
  404202:	4648      	mov	r0, r9
  404204:	b002      	add	sp, #8
  404206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40420a:	bf00      	nop

0040420c <_fputwc_r>:
  40420c:	b530      	push	{r4, r5, lr}
  40420e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404210:	f013 0f01 	tst.w	r3, #1
  404214:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404218:	4614      	mov	r4, r2
  40421a:	b083      	sub	sp, #12
  40421c:	4605      	mov	r5, r0
  40421e:	b29a      	uxth	r2, r3
  404220:	d101      	bne.n	404226 <_fputwc_r+0x1a>
  404222:	0590      	lsls	r0, r2, #22
  404224:	d51c      	bpl.n	404260 <_fputwc_r+0x54>
  404226:	0490      	lsls	r0, r2, #18
  404228:	d406      	bmi.n	404238 <_fputwc_r+0x2c>
  40422a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40422c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404234:	81a3      	strh	r3, [r4, #12]
  404236:	6662      	str	r2, [r4, #100]	; 0x64
  404238:	4628      	mov	r0, r5
  40423a:	4622      	mov	r2, r4
  40423c:	f7ff ff96 	bl	40416c <__fputwc>
  404240:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404242:	07da      	lsls	r2, r3, #31
  404244:	4605      	mov	r5, r0
  404246:	d402      	bmi.n	40424e <_fputwc_r+0x42>
  404248:	89a3      	ldrh	r3, [r4, #12]
  40424a:	059b      	lsls	r3, r3, #22
  40424c:	d502      	bpl.n	404254 <_fputwc_r+0x48>
  40424e:	4628      	mov	r0, r5
  404250:	b003      	add	sp, #12
  404252:	bd30      	pop	{r4, r5, pc}
  404254:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404256:	f000 faf9 	bl	40484c <__retarget_lock_release_recursive>
  40425a:	4628      	mov	r0, r5
  40425c:	b003      	add	sp, #12
  40425e:	bd30      	pop	{r4, r5, pc}
  404260:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404262:	9101      	str	r1, [sp, #4]
  404264:	f000 faf0 	bl	404848 <__retarget_lock_acquire_recursive>
  404268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40426c:	9901      	ldr	r1, [sp, #4]
  40426e:	b29a      	uxth	r2, r3
  404270:	e7d9      	b.n	404226 <_fputwc_r+0x1a>
  404272:	bf00      	nop

00404274 <_malloc_trim_r>:
  404274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404276:	4f24      	ldr	r7, [pc, #144]	; (404308 <_malloc_trim_r+0x94>)
  404278:	460c      	mov	r4, r1
  40427a:	4606      	mov	r6, r0
  40427c:	f7fe fd78 	bl	402d70 <__malloc_lock>
  404280:	68bb      	ldr	r3, [r7, #8]
  404282:	685d      	ldr	r5, [r3, #4]
  404284:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404288:	310f      	adds	r1, #15
  40428a:	f025 0503 	bic.w	r5, r5, #3
  40428e:	4429      	add	r1, r5
  404290:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404294:	f021 010f 	bic.w	r1, r1, #15
  404298:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40429c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4042a0:	db07      	blt.n	4042b2 <_malloc_trim_r+0x3e>
  4042a2:	2100      	movs	r1, #0
  4042a4:	4630      	mov	r0, r6
  4042a6:	f7fe fd6f 	bl	402d88 <_sbrk_r>
  4042aa:	68bb      	ldr	r3, [r7, #8]
  4042ac:	442b      	add	r3, r5
  4042ae:	4298      	cmp	r0, r3
  4042b0:	d004      	beq.n	4042bc <_malloc_trim_r+0x48>
  4042b2:	4630      	mov	r0, r6
  4042b4:	f7fe fd62 	bl	402d7c <__malloc_unlock>
  4042b8:	2000      	movs	r0, #0
  4042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042bc:	4261      	negs	r1, r4
  4042be:	4630      	mov	r0, r6
  4042c0:	f7fe fd62 	bl	402d88 <_sbrk_r>
  4042c4:	3001      	adds	r0, #1
  4042c6:	d00d      	beq.n	4042e4 <_malloc_trim_r+0x70>
  4042c8:	4b10      	ldr	r3, [pc, #64]	; (40430c <_malloc_trim_r+0x98>)
  4042ca:	68ba      	ldr	r2, [r7, #8]
  4042cc:	6819      	ldr	r1, [r3, #0]
  4042ce:	1b2d      	subs	r5, r5, r4
  4042d0:	f045 0501 	orr.w	r5, r5, #1
  4042d4:	4630      	mov	r0, r6
  4042d6:	1b09      	subs	r1, r1, r4
  4042d8:	6055      	str	r5, [r2, #4]
  4042da:	6019      	str	r1, [r3, #0]
  4042dc:	f7fe fd4e 	bl	402d7c <__malloc_unlock>
  4042e0:	2001      	movs	r0, #1
  4042e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042e4:	2100      	movs	r1, #0
  4042e6:	4630      	mov	r0, r6
  4042e8:	f7fe fd4e 	bl	402d88 <_sbrk_r>
  4042ec:	68ba      	ldr	r2, [r7, #8]
  4042ee:	1a83      	subs	r3, r0, r2
  4042f0:	2b0f      	cmp	r3, #15
  4042f2:	ddde      	ble.n	4042b2 <_malloc_trim_r+0x3e>
  4042f4:	4c06      	ldr	r4, [pc, #24]	; (404310 <_malloc_trim_r+0x9c>)
  4042f6:	4905      	ldr	r1, [pc, #20]	; (40430c <_malloc_trim_r+0x98>)
  4042f8:	6824      	ldr	r4, [r4, #0]
  4042fa:	f043 0301 	orr.w	r3, r3, #1
  4042fe:	1b00      	subs	r0, r0, r4
  404300:	6053      	str	r3, [r2, #4]
  404302:	6008      	str	r0, [r1, #0]
  404304:	e7d5      	b.n	4042b2 <_malloc_trim_r+0x3e>
  404306:	bf00      	nop
  404308:	20000440 	.word	0x20000440
  40430c:	20000a60 	.word	0x20000a60
  404310:	20000848 	.word	0x20000848

00404314 <_free_r>:
  404314:	2900      	cmp	r1, #0
  404316:	d044      	beq.n	4043a2 <_free_r+0x8e>
  404318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40431c:	460d      	mov	r5, r1
  40431e:	4680      	mov	r8, r0
  404320:	f7fe fd26 	bl	402d70 <__malloc_lock>
  404324:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404328:	4969      	ldr	r1, [pc, #420]	; (4044d0 <_free_r+0x1bc>)
  40432a:	f027 0301 	bic.w	r3, r7, #1
  40432e:	f1a5 0408 	sub.w	r4, r5, #8
  404332:	18e2      	adds	r2, r4, r3
  404334:	688e      	ldr	r6, [r1, #8]
  404336:	6850      	ldr	r0, [r2, #4]
  404338:	42b2      	cmp	r2, r6
  40433a:	f020 0003 	bic.w	r0, r0, #3
  40433e:	d05e      	beq.n	4043fe <_free_r+0xea>
  404340:	07fe      	lsls	r6, r7, #31
  404342:	6050      	str	r0, [r2, #4]
  404344:	d40b      	bmi.n	40435e <_free_r+0x4a>
  404346:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40434a:	1be4      	subs	r4, r4, r7
  40434c:	f101 0e08 	add.w	lr, r1, #8
  404350:	68a5      	ldr	r5, [r4, #8]
  404352:	4575      	cmp	r5, lr
  404354:	443b      	add	r3, r7
  404356:	d06d      	beq.n	404434 <_free_r+0x120>
  404358:	68e7      	ldr	r7, [r4, #12]
  40435a:	60ef      	str	r7, [r5, #12]
  40435c:	60bd      	str	r5, [r7, #8]
  40435e:	1815      	adds	r5, r2, r0
  404360:	686d      	ldr	r5, [r5, #4]
  404362:	07ed      	lsls	r5, r5, #31
  404364:	d53e      	bpl.n	4043e4 <_free_r+0xd0>
  404366:	f043 0201 	orr.w	r2, r3, #1
  40436a:	6062      	str	r2, [r4, #4]
  40436c:	50e3      	str	r3, [r4, r3]
  40436e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404372:	d217      	bcs.n	4043a4 <_free_r+0x90>
  404374:	08db      	lsrs	r3, r3, #3
  404376:	1c58      	adds	r0, r3, #1
  404378:	109a      	asrs	r2, r3, #2
  40437a:	684d      	ldr	r5, [r1, #4]
  40437c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404380:	60a7      	str	r7, [r4, #8]
  404382:	2301      	movs	r3, #1
  404384:	4093      	lsls	r3, r2
  404386:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40438a:	432b      	orrs	r3, r5
  40438c:	3a08      	subs	r2, #8
  40438e:	60e2      	str	r2, [r4, #12]
  404390:	604b      	str	r3, [r1, #4]
  404392:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404396:	60fc      	str	r4, [r7, #12]
  404398:	4640      	mov	r0, r8
  40439a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40439e:	f7fe bced 	b.w	402d7c <__malloc_unlock>
  4043a2:	4770      	bx	lr
  4043a4:	0a5a      	lsrs	r2, r3, #9
  4043a6:	2a04      	cmp	r2, #4
  4043a8:	d852      	bhi.n	404450 <_free_r+0x13c>
  4043aa:	099a      	lsrs	r2, r3, #6
  4043ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4043b0:	00ff      	lsls	r7, r7, #3
  4043b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4043b6:	19c8      	adds	r0, r1, r7
  4043b8:	59ca      	ldr	r2, [r1, r7]
  4043ba:	3808      	subs	r0, #8
  4043bc:	4290      	cmp	r0, r2
  4043be:	d04f      	beq.n	404460 <_free_r+0x14c>
  4043c0:	6851      	ldr	r1, [r2, #4]
  4043c2:	f021 0103 	bic.w	r1, r1, #3
  4043c6:	428b      	cmp	r3, r1
  4043c8:	d232      	bcs.n	404430 <_free_r+0x11c>
  4043ca:	6892      	ldr	r2, [r2, #8]
  4043cc:	4290      	cmp	r0, r2
  4043ce:	d1f7      	bne.n	4043c0 <_free_r+0xac>
  4043d0:	68c3      	ldr	r3, [r0, #12]
  4043d2:	60a0      	str	r0, [r4, #8]
  4043d4:	60e3      	str	r3, [r4, #12]
  4043d6:	609c      	str	r4, [r3, #8]
  4043d8:	60c4      	str	r4, [r0, #12]
  4043da:	4640      	mov	r0, r8
  4043dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4043e0:	f7fe bccc 	b.w	402d7c <__malloc_unlock>
  4043e4:	6895      	ldr	r5, [r2, #8]
  4043e6:	4f3b      	ldr	r7, [pc, #236]	; (4044d4 <_free_r+0x1c0>)
  4043e8:	42bd      	cmp	r5, r7
  4043ea:	4403      	add	r3, r0
  4043ec:	d040      	beq.n	404470 <_free_r+0x15c>
  4043ee:	68d0      	ldr	r0, [r2, #12]
  4043f0:	60e8      	str	r0, [r5, #12]
  4043f2:	f043 0201 	orr.w	r2, r3, #1
  4043f6:	6085      	str	r5, [r0, #8]
  4043f8:	6062      	str	r2, [r4, #4]
  4043fa:	50e3      	str	r3, [r4, r3]
  4043fc:	e7b7      	b.n	40436e <_free_r+0x5a>
  4043fe:	07ff      	lsls	r7, r7, #31
  404400:	4403      	add	r3, r0
  404402:	d407      	bmi.n	404414 <_free_r+0x100>
  404404:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404408:	1aa4      	subs	r4, r4, r2
  40440a:	4413      	add	r3, r2
  40440c:	68a0      	ldr	r0, [r4, #8]
  40440e:	68e2      	ldr	r2, [r4, #12]
  404410:	60c2      	str	r2, [r0, #12]
  404412:	6090      	str	r0, [r2, #8]
  404414:	4a30      	ldr	r2, [pc, #192]	; (4044d8 <_free_r+0x1c4>)
  404416:	6812      	ldr	r2, [r2, #0]
  404418:	f043 0001 	orr.w	r0, r3, #1
  40441c:	4293      	cmp	r3, r2
  40441e:	6060      	str	r0, [r4, #4]
  404420:	608c      	str	r4, [r1, #8]
  404422:	d3b9      	bcc.n	404398 <_free_r+0x84>
  404424:	4b2d      	ldr	r3, [pc, #180]	; (4044dc <_free_r+0x1c8>)
  404426:	4640      	mov	r0, r8
  404428:	6819      	ldr	r1, [r3, #0]
  40442a:	f7ff ff23 	bl	404274 <_malloc_trim_r>
  40442e:	e7b3      	b.n	404398 <_free_r+0x84>
  404430:	4610      	mov	r0, r2
  404432:	e7cd      	b.n	4043d0 <_free_r+0xbc>
  404434:	1811      	adds	r1, r2, r0
  404436:	6849      	ldr	r1, [r1, #4]
  404438:	07c9      	lsls	r1, r1, #31
  40443a:	d444      	bmi.n	4044c6 <_free_r+0x1b2>
  40443c:	6891      	ldr	r1, [r2, #8]
  40443e:	68d2      	ldr	r2, [r2, #12]
  404440:	60ca      	str	r2, [r1, #12]
  404442:	4403      	add	r3, r0
  404444:	f043 0001 	orr.w	r0, r3, #1
  404448:	6091      	str	r1, [r2, #8]
  40444a:	6060      	str	r0, [r4, #4]
  40444c:	50e3      	str	r3, [r4, r3]
  40444e:	e7a3      	b.n	404398 <_free_r+0x84>
  404450:	2a14      	cmp	r2, #20
  404452:	d816      	bhi.n	404482 <_free_r+0x16e>
  404454:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404458:	00ff      	lsls	r7, r7, #3
  40445a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40445e:	e7aa      	b.n	4043b6 <_free_r+0xa2>
  404460:	10aa      	asrs	r2, r5, #2
  404462:	2301      	movs	r3, #1
  404464:	684d      	ldr	r5, [r1, #4]
  404466:	4093      	lsls	r3, r2
  404468:	432b      	orrs	r3, r5
  40446a:	604b      	str	r3, [r1, #4]
  40446c:	4603      	mov	r3, r0
  40446e:	e7b0      	b.n	4043d2 <_free_r+0xbe>
  404470:	f043 0201 	orr.w	r2, r3, #1
  404474:	614c      	str	r4, [r1, #20]
  404476:	610c      	str	r4, [r1, #16]
  404478:	60e5      	str	r5, [r4, #12]
  40447a:	60a5      	str	r5, [r4, #8]
  40447c:	6062      	str	r2, [r4, #4]
  40447e:	50e3      	str	r3, [r4, r3]
  404480:	e78a      	b.n	404398 <_free_r+0x84>
  404482:	2a54      	cmp	r2, #84	; 0x54
  404484:	d806      	bhi.n	404494 <_free_r+0x180>
  404486:	0b1a      	lsrs	r2, r3, #12
  404488:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40448c:	00ff      	lsls	r7, r7, #3
  40448e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404492:	e790      	b.n	4043b6 <_free_r+0xa2>
  404494:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404498:	d806      	bhi.n	4044a8 <_free_r+0x194>
  40449a:	0bda      	lsrs	r2, r3, #15
  40449c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4044a0:	00ff      	lsls	r7, r7, #3
  4044a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4044a6:	e786      	b.n	4043b6 <_free_r+0xa2>
  4044a8:	f240 5054 	movw	r0, #1364	; 0x554
  4044ac:	4282      	cmp	r2, r0
  4044ae:	d806      	bhi.n	4044be <_free_r+0x1aa>
  4044b0:	0c9a      	lsrs	r2, r3, #18
  4044b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4044b6:	00ff      	lsls	r7, r7, #3
  4044b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4044bc:	e77b      	b.n	4043b6 <_free_r+0xa2>
  4044be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4044c2:	257e      	movs	r5, #126	; 0x7e
  4044c4:	e777      	b.n	4043b6 <_free_r+0xa2>
  4044c6:	f043 0101 	orr.w	r1, r3, #1
  4044ca:	6061      	str	r1, [r4, #4]
  4044cc:	6013      	str	r3, [r2, #0]
  4044ce:	e763      	b.n	404398 <_free_r+0x84>
  4044d0:	20000440 	.word	0x20000440
  4044d4:	20000448 	.word	0x20000448
  4044d8:	2000084c 	.word	0x2000084c
  4044dc:	20000a90 	.word	0x20000a90

004044e0 <__sfvwrite_r>:
  4044e0:	6893      	ldr	r3, [r2, #8]
  4044e2:	2b00      	cmp	r3, #0
  4044e4:	d073      	beq.n	4045ce <__sfvwrite_r+0xee>
  4044e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044ea:	898b      	ldrh	r3, [r1, #12]
  4044ec:	b083      	sub	sp, #12
  4044ee:	460c      	mov	r4, r1
  4044f0:	0719      	lsls	r1, r3, #28
  4044f2:	9000      	str	r0, [sp, #0]
  4044f4:	4616      	mov	r6, r2
  4044f6:	d526      	bpl.n	404546 <__sfvwrite_r+0x66>
  4044f8:	6922      	ldr	r2, [r4, #16]
  4044fa:	b322      	cbz	r2, 404546 <__sfvwrite_r+0x66>
  4044fc:	f013 0002 	ands.w	r0, r3, #2
  404500:	6835      	ldr	r5, [r6, #0]
  404502:	d02c      	beq.n	40455e <__sfvwrite_r+0x7e>
  404504:	f04f 0900 	mov.w	r9, #0
  404508:	4fb0      	ldr	r7, [pc, #704]	; (4047cc <__sfvwrite_r+0x2ec>)
  40450a:	46c8      	mov	r8, r9
  40450c:	46b2      	mov	sl, r6
  40450e:	45b8      	cmp	r8, r7
  404510:	4643      	mov	r3, r8
  404512:	464a      	mov	r2, r9
  404514:	bf28      	it	cs
  404516:	463b      	movcs	r3, r7
  404518:	9800      	ldr	r0, [sp, #0]
  40451a:	f1b8 0f00 	cmp.w	r8, #0
  40451e:	d050      	beq.n	4045c2 <__sfvwrite_r+0xe2>
  404520:	69e1      	ldr	r1, [r4, #28]
  404522:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404524:	47b0      	blx	r6
  404526:	2800      	cmp	r0, #0
  404528:	dd58      	ble.n	4045dc <__sfvwrite_r+0xfc>
  40452a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40452e:	1a1b      	subs	r3, r3, r0
  404530:	4481      	add	r9, r0
  404532:	eba8 0800 	sub.w	r8, r8, r0
  404536:	f8ca 3008 	str.w	r3, [sl, #8]
  40453a:	2b00      	cmp	r3, #0
  40453c:	d1e7      	bne.n	40450e <__sfvwrite_r+0x2e>
  40453e:	2000      	movs	r0, #0
  404540:	b003      	add	sp, #12
  404542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404546:	4621      	mov	r1, r4
  404548:	9800      	ldr	r0, [sp, #0]
  40454a:	f7ff fc51 	bl	403df0 <__swsetup_r>
  40454e:	2800      	cmp	r0, #0
  404550:	f040 8133 	bne.w	4047ba <__sfvwrite_r+0x2da>
  404554:	89a3      	ldrh	r3, [r4, #12]
  404556:	6835      	ldr	r5, [r6, #0]
  404558:	f013 0002 	ands.w	r0, r3, #2
  40455c:	d1d2      	bne.n	404504 <__sfvwrite_r+0x24>
  40455e:	f013 0901 	ands.w	r9, r3, #1
  404562:	d145      	bne.n	4045f0 <__sfvwrite_r+0x110>
  404564:	464f      	mov	r7, r9
  404566:	9601      	str	r6, [sp, #4]
  404568:	b337      	cbz	r7, 4045b8 <__sfvwrite_r+0xd8>
  40456a:	059a      	lsls	r2, r3, #22
  40456c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404570:	f140 8083 	bpl.w	40467a <__sfvwrite_r+0x19a>
  404574:	4547      	cmp	r7, r8
  404576:	46c3      	mov	fp, r8
  404578:	f0c0 80ab 	bcc.w	4046d2 <__sfvwrite_r+0x1f2>
  40457c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404580:	f040 80ac 	bne.w	4046dc <__sfvwrite_r+0x1fc>
  404584:	6820      	ldr	r0, [r4, #0]
  404586:	46ba      	mov	sl, r7
  404588:	465a      	mov	r2, fp
  40458a:	4649      	mov	r1, r9
  40458c:	f000 fada 	bl	404b44 <memmove>
  404590:	68a2      	ldr	r2, [r4, #8]
  404592:	6823      	ldr	r3, [r4, #0]
  404594:	eba2 0208 	sub.w	r2, r2, r8
  404598:	445b      	add	r3, fp
  40459a:	60a2      	str	r2, [r4, #8]
  40459c:	6023      	str	r3, [r4, #0]
  40459e:	9a01      	ldr	r2, [sp, #4]
  4045a0:	6893      	ldr	r3, [r2, #8]
  4045a2:	eba3 030a 	sub.w	r3, r3, sl
  4045a6:	44d1      	add	r9, sl
  4045a8:	eba7 070a 	sub.w	r7, r7, sl
  4045ac:	6093      	str	r3, [r2, #8]
  4045ae:	2b00      	cmp	r3, #0
  4045b0:	d0c5      	beq.n	40453e <__sfvwrite_r+0x5e>
  4045b2:	89a3      	ldrh	r3, [r4, #12]
  4045b4:	2f00      	cmp	r7, #0
  4045b6:	d1d8      	bne.n	40456a <__sfvwrite_r+0x8a>
  4045b8:	f8d5 9000 	ldr.w	r9, [r5]
  4045bc:	686f      	ldr	r7, [r5, #4]
  4045be:	3508      	adds	r5, #8
  4045c0:	e7d2      	b.n	404568 <__sfvwrite_r+0x88>
  4045c2:	f8d5 9000 	ldr.w	r9, [r5]
  4045c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4045ca:	3508      	adds	r5, #8
  4045cc:	e79f      	b.n	40450e <__sfvwrite_r+0x2e>
  4045ce:	2000      	movs	r0, #0
  4045d0:	4770      	bx	lr
  4045d2:	4621      	mov	r1, r4
  4045d4:	9800      	ldr	r0, [sp, #0]
  4045d6:	f7ff fd1f 	bl	404018 <_fflush_r>
  4045da:	b370      	cbz	r0, 40463a <__sfvwrite_r+0x15a>
  4045dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4045e4:	f04f 30ff 	mov.w	r0, #4294967295
  4045e8:	81a3      	strh	r3, [r4, #12]
  4045ea:	b003      	add	sp, #12
  4045ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045f0:	4681      	mov	r9, r0
  4045f2:	4633      	mov	r3, r6
  4045f4:	464e      	mov	r6, r9
  4045f6:	46a8      	mov	r8, r5
  4045f8:	469a      	mov	sl, r3
  4045fa:	464d      	mov	r5, r9
  4045fc:	b34e      	cbz	r6, 404652 <__sfvwrite_r+0x172>
  4045fe:	b380      	cbz	r0, 404662 <__sfvwrite_r+0x182>
  404600:	6820      	ldr	r0, [r4, #0]
  404602:	6923      	ldr	r3, [r4, #16]
  404604:	6962      	ldr	r2, [r4, #20]
  404606:	45b1      	cmp	r9, r6
  404608:	46cb      	mov	fp, r9
  40460a:	bf28      	it	cs
  40460c:	46b3      	movcs	fp, r6
  40460e:	4298      	cmp	r0, r3
  404610:	465f      	mov	r7, fp
  404612:	d904      	bls.n	40461e <__sfvwrite_r+0x13e>
  404614:	68a3      	ldr	r3, [r4, #8]
  404616:	4413      	add	r3, r2
  404618:	459b      	cmp	fp, r3
  40461a:	f300 80a6 	bgt.w	40476a <__sfvwrite_r+0x28a>
  40461e:	4593      	cmp	fp, r2
  404620:	db4b      	blt.n	4046ba <__sfvwrite_r+0x1da>
  404622:	4613      	mov	r3, r2
  404624:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404626:	69e1      	ldr	r1, [r4, #28]
  404628:	9800      	ldr	r0, [sp, #0]
  40462a:	462a      	mov	r2, r5
  40462c:	47b8      	blx	r7
  40462e:	1e07      	subs	r7, r0, #0
  404630:	ddd4      	ble.n	4045dc <__sfvwrite_r+0xfc>
  404632:	ebb9 0907 	subs.w	r9, r9, r7
  404636:	d0cc      	beq.n	4045d2 <__sfvwrite_r+0xf2>
  404638:	2001      	movs	r0, #1
  40463a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40463e:	1bdb      	subs	r3, r3, r7
  404640:	443d      	add	r5, r7
  404642:	1bf6      	subs	r6, r6, r7
  404644:	f8ca 3008 	str.w	r3, [sl, #8]
  404648:	2b00      	cmp	r3, #0
  40464a:	f43f af78 	beq.w	40453e <__sfvwrite_r+0x5e>
  40464e:	2e00      	cmp	r6, #0
  404650:	d1d5      	bne.n	4045fe <__sfvwrite_r+0x11e>
  404652:	f108 0308 	add.w	r3, r8, #8
  404656:	e913 0060 	ldmdb	r3, {r5, r6}
  40465a:	4698      	mov	r8, r3
  40465c:	3308      	adds	r3, #8
  40465e:	2e00      	cmp	r6, #0
  404660:	d0f9      	beq.n	404656 <__sfvwrite_r+0x176>
  404662:	4632      	mov	r2, r6
  404664:	210a      	movs	r1, #10
  404666:	4628      	mov	r0, r5
  404668:	f000 f982 	bl	404970 <memchr>
  40466c:	2800      	cmp	r0, #0
  40466e:	f000 80a1 	beq.w	4047b4 <__sfvwrite_r+0x2d4>
  404672:	3001      	adds	r0, #1
  404674:	eba0 0905 	sub.w	r9, r0, r5
  404678:	e7c2      	b.n	404600 <__sfvwrite_r+0x120>
  40467a:	6820      	ldr	r0, [r4, #0]
  40467c:	6923      	ldr	r3, [r4, #16]
  40467e:	4298      	cmp	r0, r3
  404680:	d802      	bhi.n	404688 <__sfvwrite_r+0x1a8>
  404682:	6963      	ldr	r3, [r4, #20]
  404684:	429f      	cmp	r7, r3
  404686:	d25d      	bcs.n	404744 <__sfvwrite_r+0x264>
  404688:	45b8      	cmp	r8, r7
  40468a:	bf28      	it	cs
  40468c:	46b8      	movcs	r8, r7
  40468e:	4642      	mov	r2, r8
  404690:	4649      	mov	r1, r9
  404692:	f000 fa57 	bl	404b44 <memmove>
  404696:	68a3      	ldr	r3, [r4, #8]
  404698:	6822      	ldr	r2, [r4, #0]
  40469a:	eba3 0308 	sub.w	r3, r3, r8
  40469e:	4442      	add	r2, r8
  4046a0:	60a3      	str	r3, [r4, #8]
  4046a2:	6022      	str	r2, [r4, #0]
  4046a4:	b10b      	cbz	r3, 4046aa <__sfvwrite_r+0x1ca>
  4046a6:	46c2      	mov	sl, r8
  4046a8:	e779      	b.n	40459e <__sfvwrite_r+0xbe>
  4046aa:	4621      	mov	r1, r4
  4046ac:	9800      	ldr	r0, [sp, #0]
  4046ae:	f7ff fcb3 	bl	404018 <_fflush_r>
  4046b2:	2800      	cmp	r0, #0
  4046b4:	d192      	bne.n	4045dc <__sfvwrite_r+0xfc>
  4046b6:	46c2      	mov	sl, r8
  4046b8:	e771      	b.n	40459e <__sfvwrite_r+0xbe>
  4046ba:	465a      	mov	r2, fp
  4046bc:	4629      	mov	r1, r5
  4046be:	f000 fa41 	bl	404b44 <memmove>
  4046c2:	68a2      	ldr	r2, [r4, #8]
  4046c4:	6823      	ldr	r3, [r4, #0]
  4046c6:	eba2 020b 	sub.w	r2, r2, fp
  4046ca:	445b      	add	r3, fp
  4046cc:	60a2      	str	r2, [r4, #8]
  4046ce:	6023      	str	r3, [r4, #0]
  4046d0:	e7af      	b.n	404632 <__sfvwrite_r+0x152>
  4046d2:	6820      	ldr	r0, [r4, #0]
  4046d4:	46b8      	mov	r8, r7
  4046d6:	46ba      	mov	sl, r7
  4046d8:	46bb      	mov	fp, r7
  4046da:	e755      	b.n	404588 <__sfvwrite_r+0xa8>
  4046dc:	6962      	ldr	r2, [r4, #20]
  4046de:	6820      	ldr	r0, [r4, #0]
  4046e0:	6921      	ldr	r1, [r4, #16]
  4046e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4046e6:	eba0 0a01 	sub.w	sl, r0, r1
  4046ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4046ee:	f10a 0001 	add.w	r0, sl, #1
  4046f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4046f6:	4438      	add	r0, r7
  4046f8:	4540      	cmp	r0, r8
  4046fa:	4642      	mov	r2, r8
  4046fc:	bf84      	itt	hi
  4046fe:	4680      	movhi	r8, r0
  404700:	4642      	movhi	r2, r8
  404702:	055b      	lsls	r3, r3, #21
  404704:	d544      	bpl.n	404790 <__sfvwrite_r+0x2b0>
  404706:	4611      	mov	r1, r2
  404708:	9800      	ldr	r0, [sp, #0]
  40470a:	f7fe f833 	bl	402774 <_malloc_r>
  40470e:	4683      	mov	fp, r0
  404710:	2800      	cmp	r0, #0
  404712:	d055      	beq.n	4047c0 <__sfvwrite_r+0x2e0>
  404714:	4652      	mov	r2, sl
  404716:	6921      	ldr	r1, [r4, #16]
  404718:	f000 f97a 	bl	404a10 <memcpy>
  40471c:	89a3      	ldrh	r3, [r4, #12]
  40471e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404726:	81a3      	strh	r3, [r4, #12]
  404728:	eb0b 000a 	add.w	r0, fp, sl
  40472c:	eba8 030a 	sub.w	r3, r8, sl
  404730:	f8c4 b010 	str.w	fp, [r4, #16]
  404734:	f8c4 8014 	str.w	r8, [r4, #20]
  404738:	6020      	str	r0, [r4, #0]
  40473a:	60a3      	str	r3, [r4, #8]
  40473c:	46b8      	mov	r8, r7
  40473e:	46ba      	mov	sl, r7
  404740:	46bb      	mov	fp, r7
  404742:	e721      	b.n	404588 <__sfvwrite_r+0xa8>
  404744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404748:	42b9      	cmp	r1, r7
  40474a:	bf28      	it	cs
  40474c:	4639      	movcs	r1, r7
  40474e:	464a      	mov	r2, r9
  404750:	fb91 f1f3 	sdiv	r1, r1, r3
  404754:	9800      	ldr	r0, [sp, #0]
  404756:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404758:	fb03 f301 	mul.w	r3, r3, r1
  40475c:	69e1      	ldr	r1, [r4, #28]
  40475e:	47b0      	blx	r6
  404760:	f1b0 0a00 	subs.w	sl, r0, #0
  404764:	f73f af1b 	bgt.w	40459e <__sfvwrite_r+0xbe>
  404768:	e738      	b.n	4045dc <__sfvwrite_r+0xfc>
  40476a:	461a      	mov	r2, r3
  40476c:	4629      	mov	r1, r5
  40476e:	9301      	str	r3, [sp, #4]
  404770:	f000 f9e8 	bl	404b44 <memmove>
  404774:	6822      	ldr	r2, [r4, #0]
  404776:	9b01      	ldr	r3, [sp, #4]
  404778:	9800      	ldr	r0, [sp, #0]
  40477a:	441a      	add	r2, r3
  40477c:	6022      	str	r2, [r4, #0]
  40477e:	4621      	mov	r1, r4
  404780:	f7ff fc4a 	bl	404018 <_fflush_r>
  404784:	9b01      	ldr	r3, [sp, #4]
  404786:	2800      	cmp	r0, #0
  404788:	f47f af28 	bne.w	4045dc <__sfvwrite_r+0xfc>
  40478c:	461f      	mov	r7, r3
  40478e:	e750      	b.n	404632 <__sfvwrite_r+0x152>
  404790:	9800      	ldr	r0, [sp, #0]
  404792:	f000 fa3b 	bl	404c0c <_realloc_r>
  404796:	4683      	mov	fp, r0
  404798:	2800      	cmp	r0, #0
  40479a:	d1c5      	bne.n	404728 <__sfvwrite_r+0x248>
  40479c:	9d00      	ldr	r5, [sp, #0]
  40479e:	6921      	ldr	r1, [r4, #16]
  4047a0:	4628      	mov	r0, r5
  4047a2:	f7ff fdb7 	bl	404314 <_free_r>
  4047a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047aa:	220c      	movs	r2, #12
  4047ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4047b0:	602a      	str	r2, [r5, #0]
  4047b2:	e715      	b.n	4045e0 <__sfvwrite_r+0x100>
  4047b4:	f106 0901 	add.w	r9, r6, #1
  4047b8:	e722      	b.n	404600 <__sfvwrite_r+0x120>
  4047ba:	f04f 30ff 	mov.w	r0, #4294967295
  4047be:	e6bf      	b.n	404540 <__sfvwrite_r+0x60>
  4047c0:	9a00      	ldr	r2, [sp, #0]
  4047c2:	230c      	movs	r3, #12
  4047c4:	6013      	str	r3, [r2, #0]
  4047c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ca:	e709      	b.n	4045e0 <__sfvwrite_r+0x100>
  4047cc:	7ffffc00 	.word	0x7ffffc00

004047d0 <_fwalk_reent>:
  4047d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4047d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4047d8:	d01f      	beq.n	40481a <_fwalk_reent+0x4a>
  4047da:	4688      	mov	r8, r1
  4047dc:	4606      	mov	r6, r0
  4047de:	f04f 0900 	mov.w	r9, #0
  4047e2:	687d      	ldr	r5, [r7, #4]
  4047e4:	68bc      	ldr	r4, [r7, #8]
  4047e6:	3d01      	subs	r5, #1
  4047e8:	d411      	bmi.n	40480e <_fwalk_reent+0x3e>
  4047ea:	89a3      	ldrh	r3, [r4, #12]
  4047ec:	2b01      	cmp	r3, #1
  4047ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4047f2:	d908      	bls.n	404806 <_fwalk_reent+0x36>
  4047f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4047f8:	3301      	adds	r3, #1
  4047fa:	4621      	mov	r1, r4
  4047fc:	4630      	mov	r0, r6
  4047fe:	d002      	beq.n	404806 <_fwalk_reent+0x36>
  404800:	47c0      	blx	r8
  404802:	ea49 0900 	orr.w	r9, r9, r0
  404806:	1c6b      	adds	r3, r5, #1
  404808:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40480c:	d1ed      	bne.n	4047ea <_fwalk_reent+0x1a>
  40480e:	683f      	ldr	r7, [r7, #0]
  404810:	2f00      	cmp	r7, #0
  404812:	d1e6      	bne.n	4047e2 <_fwalk_reent+0x12>
  404814:	4648      	mov	r0, r9
  404816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40481a:	46b9      	mov	r9, r7
  40481c:	4648      	mov	r0, r9
  40481e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404822:	bf00      	nop

00404824 <__locale_mb_cur_max>:
  404824:	4b04      	ldr	r3, [pc, #16]	; (404838 <__locale_mb_cur_max+0x14>)
  404826:	4a05      	ldr	r2, [pc, #20]	; (40483c <__locale_mb_cur_max+0x18>)
  404828:	681b      	ldr	r3, [r3, #0]
  40482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40482c:	2b00      	cmp	r3, #0
  40482e:	bf08      	it	eq
  404830:	4613      	moveq	r3, r2
  404832:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404836:	4770      	bx	lr
  404838:	20000010 	.word	0x20000010
  40483c:	20000854 	.word	0x20000854

00404840 <__retarget_lock_init_recursive>:
  404840:	4770      	bx	lr
  404842:	bf00      	nop

00404844 <__retarget_lock_close_recursive>:
  404844:	4770      	bx	lr
  404846:	bf00      	nop

00404848 <__retarget_lock_acquire_recursive>:
  404848:	4770      	bx	lr
  40484a:	bf00      	nop

0040484c <__retarget_lock_release_recursive>:
  40484c:	4770      	bx	lr
  40484e:	bf00      	nop

00404850 <__swhatbuf_r>:
  404850:	b570      	push	{r4, r5, r6, lr}
  404852:	460c      	mov	r4, r1
  404854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404858:	2900      	cmp	r1, #0
  40485a:	b090      	sub	sp, #64	; 0x40
  40485c:	4615      	mov	r5, r2
  40485e:	461e      	mov	r6, r3
  404860:	db14      	blt.n	40488c <__swhatbuf_r+0x3c>
  404862:	aa01      	add	r2, sp, #4
  404864:	f000 fd38 	bl	4052d8 <_fstat_r>
  404868:	2800      	cmp	r0, #0
  40486a:	db0f      	blt.n	40488c <__swhatbuf_r+0x3c>
  40486c:	9a02      	ldr	r2, [sp, #8]
  40486e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404872:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404876:	fab2 f282 	clz	r2, r2
  40487a:	0952      	lsrs	r2, r2, #5
  40487c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404880:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404884:	6032      	str	r2, [r6, #0]
  404886:	602b      	str	r3, [r5, #0]
  404888:	b010      	add	sp, #64	; 0x40
  40488a:	bd70      	pop	{r4, r5, r6, pc}
  40488c:	89a2      	ldrh	r2, [r4, #12]
  40488e:	2300      	movs	r3, #0
  404890:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404894:	6033      	str	r3, [r6, #0]
  404896:	d004      	beq.n	4048a2 <__swhatbuf_r+0x52>
  404898:	2240      	movs	r2, #64	; 0x40
  40489a:	4618      	mov	r0, r3
  40489c:	602a      	str	r2, [r5, #0]
  40489e:	b010      	add	sp, #64	; 0x40
  4048a0:	bd70      	pop	{r4, r5, r6, pc}
  4048a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4048a6:	602b      	str	r3, [r5, #0]
  4048a8:	b010      	add	sp, #64	; 0x40
  4048aa:	bd70      	pop	{r4, r5, r6, pc}

004048ac <__smakebuf_r>:
  4048ac:	898a      	ldrh	r2, [r1, #12]
  4048ae:	0792      	lsls	r2, r2, #30
  4048b0:	460b      	mov	r3, r1
  4048b2:	d506      	bpl.n	4048c2 <__smakebuf_r+0x16>
  4048b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4048b8:	2101      	movs	r1, #1
  4048ba:	601a      	str	r2, [r3, #0]
  4048bc:	611a      	str	r2, [r3, #16]
  4048be:	6159      	str	r1, [r3, #20]
  4048c0:	4770      	bx	lr
  4048c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4048c4:	b083      	sub	sp, #12
  4048c6:	ab01      	add	r3, sp, #4
  4048c8:	466a      	mov	r2, sp
  4048ca:	460c      	mov	r4, r1
  4048cc:	4606      	mov	r6, r0
  4048ce:	f7ff ffbf 	bl	404850 <__swhatbuf_r>
  4048d2:	9900      	ldr	r1, [sp, #0]
  4048d4:	4605      	mov	r5, r0
  4048d6:	4630      	mov	r0, r6
  4048d8:	f7fd ff4c 	bl	402774 <_malloc_r>
  4048dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048e0:	b1d8      	cbz	r0, 40491a <__smakebuf_r+0x6e>
  4048e2:	9a01      	ldr	r2, [sp, #4]
  4048e4:	4f15      	ldr	r7, [pc, #84]	; (40493c <__smakebuf_r+0x90>)
  4048e6:	9900      	ldr	r1, [sp, #0]
  4048e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4048ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4048ee:	81a3      	strh	r3, [r4, #12]
  4048f0:	6020      	str	r0, [r4, #0]
  4048f2:	6120      	str	r0, [r4, #16]
  4048f4:	6161      	str	r1, [r4, #20]
  4048f6:	b91a      	cbnz	r2, 404900 <__smakebuf_r+0x54>
  4048f8:	432b      	orrs	r3, r5
  4048fa:	81a3      	strh	r3, [r4, #12]
  4048fc:	b003      	add	sp, #12
  4048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404900:	4630      	mov	r0, r6
  404902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404906:	f000 fcfb 	bl	405300 <_isatty_r>
  40490a:	b1a0      	cbz	r0, 404936 <__smakebuf_r+0x8a>
  40490c:	89a3      	ldrh	r3, [r4, #12]
  40490e:	f023 0303 	bic.w	r3, r3, #3
  404912:	f043 0301 	orr.w	r3, r3, #1
  404916:	b21b      	sxth	r3, r3
  404918:	e7ee      	b.n	4048f8 <__smakebuf_r+0x4c>
  40491a:	059a      	lsls	r2, r3, #22
  40491c:	d4ee      	bmi.n	4048fc <__smakebuf_r+0x50>
  40491e:	f023 0303 	bic.w	r3, r3, #3
  404922:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404926:	f043 0302 	orr.w	r3, r3, #2
  40492a:	2101      	movs	r1, #1
  40492c:	81a3      	strh	r3, [r4, #12]
  40492e:	6022      	str	r2, [r4, #0]
  404930:	6122      	str	r2, [r4, #16]
  404932:	6161      	str	r1, [r4, #20]
  404934:	e7e2      	b.n	4048fc <__smakebuf_r+0x50>
  404936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40493a:	e7dd      	b.n	4048f8 <__smakebuf_r+0x4c>
  40493c:	0040406d 	.word	0x0040406d

00404940 <__ascii_mbtowc>:
  404940:	b082      	sub	sp, #8
  404942:	b149      	cbz	r1, 404958 <__ascii_mbtowc+0x18>
  404944:	b15a      	cbz	r2, 40495e <__ascii_mbtowc+0x1e>
  404946:	b16b      	cbz	r3, 404964 <__ascii_mbtowc+0x24>
  404948:	7813      	ldrb	r3, [r2, #0]
  40494a:	600b      	str	r3, [r1, #0]
  40494c:	7812      	ldrb	r2, [r2, #0]
  40494e:	1c10      	adds	r0, r2, #0
  404950:	bf18      	it	ne
  404952:	2001      	movne	r0, #1
  404954:	b002      	add	sp, #8
  404956:	4770      	bx	lr
  404958:	a901      	add	r1, sp, #4
  40495a:	2a00      	cmp	r2, #0
  40495c:	d1f3      	bne.n	404946 <__ascii_mbtowc+0x6>
  40495e:	4610      	mov	r0, r2
  404960:	b002      	add	sp, #8
  404962:	4770      	bx	lr
  404964:	f06f 0001 	mvn.w	r0, #1
  404968:	e7f4      	b.n	404954 <__ascii_mbtowc+0x14>
  40496a:	bf00      	nop
  40496c:	0000      	movs	r0, r0
	...

00404970 <memchr>:
  404970:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404974:	2a10      	cmp	r2, #16
  404976:	db2b      	blt.n	4049d0 <memchr+0x60>
  404978:	f010 0f07 	tst.w	r0, #7
  40497c:	d008      	beq.n	404990 <memchr+0x20>
  40497e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404982:	3a01      	subs	r2, #1
  404984:	428b      	cmp	r3, r1
  404986:	d02d      	beq.n	4049e4 <memchr+0x74>
  404988:	f010 0f07 	tst.w	r0, #7
  40498c:	b342      	cbz	r2, 4049e0 <memchr+0x70>
  40498e:	d1f6      	bne.n	40497e <memchr+0xe>
  404990:	b4f0      	push	{r4, r5, r6, r7}
  404992:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404996:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40499a:	f022 0407 	bic.w	r4, r2, #7
  40499e:	f07f 0700 	mvns.w	r7, #0
  4049a2:	2300      	movs	r3, #0
  4049a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4049a8:	3c08      	subs	r4, #8
  4049aa:	ea85 0501 	eor.w	r5, r5, r1
  4049ae:	ea86 0601 	eor.w	r6, r6, r1
  4049b2:	fa85 f547 	uadd8	r5, r5, r7
  4049b6:	faa3 f587 	sel	r5, r3, r7
  4049ba:	fa86 f647 	uadd8	r6, r6, r7
  4049be:	faa5 f687 	sel	r6, r5, r7
  4049c2:	b98e      	cbnz	r6, 4049e8 <memchr+0x78>
  4049c4:	d1ee      	bne.n	4049a4 <memchr+0x34>
  4049c6:	bcf0      	pop	{r4, r5, r6, r7}
  4049c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4049cc:	f002 0207 	and.w	r2, r2, #7
  4049d0:	b132      	cbz	r2, 4049e0 <memchr+0x70>
  4049d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4049d6:	3a01      	subs	r2, #1
  4049d8:	ea83 0301 	eor.w	r3, r3, r1
  4049dc:	b113      	cbz	r3, 4049e4 <memchr+0x74>
  4049de:	d1f8      	bne.n	4049d2 <memchr+0x62>
  4049e0:	2000      	movs	r0, #0
  4049e2:	4770      	bx	lr
  4049e4:	3801      	subs	r0, #1
  4049e6:	4770      	bx	lr
  4049e8:	2d00      	cmp	r5, #0
  4049ea:	bf06      	itte	eq
  4049ec:	4635      	moveq	r5, r6
  4049ee:	3803      	subeq	r0, #3
  4049f0:	3807      	subne	r0, #7
  4049f2:	f015 0f01 	tst.w	r5, #1
  4049f6:	d107      	bne.n	404a08 <memchr+0x98>
  4049f8:	3001      	adds	r0, #1
  4049fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4049fe:	bf02      	ittt	eq
  404a00:	3001      	addeq	r0, #1
  404a02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404a06:	3001      	addeq	r0, #1
  404a08:	bcf0      	pop	{r4, r5, r6, r7}
  404a0a:	3801      	subs	r0, #1
  404a0c:	4770      	bx	lr
  404a0e:	bf00      	nop

00404a10 <memcpy>:
  404a10:	4684      	mov	ip, r0
  404a12:	ea41 0300 	orr.w	r3, r1, r0
  404a16:	f013 0303 	ands.w	r3, r3, #3
  404a1a:	d16d      	bne.n	404af8 <memcpy+0xe8>
  404a1c:	3a40      	subs	r2, #64	; 0x40
  404a1e:	d341      	bcc.n	404aa4 <memcpy+0x94>
  404a20:	f851 3b04 	ldr.w	r3, [r1], #4
  404a24:	f840 3b04 	str.w	r3, [r0], #4
  404a28:	f851 3b04 	ldr.w	r3, [r1], #4
  404a2c:	f840 3b04 	str.w	r3, [r0], #4
  404a30:	f851 3b04 	ldr.w	r3, [r1], #4
  404a34:	f840 3b04 	str.w	r3, [r0], #4
  404a38:	f851 3b04 	ldr.w	r3, [r1], #4
  404a3c:	f840 3b04 	str.w	r3, [r0], #4
  404a40:	f851 3b04 	ldr.w	r3, [r1], #4
  404a44:	f840 3b04 	str.w	r3, [r0], #4
  404a48:	f851 3b04 	ldr.w	r3, [r1], #4
  404a4c:	f840 3b04 	str.w	r3, [r0], #4
  404a50:	f851 3b04 	ldr.w	r3, [r1], #4
  404a54:	f840 3b04 	str.w	r3, [r0], #4
  404a58:	f851 3b04 	ldr.w	r3, [r1], #4
  404a5c:	f840 3b04 	str.w	r3, [r0], #4
  404a60:	f851 3b04 	ldr.w	r3, [r1], #4
  404a64:	f840 3b04 	str.w	r3, [r0], #4
  404a68:	f851 3b04 	ldr.w	r3, [r1], #4
  404a6c:	f840 3b04 	str.w	r3, [r0], #4
  404a70:	f851 3b04 	ldr.w	r3, [r1], #4
  404a74:	f840 3b04 	str.w	r3, [r0], #4
  404a78:	f851 3b04 	ldr.w	r3, [r1], #4
  404a7c:	f840 3b04 	str.w	r3, [r0], #4
  404a80:	f851 3b04 	ldr.w	r3, [r1], #4
  404a84:	f840 3b04 	str.w	r3, [r0], #4
  404a88:	f851 3b04 	ldr.w	r3, [r1], #4
  404a8c:	f840 3b04 	str.w	r3, [r0], #4
  404a90:	f851 3b04 	ldr.w	r3, [r1], #4
  404a94:	f840 3b04 	str.w	r3, [r0], #4
  404a98:	f851 3b04 	ldr.w	r3, [r1], #4
  404a9c:	f840 3b04 	str.w	r3, [r0], #4
  404aa0:	3a40      	subs	r2, #64	; 0x40
  404aa2:	d2bd      	bcs.n	404a20 <memcpy+0x10>
  404aa4:	3230      	adds	r2, #48	; 0x30
  404aa6:	d311      	bcc.n	404acc <memcpy+0xbc>
  404aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  404aac:	f840 3b04 	str.w	r3, [r0], #4
  404ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ab4:	f840 3b04 	str.w	r3, [r0], #4
  404ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  404abc:	f840 3b04 	str.w	r3, [r0], #4
  404ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ac4:	f840 3b04 	str.w	r3, [r0], #4
  404ac8:	3a10      	subs	r2, #16
  404aca:	d2ed      	bcs.n	404aa8 <memcpy+0x98>
  404acc:	320c      	adds	r2, #12
  404ace:	d305      	bcc.n	404adc <memcpy+0xcc>
  404ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ad4:	f840 3b04 	str.w	r3, [r0], #4
  404ad8:	3a04      	subs	r2, #4
  404ada:	d2f9      	bcs.n	404ad0 <memcpy+0xc0>
  404adc:	3204      	adds	r2, #4
  404ade:	d008      	beq.n	404af2 <memcpy+0xe2>
  404ae0:	07d2      	lsls	r2, r2, #31
  404ae2:	bf1c      	itt	ne
  404ae4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404ae8:	f800 3b01 	strbne.w	r3, [r0], #1
  404aec:	d301      	bcc.n	404af2 <memcpy+0xe2>
  404aee:	880b      	ldrh	r3, [r1, #0]
  404af0:	8003      	strh	r3, [r0, #0]
  404af2:	4660      	mov	r0, ip
  404af4:	4770      	bx	lr
  404af6:	bf00      	nop
  404af8:	2a08      	cmp	r2, #8
  404afa:	d313      	bcc.n	404b24 <memcpy+0x114>
  404afc:	078b      	lsls	r3, r1, #30
  404afe:	d08d      	beq.n	404a1c <memcpy+0xc>
  404b00:	f010 0303 	ands.w	r3, r0, #3
  404b04:	d08a      	beq.n	404a1c <memcpy+0xc>
  404b06:	f1c3 0304 	rsb	r3, r3, #4
  404b0a:	1ad2      	subs	r2, r2, r3
  404b0c:	07db      	lsls	r3, r3, #31
  404b0e:	bf1c      	itt	ne
  404b10:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404b14:	f800 3b01 	strbne.w	r3, [r0], #1
  404b18:	d380      	bcc.n	404a1c <memcpy+0xc>
  404b1a:	f831 3b02 	ldrh.w	r3, [r1], #2
  404b1e:	f820 3b02 	strh.w	r3, [r0], #2
  404b22:	e77b      	b.n	404a1c <memcpy+0xc>
  404b24:	3a04      	subs	r2, #4
  404b26:	d3d9      	bcc.n	404adc <memcpy+0xcc>
  404b28:	3a01      	subs	r2, #1
  404b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404b2e:	f800 3b01 	strb.w	r3, [r0], #1
  404b32:	d2f9      	bcs.n	404b28 <memcpy+0x118>
  404b34:	780b      	ldrb	r3, [r1, #0]
  404b36:	7003      	strb	r3, [r0, #0]
  404b38:	784b      	ldrb	r3, [r1, #1]
  404b3a:	7043      	strb	r3, [r0, #1]
  404b3c:	788b      	ldrb	r3, [r1, #2]
  404b3e:	7083      	strb	r3, [r0, #2]
  404b40:	4660      	mov	r0, ip
  404b42:	4770      	bx	lr

00404b44 <memmove>:
  404b44:	4288      	cmp	r0, r1
  404b46:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b48:	d90d      	bls.n	404b66 <memmove+0x22>
  404b4a:	188b      	adds	r3, r1, r2
  404b4c:	4298      	cmp	r0, r3
  404b4e:	d20a      	bcs.n	404b66 <memmove+0x22>
  404b50:	1884      	adds	r4, r0, r2
  404b52:	2a00      	cmp	r2, #0
  404b54:	d051      	beq.n	404bfa <memmove+0xb6>
  404b56:	4622      	mov	r2, r4
  404b58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404b5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404b60:	4299      	cmp	r1, r3
  404b62:	d1f9      	bne.n	404b58 <memmove+0x14>
  404b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b66:	2a0f      	cmp	r2, #15
  404b68:	d948      	bls.n	404bfc <memmove+0xb8>
  404b6a:	ea41 0300 	orr.w	r3, r1, r0
  404b6e:	079b      	lsls	r3, r3, #30
  404b70:	d146      	bne.n	404c00 <memmove+0xbc>
  404b72:	f100 0410 	add.w	r4, r0, #16
  404b76:	f101 0310 	add.w	r3, r1, #16
  404b7a:	4615      	mov	r5, r2
  404b7c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404b80:	f844 6c10 	str.w	r6, [r4, #-16]
  404b84:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404b88:	f844 6c0c 	str.w	r6, [r4, #-12]
  404b8c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404b90:	f844 6c08 	str.w	r6, [r4, #-8]
  404b94:	3d10      	subs	r5, #16
  404b96:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404b9a:	f844 6c04 	str.w	r6, [r4, #-4]
  404b9e:	2d0f      	cmp	r5, #15
  404ba0:	f103 0310 	add.w	r3, r3, #16
  404ba4:	f104 0410 	add.w	r4, r4, #16
  404ba8:	d8e8      	bhi.n	404b7c <memmove+0x38>
  404baa:	f1a2 0310 	sub.w	r3, r2, #16
  404bae:	f023 030f 	bic.w	r3, r3, #15
  404bb2:	f002 0e0f 	and.w	lr, r2, #15
  404bb6:	3310      	adds	r3, #16
  404bb8:	f1be 0f03 	cmp.w	lr, #3
  404bbc:	4419      	add	r1, r3
  404bbe:	4403      	add	r3, r0
  404bc0:	d921      	bls.n	404c06 <memmove+0xc2>
  404bc2:	1f1e      	subs	r6, r3, #4
  404bc4:	460d      	mov	r5, r1
  404bc6:	4674      	mov	r4, lr
  404bc8:	3c04      	subs	r4, #4
  404bca:	f855 7b04 	ldr.w	r7, [r5], #4
  404bce:	f846 7f04 	str.w	r7, [r6, #4]!
  404bd2:	2c03      	cmp	r4, #3
  404bd4:	d8f8      	bhi.n	404bc8 <memmove+0x84>
  404bd6:	f1ae 0404 	sub.w	r4, lr, #4
  404bda:	f024 0403 	bic.w	r4, r4, #3
  404bde:	3404      	adds	r4, #4
  404be0:	4421      	add	r1, r4
  404be2:	4423      	add	r3, r4
  404be4:	f002 0203 	and.w	r2, r2, #3
  404be8:	b162      	cbz	r2, 404c04 <memmove+0xc0>
  404bea:	3b01      	subs	r3, #1
  404bec:	440a      	add	r2, r1
  404bee:	f811 4b01 	ldrb.w	r4, [r1], #1
  404bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
  404bf6:	428a      	cmp	r2, r1
  404bf8:	d1f9      	bne.n	404bee <memmove+0xaa>
  404bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404bfc:	4603      	mov	r3, r0
  404bfe:	e7f3      	b.n	404be8 <memmove+0xa4>
  404c00:	4603      	mov	r3, r0
  404c02:	e7f2      	b.n	404bea <memmove+0xa6>
  404c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c06:	4672      	mov	r2, lr
  404c08:	e7ee      	b.n	404be8 <memmove+0xa4>
  404c0a:	bf00      	nop

00404c0c <_realloc_r>:
  404c0c:	2900      	cmp	r1, #0
  404c0e:	f000 8095 	beq.w	404d3c <_realloc_r+0x130>
  404c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c16:	460d      	mov	r5, r1
  404c18:	4616      	mov	r6, r2
  404c1a:	b083      	sub	sp, #12
  404c1c:	4680      	mov	r8, r0
  404c1e:	f106 070b 	add.w	r7, r6, #11
  404c22:	f7fe f8a5 	bl	402d70 <__malloc_lock>
  404c26:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404c2a:	2f16      	cmp	r7, #22
  404c2c:	f02e 0403 	bic.w	r4, lr, #3
  404c30:	f1a5 0908 	sub.w	r9, r5, #8
  404c34:	d83c      	bhi.n	404cb0 <_realloc_r+0xa4>
  404c36:	2210      	movs	r2, #16
  404c38:	4617      	mov	r7, r2
  404c3a:	42be      	cmp	r6, r7
  404c3c:	d83d      	bhi.n	404cba <_realloc_r+0xae>
  404c3e:	4294      	cmp	r4, r2
  404c40:	da43      	bge.n	404cca <_realloc_r+0xbe>
  404c42:	4bc4      	ldr	r3, [pc, #784]	; (404f54 <_realloc_r+0x348>)
  404c44:	6899      	ldr	r1, [r3, #8]
  404c46:	eb09 0004 	add.w	r0, r9, r4
  404c4a:	4288      	cmp	r0, r1
  404c4c:	f000 80b4 	beq.w	404db8 <_realloc_r+0x1ac>
  404c50:	6843      	ldr	r3, [r0, #4]
  404c52:	f023 0101 	bic.w	r1, r3, #1
  404c56:	4401      	add	r1, r0
  404c58:	6849      	ldr	r1, [r1, #4]
  404c5a:	07c9      	lsls	r1, r1, #31
  404c5c:	d54c      	bpl.n	404cf8 <_realloc_r+0xec>
  404c5e:	f01e 0f01 	tst.w	lr, #1
  404c62:	f000 809b 	beq.w	404d9c <_realloc_r+0x190>
  404c66:	4631      	mov	r1, r6
  404c68:	4640      	mov	r0, r8
  404c6a:	f7fd fd83 	bl	402774 <_malloc_r>
  404c6e:	4606      	mov	r6, r0
  404c70:	2800      	cmp	r0, #0
  404c72:	d03a      	beq.n	404cea <_realloc_r+0xde>
  404c74:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404c78:	f023 0301 	bic.w	r3, r3, #1
  404c7c:	444b      	add	r3, r9
  404c7e:	f1a0 0208 	sub.w	r2, r0, #8
  404c82:	429a      	cmp	r2, r3
  404c84:	f000 8121 	beq.w	404eca <_realloc_r+0x2be>
  404c88:	1f22      	subs	r2, r4, #4
  404c8a:	2a24      	cmp	r2, #36	; 0x24
  404c8c:	f200 8107 	bhi.w	404e9e <_realloc_r+0x292>
  404c90:	2a13      	cmp	r2, #19
  404c92:	f200 80db 	bhi.w	404e4c <_realloc_r+0x240>
  404c96:	4603      	mov	r3, r0
  404c98:	462a      	mov	r2, r5
  404c9a:	6811      	ldr	r1, [r2, #0]
  404c9c:	6019      	str	r1, [r3, #0]
  404c9e:	6851      	ldr	r1, [r2, #4]
  404ca0:	6059      	str	r1, [r3, #4]
  404ca2:	6892      	ldr	r2, [r2, #8]
  404ca4:	609a      	str	r2, [r3, #8]
  404ca6:	4629      	mov	r1, r5
  404ca8:	4640      	mov	r0, r8
  404caa:	f7ff fb33 	bl	404314 <_free_r>
  404cae:	e01c      	b.n	404cea <_realloc_r+0xde>
  404cb0:	f027 0707 	bic.w	r7, r7, #7
  404cb4:	2f00      	cmp	r7, #0
  404cb6:	463a      	mov	r2, r7
  404cb8:	dabf      	bge.n	404c3a <_realloc_r+0x2e>
  404cba:	2600      	movs	r6, #0
  404cbc:	230c      	movs	r3, #12
  404cbe:	4630      	mov	r0, r6
  404cc0:	f8c8 3000 	str.w	r3, [r8]
  404cc4:	b003      	add	sp, #12
  404cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cca:	462e      	mov	r6, r5
  404ccc:	1be3      	subs	r3, r4, r7
  404cce:	2b0f      	cmp	r3, #15
  404cd0:	d81e      	bhi.n	404d10 <_realloc_r+0x104>
  404cd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404cd6:	f003 0301 	and.w	r3, r3, #1
  404cda:	4323      	orrs	r3, r4
  404cdc:	444c      	add	r4, r9
  404cde:	f8c9 3004 	str.w	r3, [r9, #4]
  404ce2:	6863      	ldr	r3, [r4, #4]
  404ce4:	f043 0301 	orr.w	r3, r3, #1
  404ce8:	6063      	str	r3, [r4, #4]
  404cea:	4640      	mov	r0, r8
  404cec:	f7fe f846 	bl	402d7c <__malloc_unlock>
  404cf0:	4630      	mov	r0, r6
  404cf2:	b003      	add	sp, #12
  404cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cf8:	f023 0303 	bic.w	r3, r3, #3
  404cfc:	18e1      	adds	r1, r4, r3
  404cfe:	4291      	cmp	r1, r2
  404d00:	db1f      	blt.n	404d42 <_realloc_r+0x136>
  404d02:	68c3      	ldr	r3, [r0, #12]
  404d04:	6882      	ldr	r2, [r0, #8]
  404d06:	462e      	mov	r6, r5
  404d08:	60d3      	str	r3, [r2, #12]
  404d0a:	460c      	mov	r4, r1
  404d0c:	609a      	str	r2, [r3, #8]
  404d0e:	e7dd      	b.n	404ccc <_realloc_r+0xc0>
  404d10:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404d14:	eb09 0107 	add.w	r1, r9, r7
  404d18:	f002 0201 	and.w	r2, r2, #1
  404d1c:	444c      	add	r4, r9
  404d1e:	f043 0301 	orr.w	r3, r3, #1
  404d22:	4317      	orrs	r7, r2
  404d24:	f8c9 7004 	str.w	r7, [r9, #4]
  404d28:	604b      	str	r3, [r1, #4]
  404d2a:	6863      	ldr	r3, [r4, #4]
  404d2c:	f043 0301 	orr.w	r3, r3, #1
  404d30:	3108      	adds	r1, #8
  404d32:	6063      	str	r3, [r4, #4]
  404d34:	4640      	mov	r0, r8
  404d36:	f7ff faed 	bl	404314 <_free_r>
  404d3a:	e7d6      	b.n	404cea <_realloc_r+0xde>
  404d3c:	4611      	mov	r1, r2
  404d3e:	f7fd bd19 	b.w	402774 <_malloc_r>
  404d42:	f01e 0f01 	tst.w	lr, #1
  404d46:	d18e      	bne.n	404c66 <_realloc_r+0x5a>
  404d48:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404d4c:	eba9 0a01 	sub.w	sl, r9, r1
  404d50:	f8da 1004 	ldr.w	r1, [sl, #4]
  404d54:	f021 0103 	bic.w	r1, r1, #3
  404d58:	440b      	add	r3, r1
  404d5a:	4423      	add	r3, r4
  404d5c:	4293      	cmp	r3, r2
  404d5e:	db25      	blt.n	404dac <_realloc_r+0x1a0>
  404d60:	68c2      	ldr	r2, [r0, #12]
  404d62:	6881      	ldr	r1, [r0, #8]
  404d64:	4656      	mov	r6, sl
  404d66:	60ca      	str	r2, [r1, #12]
  404d68:	6091      	str	r1, [r2, #8]
  404d6a:	f8da 100c 	ldr.w	r1, [sl, #12]
  404d6e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404d72:	1f22      	subs	r2, r4, #4
  404d74:	2a24      	cmp	r2, #36	; 0x24
  404d76:	60c1      	str	r1, [r0, #12]
  404d78:	6088      	str	r0, [r1, #8]
  404d7a:	f200 8094 	bhi.w	404ea6 <_realloc_r+0x29a>
  404d7e:	2a13      	cmp	r2, #19
  404d80:	d96f      	bls.n	404e62 <_realloc_r+0x256>
  404d82:	6829      	ldr	r1, [r5, #0]
  404d84:	f8ca 1008 	str.w	r1, [sl, #8]
  404d88:	6869      	ldr	r1, [r5, #4]
  404d8a:	f8ca 100c 	str.w	r1, [sl, #12]
  404d8e:	2a1b      	cmp	r2, #27
  404d90:	f200 80a2 	bhi.w	404ed8 <_realloc_r+0x2cc>
  404d94:	3508      	adds	r5, #8
  404d96:	f10a 0210 	add.w	r2, sl, #16
  404d9a:	e063      	b.n	404e64 <_realloc_r+0x258>
  404d9c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404da0:	eba9 0a03 	sub.w	sl, r9, r3
  404da4:	f8da 1004 	ldr.w	r1, [sl, #4]
  404da8:	f021 0103 	bic.w	r1, r1, #3
  404dac:	1863      	adds	r3, r4, r1
  404dae:	4293      	cmp	r3, r2
  404db0:	f6ff af59 	blt.w	404c66 <_realloc_r+0x5a>
  404db4:	4656      	mov	r6, sl
  404db6:	e7d8      	b.n	404d6a <_realloc_r+0x15e>
  404db8:	6841      	ldr	r1, [r0, #4]
  404dba:	f021 0b03 	bic.w	fp, r1, #3
  404dbe:	44a3      	add	fp, r4
  404dc0:	f107 0010 	add.w	r0, r7, #16
  404dc4:	4583      	cmp	fp, r0
  404dc6:	da56      	bge.n	404e76 <_realloc_r+0x26a>
  404dc8:	f01e 0f01 	tst.w	lr, #1
  404dcc:	f47f af4b 	bne.w	404c66 <_realloc_r+0x5a>
  404dd0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404dd4:	eba9 0a01 	sub.w	sl, r9, r1
  404dd8:	f8da 1004 	ldr.w	r1, [sl, #4]
  404ddc:	f021 0103 	bic.w	r1, r1, #3
  404de0:	448b      	add	fp, r1
  404de2:	4558      	cmp	r0, fp
  404de4:	dce2      	bgt.n	404dac <_realloc_r+0x1a0>
  404de6:	4656      	mov	r6, sl
  404de8:	f8da 100c 	ldr.w	r1, [sl, #12]
  404dec:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404df0:	1f22      	subs	r2, r4, #4
  404df2:	2a24      	cmp	r2, #36	; 0x24
  404df4:	60c1      	str	r1, [r0, #12]
  404df6:	6088      	str	r0, [r1, #8]
  404df8:	f200 808f 	bhi.w	404f1a <_realloc_r+0x30e>
  404dfc:	2a13      	cmp	r2, #19
  404dfe:	f240 808a 	bls.w	404f16 <_realloc_r+0x30a>
  404e02:	6829      	ldr	r1, [r5, #0]
  404e04:	f8ca 1008 	str.w	r1, [sl, #8]
  404e08:	6869      	ldr	r1, [r5, #4]
  404e0a:	f8ca 100c 	str.w	r1, [sl, #12]
  404e0e:	2a1b      	cmp	r2, #27
  404e10:	f200 808a 	bhi.w	404f28 <_realloc_r+0x31c>
  404e14:	3508      	adds	r5, #8
  404e16:	f10a 0210 	add.w	r2, sl, #16
  404e1a:	6829      	ldr	r1, [r5, #0]
  404e1c:	6011      	str	r1, [r2, #0]
  404e1e:	6869      	ldr	r1, [r5, #4]
  404e20:	6051      	str	r1, [r2, #4]
  404e22:	68a9      	ldr	r1, [r5, #8]
  404e24:	6091      	str	r1, [r2, #8]
  404e26:	eb0a 0107 	add.w	r1, sl, r7
  404e2a:	ebab 0207 	sub.w	r2, fp, r7
  404e2e:	f042 0201 	orr.w	r2, r2, #1
  404e32:	6099      	str	r1, [r3, #8]
  404e34:	604a      	str	r2, [r1, #4]
  404e36:	f8da 3004 	ldr.w	r3, [sl, #4]
  404e3a:	f003 0301 	and.w	r3, r3, #1
  404e3e:	431f      	orrs	r7, r3
  404e40:	4640      	mov	r0, r8
  404e42:	f8ca 7004 	str.w	r7, [sl, #4]
  404e46:	f7fd ff99 	bl	402d7c <__malloc_unlock>
  404e4a:	e751      	b.n	404cf0 <_realloc_r+0xe4>
  404e4c:	682b      	ldr	r3, [r5, #0]
  404e4e:	6003      	str	r3, [r0, #0]
  404e50:	686b      	ldr	r3, [r5, #4]
  404e52:	6043      	str	r3, [r0, #4]
  404e54:	2a1b      	cmp	r2, #27
  404e56:	d82d      	bhi.n	404eb4 <_realloc_r+0x2a8>
  404e58:	f100 0308 	add.w	r3, r0, #8
  404e5c:	f105 0208 	add.w	r2, r5, #8
  404e60:	e71b      	b.n	404c9a <_realloc_r+0x8e>
  404e62:	4632      	mov	r2, r6
  404e64:	6829      	ldr	r1, [r5, #0]
  404e66:	6011      	str	r1, [r2, #0]
  404e68:	6869      	ldr	r1, [r5, #4]
  404e6a:	6051      	str	r1, [r2, #4]
  404e6c:	68a9      	ldr	r1, [r5, #8]
  404e6e:	6091      	str	r1, [r2, #8]
  404e70:	461c      	mov	r4, r3
  404e72:	46d1      	mov	r9, sl
  404e74:	e72a      	b.n	404ccc <_realloc_r+0xc0>
  404e76:	eb09 0107 	add.w	r1, r9, r7
  404e7a:	ebab 0b07 	sub.w	fp, fp, r7
  404e7e:	f04b 0201 	orr.w	r2, fp, #1
  404e82:	6099      	str	r1, [r3, #8]
  404e84:	604a      	str	r2, [r1, #4]
  404e86:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404e8a:	f003 0301 	and.w	r3, r3, #1
  404e8e:	431f      	orrs	r7, r3
  404e90:	4640      	mov	r0, r8
  404e92:	f845 7c04 	str.w	r7, [r5, #-4]
  404e96:	f7fd ff71 	bl	402d7c <__malloc_unlock>
  404e9a:	462e      	mov	r6, r5
  404e9c:	e728      	b.n	404cf0 <_realloc_r+0xe4>
  404e9e:	4629      	mov	r1, r5
  404ea0:	f7ff fe50 	bl	404b44 <memmove>
  404ea4:	e6ff      	b.n	404ca6 <_realloc_r+0x9a>
  404ea6:	4629      	mov	r1, r5
  404ea8:	4630      	mov	r0, r6
  404eaa:	461c      	mov	r4, r3
  404eac:	46d1      	mov	r9, sl
  404eae:	f7ff fe49 	bl	404b44 <memmove>
  404eb2:	e70b      	b.n	404ccc <_realloc_r+0xc0>
  404eb4:	68ab      	ldr	r3, [r5, #8]
  404eb6:	6083      	str	r3, [r0, #8]
  404eb8:	68eb      	ldr	r3, [r5, #12]
  404eba:	60c3      	str	r3, [r0, #12]
  404ebc:	2a24      	cmp	r2, #36	; 0x24
  404ebe:	d017      	beq.n	404ef0 <_realloc_r+0x2e4>
  404ec0:	f100 0310 	add.w	r3, r0, #16
  404ec4:	f105 0210 	add.w	r2, r5, #16
  404ec8:	e6e7      	b.n	404c9a <_realloc_r+0x8e>
  404eca:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404ece:	f023 0303 	bic.w	r3, r3, #3
  404ed2:	441c      	add	r4, r3
  404ed4:	462e      	mov	r6, r5
  404ed6:	e6f9      	b.n	404ccc <_realloc_r+0xc0>
  404ed8:	68a9      	ldr	r1, [r5, #8]
  404eda:	f8ca 1010 	str.w	r1, [sl, #16]
  404ede:	68e9      	ldr	r1, [r5, #12]
  404ee0:	f8ca 1014 	str.w	r1, [sl, #20]
  404ee4:	2a24      	cmp	r2, #36	; 0x24
  404ee6:	d00c      	beq.n	404f02 <_realloc_r+0x2f6>
  404ee8:	3510      	adds	r5, #16
  404eea:	f10a 0218 	add.w	r2, sl, #24
  404eee:	e7b9      	b.n	404e64 <_realloc_r+0x258>
  404ef0:	692b      	ldr	r3, [r5, #16]
  404ef2:	6103      	str	r3, [r0, #16]
  404ef4:	696b      	ldr	r3, [r5, #20]
  404ef6:	6143      	str	r3, [r0, #20]
  404ef8:	f105 0218 	add.w	r2, r5, #24
  404efc:	f100 0318 	add.w	r3, r0, #24
  404f00:	e6cb      	b.n	404c9a <_realloc_r+0x8e>
  404f02:	692a      	ldr	r2, [r5, #16]
  404f04:	f8ca 2018 	str.w	r2, [sl, #24]
  404f08:	696a      	ldr	r2, [r5, #20]
  404f0a:	f8ca 201c 	str.w	r2, [sl, #28]
  404f0e:	3518      	adds	r5, #24
  404f10:	f10a 0220 	add.w	r2, sl, #32
  404f14:	e7a6      	b.n	404e64 <_realloc_r+0x258>
  404f16:	4632      	mov	r2, r6
  404f18:	e77f      	b.n	404e1a <_realloc_r+0x20e>
  404f1a:	4629      	mov	r1, r5
  404f1c:	4630      	mov	r0, r6
  404f1e:	9301      	str	r3, [sp, #4]
  404f20:	f7ff fe10 	bl	404b44 <memmove>
  404f24:	9b01      	ldr	r3, [sp, #4]
  404f26:	e77e      	b.n	404e26 <_realloc_r+0x21a>
  404f28:	68a9      	ldr	r1, [r5, #8]
  404f2a:	f8ca 1010 	str.w	r1, [sl, #16]
  404f2e:	68e9      	ldr	r1, [r5, #12]
  404f30:	f8ca 1014 	str.w	r1, [sl, #20]
  404f34:	2a24      	cmp	r2, #36	; 0x24
  404f36:	d003      	beq.n	404f40 <_realloc_r+0x334>
  404f38:	3510      	adds	r5, #16
  404f3a:	f10a 0218 	add.w	r2, sl, #24
  404f3e:	e76c      	b.n	404e1a <_realloc_r+0x20e>
  404f40:	692a      	ldr	r2, [r5, #16]
  404f42:	f8ca 2018 	str.w	r2, [sl, #24]
  404f46:	696a      	ldr	r2, [r5, #20]
  404f48:	f8ca 201c 	str.w	r2, [sl, #28]
  404f4c:	3518      	adds	r5, #24
  404f4e:	f10a 0220 	add.w	r2, sl, #32
  404f52:	e762      	b.n	404e1a <_realloc_r+0x20e>
  404f54:	20000440 	.word	0x20000440

00404f58 <__sread>:
  404f58:	b510      	push	{r4, lr}
  404f5a:	460c      	mov	r4, r1
  404f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f60:	f000 f9f6 	bl	405350 <_read_r>
  404f64:	2800      	cmp	r0, #0
  404f66:	db03      	blt.n	404f70 <__sread+0x18>
  404f68:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404f6a:	4403      	add	r3, r0
  404f6c:	6523      	str	r3, [r4, #80]	; 0x50
  404f6e:	bd10      	pop	{r4, pc}
  404f70:	89a3      	ldrh	r3, [r4, #12]
  404f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404f76:	81a3      	strh	r3, [r4, #12]
  404f78:	bd10      	pop	{r4, pc}
  404f7a:	bf00      	nop

00404f7c <__swrite>:
  404f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f80:	4616      	mov	r6, r2
  404f82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404f86:	461f      	mov	r7, r3
  404f88:	05d3      	lsls	r3, r2, #23
  404f8a:	460c      	mov	r4, r1
  404f8c:	4605      	mov	r5, r0
  404f8e:	d507      	bpl.n	404fa0 <__swrite+0x24>
  404f90:	2200      	movs	r2, #0
  404f92:	2302      	movs	r3, #2
  404f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f98:	f000 f9c4 	bl	405324 <_lseek_r>
  404f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404fa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404fa8:	81a2      	strh	r2, [r4, #12]
  404faa:	463b      	mov	r3, r7
  404fac:	4632      	mov	r2, r6
  404fae:	4628      	mov	r0, r5
  404fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404fb4:	f000 b8a4 	b.w	405100 <_write_r>

00404fb8 <__sseek>:
  404fb8:	b510      	push	{r4, lr}
  404fba:	460c      	mov	r4, r1
  404fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fc0:	f000 f9b0 	bl	405324 <_lseek_r>
  404fc4:	89a3      	ldrh	r3, [r4, #12]
  404fc6:	1c42      	adds	r2, r0, #1
  404fc8:	bf0e      	itee	eq
  404fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404fd2:	6520      	strne	r0, [r4, #80]	; 0x50
  404fd4:	81a3      	strh	r3, [r4, #12]
  404fd6:	bd10      	pop	{r4, pc}

00404fd8 <__sclose>:
  404fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fdc:	f000 b908 	b.w	4051f0 <_close_r>

00404fe0 <__swbuf_r>:
  404fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fe2:	460d      	mov	r5, r1
  404fe4:	4614      	mov	r4, r2
  404fe6:	4606      	mov	r6, r0
  404fe8:	b110      	cbz	r0, 404ff0 <__swbuf_r+0x10>
  404fea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404fec:	2b00      	cmp	r3, #0
  404fee:	d04b      	beq.n	405088 <__swbuf_r+0xa8>
  404ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404ff4:	69a3      	ldr	r3, [r4, #24]
  404ff6:	60a3      	str	r3, [r4, #8]
  404ff8:	b291      	uxth	r1, r2
  404ffa:	0708      	lsls	r0, r1, #28
  404ffc:	d539      	bpl.n	405072 <__swbuf_r+0x92>
  404ffe:	6923      	ldr	r3, [r4, #16]
  405000:	2b00      	cmp	r3, #0
  405002:	d036      	beq.n	405072 <__swbuf_r+0x92>
  405004:	b2ed      	uxtb	r5, r5
  405006:	0489      	lsls	r1, r1, #18
  405008:	462f      	mov	r7, r5
  40500a:	d515      	bpl.n	405038 <__swbuf_r+0x58>
  40500c:	6822      	ldr	r2, [r4, #0]
  40500e:	6961      	ldr	r1, [r4, #20]
  405010:	1ad3      	subs	r3, r2, r3
  405012:	428b      	cmp	r3, r1
  405014:	da1c      	bge.n	405050 <__swbuf_r+0x70>
  405016:	3301      	adds	r3, #1
  405018:	68a1      	ldr	r1, [r4, #8]
  40501a:	1c50      	adds	r0, r2, #1
  40501c:	3901      	subs	r1, #1
  40501e:	60a1      	str	r1, [r4, #8]
  405020:	6020      	str	r0, [r4, #0]
  405022:	7015      	strb	r5, [r2, #0]
  405024:	6962      	ldr	r2, [r4, #20]
  405026:	429a      	cmp	r2, r3
  405028:	d01a      	beq.n	405060 <__swbuf_r+0x80>
  40502a:	89a3      	ldrh	r3, [r4, #12]
  40502c:	07db      	lsls	r3, r3, #31
  40502e:	d501      	bpl.n	405034 <__swbuf_r+0x54>
  405030:	2d0a      	cmp	r5, #10
  405032:	d015      	beq.n	405060 <__swbuf_r+0x80>
  405034:	4638      	mov	r0, r7
  405036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405038:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40503a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40503e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405042:	81a2      	strh	r2, [r4, #12]
  405044:	6822      	ldr	r2, [r4, #0]
  405046:	6661      	str	r1, [r4, #100]	; 0x64
  405048:	6961      	ldr	r1, [r4, #20]
  40504a:	1ad3      	subs	r3, r2, r3
  40504c:	428b      	cmp	r3, r1
  40504e:	dbe2      	blt.n	405016 <__swbuf_r+0x36>
  405050:	4621      	mov	r1, r4
  405052:	4630      	mov	r0, r6
  405054:	f7fe ffe0 	bl	404018 <_fflush_r>
  405058:	b940      	cbnz	r0, 40506c <__swbuf_r+0x8c>
  40505a:	6822      	ldr	r2, [r4, #0]
  40505c:	2301      	movs	r3, #1
  40505e:	e7db      	b.n	405018 <__swbuf_r+0x38>
  405060:	4621      	mov	r1, r4
  405062:	4630      	mov	r0, r6
  405064:	f7fe ffd8 	bl	404018 <_fflush_r>
  405068:	2800      	cmp	r0, #0
  40506a:	d0e3      	beq.n	405034 <__swbuf_r+0x54>
  40506c:	f04f 37ff 	mov.w	r7, #4294967295
  405070:	e7e0      	b.n	405034 <__swbuf_r+0x54>
  405072:	4621      	mov	r1, r4
  405074:	4630      	mov	r0, r6
  405076:	f7fe febb 	bl	403df0 <__swsetup_r>
  40507a:	2800      	cmp	r0, #0
  40507c:	d1f6      	bne.n	40506c <__swbuf_r+0x8c>
  40507e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405082:	6923      	ldr	r3, [r4, #16]
  405084:	b291      	uxth	r1, r2
  405086:	e7bd      	b.n	405004 <__swbuf_r+0x24>
  405088:	f7ff f81e 	bl	4040c8 <__sinit>
  40508c:	e7b0      	b.n	404ff0 <__swbuf_r+0x10>
  40508e:	bf00      	nop

00405090 <_wcrtomb_r>:
  405090:	b5f0      	push	{r4, r5, r6, r7, lr}
  405092:	4606      	mov	r6, r0
  405094:	b085      	sub	sp, #20
  405096:	461f      	mov	r7, r3
  405098:	b189      	cbz	r1, 4050be <_wcrtomb_r+0x2e>
  40509a:	4c10      	ldr	r4, [pc, #64]	; (4050dc <_wcrtomb_r+0x4c>)
  40509c:	4d10      	ldr	r5, [pc, #64]	; (4050e0 <_wcrtomb_r+0x50>)
  40509e:	6824      	ldr	r4, [r4, #0]
  4050a0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4050a2:	2c00      	cmp	r4, #0
  4050a4:	bf08      	it	eq
  4050a6:	462c      	moveq	r4, r5
  4050a8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4050ac:	47a0      	blx	r4
  4050ae:	1c43      	adds	r3, r0, #1
  4050b0:	d103      	bne.n	4050ba <_wcrtomb_r+0x2a>
  4050b2:	2200      	movs	r2, #0
  4050b4:	238a      	movs	r3, #138	; 0x8a
  4050b6:	603a      	str	r2, [r7, #0]
  4050b8:	6033      	str	r3, [r6, #0]
  4050ba:	b005      	add	sp, #20
  4050bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050be:	460c      	mov	r4, r1
  4050c0:	4906      	ldr	r1, [pc, #24]	; (4050dc <_wcrtomb_r+0x4c>)
  4050c2:	4a07      	ldr	r2, [pc, #28]	; (4050e0 <_wcrtomb_r+0x50>)
  4050c4:	6809      	ldr	r1, [r1, #0]
  4050c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4050c8:	2900      	cmp	r1, #0
  4050ca:	bf08      	it	eq
  4050cc:	4611      	moveq	r1, r2
  4050ce:	4622      	mov	r2, r4
  4050d0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4050d4:	a901      	add	r1, sp, #4
  4050d6:	47a0      	blx	r4
  4050d8:	e7e9      	b.n	4050ae <_wcrtomb_r+0x1e>
  4050da:	bf00      	nop
  4050dc:	20000010 	.word	0x20000010
  4050e0:	20000854 	.word	0x20000854

004050e4 <__ascii_wctomb>:
  4050e4:	b121      	cbz	r1, 4050f0 <__ascii_wctomb+0xc>
  4050e6:	2aff      	cmp	r2, #255	; 0xff
  4050e8:	d804      	bhi.n	4050f4 <__ascii_wctomb+0x10>
  4050ea:	700a      	strb	r2, [r1, #0]
  4050ec:	2001      	movs	r0, #1
  4050ee:	4770      	bx	lr
  4050f0:	4608      	mov	r0, r1
  4050f2:	4770      	bx	lr
  4050f4:	238a      	movs	r3, #138	; 0x8a
  4050f6:	6003      	str	r3, [r0, #0]
  4050f8:	f04f 30ff 	mov.w	r0, #4294967295
  4050fc:	4770      	bx	lr
  4050fe:	bf00      	nop

00405100 <_write_r>:
  405100:	b570      	push	{r4, r5, r6, lr}
  405102:	460d      	mov	r5, r1
  405104:	4c08      	ldr	r4, [pc, #32]	; (405128 <_write_r+0x28>)
  405106:	4611      	mov	r1, r2
  405108:	4606      	mov	r6, r0
  40510a:	461a      	mov	r2, r3
  40510c:	4628      	mov	r0, r5
  40510e:	2300      	movs	r3, #0
  405110:	6023      	str	r3, [r4, #0]
  405112:	f7fb fefb 	bl	400f0c <_write>
  405116:	1c43      	adds	r3, r0, #1
  405118:	d000      	beq.n	40511c <_write_r+0x1c>
  40511a:	bd70      	pop	{r4, r5, r6, pc}
  40511c:	6823      	ldr	r3, [r4, #0]
  40511e:	2b00      	cmp	r3, #0
  405120:	d0fb      	beq.n	40511a <_write_r+0x1a>
  405122:	6033      	str	r3, [r6, #0]
  405124:	bd70      	pop	{r4, r5, r6, pc}
  405126:	bf00      	nop
  405128:	20000ed4 	.word	0x20000ed4

0040512c <__register_exitproc>:
  40512c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405130:	4d2c      	ldr	r5, [pc, #176]	; (4051e4 <__register_exitproc+0xb8>)
  405132:	4606      	mov	r6, r0
  405134:	6828      	ldr	r0, [r5, #0]
  405136:	4698      	mov	r8, r3
  405138:	460f      	mov	r7, r1
  40513a:	4691      	mov	r9, r2
  40513c:	f7ff fb84 	bl	404848 <__retarget_lock_acquire_recursive>
  405140:	4b29      	ldr	r3, [pc, #164]	; (4051e8 <__register_exitproc+0xbc>)
  405142:	681c      	ldr	r4, [r3, #0]
  405144:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405148:	2b00      	cmp	r3, #0
  40514a:	d03e      	beq.n	4051ca <__register_exitproc+0x9e>
  40514c:	685a      	ldr	r2, [r3, #4]
  40514e:	2a1f      	cmp	r2, #31
  405150:	dc1c      	bgt.n	40518c <__register_exitproc+0x60>
  405152:	f102 0e01 	add.w	lr, r2, #1
  405156:	b176      	cbz	r6, 405176 <__register_exitproc+0x4a>
  405158:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40515c:	2401      	movs	r4, #1
  40515e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405162:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405166:	4094      	lsls	r4, r2
  405168:	4320      	orrs	r0, r4
  40516a:	2e02      	cmp	r6, #2
  40516c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405170:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405174:	d023      	beq.n	4051be <__register_exitproc+0x92>
  405176:	3202      	adds	r2, #2
  405178:	f8c3 e004 	str.w	lr, [r3, #4]
  40517c:	6828      	ldr	r0, [r5, #0]
  40517e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405182:	f7ff fb63 	bl	40484c <__retarget_lock_release_recursive>
  405186:	2000      	movs	r0, #0
  405188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40518c:	4b17      	ldr	r3, [pc, #92]	; (4051ec <__register_exitproc+0xc0>)
  40518e:	b30b      	cbz	r3, 4051d4 <__register_exitproc+0xa8>
  405190:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405194:	f7fd fae6 	bl	402764 <malloc>
  405198:	4603      	mov	r3, r0
  40519a:	b1d8      	cbz	r0, 4051d4 <__register_exitproc+0xa8>
  40519c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4051a0:	6002      	str	r2, [r0, #0]
  4051a2:	2100      	movs	r1, #0
  4051a4:	6041      	str	r1, [r0, #4]
  4051a6:	460a      	mov	r2, r1
  4051a8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4051ac:	f04f 0e01 	mov.w	lr, #1
  4051b0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4051b4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4051b8:	2e00      	cmp	r6, #0
  4051ba:	d0dc      	beq.n	405176 <__register_exitproc+0x4a>
  4051bc:	e7cc      	b.n	405158 <__register_exitproc+0x2c>
  4051be:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4051c2:	430c      	orrs	r4, r1
  4051c4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4051c8:	e7d5      	b.n	405176 <__register_exitproc+0x4a>
  4051ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4051ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4051d2:	e7bb      	b.n	40514c <__register_exitproc+0x20>
  4051d4:	6828      	ldr	r0, [r5, #0]
  4051d6:	f7ff fb39 	bl	40484c <__retarget_lock_release_recursive>
  4051da:	f04f 30ff 	mov.w	r0, #4294967295
  4051de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4051e2:	bf00      	nop
  4051e4:	20000850 	.word	0x20000850
  4051e8:	004054a8 	.word	0x004054a8
  4051ec:	00402765 	.word	0x00402765

004051f0 <_close_r>:
  4051f0:	b538      	push	{r3, r4, r5, lr}
  4051f2:	4c07      	ldr	r4, [pc, #28]	; (405210 <_close_r+0x20>)
  4051f4:	2300      	movs	r3, #0
  4051f6:	4605      	mov	r5, r0
  4051f8:	4608      	mov	r0, r1
  4051fa:	6023      	str	r3, [r4, #0]
  4051fc:	f7fd f892 	bl	402324 <_close>
  405200:	1c43      	adds	r3, r0, #1
  405202:	d000      	beq.n	405206 <_close_r+0x16>
  405204:	bd38      	pop	{r3, r4, r5, pc}
  405206:	6823      	ldr	r3, [r4, #0]
  405208:	2b00      	cmp	r3, #0
  40520a:	d0fb      	beq.n	405204 <_close_r+0x14>
  40520c:	602b      	str	r3, [r5, #0]
  40520e:	bd38      	pop	{r3, r4, r5, pc}
  405210:	20000ed4 	.word	0x20000ed4

00405214 <_fclose_r>:
  405214:	b570      	push	{r4, r5, r6, lr}
  405216:	b159      	cbz	r1, 405230 <_fclose_r+0x1c>
  405218:	4605      	mov	r5, r0
  40521a:	460c      	mov	r4, r1
  40521c:	b110      	cbz	r0, 405224 <_fclose_r+0x10>
  40521e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405220:	2b00      	cmp	r3, #0
  405222:	d03c      	beq.n	40529e <_fclose_r+0x8a>
  405224:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405226:	07d8      	lsls	r0, r3, #31
  405228:	d505      	bpl.n	405236 <_fclose_r+0x22>
  40522a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40522e:	b92b      	cbnz	r3, 40523c <_fclose_r+0x28>
  405230:	2600      	movs	r6, #0
  405232:	4630      	mov	r0, r6
  405234:	bd70      	pop	{r4, r5, r6, pc}
  405236:	89a3      	ldrh	r3, [r4, #12]
  405238:	0599      	lsls	r1, r3, #22
  40523a:	d53c      	bpl.n	4052b6 <_fclose_r+0xa2>
  40523c:	4621      	mov	r1, r4
  40523e:	4628      	mov	r0, r5
  405240:	f7fe fe4a 	bl	403ed8 <__sflush_r>
  405244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405246:	4606      	mov	r6, r0
  405248:	b133      	cbz	r3, 405258 <_fclose_r+0x44>
  40524a:	69e1      	ldr	r1, [r4, #28]
  40524c:	4628      	mov	r0, r5
  40524e:	4798      	blx	r3
  405250:	2800      	cmp	r0, #0
  405252:	bfb8      	it	lt
  405254:	f04f 36ff 	movlt.w	r6, #4294967295
  405258:	89a3      	ldrh	r3, [r4, #12]
  40525a:	061a      	lsls	r2, r3, #24
  40525c:	d422      	bmi.n	4052a4 <_fclose_r+0x90>
  40525e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405260:	b141      	cbz	r1, 405274 <_fclose_r+0x60>
  405262:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405266:	4299      	cmp	r1, r3
  405268:	d002      	beq.n	405270 <_fclose_r+0x5c>
  40526a:	4628      	mov	r0, r5
  40526c:	f7ff f852 	bl	404314 <_free_r>
  405270:	2300      	movs	r3, #0
  405272:	6323      	str	r3, [r4, #48]	; 0x30
  405274:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405276:	b121      	cbz	r1, 405282 <_fclose_r+0x6e>
  405278:	4628      	mov	r0, r5
  40527a:	f7ff f84b 	bl	404314 <_free_r>
  40527e:	2300      	movs	r3, #0
  405280:	6463      	str	r3, [r4, #68]	; 0x44
  405282:	f7fe ff4d 	bl	404120 <__sfp_lock_acquire>
  405286:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405288:	2200      	movs	r2, #0
  40528a:	07db      	lsls	r3, r3, #31
  40528c:	81a2      	strh	r2, [r4, #12]
  40528e:	d50e      	bpl.n	4052ae <_fclose_r+0x9a>
  405290:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405292:	f7ff fad7 	bl	404844 <__retarget_lock_close_recursive>
  405296:	f7fe ff49 	bl	40412c <__sfp_lock_release>
  40529a:	4630      	mov	r0, r6
  40529c:	bd70      	pop	{r4, r5, r6, pc}
  40529e:	f7fe ff13 	bl	4040c8 <__sinit>
  4052a2:	e7bf      	b.n	405224 <_fclose_r+0x10>
  4052a4:	6921      	ldr	r1, [r4, #16]
  4052a6:	4628      	mov	r0, r5
  4052a8:	f7ff f834 	bl	404314 <_free_r>
  4052ac:	e7d7      	b.n	40525e <_fclose_r+0x4a>
  4052ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052b0:	f7ff facc 	bl	40484c <__retarget_lock_release_recursive>
  4052b4:	e7ec      	b.n	405290 <_fclose_r+0x7c>
  4052b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052b8:	f7ff fac6 	bl	404848 <__retarget_lock_acquire_recursive>
  4052bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052c0:	2b00      	cmp	r3, #0
  4052c2:	d1bb      	bne.n	40523c <_fclose_r+0x28>
  4052c4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4052c6:	f016 0601 	ands.w	r6, r6, #1
  4052ca:	d1b1      	bne.n	405230 <_fclose_r+0x1c>
  4052cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4052ce:	f7ff fabd 	bl	40484c <__retarget_lock_release_recursive>
  4052d2:	4630      	mov	r0, r6
  4052d4:	bd70      	pop	{r4, r5, r6, pc}
  4052d6:	bf00      	nop

004052d8 <_fstat_r>:
  4052d8:	b538      	push	{r3, r4, r5, lr}
  4052da:	460b      	mov	r3, r1
  4052dc:	4c07      	ldr	r4, [pc, #28]	; (4052fc <_fstat_r+0x24>)
  4052de:	4605      	mov	r5, r0
  4052e0:	4611      	mov	r1, r2
  4052e2:	4618      	mov	r0, r3
  4052e4:	2300      	movs	r3, #0
  4052e6:	6023      	str	r3, [r4, #0]
  4052e8:	f7fd f827 	bl	40233a <_fstat>
  4052ec:	1c43      	adds	r3, r0, #1
  4052ee:	d000      	beq.n	4052f2 <_fstat_r+0x1a>
  4052f0:	bd38      	pop	{r3, r4, r5, pc}
  4052f2:	6823      	ldr	r3, [r4, #0]
  4052f4:	2b00      	cmp	r3, #0
  4052f6:	d0fb      	beq.n	4052f0 <_fstat_r+0x18>
  4052f8:	602b      	str	r3, [r5, #0]
  4052fa:	bd38      	pop	{r3, r4, r5, pc}
  4052fc:	20000ed4 	.word	0x20000ed4

00405300 <_isatty_r>:
  405300:	b538      	push	{r3, r4, r5, lr}
  405302:	4c07      	ldr	r4, [pc, #28]	; (405320 <_isatty_r+0x20>)
  405304:	2300      	movs	r3, #0
  405306:	4605      	mov	r5, r0
  405308:	4608      	mov	r0, r1
  40530a:	6023      	str	r3, [r4, #0]
  40530c:	f7fd f824 	bl	402358 <_isatty>
  405310:	1c43      	adds	r3, r0, #1
  405312:	d000      	beq.n	405316 <_isatty_r+0x16>
  405314:	bd38      	pop	{r3, r4, r5, pc}
  405316:	6823      	ldr	r3, [r4, #0]
  405318:	2b00      	cmp	r3, #0
  40531a:	d0fb      	beq.n	405314 <_isatty_r+0x14>
  40531c:	602b      	str	r3, [r5, #0]
  40531e:	bd38      	pop	{r3, r4, r5, pc}
  405320:	20000ed4 	.word	0x20000ed4

00405324 <_lseek_r>:
  405324:	b570      	push	{r4, r5, r6, lr}
  405326:	460d      	mov	r5, r1
  405328:	4c08      	ldr	r4, [pc, #32]	; (40534c <_lseek_r+0x28>)
  40532a:	4611      	mov	r1, r2
  40532c:	4606      	mov	r6, r0
  40532e:	461a      	mov	r2, r3
  405330:	4628      	mov	r0, r5
  405332:	2300      	movs	r3, #0
  405334:	6023      	str	r3, [r4, #0]
  405336:	f7fd f819 	bl	40236c <_lseek>
  40533a:	1c43      	adds	r3, r0, #1
  40533c:	d000      	beq.n	405340 <_lseek_r+0x1c>
  40533e:	bd70      	pop	{r4, r5, r6, pc}
  405340:	6823      	ldr	r3, [r4, #0]
  405342:	2b00      	cmp	r3, #0
  405344:	d0fb      	beq.n	40533e <_lseek_r+0x1a>
  405346:	6033      	str	r3, [r6, #0]
  405348:	bd70      	pop	{r4, r5, r6, pc}
  40534a:	bf00      	nop
  40534c:	20000ed4 	.word	0x20000ed4

00405350 <_read_r>:
  405350:	b570      	push	{r4, r5, r6, lr}
  405352:	460d      	mov	r5, r1
  405354:	4c08      	ldr	r4, [pc, #32]	; (405378 <_read_r+0x28>)
  405356:	4611      	mov	r1, r2
  405358:	4606      	mov	r6, r0
  40535a:	461a      	mov	r2, r3
  40535c:	4628      	mov	r0, r5
  40535e:	2300      	movs	r3, #0
  405360:	6023      	str	r3, [r4, #0]
  405362:	f7fb fda9 	bl	400eb8 <_read>
  405366:	1c43      	adds	r3, r0, #1
  405368:	d000      	beq.n	40536c <_read_r+0x1c>
  40536a:	bd70      	pop	{r4, r5, r6, pc}
  40536c:	6823      	ldr	r3, [r4, #0]
  40536e:	2b00      	cmp	r3, #0
  405370:	d0fb      	beq.n	40536a <_read_r+0x1a>
  405372:	6033      	str	r3, [r6, #0]
  405374:	bd70      	pop	{r4, r5, r6, pc}
  405376:	bf00      	nop
  405378:	20000ed4 	.word	0x20000ed4
  40537c:	00038400 	.word	0x00038400
  405380:	000000c0 	.word	0x000000c0
  405384:	00000800 	.word	0x00000800
  405388:	00000000 	.word	0x00000000
  40538c:	54535f58 	.word	0x54535f58
  405390:	000a0d58 	.word	0x000a0d58
  405394:	4f455f58 	.word	0x4f455f58
  405398:	000a0d54 	.word	0x000a0d54
  40539c:	69460d0a 	.word	0x69460d0a
  4053a0:	61776d72 	.word	0x61776d72
  4053a4:	75206572 	.word	0x75206572
  4053a8:	74616470 	.word	0x74616470
  4053ac:	0a216465 	.word	0x0a216465
  4053b0:	0000000d 	.word	0x0000000d
  4053b4:	706d754a 	.word	0x706d754a
  4053b8:	20676e69 	.word	0x20676e69
  4053bc:	75206f74 	.word	0x75206f74
  4053c0:	20726573 	.word	0x20726573
  4053c4:	6c707061 	.word	0x6c707061
  4053c8:	74616369 	.word	0x74616369
  4053cc:	2e6e6f69 	.word	0x2e6e6f69
  4053d0:	0d0a2e2e 	.word	0x0d0a2e2e
  4053d4:	00000000 	.word	0x00000000
  4053d8:	41435f58 	.word	0x41435f58
  4053dc:	000a0d4e 	.word	0x000a0d4e
  4053e0:	3d3d3d3d 	.word	0x3d3d3d3d
  4053e4:	3d3d3d3d 	.word	0x3d3d3d3d
  4053e8:	3d3d3d3d 	.word	0x3d3d3d3d
  4053ec:	3d3d3d3d 	.word	0x3d3d3d3d
  4053f0:	3d3d3d3d 	.word	0x3d3d3d3d
  4053f4:	3d3d3d3d 	.word	0x3d3d3d3d
  4053f8:	3d3d3d3d 	.word	0x3d3d3d3d
  4053fc:	3d3d3d3d 	.word	0x3d3d3d3d
  405400:	3d3d3d3d 	.word	0x3d3d3d3d
  405404:	3d3d3d3d 	.word	0x3d3d3d3d
  405408:	00000a0d 	.word	0x00000a0d
  40540c:	4120203d 	.word	0x4120203d
  405410:	4d415354 	.word	0x4d415354
  405414:	46205334 	.word	0x46205334
  405418:	776d7269 	.word	0x776d7269
  40541c:	20657261 	.word	0x20657261
  405420:	61647055 	.word	0x61647055
  405424:	42206574 	.word	0x42206574
  405428:	6c746f6f 	.word	0x6c746f6f
  40542c:	6564616f 	.word	0x6564616f
  405430:	3d202072 	.word	0x3d202072
  405434:	00000a0d 	.word	0x00000a0d
  405438:	61656c50 	.word	0x61656c50
  40543c:	73206573 	.word	0x73206573
  405440:	20646e65 	.word	0x20646e65
  405444:	656e2061 	.word	0x656e2061
  405448:	69622077 	.word	0x69622077
  40544c:	7972616e 	.word	0x7972616e
  405450:	6c696620 	.word	0x6c696620
  405454:	69772065 	.word	0x69772065
  405458:	58206874 	.word	0x58206874
  40545c:	65646f6d 	.word	0x65646f6d
  405460:	7270206d 	.word	0x7270206d
  405464:	636f746f 	.word	0x636f746f
  405468:	74206c6f 	.word	0x74206c6f
  40546c:	7075206f 	.word	0x7075206f
  405470:	65746164 	.word	0x65746164
  405474:	65687420 	.word	0x65687420
  405478:	72696620 	.word	0x72696620
  40547c:	7261776d 	.word	0x7261776d
  405480:	0d0a2e65 	.word	0x0d0a2e65
  405484:	00000000 	.word	0x00000000
  405488:	61460d0a 	.word	0x61460d0a
  40548c:	64656c69 	.word	0x64656c69
  405490:	202e2e2e 	.word	0x202e2e2e
  405494:	61656c50 	.word	0x61656c50
  405498:	74206573 	.word	0x74206573
  40549c:	61207972 	.word	0x61207972
  4054a0:	6e696167 	.word	0x6e696167
  4054a4:	000d0a2e 	.word	0x000d0a2e

004054a8 <_global_impure_ptr>:
  4054a8:	20000018 33323130 37363534 42413938     ... 0123456789AB
  4054b8:	46454443 00000000 33323130 37363534     CDEF....01234567
  4054c8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4054d8:	0000296c                                l)..

004054dc <blanks.7217>:
  4054dc:	20202020 20202020 20202020 20202020                     

004054ec <zeroes.7218>:
  4054ec:	30303030 30303030 30303030 30303030     0000000000000000
  4054fc:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040550c <_ctype_>:
  40550c:	20202000 20202020 28282020 20282828     .         ((((( 
  40551c:	20202020 20202020 20202020 20202020                     
  40552c:	10108820 10101010 10101010 10101010      ...............
  40553c:	04040410 04040404 10040404 10101010     ................
  40554c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40555c:	01010101 01010101 01010101 10101010     ................
  40556c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40557c:	02020202 02020202 02020202 10101010     ................
  40558c:	00000020 00000000 00000000 00000000      ...............
	...

00405610 <_init>:
  405610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405612:	bf00      	nop
  405614:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405616:	bc08      	pop	{r3}
  405618:	469e      	mov	lr, r3
  40561a:	4770      	bx	lr

0040561c <__init_array_start>:
  40561c:	00403eb9 	.word	0x00403eb9

00405620 <__frame_dummy_init_array_entry>:
  405620:	004000f1                                ..@.

00405624 <_fini>:
  405624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405626:	bf00      	nop
  405628:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40562a:	bc08      	pop	{r3}
  40562c:	469e      	mov	lr, r3
  40562e:	4770      	bx	lr

00405630 <__fini_array_start>:
  405630:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <xmodem_packet_number>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__malloc_av_>:
	...
20000448:	0440 2000 0440 2000 0448 2000 0448 2000     @.. @.. H.. H.. 
20000458:	0450 2000 0450 2000 0458 2000 0458 2000     P.. P.. X.. X.. 
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 

20000848 <__malloc_sbrk_base>:
20000848:	ffff ffff                                   ....

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__atexit_recursive_mutex>:
20000850:	0eb0 2000                                   ... 

20000854 <__global_locale>:
20000854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	50e5 0040 4941 0040 0000 0000 550c 0040     .P@.AI@......U@.
20000944:	5508 0040 54bc 0040 54bc 0040 54bc 0040     .U@..T@..T@..T@.
20000954:	54bc 0040 54bc 0040 54bc 0040 54bc 0040     .T@..T@..T@..T@.
20000964:	54bc 0040 54bc 0040 ffff ffff ffff ffff     .T@..T@.........
20000974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
